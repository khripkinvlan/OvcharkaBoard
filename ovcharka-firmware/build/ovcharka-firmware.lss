
build/ovcharka-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080040f8  080040f8  000050f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004138  08004138  00005138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800413c  0800413c  0000513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  08004140  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000394  200000a8  080041e8  000060a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000043c  080041e8  0000643c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  000060d1  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001829e  00000000  00000000  0000610a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000364c  00000000  00000000  0001e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000c1c5  00000000  00000000  000219f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001258  00000000  00000000  0002dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000dd2  00000000  00000000  0002ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001456c  00000000  00000000  0002fbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00005003  00000000  00000000  00044156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000030fc  00000000  00000000  0004915c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000016d  00000000  00000000  0004c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__aeabi_fmul>:
 800010c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000110:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000114:	bf1e      	ittt	ne
 8000116:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800011a:	ea92 0f0c 	teqne	r2, ip
 800011e:	ea93 0f0c 	teqne	r3, ip
 8000122:	d06f      	beq.n	8000204 <__aeabi_fmul+0xf8>
 8000124:	441a      	add	r2, r3
 8000126:	ea80 0c01 	eor.w	ip, r0, r1
 800012a:	0240      	lsls	r0, r0, #9
 800012c:	bf18      	it	ne
 800012e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000132:	d01e      	beq.n	8000172 <__aeabi_fmul+0x66>
 8000134:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000138:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800013c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000140:	fba0 3101 	umull	r3, r1, r0, r1
 8000144:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000148:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800014c:	bf3e      	ittt	cc
 800014e:	0049      	lslcc	r1, r1, #1
 8000150:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000154:	005b      	lslcc	r3, r3, #1
 8000156:	ea40 0001 	orr.w	r0, r0, r1
 800015a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800015e:	2afd      	cmp	r2, #253	@ 0xfd
 8000160:	d81d      	bhi.n	800019e <__aeabi_fmul+0x92>
 8000162:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000166:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800016a:	bf08      	it	eq
 800016c:	f020 0001 	biceq.w	r0, r0, #1
 8000170:	4770      	bx	lr
 8000172:	f090 0f00 	teq	r0, #0
 8000176:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800017a:	bf08      	it	eq
 800017c:	0249      	lsleq	r1, r1, #9
 800017e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000182:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000186:	3a7f      	subs	r2, #127	@ 0x7f
 8000188:	bfc2      	ittt	gt
 800018a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800018e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000192:	4770      	bxgt	lr
 8000194:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000198:	f04f 0300 	mov.w	r3, #0
 800019c:	3a01      	subs	r2, #1
 800019e:	dc5d      	bgt.n	800025c <__aeabi_fmul+0x150>
 80001a0:	f112 0f19 	cmn.w	r2, #25
 80001a4:	bfdc      	itt	le
 80001a6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001aa:	4770      	bxle	lr
 80001ac:	f1c2 0200 	rsb	r2, r2, #0
 80001b0:	0041      	lsls	r1, r0, #1
 80001b2:	fa21 f102 	lsr.w	r1, r1, r2
 80001b6:	f1c2 0220 	rsb	r2, r2, #32
 80001ba:	fa00 fc02 	lsl.w	ip, r0, r2
 80001be:	ea5f 0031 	movs.w	r0, r1, rrx
 80001c2:	f140 0000 	adc.w	r0, r0, #0
 80001c6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80001ca:	bf08      	it	eq
 80001cc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80001d0:	4770      	bx	lr
 80001d2:	f092 0f00 	teq	r2, #0
 80001d6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80001da:	bf02      	ittt	eq
 80001dc:	0040      	lsleq	r0, r0, #1
 80001de:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80001e2:	3a01      	subeq	r2, #1
 80001e4:	d0f9      	beq.n	80001da <__aeabi_fmul+0xce>
 80001e6:	ea40 000c 	orr.w	r0, r0, ip
 80001ea:	f093 0f00 	teq	r3, #0
 80001ee:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80001f2:	bf02      	ittt	eq
 80001f4:	0049      	lsleq	r1, r1, #1
 80001f6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80001fa:	3b01      	subeq	r3, #1
 80001fc:	d0f9      	beq.n	80001f2 <__aeabi_fmul+0xe6>
 80001fe:	ea41 010c 	orr.w	r1, r1, ip
 8000202:	e78f      	b.n	8000124 <__aeabi_fmul+0x18>
 8000204:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000208:	ea92 0f0c 	teq	r2, ip
 800020c:	bf18      	it	ne
 800020e:	ea93 0f0c 	teqne	r3, ip
 8000212:	d00a      	beq.n	800022a <__aeabi_fmul+0x11e>
 8000214:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000218:	bf18      	it	ne
 800021a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800021e:	d1d8      	bne.n	80001d2 <__aeabi_fmul+0xc6>
 8000220:	ea80 0001 	eor.w	r0, r0, r1
 8000224:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000228:	4770      	bx	lr
 800022a:	f090 0f00 	teq	r0, #0
 800022e:	bf17      	itett	ne
 8000230:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000234:	4608      	moveq	r0, r1
 8000236:	f091 0f00 	teqne	r1, #0
 800023a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800023e:	d014      	beq.n	800026a <__aeabi_fmul+0x15e>
 8000240:	ea92 0f0c 	teq	r2, ip
 8000244:	d101      	bne.n	800024a <__aeabi_fmul+0x13e>
 8000246:	0242      	lsls	r2, r0, #9
 8000248:	d10f      	bne.n	800026a <__aeabi_fmul+0x15e>
 800024a:	ea93 0f0c 	teq	r3, ip
 800024e:	d103      	bne.n	8000258 <__aeabi_fmul+0x14c>
 8000250:	024b      	lsls	r3, r1, #9
 8000252:	bf18      	it	ne
 8000254:	4608      	movne	r0, r1
 8000256:	d108      	bne.n	800026a <__aeabi_fmul+0x15e>
 8000258:	ea80 0001 	eor.w	r0, r0, r1
 800025c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000260:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000264:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000268:	4770      	bx	lr
 800026a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800026e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000272:	4770      	bx	lr

08000274 <__aeabi_frsub>:
 8000274:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	e002      	b.n	8000280 <__addsf3>
 800027a:	bf00      	nop

0800027c <__aeabi_fsub>:
 800027c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000280 <__addsf3>:
 8000280:	0042      	lsls	r2, r0, #1
 8000282:	bf1f      	itttt	ne
 8000284:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000288:	ea92 0f03 	teqne	r2, r3
 800028c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000290:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000294:	d06a      	beq.n	800036c <__addsf3+0xec>
 8000296:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800029a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800029e:	bfc1      	itttt	gt
 80002a0:	18d2      	addgt	r2, r2, r3
 80002a2:	4041      	eorgt	r1, r0
 80002a4:	4048      	eorgt	r0, r1
 80002a6:	4041      	eorgt	r1, r0
 80002a8:	bfb8      	it	lt
 80002aa:	425b      	neglt	r3, r3
 80002ac:	2b19      	cmp	r3, #25
 80002ae:	bf88      	it	hi
 80002b0:	4770      	bxhi	lr
 80002b2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002be:	bf18      	it	ne
 80002c0:	4240      	negne	r0, r0
 80002c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002c6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80002ca:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80002ce:	bf18      	it	ne
 80002d0:	4249      	negne	r1, r1
 80002d2:	ea92 0f03 	teq	r2, r3
 80002d6:	d03f      	beq.n	8000358 <__addsf3+0xd8>
 80002d8:	f1a2 0201 	sub.w	r2, r2, #1
 80002dc:	fa41 fc03 	asr.w	ip, r1, r3
 80002e0:	eb10 000c 	adds.w	r0, r0, ip
 80002e4:	f1c3 0320 	rsb	r3, r3, #32
 80002e8:	fa01 f103 	lsl.w	r1, r1, r3
 80002ec:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002f0:	d502      	bpl.n	80002f8 <__addsf3+0x78>
 80002f2:	4249      	negs	r1, r1
 80002f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002f8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80002fc:	d313      	bcc.n	8000326 <__addsf3+0xa6>
 80002fe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000302:	d306      	bcc.n	8000312 <__addsf3+0x92>
 8000304:	0840      	lsrs	r0, r0, #1
 8000306:	ea4f 0131 	mov.w	r1, r1, rrx
 800030a:	f102 0201 	add.w	r2, r2, #1
 800030e:	2afe      	cmp	r2, #254	@ 0xfe
 8000310:	d251      	bcs.n	80003b6 <__addsf3+0x136>
 8000312:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000316:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800031a:	bf08      	it	eq
 800031c:	f020 0001 	biceq.w	r0, r0, #1
 8000320:	ea40 0003 	orr.w	r0, r0, r3
 8000324:	4770      	bx	lr
 8000326:	0049      	lsls	r1, r1, #1
 8000328:	eb40 0000 	adc.w	r0, r0, r0
 800032c:	3a01      	subs	r2, #1
 800032e:	bf28      	it	cs
 8000330:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000334:	d2ed      	bcs.n	8000312 <__addsf3+0x92>
 8000336:	fab0 fc80 	clz	ip, r0
 800033a:	f1ac 0c08 	sub.w	ip, ip, #8
 800033e:	ebb2 020c 	subs.w	r2, r2, ip
 8000342:	fa00 f00c 	lsl.w	r0, r0, ip
 8000346:	bfaa      	itet	ge
 8000348:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800034c:	4252      	neglt	r2, r2
 800034e:	4318      	orrge	r0, r3
 8000350:	bfbc      	itt	lt
 8000352:	40d0      	lsrlt	r0, r2
 8000354:	4318      	orrlt	r0, r3
 8000356:	4770      	bx	lr
 8000358:	f092 0f00 	teq	r2, #0
 800035c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000360:	bf06      	itte	eq
 8000362:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000366:	3201      	addeq	r2, #1
 8000368:	3b01      	subne	r3, #1
 800036a:	e7b5      	b.n	80002d8 <__addsf3+0x58>
 800036c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000370:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000374:	bf18      	it	ne
 8000376:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800037a:	d021      	beq.n	80003c0 <__addsf3+0x140>
 800037c:	ea92 0f03 	teq	r2, r3
 8000380:	d004      	beq.n	800038c <__addsf3+0x10c>
 8000382:	f092 0f00 	teq	r2, #0
 8000386:	bf08      	it	eq
 8000388:	4608      	moveq	r0, r1
 800038a:	4770      	bx	lr
 800038c:	ea90 0f01 	teq	r0, r1
 8000390:	bf1c      	itt	ne
 8000392:	2000      	movne	r0, #0
 8000394:	4770      	bxne	lr
 8000396:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800039a:	d104      	bne.n	80003a6 <__addsf3+0x126>
 800039c:	0040      	lsls	r0, r0, #1
 800039e:	bf28      	it	cs
 80003a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003a4:	4770      	bx	lr
 80003a6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003aa:	bf3c      	itt	cc
 80003ac:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003b0:	4770      	bxcc	lr
 80003b2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003b6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003be:	4770      	bx	lr
 80003c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003c4:	bf16      	itet	ne
 80003c6:	4608      	movne	r0, r1
 80003c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003cc:	4601      	movne	r1, r0
 80003ce:	0242      	lsls	r2, r0, #9
 80003d0:	bf06      	itte	eq
 80003d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003d6:	ea90 0f01 	teqeq	r0, r1
 80003da:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80003de:	4770      	bx	lr

080003e0 <__aeabi_ui2f>:
 80003e0:	f04f 0300 	mov.w	r3, #0
 80003e4:	e004      	b.n	80003f0 <__aeabi_i2f+0x8>
 80003e6:	bf00      	nop

080003e8 <__aeabi_i2f>:
 80003e8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80003ec:	bf48      	it	mi
 80003ee:	4240      	negmi	r0, r0
 80003f0:	ea5f 0c00 	movs.w	ip, r0
 80003f4:	bf08      	it	eq
 80003f6:	4770      	bxeq	lr
 80003f8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80003fc:	4601      	mov	r1, r0
 80003fe:	f04f 0000 	mov.w	r0, #0
 8000402:	e01c      	b.n	800043e <__aeabi_l2f+0x2a>

08000404 <__aeabi_ul2f>:
 8000404:	ea50 0201 	orrs.w	r2, r0, r1
 8000408:	bf08      	it	eq
 800040a:	4770      	bxeq	lr
 800040c:	f04f 0300 	mov.w	r3, #0
 8000410:	e00a      	b.n	8000428 <__aeabi_l2f+0x14>
 8000412:	bf00      	nop

08000414 <__aeabi_l2f>:
 8000414:	ea50 0201 	orrs.w	r2, r0, r1
 8000418:	bf08      	it	eq
 800041a:	4770      	bxeq	lr
 800041c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000420:	d502      	bpl.n	8000428 <__aeabi_l2f+0x14>
 8000422:	4240      	negs	r0, r0
 8000424:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000428:	ea5f 0c01 	movs.w	ip, r1
 800042c:	bf02      	ittt	eq
 800042e:	4684      	moveq	ip, r0
 8000430:	4601      	moveq	r1, r0
 8000432:	2000      	moveq	r0, #0
 8000434:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000438:	bf08      	it	eq
 800043a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800043e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000442:	fabc f28c 	clz	r2, ip
 8000446:	3a08      	subs	r2, #8
 8000448:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800044c:	db10      	blt.n	8000470 <__aeabi_l2f+0x5c>
 800044e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000452:	4463      	add	r3, ip
 8000454:	fa00 fc02 	lsl.w	ip, r0, r2
 8000458:	f1c2 0220 	rsb	r2, r2, #32
 800045c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	eb43 0002 	adc.w	r0, r3, r2
 8000468:	bf08      	it	eq
 800046a:	f020 0001 	biceq.w	r0, r0, #1
 800046e:	4770      	bx	lr
 8000470:	f102 0220 	add.w	r2, r2, #32
 8000474:	fa01 fc02 	lsl.w	ip, r1, r2
 8000478:	f1c2 0220 	rsb	r2, r2, #32
 800047c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000480:	fa21 f202 	lsr.w	r2, r1, r2
 8000484:	eb43 0002 	adc.w	r0, r3, r2
 8000488:	bf08      	it	eq
 800048a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800048e:	4770      	bx	lr

08000490 <__do_global_dtors_aux>:
 8000490:	b510      	push	{r4, lr}
 8000492:	4c05      	ldr	r4, [pc, #20]	@ (80004a8 <__do_global_dtors_aux+0x18>)
 8000494:	7823      	ldrb	r3, [r4, #0]
 8000496:	b933      	cbnz	r3, 80004a6 <__do_global_dtors_aux+0x16>
 8000498:	4b04      	ldr	r3, [pc, #16]	@ (80004ac <__do_global_dtors_aux+0x1c>)
 800049a:	b113      	cbz	r3, 80004a2 <__do_global_dtors_aux+0x12>
 800049c:	4804      	ldr	r0, [pc, #16]	@ (80004b0 <__do_global_dtors_aux+0x20>)
 800049e:	f3af 8000 	nop.w
 80004a2:	2301      	movs	r3, #1
 80004a4:	7023      	strb	r3, [r4, #0]
 80004a6:	bd10      	pop	{r4, pc}
 80004a8:	200000a8 	.word	0x200000a8
 80004ac:	00000000 	.word	0x00000000
 80004b0:	080040e0 	.word	0x080040e0

080004b4 <frame_dummy>:
 80004b4:	b508      	push	{r3, lr}
 80004b6:	4b03      	ldr	r3, [pc, #12]	@ (80004c4 <frame_dummy+0x10>)
 80004b8:	b11b      	cbz	r3, 80004c2 <frame_dummy+0xe>
 80004ba:	4903      	ldr	r1, [pc, #12]	@ (80004c8 <frame_dummy+0x14>)
 80004bc:	4803      	ldr	r0, [pc, #12]	@ (80004cc <frame_dummy+0x18>)
 80004be:	f3af 8000 	nop.w
 80004c2:	bd08      	pop	{r3, pc}
 80004c4:	00000000 	.word	0x00000000
 80004c8:	200000ac 	.word	0x200000ac
 80004cc:	080040e0 	.word	0x080040e0

080004d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d0:	b500      	push	{lr}
 80004d2:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d4:	2300      	movs	r3, #0
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9302      	str	r3, [sp, #8]
 80004da:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004dc:	4817      	ldr	r0, [pc, #92]	@ (800053c <MX_ADC1_Init+0x6c>)
 80004de:	4a18      	ldr	r2, [pc, #96]	@ (8000540 <MX_ADC1_Init+0x70>)
 80004e0:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004e6:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e8:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80004ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004f0:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f2:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 80004f4:	2302      	movs	r3, #2
 80004f6:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f8:	f001 f9ee 	bl	80018d8 <HAL_ADC_Init>
 80004fc:	b9a0      	cbnz	r0, 8000528 <MX_ADC1_Init+0x58>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004fe:	2303      	movs	r3, #3
 8000500:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000502:	2201      	movs	r2, #1
 8000504:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000506:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000508:	a901      	add	r1, sp, #4
 800050a:	480c      	ldr	r0, [pc, #48]	@ (800053c <MX_ADC1_Init+0x6c>)
 800050c:	f001 f83c 	bl	8001588 <HAL_ADC_ConfigChannel>
 8000510:	b968      	cbnz	r0, 800052e <MX_ADC1_Init+0x5e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000512:	2302      	movs	r3, #2
 8000514:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000516:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000518:	a901      	add	r1, sp, #4
 800051a:	4808      	ldr	r0, [pc, #32]	@ (800053c <MX_ADC1_Init+0x6c>)
 800051c:	f001 f834 	bl	8001588 <HAL_ADC_ConfigChannel>
 8000520:	b940      	cbnz	r0, 8000534 <MX_ADC1_Init+0x64>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000522:	b005      	add	sp, #20
 8000524:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000528:	f000 faa0 	bl	8000a6c <Error_Handler>
 800052c:	e7e7      	b.n	80004fe <MX_ADC1_Init+0x2e>
    Error_Handler();
 800052e:	f000 fa9d 	bl	8000a6c <Error_Handler>
 8000532:	e7ee      	b.n	8000512 <MX_ADC1_Init+0x42>
    Error_Handler();
 8000534:	f000 fa9a 	bl	8000a6c <Error_Handler>
}
 8000538:	e7f3      	b.n	8000522 <MX_ADC1_Init+0x52>
 800053a:	bf00      	nop
 800053c:	20000108 	.word	0x20000108
 8000540:	40012400 	.word	0x40012400

08000544 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000544:	b510      	push	{r4, lr}
 8000546:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	2300      	movs	r3, #0
 800054a:	9302      	str	r3, [sp, #8]
 800054c:	9303      	str	r3, [sp, #12]
 800054e:	9304      	str	r3, [sp, #16]
 8000550:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 8000552:	6802      	ldr	r2, [r0, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <HAL_ADC_MspInit+0x90>)
 8000556:	429a      	cmp	r2, r3
 8000558:	d001      	beq.n	800055e <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800055a:	b006      	add	sp, #24
 800055c:	bd10      	pop	{r4, pc}
 800055e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000560:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8000564:	699a      	ldr	r2, [r3, #24]
 8000566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800056a:	619a      	str	r2, [r3, #24]
 800056c:	699a      	ldr	r2, [r3, #24]
 800056e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	699a      	ldr	r2, [r3, #24]
 8000578:	f042 0204 	orr.w	r2, r2, #4
 800057c:	619a      	str	r2, [r3, #24]
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0304 	and.w	r3, r3, #4
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CS2_Pin|CS1_Pin;
 8000588:	230c      	movs	r3, #12
 800058a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800058c:	2303      	movs	r3, #3
 800058e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	a902      	add	r1, sp, #8
 8000592:	4811      	ldr	r0, [pc, #68]	@ (80005d8 <HAL_ADC_MspInit+0x94>)
 8000594:	f001 fc32 	bl	8001dfc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000598:	4810      	ldr	r0, [pc, #64]	@ (80005dc <HAL_ADC_MspInit+0x98>)
 800059a:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <HAL_ADC_MspInit+0x9c>)
 800059c:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800059e:	2300      	movs	r3, #0
 80005a0:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a2:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ac:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b2:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005b4:	2320      	movs	r3, #32
 80005b6:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005bc:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005be:	f001 fa9d 	bl	8001afc <HAL_DMA_Init>
 80005c2:	b918      	cbnz	r0, 80005cc <HAL_ADC_MspInit+0x88>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <HAL_ADC_MspInit+0x98>)
 80005c6:	6223      	str	r3, [r4, #32]
 80005c8:	625c      	str	r4, [r3, #36]	@ 0x24
}
 80005ca:	e7c6      	b.n	800055a <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80005cc:	f000 fa4e 	bl	8000a6c <Error_Handler>
 80005d0:	e7f8      	b.n	80005c4 <HAL_ADC_MspInit+0x80>
 80005d2:	bf00      	nop
 80005d4:	40012400 	.word	0x40012400
 80005d8:	40010800 	.word	0x40010800
 80005dc:	200000c4 	.word	0x200000c4
 80005e0:	40020008 	.word	0x40020008

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e4:	b500      	push	{lr}
 80005e6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <MX_DMA_Init+0x70>)
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	f042 0201 	orr.w	r2, r2, #1
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	4611      	mov	r1, r2
 8000600:	200b      	movs	r0, #11
 8000602:	f001 fa33 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000606:	200b      	movs	r0, #11
 8000608:	f001 fa40 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	4611      	mov	r1, r2
 8000610:	200c      	movs	r0, #12
 8000612:	f001 fa2b 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000616:	200c      	movs	r0, #12
 8000618:	f001 fa38 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	4611      	mov	r1, r2
 8000620:	200d      	movs	r0, #13
 8000622:	f001 fa23 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000626:	200d      	movs	r0, #13
 8000628:	f001 fa30 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	4611      	mov	r1, r2
 8000630:	200e      	movs	r0, #14
 8000632:	f001 fa1b 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000636:	200e      	movs	r0, #14
 8000638:	f001 fa28 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	4611      	mov	r1, r2
 8000640:	200f      	movs	r0, #15
 8000642:	f001 fa13 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000646:	200f      	movs	r0, #15
 8000648:	f001 fa20 	bl	8001a8c <HAL_NVIC_EnableIRQ>

}
 800064c:	b003      	add	sp, #12
 800064e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <drv8106_read_reg_blocking>:
uint8_t drv8106_cur_read_addr;
uint8_t drv8106_read_flag;


void drv8106_read_reg_blocking(drv8106_t* drv_inst, uint8_t reg_addr)
{
 8000658:	b510      	push	{r4, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	4604      	mov	r4, r0
    uint16_t tx = (reg_addr | DRV8106_READ_MASK) << 8;
 800065e:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8000662:	0209      	lsls	r1, r1, #8
 8000664:	f8ad 100e 	strh.w	r1, [sp, #14]

    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	8901      	ldrh	r1, [r0, #8]
 800066c:	6840      	ldr	r0, [r0, #4]
 800066e:	f001 fcda 	bl	8002026 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(drv_inst->spi_handler_ptr, (uint8_t*)&tx, (uint8_t*)&drv_inst->rxbuff, 1, HAL_MAX_DELAY);
 8000672:	4622      	mov	r2, r4
 8000674:	f852 0b0a 	ldr.w	r0, [r2], #10
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	f10d 010e 	add.w	r1, sp, #14
 8000684:	f002 fbed 	bl	8002e62 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	8921      	ldrh	r1, [r4, #8]
 800068c:	6860      	ldr	r0, [r4, #4]
 800068e:	f001 fcca 	bl	8002026 <HAL_GPIO_WritePin>
    // HAL_Delay(1); // in case it doesnt manage to flip CS
}
 8000692:	b004      	add	sp, #16
 8000694:	bd10      	pop	{r4, pc}

08000696 <drv8106_write_reg_blocking>:

void drv8106_write_reg_blocking(drv8106_t* drv_inst, uint8_t reg_addr, uint8_t data){
 8000696:	b510      	push	{r4, lr}
 8000698:	b084      	sub	sp, #16
 800069a:	4604      	mov	r4, r0
    uint16_t tx;
    tx = (reg_addr << 8) | data;
 800069c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80006a0:	f8ad 200e 	strh.w	r2, [sp, #14]

    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	8901      	ldrh	r1, [r0, #8]
 80006a8:	6840      	ldr	r0, [r0, #4]
 80006aa:	f001 fcbc 	bl	8002026 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(drv_inst->spi_handler_ptr, (uint8_t*)&tx, (uint8_t*)&drv_inst->rxbuff, 1, HAL_MAX_DELAY);
 80006ae:	4622      	mov	r2, r4
 80006b0:	f852 0b0a 	ldr.w	r0, [r2], #10
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	f10d 010e 	add.w	r1, sp, #14
 80006c0:	f002 fbcf 	bl	8002e62 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	8921      	ldrh	r1, [r4, #8]
 80006c8:	6860      	ldr	r0, [r4, #4]
 80006ca:	f001 fcac 	bl	8002026 <HAL_GPIO_WritePin>
    // HAL_Delay(1); // in case it doesnt manage to flip CS
}
 80006ce:	b004      	add	sp, #16
 80006d0:	bd10      	pop	{r4, pc}

080006d2 <drv8106_read_all_blocking>:


void drv8106_read_all_blocking(drv8106_t* drv_inst){
 80006d2:	b510      	push	{r4, lr}
 80006d4:	4604      	mov	r4, r0

    drv8106_read_reg_blocking(drv_inst, DRV8106_IC_STAT_1);
 80006d6:	2100      	movs	r1, #0
 80006d8:	f7ff ffbe 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.IC_STAT_1 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80006dc:	7aa3      	ldrb	r3, [r4, #10]
 80006de:	73a3      	strb	r3, [r4, #14]

    drv8106_read_reg_blocking(drv_inst, DRV8106_VGS_VDS_STAT);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4620      	mov	r0, r4
 80006e4:	f7ff ffb8 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.VGS_VDS_STAT = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80006e8:	7aa3      	ldrb	r3, [r4, #10]
 80006ea:	73e3      	strb	r3, [r4, #15]

    drv8106_read_reg_blocking(drv_inst, DRV8106_IC_STAT_2);
 80006ec:	2102      	movs	r1, #2
 80006ee:	4620      	mov	r0, r4
 80006f0:	f7ff ffb2 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.IC_STAT_2 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80006f4:	7aa3      	ldrb	r3, [r4, #10]
 80006f6:	7423      	strb	r3, [r4, #16]

    drv8106_read_reg_blocking(drv_inst, DRV8106_IC_CTRL);
 80006f8:	2104      	movs	r1, #4
 80006fa:	4620      	mov	r0, r4
 80006fc:	f7ff ffac 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.IC_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000700:	7aa3      	ldrb	r3, [r4, #10]
 8000702:	74a3      	strb	r3, [r4, #18]

    drv8106_read_reg_blocking(drv_inst, DRV8106_BRG_CTRL);
 8000704:	2105      	movs	r1, #5
 8000706:	4620      	mov	r0, r4
 8000708:	f7ff ffa6 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.BRG_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 800070c:	7aa3      	ldrb	r3, [r4, #10]
 800070e:	74e3      	strb	r3, [r4, #19]

    drv8106_read_reg_blocking(drv_inst, DRV8106_DRV_CTRL_1);
 8000710:	2106      	movs	r1, #6
 8000712:	4620      	mov	r0, r4
 8000714:	f7ff ffa0 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.DRV_CTRL_1 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000718:	7aa3      	ldrb	r3, [r4, #10]
 800071a:	7523      	strb	r3, [r4, #20]

    drv8106_read_reg_blocking(drv_inst, DRV8106_DRV_CTRL_2);
 800071c:	2107      	movs	r1, #7
 800071e:	4620      	mov	r0, r4
 8000720:	f7ff ff9a 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.DRV_CTRL_2 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000724:	7aa3      	ldrb	r3, [r4, #10]
 8000726:	7563      	strb	r3, [r4, #21]

    drv8106_read_reg_blocking(drv_inst, DRV8106_DRV_CTRL_3);
 8000728:	2108      	movs	r1, #8
 800072a:	4620      	mov	r0, r4
 800072c:	f7ff ff94 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.DRV_CTRL_3 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000730:	7aa3      	ldrb	r3, [r4, #10]
 8000732:	75a3      	strb	r3, [r4, #22]

    drv8106_read_reg_blocking(drv_inst, DRV8106_VDS_CTRL_1);
 8000734:	2109      	movs	r1, #9
 8000736:	4620      	mov	r0, r4
 8000738:	f7ff ff8e 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.VDS_CTRL_1 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 800073c:	7aa3      	ldrb	r3, [r4, #10]
 800073e:	75e3      	strb	r3, [r4, #23]

    drv8106_read_reg_blocking(drv_inst, DRV8106_VDS_CTRL_2);
 8000740:	210a      	movs	r1, #10
 8000742:	4620      	mov	r0, r4
 8000744:	f7ff ff88 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.VDS_CTRL_2 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000748:	7aa3      	ldrb	r3, [r4, #10]
 800074a:	7623      	strb	r3, [r4, #24]

    drv8106_read_reg_blocking(drv_inst, DRV8106_OLSC_CTRL);
 800074c:	210b      	movs	r1, #11
 800074e:	4620      	mov	r0, r4
 8000750:	f7ff ff82 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.OLSC_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000754:	7aa3      	ldrb	r3, [r4, #10]
 8000756:	7663      	strb	r3, [r4, #25]

    drv8106_read_reg_blocking(drv_inst, DRV8106_UVOV_CTRL);
 8000758:	210c      	movs	r1, #12
 800075a:	4620      	mov	r0, r4
 800075c:	f7ff ff7c 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.UVOV_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000760:	7aa3      	ldrb	r3, [r4, #10]
 8000762:	76a3      	strb	r3, [r4, #26]

    drv8106_read_reg_blocking(drv_inst, DRV8106_CSA_CTRL);
 8000764:	210d      	movs	r1, #13
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff ff76 	bl	8000658 <drv8106_read_reg_blocking>
    drv_inst->register_map.CSA_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 800076c:	7aa3      	ldrb	r3, [r4, #10]
 800076e:	76e3      	strb	r3, [r4, #27]
}
 8000770:	bd10      	pop	{r4, pc}

08000772 <drv8106_reset_blocking>:

void drv8106_reset_blocking(drv8106_t* drv_inst){
 8000772:	b510      	push	{r4, lr}
 8000774:	4604      	mov	r4, r0
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, DRV8106_IC_CTRL_DEFAULT);
 8000776:	2206      	movs	r2, #6
 8000778:	2104      	movs	r1, #4
 800077a:	f7ff ff8c 	bl	8000696 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_BRG_CTRL, DRV8106_BRG_CTRL_DEFAULT);
 800077e:	2200      	movs	r2, #0
 8000780:	2105      	movs	r1, #5
 8000782:	4620      	mov	r0, r4
 8000784:	f7ff ff87 	bl	8000696 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_DRV_CTRL_1, DRV8106_DRV_CTRL_1_DEFAULT);
 8000788:	22ff      	movs	r2, #255	@ 0xff
 800078a:	2106      	movs	r1, #6
 800078c:	4620      	mov	r0, r4
 800078e:	f7ff ff82 	bl	8000696 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_DRV_CTRL_2, DRV8106_DRV_CTRL_2_DEFAULT);
 8000792:	22ff      	movs	r2, #255	@ 0xff
 8000794:	2107      	movs	r1, #7
 8000796:	4620      	mov	r0, r4
 8000798:	f7ff ff7d 	bl	8000696 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_DRV_CTRL_3, DRV8106_DRV_CTRL_3_DEFAULT);
 800079c:	2220      	movs	r2, #32
 800079e:	2108      	movs	r1, #8
 80007a0:	4620      	mov	r0, r4
 80007a2:	f7ff ff78 	bl	8000696 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_VDS_CTRL_1, DRV8106_VDS_CTRL_1_DEFAULT);
 80007a6:	2220      	movs	r2, #32
 80007a8:	2109      	movs	r1, #9
 80007aa:	4620      	mov	r0, r4
 80007ac:	f7ff ff73 	bl	8000696 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_VDS_CTRL_2, DRV8106_VDS_CTRL_2_DEFAULT);
 80007b0:	22dd      	movs	r2, #221	@ 0xdd
 80007b2:	210a      	movs	r1, #10
 80007b4:	4620      	mov	r0, r4
 80007b6:	f7ff ff6e 	bl	8000696 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_OLSC_CTRL, DRV8106_OLSC_CTRL_DEFAULT);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210b      	movs	r1, #11
 80007be:	4620      	mov	r0, r4
 80007c0:	f7ff ff69 	bl	8000696 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_UVOV_CTRL, DRV8106_UVOV_CTRL_DEFAULT);
 80007c4:	2214      	movs	r2, #20
 80007c6:	210c      	movs	r1, #12
 80007c8:	4620      	mov	r0, r4
 80007ca:	f7ff ff64 	bl	8000696 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_CSA_CTRL, DRV8106_CSA_CTRL_DEFAULT);
 80007ce:	2201      	movs	r2, #1
 80007d0:	210d      	movs	r1, #13
 80007d2:	4620      	mov	r0, r4
 80007d4:	f7ff ff5f 	bl	8000696 <drv8106_write_reg_blocking>
}
 80007d8:	bd10      	pop	{r4, pc}

080007da <drv8106_Enable_blocking>:
// // disable drv ic in non-blocking manner via dma
// void drv8106_Disable_dma(drv8106_t* drv_inst){
//     drv8106_write_reg_dma(drv_inst, DRV8106_IC_CTRL, 0);
// }

void drv8106_Enable_blocking(drv8106_t* drv_inst){
 80007da:	b508      	push	{r3, lr}
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, DRV8106_EN_DRV);
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	2104      	movs	r1, #4
 80007e0:	f7ff ff59 	bl	8000696 <drv8106_write_reg_blocking>
}
 80007e4:	bd08      	pop	{r3, pc}

080007e6 <drv8106_CSA_enable_g10_blocking>:

void drv8106_Disable_blocking(drv8106_t* drv_inst){
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, 0);
}

void drv8106_CSA_enable_g10_blocking(drv8106_t* drv_inst){
 80007e6:	b508      	push	{r3, lr}
    drv8106_write_reg_blocking(drv_inst, DRV8106_CSA_CTRL, DRV8106_CSA_SH_EN | DRV8106_CSA_GAIN_10);
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	210d      	movs	r1, #13
 80007ec:	f7ff ff53 	bl	8000696 <drv8106_write_reg_blocking>
}
 80007f0:	bd08      	pop	{r3, pc}

080007f2 <drv8106_clear_fault_blocking>:
    drv_inst->faults_list.Undervoltage = drv_inst->register_map.IC_STAT_1 & DRV8106_UV;
    drv_inst->faults_list.Overvoltage = drv_inst->register_map.IC_STAT_1 & DRV8106_OV;
    drv_inst->faults_list.Overtemperature = drv_inst->register_map.IC_STAT_1 & DRV8106_OT;
}

void drv8106_clear_fault_blocking(drv8106_t* drv_inst){
 80007f2:	b508      	push	{r3, lr}
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, DRV8106_CLR_FLT);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2104      	movs	r1, #4
 80007f8:	f7ff ff4d 	bl	8000696 <drv8106_write_reg_blocking>
}
 80007fc:	bd08      	pop	{r3, pc}
	...

08000800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000804:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	2400      	movs	r4, #0
 8000808:	9404      	str	r4, [sp, #16]
 800080a:	9405      	str	r4, [sp, #20]
 800080c:	9406      	str	r4, [sp, #24]
 800080e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b4c      	ldr	r3, [pc, #304]	@ (8000944 <MX_GPIO_Init+0x144>)
 8000812:	699a      	ldr	r2, [r3, #24]
 8000814:	f042 0210 	orr.w	r2, r2, #16
 8000818:	619a      	str	r2, [r3, #24]
 800081a:	699a      	ldr	r2, [r3, #24]
 800081c:	f002 0210 	and.w	r2, r2, #16
 8000820:	9200      	str	r2, [sp, #0]
 8000822:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000824:	699a      	ldr	r2, [r3, #24]
 8000826:	f042 0220 	orr.w	r2, r2, #32
 800082a:	619a      	str	r2, [r3, #24]
 800082c:	699a      	ldr	r2, [r3, #24]
 800082e:	f002 0220 	and.w	r2, r2, #32
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	699a      	ldr	r2, [r3, #24]
 8000838:	f042 0204 	orr.w	r2, r2, #4
 800083c:	619a      	str	r2, [r3, #24]
 800083e:	699a      	ldr	r2, [r3, #24]
 8000840:	f002 0204 	and.w	r2, r2, #4
 8000844:	9202      	str	r2, [sp, #8]
 8000846:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	699a      	ldr	r2, [r3, #24]
 800084a:	f042 0208 	orr.w	r2, r2, #8
 800084e:	619a      	str	r2, [r3, #24]
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	9303      	str	r3, [sp, #12]
 8000858:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BRIDGESLEEP1_Pin|DRVOFF2_Pin|SPI1_SS2_Pin|SPI1_SS3_Pin, GPIO_PIN_RESET);
 800085a:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8000948 <MX_GPIO_Init+0x148>
 800085e:	4622      	mov	r2, r4
 8000860:	213c      	movs	r1, #60	@ 0x3c
 8000862:	4648      	mov	r0, r9
 8000864:	f001 fbdf 	bl	8002026 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR2_1_Pin|SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000868:	4e38      	ldr	r6, [pc, #224]	@ (800094c <MX_GPIO_Init+0x14c>)
 800086a:	4622      	mov	r2, r4
 800086c:	2112      	movs	r1, #18
 800086e:	4630      	mov	r0, r6
 8000870:	f001 fbd9 	bl	8002026 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SS4_Pin|DIR1_1_Pin|HIZ1_Pin|HIZ2_Pin
 8000874:	4f36      	ldr	r7, [pc, #216]	@ (8000950 <MX_GPIO_Init+0x150>)
 8000876:	4622      	mov	r2, r4
 8000878:	f643 0117 	movw	r1, #14359	@ 0x3817
 800087c:	4638      	mov	r0, r7
 800087e:	f001 fbd2 	bl	8002026 <HAL_GPIO_WritePin>
                          |DRVOFF1_Pin|BRIDGESLEEP2_Pin|IND_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nFAULT_L2_Pin nFAULT_R2_Pin ENC1_Z_Pin ENC2_Z_Pin */
  GPIO_InitStruct.Pin = nFAULT_L2_Pin|nFAULT_R2_Pin|ENC1_Z_Pin|ENC2_Z_Pin;
 8000882:	f240 3303 	movw	r3, #771	@ 0x303
 8000886:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	a904      	add	r1, sp, #16
 800088e:	4648      	mov	r0, r9
 8000890:	f001 fab4 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : BRIDGESLEEP1_Pin DRVOFF2_Pin */
  GPIO_InitStruct.Pin = BRIDGESLEEP1_Pin|DRVOFF2_Pin;
 8000894:	230c      	movs	r3, #12
 8000896:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2501      	movs	r5, #1
 800089a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	f04f 0802 	mov.w	r8, #2
 80008a2:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	a904      	add	r1, sp, #16
 80008a8:	4648      	mov	r0, r9
 80008aa:	f001 faa7 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR2_1_Pin */
  GPIO_InitStruct.Pin = DIR2_1_Pin;
 80008ae:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(DIR2_1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	a904      	add	r1, sp, #16
 80008bc:	4630      	mov	r0, r6
 80008be:	f001 fa9d 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS1_Pin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 80008c2:	2310      	movs	r3, #16
 80008c4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ca:	f04f 0a03 	mov.w	sl, #3
 80008ce:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	eb0d 0103 	add.w	r1, sp, r3
 80008d6:	4630      	mov	r0, r6
 80008d8:	f001 fa90 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SS2_Pin SPI1_SS3_Pin */
  GPIO_InitStruct.Pin = SPI1_SS2_Pin|SPI1_SS3_Pin;
 80008dc:	2330      	movs	r3, #48	@ 0x30
 80008de:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e4:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	a904      	add	r1, sp, #16
 80008ea:	4648      	mov	r0, r9
 80008ec:	f001 fa86 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS4_Pin */
  GPIO_InitStruct.Pin = SPI1_SS4_Pin;
 80008f0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f6:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(SPI1_SS4_GPIO_Port, &GPIO_InitStruct);
 80008fa:	a904      	add	r1, sp, #16
 80008fc:	4638      	mov	r0, r7
 80008fe:	f001 fa7d 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_1_Pin HIZ1_Pin HIZ2_Pin DRVOFF1_Pin
                           BRIDGESLEEP2_Pin IND_LED_Pin */
  GPIO_InitStruct.Pin = DIR1_1_Pin|HIZ1_Pin|HIZ2_Pin|DRVOFF1_Pin
 8000902:	f643 0316 	movw	r3, #14358	@ 0x3816
 8000906:	9304      	str	r3, [sp, #16]
                          |BRIDGESLEEP2_Pin|IND_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	a904      	add	r1, sp, #16
 8000912:	4638      	mov	r0, r7
 8000914:	f001 fa72 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT_R1_Pin nFAULT_L1_Pin RS485_CTRL_Pin */
  GPIO_InitStruct.Pin = nFAULT_R1_Pin|nFAULT_L1_Pin|RS485_CTRL_Pin;
 8000918:	f24c 0320 	movw	r3, #49184	@ 0xc020
 800091c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	a904      	add	r1, sp, #16
 8000924:	4638      	mov	r0, r7
 8000926:	f001 fa69 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ID_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin;
 800092a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800092e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(USB_ID_GPIO_Port, &GPIO_InitStruct);
 8000934:	a904      	add	r1, sp, #16
 8000936:	4630      	mov	r0, r6
 8000938:	f001 fa60 	bl	8001dfc <HAL_GPIO_Init>

}
 800093c:	b008      	add	sp, #32
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000
 8000948:	40011000 	.word	0x40011000
 800094c:	40010800 	.word	0x40010800
 8000950:	40010c00 	.word	0x40010c00

08000954 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b538      	push	{r3, r4, r5, lr}
  if(htim == &htim3){
 8000956:	4b22      	ldr	r3, [pc, #136]	@ (80009e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000958:	4283      	cmp	r3, r0
 800095a:	d000      	beq.n	800095e <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_GPIO_WritePin(DIR1_1_GPIO_Port, DIR1_1_Pin, dir1);   
    HAL_GPIO_WritePin(DIR2_1_GPIO_Port, DIR2_1_Pin, dir2);   

  }
  
}
 800095c:	bd38      	pop	{r3, r4, r5, pc}
    cntr++;
 800095e:	4a21      	ldr	r2, [pc, #132]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000960:	8813      	ldrh	r3, [r2, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b29b      	uxth	r3, r3
 8000966:	8013      	strh	r3, [r2, #0]
    if (cntr >= 3600){
 8000968:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800096c:	d22f      	bcs.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x7a>
    fault1 = HAL_GPIO_ReadPin(nFAULT_L1_GPIO_Port, nFAULT_L1_Pin);
 800096e:	4c1e      	ldr	r4, [pc, #120]	@ (80009e8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000970:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000974:	4620      	mov	r0, r4
 8000976:	f001 fb4f 	bl	8002018 <HAL_GPIO_ReadPin>
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <HAL_TIM_PeriodElapsedCallback+0x98>)
 800097c:	7018      	strb	r0, [r3, #0]
    fault2 = HAL_GPIO_ReadPin(nFAULT_R1_GPIO_Port, nFAULT_R1_Pin);
 800097e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000982:	4620      	mov	r0, r4
 8000984:	f001 fb48 	bl	8002018 <HAL_GPIO_ReadPin>
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800098a:	7018      	strb	r0, [r3, #0]
    fault3 = HAL_GPIO_ReadPin(nFAULT_L2_GPIO_Port, nFAULT_L2_Pin);
 800098c:	4d19      	ldr	r5, [pc, #100]	@ (80009f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800098e:	2101      	movs	r1, #1
 8000990:	4628      	mov	r0, r5
 8000992:	f001 fb41 	bl	8002018 <HAL_GPIO_ReadPin>
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000998:	7018      	strb	r0, [r3, #0]
    fault4 = HAL_GPIO_ReadPin(nFAULT_R2_GPIO_Port, nFAULT_R2_Pin);
 800099a:	2102      	movs	r1, #2
 800099c:	4628      	mov	r0, r5
 800099e:	f001 fb3b 	bl	8002018 <HAL_GPIO_ReadPin>
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009a4:	7018      	strb	r0, [r3, #0]
    TIM3->CCR1 = duty1;
 80009a6:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009a8:	881a      	ldrh	r2, [r3, #0]
 80009aa:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009ac:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = duty2;
 80009ae:	4a16      	ldr	r2, [pc, #88]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009b0:	8812      	ldrh	r2, [r2, #0]
 80009b2:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(DIR1_1_GPIO_Port, DIR1_1_Pin, dir1);   
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	2102      	movs	r1, #2
 80009ba:	4620      	mov	r0, r4
 80009bc:	f001 fb33 	bl	8002026 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR2_1_GPIO_Port, DIR2_1_Pin, dir2);   
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	2102      	movs	r1, #2
 80009c6:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80009c8:	f001 fb2d 	bl	8002026 <HAL_GPIO_WritePin>
}
 80009cc:	e7c6      	b.n	800095c <HAL_TIM_PeriodElapsedCallback+0x8>
      HAL_GPIO_TogglePin(IND_LED_GPIO_Port, IND_LED_Pin);
 80009ce:	2110      	movs	r1, #16
 80009d0:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80009d2:	f001 fb2e 	bl	8002032 <HAL_GPIO_TogglePin>
      cntr = 0;
 80009d6:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	801a      	strh	r2, [r3, #0]
 80009dc:	e7c7      	b.n	800096e <HAL_TIM_PeriodElapsedCallback+0x1a>
 80009de:	bf00      	nop
 80009e0:	20000290 	.word	0x20000290
 80009e4:	20000138 	.word	0x20000138
 80009e8:	40010c00 	.word	0x40010c00
 80009ec:	2000013d 	.word	0x2000013d
 80009f0:	2000013c 	.word	0x2000013c
 80009f4:	40011000 	.word	0x40011000
 80009f8:	2000013b 	.word	0x2000013b
 80009fc:	2000013a 	.word	0x2000013a
 8000a00:	20000144 	.word	0x20000144
 8000a04:	40000400 	.word	0x40000400
 8000a08:	20000142 	.word	0x20000142
 8000a0c:	20000140 	.word	0x20000140
 8000a10:	2000013e 	.word	0x2000013e
 8000a14:	40010800 	.word	0x40010800

08000a18 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a18:	b538      	push	{r3, r4, r5, lr}
  current[0] = (float)((int16_t)adc[0] - CS_ADC_M1_Offset) * CS_ADC_M1_Gain;
 8000a1a:	4d0e      	ldr	r5, [pc, #56]	@ (8000a54 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000a1c:	882b      	ldrh	r3, [r5, #0]
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <HAL_ADC_ConvCpltCallback+0x40>)
 8000a22:	f9b2 0000 	ldrsh.w	r0, [r2]
 8000a26:	1a18      	subs	r0, r3, r0
 8000a28:	f7ff fcde 	bl	80003e8 <__aeabi_i2f>
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_ADC_ConvCpltCallback+0x44>)
 8000a2e:	6819      	ldr	r1, [r3, #0]
 8000a30:	f7ff fb6c 	bl	800010c <__aeabi_fmul>
 8000a34:	4c0a      	ldr	r4, [pc, #40]	@ (8000a60 <HAL_ADC_ConvCpltCallback+0x48>)
 8000a36:	6020      	str	r0, [r4, #0]
  current[1] = (float)((int16_t)adc[1] - CS_ADC_M2_Offset) * CS_ADC_M2_Gain;
 8000a38:	886b      	ldrh	r3, [r5, #2]
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000a3e:	f9b2 0000 	ldrsh.w	r0, [r2]
 8000a42:	1a18      	subs	r0, r3, r0
 8000a44:	f7ff fcd0 	bl	80003e8 <__aeabi_i2f>
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <HAL_ADC_ConvCpltCallback+0x50>)
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	f7ff fb5e 	bl	800010c <__aeabi_fmul>
 8000a50:	6060      	str	r0, [r4, #4]
}
 8000a52:	bd38      	pop	{r3, r4, r5, pc}
 8000a54:	20000150 	.word	0x20000150
 8000a58:	2000009a 	.word	0x2000009a
 8000a5c:	20000094 	.word	0x20000094
 8000a60:	20000148 	.word	0x20000148
 8000a64:	20000098 	.word	0x20000098
 8000a68:	20000090 	.word	0x20000090

08000a6c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <Error_Handler+0x2>

08000a70 <SystemClock_Config>:
{
 8000a70:	b500      	push	{lr}
 8000a72:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a74:	2228      	movs	r2, #40	@ 0x28
 8000a76:	2100      	movs	r1, #0
 8000a78:	eb0d 0002 	add.w	r0, sp, r2
 8000a7c:	f003 fb03 	bl	8004086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	2300      	movs	r3, #0
 8000a82:	9305      	str	r3, [sp, #20]
 8000a84:	9306      	str	r3, [sp, #24]
 8000a86:	9307      	str	r3, [sp, #28]
 8000a88:	9308      	str	r3, [sp, #32]
 8000a8a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8c:	9301      	str	r3, [sp, #4]
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	9303      	str	r3, [sp, #12]
 8000a92:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a94:	2309      	movs	r3, #9
 8000a96:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aa2:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa8:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aaa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000aae:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	a80a      	add	r0, sp, #40	@ 0x28
 8000ab2:	f001 fae3 	bl	800207c <HAL_RCC_OscConfig>
 8000ab6:	b9e0      	cbnz	r0, 8000af2 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2102      	movs	r1, #2
 8000abe:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac8:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000acc:	a805      	add	r0, sp, #20
 8000ace:	f001 fd07 	bl	80024e0 <HAL_RCC_ClockConfig>
 8000ad2:	b980      	cbnz	r0, 8000af6 <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000adc:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ae2:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	a801      	add	r0, sp, #4
 8000ae6:	f001 fdd7 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	b930      	cbnz	r0, 8000afa <SystemClock_Config+0x8a>
}
 8000aec:	b015      	add	sp, #84	@ 0x54
 8000aee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000af2:	f7ff ffbb 	bl	8000a6c <Error_Handler>
    Error_Handler();
 8000af6:	f7ff ffb9 	bl	8000a6c <Error_Handler>
    Error_Handler();
 8000afa:	f7ff ffb7 	bl	8000a6c <Error_Handler>
	...

08000b00 <main>:
{
 8000b00:	b580      	push	{r7, lr}
  HAL_Init();
 8000b02:	f000 fccb 	bl	800149c <HAL_Init>
  SystemClock_Config();
 8000b06:	f7ff ffb3 	bl	8000a70 <SystemClock_Config>
  MX_GPIO_Init();
 8000b0a:	f7ff fe79 	bl	8000800 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0e:	f7ff fd69 	bl	80005e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b12:	f7ff fcdd 	bl	80004d0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000b16:	f000 f90b 	bl	8000d30 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000b1a:	f000 fa1f 	bl	8000f5c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b1e:	f000 fa4f 	bl	8000fc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b22:	f000 fbad 	bl	8001280 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b26:	f000 fa7b 	bl	8001020 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000b2a:	f000 fbf5 	bl	8001318 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000b2e:	f000 f89d 	bl	8000c6c <MX_RTC_Init>
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2110      	movs	r1, #16
 8000b36:	4842      	ldr	r0, [pc, #264]	@ (8000c40 <main+0x140>)
 8000b38:	f001 fa75 	bl	8002026 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS2_GPIO_Port, SPI1_SS2_Pin, GPIO_PIN_SET);
 8000b3c:	4d41      	ldr	r5, [pc, #260]	@ (8000c44 <main+0x144>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2110      	movs	r1, #16
 8000b42:	4628      	mov	r0, r5
 8000b44:	f001 fa6f 	bl	8002026 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS3_GPIO_Port, SPI1_SS3_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f001 fa6a 	bl	8002026 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS4_GPIO_Port, SPI1_SS4_Pin, GPIO_PIN_SET);
 8000b52:	4c3d      	ldr	r4, [pc, #244]	@ (8000c48 <main+0x148>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	4611      	mov	r1, r2
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f001 fa64 	bl	8002026 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f000 fcc0 	bl	80014e4 <HAL_Delay>
  HAL_GPIO_WritePin(BRIDGESLEEP1_GPIO_Port, BRIDGESLEEP1_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2104      	movs	r1, #4
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f001 fa5c 	bl	8002026 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGESLEEP2_GPIO_Port, BRIDGESLEEP2_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b74:	4620      	mov	r0, r4
 8000b76:	f001 fa56 	bl	8002026 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HIZ1_GPIO_Port, HIZ1_Pin, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f001 fa51 	bl	8002026 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HIZ2_GPIO_Port, HIZ2_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f001 fa4b 	bl	8002026 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fca7 	bl	80014e4 <HAL_Delay>
  drv8106_reset_blocking(&drv_l1_dd6);
 8000b96:	4f2d      	ldr	r7, [pc, #180]	@ (8000c4c <main+0x14c>)
 8000b98:	4638      	mov	r0, r7
 8000b9a:	f7ff fdea 	bl	8000772 <drv8106_reset_blocking>
  drv8106_reset_blocking(&drv_r1_dd7);
 8000b9e:	4e2c      	ldr	r6, [pc, #176]	@ (8000c50 <main+0x150>)
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	f7ff fde6 	bl	8000772 <drv8106_reset_blocking>
  drv8106_reset_blocking(&drv_l2_dd8);
 8000ba6:	4d2b      	ldr	r5, [pc, #172]	@ (8000c54 <main+0x154>)
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f7ff fde2 	bl	8000772 <drv8106_reset_blocking>
  drv8106_reset_blocking(&drv_r2_dd9);
 8000bae:	4c2a      	ldr	r4, [pc, #168]	@ (8000c58 <main+0x158>)
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f7ff fdde 	bl	8000772 <drv8106_reset_blocking>
  drv8106_clear_fault_blocking(&drv_l1_dd6);
 8000bb6:	4638      	mov	r0, r7
 8000bb8:	f7ff fe1b 	bl	80007f2 <drv8106_clear_fault_blocking>
  drv8106_clear_fault_blocking(&drv_r1_dd7);
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	f7ff fe18 	bl	80007f2 <drv8106_clear_fault_blocking>
  drv8106_clear_fault_blocking(&drv_l2_dd8);
 8000bc2:	4628      	mov	r0, r5
 8000bc4:	f7ff fe15 	bl	80007f2 <drv8106_clear_fault_blocking>
  drv8106_clear_fault_blocking(&drv_r2_dd9);
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f7ff fe12 	bl	80007f2 <drv8106_clear_fault_blocking>
  drv8106_read_all_blocking(&drv_l1_dd6);
 8000bce:	4638      	mov	r0, r7
 8000bd0:	f7ff fd7f 	bl	80006d2 <drv8106_read_all_blocking>
  drv8106_read_all_blocking(&drv_r1_dd7);
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	f7ff fd7c 	bl	80006d2 <drv8106_read_all_blocking>
  drv8106_read_all_blocking(&drv_l2_dd8);
 8000bda:	4628      	mov	r0, r5
 8000bdc:	f7ff fd79 	bl	80006d2 <drv8106_read_all_blocking>
  drv8106_read_all_blocking(&drv_r2_dd9);
 8000be0:	4620      	mov	r0, r4
 8000be2:	f7ff fd76 	bl	80006d2 <drv8106_read_all_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_l1_dd6);
 8000be6:	4638      	mov	r0, r7
 8000be8:	f7ff fdfd 	bl	80007e6 <drv8106_CSA_enable_g10_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_r1_dd7);
 8000bec:	4630      	mov	r0, r6
 8000bee:	f7ff fdfa 	bl	80007e6 <drv8106_CSA_enable_g10_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_l2_dd8);
 8000bf2:	4628      	mov	r0, r5
 8000bf4:	f7ff fdf7 	bl	80007e6 <drv8106_CSA_enable_g10_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_r2_dd9);
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f7ff fdf4 	bl	80007e6 <drv8106_CSA_enable_g10_blocking>
  drv8106_Enable_blocking(&drv_l1_dd6);
 8000bfe:	4638      	mov	r0, r7
 8000c00:	f7ff fdeb 	bl	80007da <drv8106_Enable_blocking>
  drv8106_Enable_blocking(&drv_r1_dd7);
 8000c04:	4630      	mov	r0, r6
 8000c06:	f7ff fde8 	bl	80007da <drv8106_Enable_blocking>
  drv8106_Enable_blocking(&drv_l2_dd8);
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f7ff fde5 	bl	80007da <drv8106_Enable_blocking>
  drv8106_Enable_blocking(&drv_r2_dd9);
 8000c10:	4620      	mov	r0, r4
 8000c12:	f7ff fde2 	bl	80007da <drv8106_Enable_blocking>
  TIM3->CCR1 = 0;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <main+0x15c>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	6359      	str	r1, [r3, #52]	@ 0x34
  TIM3->CCR2 = 0;
 8000c1c:	6399      	str	r1, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c1e:	4c10      	ldr	r4, [pc, #64]	@ (8000c60 <main+0x160>)
 8000c20:	4620      	mov	r0, r4
 8000c22:	f002 febf 	bl	80039a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c26:	2104      	movs	r1, #4
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f002 febb 	bl	80039a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f002 fb9c 	bl	800336c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc, 2);
 8000c34:	2202      	movs	r2, #2
 8000c36:	490b      	ldr	r1, [pc, #44]	@ (8000c64 <main+0x164>)
 8000c38:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <main+0x168>)
 8000c3a:	f000 fd89 	bl	8001750 <HAL_ADC_Start_DMA>
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <main+0x13e>
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40011000 	.word	0x40011000
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	2000006c 	.word	0x2000006c
 8000c50:	20000048 	.word	0x20000048
 8000c54:	20000024 	.word	0x20000024
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	40000400 	.word	0x40000400
 8000c60:	20000290 	.word	0x20000290
 8000c64:	20000150 	.word	0x20000150
 8000c68:	20000108 	.word	0x20000108

08000c6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c6c:	b500      	push	{lr}
 8000c6e:	b083      	sub	sp, #12

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000c76:	f88d 3006 	strb.w	r3, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 8000c7a:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c7c:	481a      	ldr	r0, [pc, #104]	@ (8000ce8 <MX_RTC_Init+0x7c>)
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <MX_RTC_Init+0x80>)
 8000c80:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8c:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c8e:	f001 ffaf 	bl	8002bf0 <HAL_RTC_Init>
 8000c92:	bb00      	cbnz	r0, 8000cd6 <MX_RTC_Init+0x6a>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000c94:	2312      	movs	r3, #18
 8000c96:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x12;
 8000c9a:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x12;
 8000c9e:	f88d 3006 	strb.w	r3, [sp, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	a901      	add	r1, sp, #4
 8000ca6:	4810      	ldr	r0, [pc, #64]	@ (8000ce8 <MX_RTC_Init+0x7c>)
 8000ca8:	f001 febb 	bl	8002a22 <HAL_RTC_SetTime>
 8000cac:	b9b0      	cbnz	r0, 8000cdc <MX_RTC_Init+0x70>
  {
    Error_Handler();
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000cae:	2306      	movs	r3, #6
 8000cb0:	f88d 3000 	strb.w	r3, [sp]
  DateToUpdate.Month = RTC_MONTH_MARCH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	f88d 3001 	strb.w	r3, [sp, #1]
  DateToUpdate.Date = 0x1;
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f88d 2002 	strb.w	r2, [sp, #2]
  DateToUpdate.Year = 0x25;
 8000cc0:	2325      	movs	r3, #37	@ 0x25
 8000cc2:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000cc6:	4669      	mov	r1, sp
 8000cc8:	4807      	ldr	r0, [pc, #28]	@ (8000ce8 <MX_RTC_Init+0x7c>)
 8000cca:	f001 ff0b 	bl	8002ae4 <HAL_RTC_SetDate>
 8000cce:	b940      	cbnz	r0, 8000ce2 <MX_RTC_Init+0x76>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cd0:	b003      	add	sp, #12
 8000cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000cd6:	f7ff fec9 	bl	8000a6c <Error_Handler>
 8000cda:	e7db      	b.n	8000c94 <MX_RTC_Init+0x28>
    Error_Handler();
 8000cdc:	f7ff fec6 	bl	8000a6c <Error_Handler>
 8000ce0:	e7e5      	b.n	8000cae <MX_RTC_Init+0x42>
    Error_Handler();
 8000ce2:	f7ff fec3 	bl	8000a6c <Error_Handler>
}
 8000ce6:	e7f3      	b.n	8000cd0 <MX_RTC_Init+0x64>
 8000ce8:	20000154 	.word	0x20000154
 8000cec:	40002800 	.word	0x40002800

08000cf0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8000cf0:	6802      	ldr	r2, [r0, #0]
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_RTC_MspInit+0x34>)
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d000      	beq.n	8000cfa <HAL_RTC_MspInit+0xa>
 8000cf8:	4770      	bx	lr
{
 8000cfa:	b500      	push	{lr}
 8000cfc:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000cfe:	f001 f9a1 	bl	8002044 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_RTC_MspInit+0x38>)
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8000d0a:	61da      	str	r2, [r3, #28]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	9b01      	ldr	r3, [sp, #4]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d16:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <HAL_RTC_MspInit+0x3c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d1e:	b003      	add	sp, #12
 8000d20:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d24:	40002800 	.word	0x40002800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	42420000 	.word	0x42420000

08000d30 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d30:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d32:	480f      	ldr	r0, [pc, #60]	@ (8000d70 <MX_SPI1_Init+0x40>)
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_SPI1_Init+0x44>)
 8000d36:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d38:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000d3c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d46:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d48:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d52:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d54:	2228      	movs	r2, #40	@ 0x28
 8000d56:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d58:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5a:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d5e:	230a      	movs	r3, #10
 8000d60:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d62:	f002 f823 	bl	8002dac <HAL_SPI_Init>
 8000d66:	b900      	cbnz	r0, 8000d6a <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d68:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d6a:	f7ff fe7f 	bl	8000a6c <Error_Handler>
}
 8000d6e:	e7fb      	b.n	8000d68 <MX_SPI1_Init+0x38>
 8000d70:	200001f0 	.word	0x200001f0
 8000d74:	40013000 	.word	0x40013000

08000d78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d78:	b570      	push	{r4, r5, r6, lr}
 8000d7a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	9303      	str	r3, [sp, #12]
 8000d82:	9304      	str	r3, [sp, #16]
 8000d84:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 8000d86:	6802      	ldr	r2, [r0, #0]
 8000d88:	4b36      	ldr	r3, [pc, #216]	@ (8000e64 <HAL_SPI_MspInit+0xec>)
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d001      	beq.n	8000d92 <HAL_SPI_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d8e:	b006      	add	sp, #24
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
 8000d92:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d94:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000d98:	699a      	ldr	r2, [r3, #24]
 8000d9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d9e:	619a      	str	r2, [r3, #24]
 8000da0:	699a      	ldr	r2, [r3, #24]
 8000da2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000da6:	9200      	str	r2, [sp, #0]
 8000da8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	699a      	ldr	r2, [r3, #24]
 8000dac:	f042 0204 	orr.w	r2, r2, #4
 8000db0:	619a      	str	r2, [r3, #24]
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dbc:	23a0      	movs	r3, #160	@ 0xa0
 8000dbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	4e27      	ldr	r6, [pc, #156]	@ (8000e68 <HAL_SPI_MspInit+0xf0>)
 8000dca:	a902      	add	r1, sp, #8
 8000dcc:	4630      	mov	r0, r6
 8000dce:	f001 f815 	bl	8001dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd2:	2340      	movs	r3, #64	@ 0x40
 8000dd4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	a902      	add	r1, sp, #8
 8000dde:	4630      	mov	r0, r6
 8000de0:	f001 f80c 	bl	8001dfc <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000de4:	4821      	ldr	r0, [pc, #132]	@ (8000e6c <HAL_SPI_MspInit+0xf4>)
 8000de6:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <HAL_SPI_MspInit+0xf8>)
 8000de8:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	6045      	str	r5, [r0, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dee:	2380      	movs	r3, #128	@ 0x80
 8000df0:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000df2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df6:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000df8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dfc:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000dfe:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e04:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e06:	f000 fe79 	bl	8001afc <HAL_DMA_Init>
 8000e0a:	bb20      	cbnz	r0, 8000e56 <HAL_SPI_MspInit+0xde>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000e0c:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <HAL_SPI_MspInit+0xf4>)
 8000e0e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000e10:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000e12:	4818      	ldr	r0, [pc, #96]	@ (8000e74 <HAL_SPI_MspInit+0xfc>)
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <HAL_SPI_MspInit+0x100>)
 8000e16:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e20:	2280      	movs	r2, #128	@ 0x80
 8000e22:	60c2      	str	r2, [r0, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e28:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e2e:	6142      	str	r2, [r0, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e30:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e36:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e38:	f000 fe60 	bl	8001afc <HAL_DMA_Init>
 8000e3c:	b970      	cbnz	r0, 8000e5c <HAL_SPI_MspInit+0xe4>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <HAL_SPI_MspInit+0xfc>)
 8000e40:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000e42:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	4611      	mov	r1, r2
 8000e48:	2023      	movs	r0, #35	@ 0x23
 8000e4a:	f000 fe0f 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e4e:	2023      	movs	r0, #35	@ 0x23
 8000e50:	f000 fe1c 	bl	8001a8c <HAL_NVIC_EnableIRQ>
}
 8000e54:	e79b      	b.n	8000d8e <HAL_SPI_MspInit+0x16>
      Error_Handler();
 8000e56:	f7ff fe09 	bl	8000a6c <Error_Handler>
 8000e5a:	e7d7      	b.n	8000e0c <HAL_SPI_MspInit+0x94>
      Error_Handler();
 8000e5c:	f7ff fe06 	bl	8000a6c <Error_Handler>
 8000e60:	e7ed      	b.n	8000e3e <HAL_SPI_MspInit+0xc6>
 8000e62:	bf00      	nop
 8000e64:	40013000 	.word	0x40013000
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	200001ac 	.word	0x200001ac
 8000e70:	4002001c 	.word	0x4002001c
 8000e74:	20000168 	.word	0x20000168
 8000e78:	40020030 	.word	0x40020030

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_MspInit+0x3c>)
 8000e80:	699a      	ldr	r2, [r3, #24]
 8000e82:	f042 0201 	orr.w	r2, r2, #1
 8000e86:	619a      	str	r2, [r3, #24]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	f002 0201 	and.w	r2, r2, #1
 8000e8e:	9200      	str	r2, [sp, #0]
 8000e90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	69da      	ldr	r2, [r3, #28]
 8000e94:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e98:	61da      	str	r2, [r3, #28]
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ea4:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <HAL_MspInit+0x40>)
 8000ea6:	6853      	ldr	r3, [r2, #4]
 8000ea8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	b002      	add	sp, #8
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000

08000ec0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler>

08000ec2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler>

08000ec4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler>

08000ec6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler>

08000ec8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler>

08000eca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 faf5 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bd08      	pop	{r3, pc}

08000ed8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000eda:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <DMA1_Channel1_IRQHandler+0xc>)
 8000edc:	f000 feec 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ee0:	bd08      	pop	{r3, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000c4 	.word	0x200000c4

08000ee8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ee8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000eea:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <DMA1_Channel2_IRQHandler+0xc>)
 8000eec:	f000 fee4 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ef0:	bd08      	pop	{r3, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200001ac 	.word	0x200001ac

08000ef8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000efa:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Channel3_IRQHandler+0xc>)
 8000efc:	f000 fedc 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f00:	bd08      	pop	{r3, pc}
 8000f02:	bf00      	nop
 8000f04:	20000168 	.word	0x20000168

08000f08 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f0a:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <DMA1_Channel4_IRQHandler+0xc>)
 8000f0c:	f000 fed4 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f10:	bd08      	pop	{r3, pc}
 8000f12:	bf00      	nop
 8000f14:	200003ac 	.word	0x200003ac

08000f18 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f1a:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <DMA1_Channel5_IRQHandler+0xc>)
 8000f1c:	f000 fecc 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f20:	bd08      	pop	{r3, pc}
 8000f22:	bf00      	nop
 8000f24:	20000368 	.word	0x20000368

08000f28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f2a:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <TIM3_IRQHandler+0xc>)
 8000f2c:	f002 fa56 	bl	80033dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f30:	bd08      	pop	{r3, pc}
 8000f32:	bf00      	nop
 8000f34:	20000290 	.word	0x20000290

08000f38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f3a:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <SPI1_IRQHandler+0xc>)
 8000f3c:	f002 f8bc 	bl	80030b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f40:	bd08      	pop	{r3, pc}
 8000f42:	bf00      	nop
 8000f44:	200001f0 	.word	0x200001f0

08000f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f4a:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <USART1_IRQHandler+0xc>)
 8000f4c:	f002 ff34 	bl	8003db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f50:	bd08      	pop	{r3, pc}
 8000f52:	bf00      	nop
 8000f54:	200003f0 	.word	0x200003f0

08000f58 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	4770      	bx	lr
	...

08000f5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f5c:	b500      	push	{lr}
 8000f5e:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f60:	2224      	movs	r2, #36	@ 0x24
 8000f62:	2100      	movs	r1, #0
 8000f64:	a803      	add	r0, sp, #12
 8000f66:	f003 f88e 	bl	8004086 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f70:	4811      	ldr	r0, [pc, #68]	@ (8000fb8 <MX_TIM1_Init+0x5c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <MX_TIM1_Init+0x60>)
 8000f74:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000f76:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8000f7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f7e:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f82:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8a:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8c:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f8e:	a903      	add	r1, sp, #12
 8000f90:	f002 fb6e 	bl	8003670 <HAL_TIM_Encoder_Init>
 8000f94:	b950      	cbnz	r0, 8000fac <MX_TIM1_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f9c:	a901      	add	r1, sp, #4
 8000f9e:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <MX_TIM1_Init+0x5c>)
 8000fa0:	f002 fd6e 	bl	8003a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa4:	b928      	cbnz	r0, 8000fb2 <MX_TIM1_Init+0x56>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fa6:	b00d      	add	sp, #52	@ 0x34
 8000fa8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000fac:	f7ff fd5e 	bl	8000a6c <Error_Handler>
 8000fb0:	e7f1      	b.n	8000f96 <MX_TIM1_Init+0x3a>
    Error_Handler();
 8000fb2:	f7ff fd5b 	bl	8000a6c <Error_Handler>
}
 8000fb6:	e7f6      	b.n	8000fa6 <MX_TIM1_Init+0x4a>
 8000fb8:	20000320 	.word	0x20000320
 8000fbc:	40012c00 	.word	0x40012c00

08000fc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fc0:	b500      	push	{lr}
 8000fc2:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fc4:	2224      	movs	r2, #36	@ 0x24
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	a803      	add	r0, sp, #12
 8000fca:	f003 f85c 	bl	8004086 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd4:	4811      	ldr	r0, [pc, #68]	@ (800101c <MX_TIM2_Init+0x5c>)
 8000fd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fda:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8000fdc:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8000fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fee:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff0:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ff2:	a903      	add	r1, sp, #12
 8000ff4:	f002 fb3c 	bl	8003670 <HAL_TIM_Encoder_Init>
 8000ff8:	b950      	cbnz	r0, 8001010 <MX_TIM2_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001000:	a901      	add	r1, sp, #4
 8001002:	4806      	ldr	r0, [pc, #24]	@ (800101c <MX_TIM2_Init+0x5c>)
 8001004:	f002 fd3c 	bl	8003a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	b928      	cbnz	r0, 8001016 <MX_TIM2_Init+0x56>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800100a:	b00d      	add	sp, #52	@ 0x34
 800100c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001010:	f7ff fd2c 	bl	8000a6c <Error_Handler>
 8001014:	e7f1      	b.n	8000ffa <MX_TIM2_Init+0x3a>
    Error_Handler();
 8001016:	f7ff fd29 	bl	8000a6c <Error_Handler>
}
 800101a:	e7f6      	b.n	800100a <MX_TIM2_Init+0x4a>
 800101c:	200002d8 	.word	0x200002d8

08001020 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001020:	b500      	push	{lr}
 8001022:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	2300      	movs	r3, #0
 8001026:	9304      	str	r3, [sp, #16]
 8001028:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001032:	481b      	ldr	r0, [pc, #108]	@ (80010a0 <MX_TIM4_Init+0x80>)
 8001034:	4a1b      	ldr	r2, [pc, #108]	@ (80010a4 <MX_TIM4_Init+0x84>)
 8001036:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8001038:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 800103c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001040:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001046:	f002 fae7 	bl	8003618 <HAL_TIM_IC_Init>
 800104a:	b9e0      	cbnz	r0, 8001086 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001052:	a904      	add	r1, sp, #16
 8001054:	4812      	ldr	r0, [pc, #72]	@ (80010a0 <MX_TIM4_Init+0x80>)
 8001056:	f002 fd13 	bl	8003a80 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	b9b8      	cbnz	r0, 800108c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800105c:	2300      	movs	r3, #0
 800105e:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001060:	2201      	movs	r2, #1
 8001062:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001064:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 0;
 8001066:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001068:	2208      	movs	r2, #8
 800106a:	4669      	mov	r1, sp
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <MX_TIM4_Init+0x80>)
 800106e:	f002 fc23 	bl	80038b8 <HAL_TIM_IC_ConfigChannel>
 8001072:	b970      	cbnz	r0, 8001092 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001074:	220c      	movs	r2, #12
 8001076:	4669      	mov	r1, sp
 8001078:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <MX_TIM4_Init+0x80>)
 800107a:	f002 fc1d 	bl	80038b8 <HAL_TIM_IC_ConfigChannel>
 800107e:	b958      	cbnz	r0, 8001098 <MX_TIM4_Init+0x78>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001080:	b007      	add	sp, #28
 8001082:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001086:	f7ff fcf1 	bl	8000a6c <Error_Handler>
 800108a:	e7df      	b.n	800104c <MX_TIM4_Init+0x2c>
    Error_Handler();
 800108c:	f7ff fcee 	bl	8000a6c <Error_Handler>
 8001090:	e7e4      	b.n	800105c <MX_TIM4_Init+0x3c>
    Error_Handler();
 8001092:	f7ff fceb 	bl	8000a6c <Error_Handler>
 8001096:	e7ed      	b.n	8001074 <MX_TIM4_Init+0x54>
    Error_Handler();
 8001098:	f7ff fce8 	bl	8000a6c <Error_Handler>
}
 800109c:	e7f0      	b.n	8001080 <MX_TIM4_Init+0x60>
 800109e:	bf00      	nop
 80010a0:	20000248 	.word	0x20000248
 80010a4:	40000800 	.word	0x40000800

080010a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80010a8:	b500      	push	{lr}
 80010aa:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	2300      	movs	r3, #0
 80010ae:	9306      	str	r3, [sp, #24]
 80010b0:	9307      	str	r3, [sp, #28]
 80010b2:	9308      	str	r3, [sp, #32]
 80010b4:	9309      	str	r3, [sp, #36]	@ 0x24
  if(tim_encoderHandle->Instance==TIM1)
 80010b6:	6803      	ldr	r3, [r0, #0]
 80010b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001170 <HAL_TIM_Encoder_MspInit+0xc8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d005      	beq.n	80010ca <HAL_TIM_Encoder_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM2)
 80010be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c2:	d01d      	beq.n	8001100 <HAL_TIM_Encoder_MspInit+0x58>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010c4:	b00b      	add	sp, #44	@ 0x2c
 80010c6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <HAL_TIM_Encoder_MspInit+0xcc>)
 80010cc:	699a      	ldr	r2, [r3, #24]
 80010ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010d2:	619a      	str	r2, [r3, #24]
 80010d4:	699a      	ldr	r2, [r3, #24]
 80010d6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80010da:	9201      	str	r2, [sp, #4]
 80010dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	699a      	ldr	r2, [r3, #24]
 80010e0:	f042 0204 	orr.w	r2, r2, #4
 80010e4:	619a      	str	r2, [r3, #24]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 80010f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010f4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	a906      	add	r1, sp, #24
 80010f8:	481f      	ldr	r0, [pc, #124]	@ (8001178 <HAL_TIM_Encoder_MspInit+0xd0>)
 80010fa:	f000 fe7f 	bl	8001dfc <HAL_GPIO_Init>
 80010fe:	e7e1      	b.n	80010c4 <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001100:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001104:	69da      	ldr	r2, [r3, #28]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	61da      	str	r2, [r3, #28]
 800110c:	69da      	ldr	r2, [r3, #28]
 800110e:	f002 0201 	and.w	r2, r2, #1
 8001112:	9203      	str	r2, [sp, #12]
 8001114:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	699a      	ldr	r2, [r3, #24]
 8001118:	f042 0204 	orr.w	r2, r2, #4
 800111c:	619a      	str	r2, [r3, #24]
 800111e:	699a      	ldr	r2, [r3, #24]
 8001120:	f002 0204 	and.w	r2, r2, #4
 8001124:	9204      	str	r2, [sp, #16]
 8001126:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	f042 0208 	orr.w	r2, r2, #8
 800112e:	619a      	str	r2, [r3, #24]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	9305      	str	r3, [sp, #20]
 8001138:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin;
 800113a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800113e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(ENC2_CH1_GPIO_Port, &GPIO_InitStruct);
 8001140:	a906      	add	r1, sp, #24
 8001142:	480d      	ldr	r0, [pc, #52]	@ (8001178 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001144:	f000 fe5a 	bl	8001dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC2_CH2_Pin;
 8001148:	2308      	movs	r3, #8
 800114a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(ENC2_CH2_GPIO_Port, &GPIO_InitStruct);
 8001152:	a906      	add	r1, sp, #24
 8001154:	4809      	ldr	r0, [pc, #36]	@ (800117c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001156:	f000 fe51 	bl	8001dfc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_TIM_Encoder_MspInit+0xd8>)
 800115c:	6853      	ldr	r3, [r2, #4]
 800115e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001162:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116a:	6053      	str	r3, [r2, #4]
}
 800116c:	e7aa      	b.n	80010c4 <HAL_TIM_Encoder_MspInit+0x1c>
 800116e:	bf00      	nop
 8001170:	40012c00 	.word	0x40012c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800
 800117c:	40010c00 	.word	0x40010c00
 8001180:	40010000 	.word	0x40010000

08001184 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8001184:	6802      	ldr	r2, [r0, #0]
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001188:	429a      	cmp	r2, r3
 800118a:	d000      	beq.n	800118e <HAL_TIM_PWM_MspInit+0xa>
 800118c:	4770      	bx	lr
{
 800118e:	b500      	push	{lr}
 8001190:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001192:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001196:	69da      	ldr	r2, [r3, #28]
 8001198:	f042 0202 	orr.w	r2, r2, #2
 800119c:	61da      	str	r2, [r3, #28]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	9b01      	ldr	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	4611      	mov	r1, r2
 80011ac:	201d      	movs	r0, #29
 80011ae:	f000 fc5d 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011b2:	201d      	movs	r0, #29
 80011b4:	f000 fc6a 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011b8:	b003      	add	sp, #12
 80011ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80011be:	bf00      	nop
 80011c0:	40000400 	.word	0x40000400

080011c4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80011c4:	b500      	push	{lr}
 80011c6:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	2300      	movs	r3, #0
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	9303      	str	r3, [sp, #12]
 80011ce:	9304      	str	r3, [sp, #16]
 80011d0:	9305      	str	r3, [sp, #20]
  if(tim_icHandle->Instance==TIM4)
 80011d2:	6802      	ldr	r2, [r0, #0]
 80011d4:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <HAL_TIM_IC_MspInit+0x54>)
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d002      	beq.n	80011e0 <HAL_TIM_IC_MspInit+0x1c>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011da:	b007      	add	sp, #28
 80011dc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011e0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80011e4:	69da      	ldr	r2, [r3, #28]
 80011e6:	f042 0204 	orr.w	r2, r2, #4
 80011ea:	61da      	str	r2, [r3, #28]
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	f002 0204 	and.w	r2, r2, #4
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	699a      	ldr	r2, [r3, #24]
 80011f8:	f042 0208 	orr.w	r2, r2, #8
 80011fc:	619a      	str	r2, [r3, #24]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENC1_CH1_F_Pin|ENC2_CH1_F_Pin;
 8001208:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800120c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	a902      	add	r1, sp, #8
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <HAL_TIM_IC_MspInit+0x58>)
 8001212:	f000 fdf3 	bl	8001dfc <HAL_GPIO_Init>
}
 8001216:	e7e0      	b.n	80011da <HAL_TIM_IC_MspInit+0x16>
 8001218:	40000800 	.word	0x40000800
 800121c:	40010c00 	.word	0x40010c00

08001220 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001220:	b500      	push	{lr}
 8001222:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	2300      	movs	r3, #0
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	9303      	str	r3, [sp, #12]
 800122a:	9304      	str	r3, [sp, #16]
 800122c:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 800122e:	6802      	ldr	r2, [r0, #0]
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <HAL_TIM_MspPostInit+0x54>)
 8001232:	429a      	cmp	r2, r3
 8001234:	d002      	beq.n	800123c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001236:	b007      	add	sp, #28
 8001238:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123c:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001240:	699a      	ldr	r2, [r3, #24]
 8001242:	f042 0210 	orr.w	r2, r2, #16
 8001246:	619a      	str	r2, [r3, #24]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8001252:	23c0      	movs	r3, #192	@ 0xc0
 8001254:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125c:	a902      	add	r1, sp, #8
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <HAL_TIM_MspPostInit+0x58>)
 8001260:	f000 fdcc 	bl	8001dfc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001264:	4a05      	ldr	r2, [pc, #20]	@ (800127c <HAL_TIM_MspPostInit+0x5c>)
 8001266:	6853      	ldr	r3, [r2, #4]
 8001268:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800126c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001270:	6053      	str	r3, [r2, #4]
}
 8001272:	e7e0      	b.n	8001236 <HAL_TIM_MspPostInit+0x16>
 8001274:	40000400 	.word	0x40000400
 8001278:	40011000 	.word	0x40011000
 800127c:	40010000 	.word	0x40010000

08001280 <MX_TIM3_Init>:
{
 8001280:	b500      	push	{lr}
 8001282:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	2300      	movs	r3, #0
 8001286:	9308      	str	r3, [sp, #32]
 8001288:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	9303      	str	r3, [sp, #12]
 8001290:	9304      	str	r3, [sp, #16]
 8001292:	9305      	str	r3, [sp, #20]
 8001294:	9306      	str	r3, [sp, #24]
 8001296:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8001298:	481d      	ldr	r0, [pc, #116]	@ (8001310 <MX_TIM3_Init+0x90>)
 800129a:	4a1e      	ldr	r2, [pc, #120]	@ (8001314 <MX_TIM3_Init+0x94>)
 800129c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4-1;
 800129e:	2203      	movs	r2, #3
 80012a0:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000-1;
 80012a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012a8:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012ae:	f002 f987 	bl	80035c0 <HAL_TIM_PWM_Init>
 80012b2:	bb00      	cbnz	r0, 80012f6 <MX_TIM3_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012b4:	2320      	movs	r3, #32
 80012b6:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012bc:	a908      	add	r1, sp, #32
 80012be:	4814      	ldr	r0, [pc, #80]	@ (8001310 <MX_TIM3_Init+0x90>)
 80012c0:	f002 fbde 	bl	8003a80 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	b9d0      	cbnz	r0, 80012fc <MX_TIM3_Init+0x7c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c6:	2360      	movs	r3, #96	@ 0x60
 80012c8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80012ca:	2200      	movs	r2, #0
 80012cc:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d0:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d2:	a901      	add	r1, sp, #4
 80012d4:	480e      	ldr	r0, [pc, #56]	@ (8001310 <MX_TIM3_Init+0x90>)
 80012d6:	f002 fa55 	bl	8003784 <HAL_TIM_PWM_ConfigChannel>
 80012da:	b990      	cbnz	r0, 8001302 <MX_TIM3_Init+0x82>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012dc:	2204      	movs	r2, #4
 80012de:	eb0d 0102 	add.w	r1, sp, r2
 80012e2:	480b      	ldr	r0, [pc, #44]	@ (8001310 <MX_TIM3_Init+0x90>)
 80012e4:	f002 fa4e 	bl	8003784 <HAL_TIM_PWM_ConfigChannel>
 80012e8:	b970      	cbnz	r0, 8001308 <MX_TIM3_Init+0x88>
  HAL_TIM_MspPostInit(&htim3);
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <MX_TIM3_Init+0x90>)
 80012ec:	f7ff ff98 	bl	8001220 <HAL_TIM_MspPostInit>
}
 80012f0:	b00b      	add	sp, #44	@ 0x2c
 80012f2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012f6:	f7ff fbb9 	bl	8000a6c <Error_Handler>
 80012fa:	e7db      	b.n	80012b4 <MX_TIM3_Init+0x34>
    Error_Handler();
 80012fc:	f7ff fbb6 	bl	8000a6c <Error_Handler>
 8001300:	e7e1      	b.n	80012c6 <MX_TIM3_Init+0x46>
    Error_Handler();
 8001302:	f7ff fbb3 	bl	8000a6c <Error_Handler>
 8001306:	e7e9      	b.n	80012dc <MX_TIM3_Init+0x5c>
    Error_Handler();
 8001308:	f7ff fbb0 	bl	8000a6c <Error_Handler>
 800130c:	e7ed      	b.n	80012ea <MX_TIM3_Init+0x6a>
 800130e:	bf00      	nop
 8001310:	20000290 	.word	0x20000290
 8001314:	40000400 	.word	0x40000400

08001318 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001318:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800131a:	480a      	ldr	r0, [pc, #40]	@ (8001344 <MX_USART1_UART_Init+0x2c>)
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <MX_USART1_UART_Init+0x30>)
 800131e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001320:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001324:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	2300      	movs	r3, #0
 8001328:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800132e:	220c      	movs	r2, #12
 8001330:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001336:	f002 fc83 	bl	8003c40 <HAL_UART_Init>
 800133a:	b900      	cbnz	r0, 800133e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800133c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800133e:	f7ff fb95 	bl	8000a6c <Error_Handler>
}
 8001342:	e7fb      	b.n	800133c <MX_USART1_UART_Init+0x24>
 8001344:	200003f0 	.word	0x200003f0
 8001348:	40013800 	.word	0x40013800

0800134c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	2300      	movs	r3, #0
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	9303      	str	r3, [sp, #12]
 8001356:	9304      	str	r3, [sp, #16]
 8001358:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 800135a:	6802      	ldr	r2, [r0, #0]
 800135c:	4b35      	ldr	r3, [pc, #212]	@ (8001434 <HAL_UART_MspInit+0xe8>)
 800135e:	429a      	cmp	r2, r3
 8001360:	d001      	beq.n	8001366 <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001362:	b007      	add	sp, #28
 8001364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001366:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001368:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 800136c:	699a      	ldr	r2, [r3, #24]
 800136e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001372:	619a      	str	r2, [r3, #24]
 8001374:	699a      	ldr	r2, [r3, #24]
 8001376:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	f042 0208 	orr.w	r2, r2, #8
 8001384:	619a      	str	r2, [r3, #24]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001390:	2340      	movs	r3, #64	@ 0x40
 8001392:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	4f26      	ldr	r7, [pc, #152]	@ (8001438 <HAL_UART_MspInit+0xec>)
 800139e:	a902      	add	r1, sp, #8
 80013a0:	4638      	mov	r0, r7
 80013a2:	f000 fd2b 	bl	8001dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013a6:	2680      	movs	r6, #128	@ 0x80
 80013a8:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2500      	movs	r5, #0
 80013ac:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	a902      	add	r1, sp, #8
 80013b2:	4638      	mov	r0, r7
 80013b4:	f000 fd22 	bl	8001dfc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80013b8:	4a20      	ldr	r2, [pc, #128]	@ (800143c <HAL_UART_MspInit+0xf0>)
 80013ba:	6853      	ldr	r3, [r2, #4]
 80013bc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6053      	str	r3, [r2, #4]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80013c6:	481e      	ldr	r0, [pc, #120]	@ (8001440 <HAL_UART_MspInit+0xf4>)
 80013c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <HAL_UART_MspInit+0xf8>)
 80013ca:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013cc:	2310      	movs	r3, #16
 80013ce:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	6085      	str	r5, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	60c6      	str	r6, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d4:	6105      	str	r5, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d6:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80013d8:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80013da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013de:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80013e0:	f000 fb8c 	bl	8001afc <HAL_DMA_Init>
 80013e4:	b9f8      	cbnz	r0, 8001426 <HAL_UART_MspInit+0xda>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_UART_MspInit+0xf4>)
 80013e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80013ea:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80013ec:	4816      	ldr	r0, [pc, #88]	@ (8001448 <HAL_UART_MspInit+0xfc>)
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <HAL_UART_MspInit+0x100>)
 80013f0:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f2:	2300      	movs	r3, #0
 80013f4:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f6:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013f8:	2280      	movs	r2, #128	@ 0x80
 80013fa:	60c2      	str	r2, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013fc:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013fe:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001400:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001402:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001406:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001408:	f000 fb78 	bl	8001afc <HAL_DMA_Init>
 800140c:	b970      	cbnz	r0, 800142c <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <HAL_UART_MspInit+0xfc>)
 8001410:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001412:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	4611      	mov	r1, r2
 8001418:	2025      	movs	r0, #37	@ 0x25
 800141a:	f000 fb27 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800141e:	2025      	movs	r0, #37	@ 0x25
 8001420:	f000 fb34 	bl	8001a8c <HAL_NVIC_EnableIRQ>
}
 8001424:	e79d      	b.n	8001362 <HAL_UART_MspInit+0x16>
      Error_Handler();
 8001426:	f7ff fb21 	bl	8000a6c <Error_Handler>
 800142a:	e7dc      	b.n	80013e6 <HAL_UART_MspInit+0x9a>
      Error_Handler();
 800142c:	f7ff fb1e 	bl	8000a6c <Error_Handler>
 8001430:	e7ed      	b.n	800140e <HAL_UART_MspInit+0xc2>
 8001432:	bf00      	nop
 8001434:	40013800 	.word	0x40013800
 8001438:	40010c00 	.word	0x40010c00
 800143c:	40010000 	.word	0x40010000
 8001440:	200003ac 	.word	0x200003ac
 8001444:	40020044 	.word	0x40020044
 8001448:	20000368 	.word	0x20000368
 800144c:	40020058 	.word	0x40020058

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_InitTick+0x40>)
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001460:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <HAL_InitTick+0x44>)
 8001462:	6810      	ldr	r0, [r2, #0]
 8001464:	fbb0 f0f3 	udiv	r0, r0, r3
 8001468:	f000 fb1e 	bl	8001aa8 <HAL_SYSTICK_Config>
 800146c:	b968      	cbnz	r0, 800148a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	2c0f      	cmp	r4, #15
 8001470:	d901      	bls.n	8001476 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001472:	2001      	movs	r0, #1
 8001474:	e00a      	b.n	800148c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001476:	2200      	movs	r2, #0
 8001478:	4621      	mov	r1, r4
 800147a:	f04f 30ff 	mov.w	r0, #4294967295
 800147e:	f000 faf5 	bl	8001a6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_InitTick+0x48>)
 8001484:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2000      	movs	r0, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800148a:	2001      	movs	r0, #1
}
 800148c:	bd10      	pop	{r4, pc}
 800148e:	bf00      	nop
 8001490:	200000a0 	.word	0x200000a0
 8001494:	2000009c 	.word	0x2000009c
 8001498:	200000a4 	.word	0x200000a4

0800149c <HAL_Init>:
{
 800149c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149e:	4a07      	ldr	r2, [pc, #28]	@ (80014bc <HAL_Init+0x20>)
 80014a0:	6813      	ldr	r3, [r2, #0]
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 facd 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	200f      	movs	r0, #15
 80014b0:	f7ff ffce 	bl	8001450 <HAL_InitTick>
  HAL_MspInit();
 80014b4:	f7ff fce2 	bl	8000e7c <HAL_MspInit>
}
 80014b8:	2000      	movs	r0, #0
 80014ba:	bd08      	pop	{r3, pc}
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014c0:	4a03      	ldr	r2, [pc, #12]	@ (80014d0 <HAL_IncTick+0x10>)
 80014c2:	6811      	ldr	r1, [r2, #0]
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_IncTick+0x14>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	440b      	add	r3, r1
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000438 	.word	0x20000438
 80014d4:	200000a0 	.word	0x200000a0

080014d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014d8:	4b01      	ldr	r3, [pc, #4]	@ (80014e0 <HAL_GetTick+0x8>)
 80014da:	6818      	ldr	r0, [r3, #0]
}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000438 	.word	0x20000438

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff fff6 	bl	80014d8 <HAL_GetTick>
 80014ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	f1b4 3fff 	cmp.w	r4, #4294967295
 80014f2:	d002      	beq.n	80014fa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <HAL_Delay+0x24>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	f7ff ffed 	bl	80014d8 <HAL_GetTick>
 80014fe:	1b40      	subs	r0, r0, r5
 8001500:	42a0      	cmp	r0, r4
 8001502:	d3fa      	bcc.n	80014fa <HAL_Delay+0x16>
  {
  }
}
 8001504:	bd38      	pop	{r3, r4, r5, pc}
 8001506:	bf00      	nop
 8001508:	200000a0 	.word	0x200000a0

0800150c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800150c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800150e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001512:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001516:	d11e      	bne.n	8001556 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800151a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	6892      	ldr	r2, [r2, #8]
 8001524:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001528:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 800152c:	d003      	beq.n	8001536 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fa72 	bl	8000a18 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001534:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001536:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f8      	bne.n	800152e <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800153c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800153e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001544:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001546:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800154a:	d1f0      	bne.n	800152e <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800154c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	629a      	str	r2, [r3, #40]	@ 0x28
 8001554:	e7eb      	b.n	800152e <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4798      	blx	r3
}
 800155c:	e7ea      	b.n	8001534 <ADC_DMAConvCplt+0x28>

0800155e <HAL_ADC_ConvHalfCpltCallback>:
}
 800155e:	4770      	bx	lr

08001560 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001560:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001562:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001564:	f7ff fffb 	bl	800155e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001568:	bd08      	pop	{r3, pc}

0800156a <HAL_ADC_ErrorCallback>:
}
 800156a:	4770      	bx	lr

0800156c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800156c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800156e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001570:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001576:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001578:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001580:	f7ff fff3 	bl	800156a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001584:	bd08      	pop	{r3, pc}
	...

08001588 <HAL_ADC_ConfigChannel>:
{ 
 8001588:	b430      	push	{r4, r5}
 800158a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800158c:	2200      	movs	r2, #0
 800158e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001590:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8001594:	2a01      	cmp	r2, #1
 8001596:	f000 808f 	beq.w	80016b8 <HAL_ADC_ConfigChannel+0x130>
 800159a:	4603      	mov	r3, r0
 800159c:	2201      	movs	r2, #1
 800159e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 80015a2:	684a      	ldr	r2, [r1, #4]
 80015a4:	2a06      	cmp	r2, #6
 80015a6:	d82d      	bhi.n	8001604 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015a8:	6804      	ldr	r4, [r0, #0]
 80015aa:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80015ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80015b0:	3a05      	subs	r2, #5
 80015b2:	f04f 0c1f 	mov.w	ip, #31
 80015b6:	fa0c fc02 	lsl.w	ip, ip, r2
 80015ba:	ea20 000c 	bic.w	r0, r0, ip
 80015be:	680d      	ldr	r5, [r1, #0]
 80015c0:	fa05 f202 	lsl.w	r2, r5, r2
 80015c4:	4302      	orrs	r2, r0
 80015c6:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015c8:	680a      	ldr	r2, [r1, #0]
 80015ca:	2a09      	cmp	r2, #9
 80015cc:	d938      	bls.n	8001640 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015ce:	681c      	ldr	r4, [r3, #0]
 80015d0:	68e0      	ldr	r0, [r4, #12]
 80015d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80015d6:	3a1e      	subs	r2, #30
 80015d8:	f04f 0c07 	mov.w	ip, #7
 80015dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80015e0:	ea20 000c 	bic.w	r0, r0, ip
 80015e4:	688d      	ldr	r5, [r1, #8]
 80015e6:	fa05 f202 	lsl.w	r2, r5, r2
 80015ea:	4302      	orrs	r2, r0
 80015ec:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ee:	680a      	ldr	r2, [r1, #0]
 80015f0:	3a10      	subs	r2, #16
 80015f2:	2a01      	cmp	r2, #1
 80015f4:	d934      	bls.n	8001660 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80015fe:	b002      	add	sp, #8
 8001600:	bc30      	pop	{r4, r5}
 8001602:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001604:	2a0c      	cmp	r2, #12
 8001606:	d80d      	bhi.n	8001624 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001608:	6805      	ldr	r5, [r0, #0]
 800160a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800160c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001610:	3a23      	subs	r2, #35	@ 0x23
 8001612:	241f      	movs	r4, #31
 8001614:	4094      	lsls	r4, r2
 8001616:	ea20 0004 	bic.w	r0, r0, r4
 800161a:	680c      	ldr	r4, [r1, #0]
 800161c:	4094      	lsls	r4, r2
 800161e:	4320      	orrs	r0, r4
 8001620:	6328      	str	r0, [r5, #48]	@ 0x30
 8001622:	e7d1      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001624:	6805      	ldr	r5, [r0, #0]
 8001626:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001628:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800162c:	3a41      	subs	r2, #65	@ 0x41
 800162e:	241f      	movs	r4, #31
 8001630:	4094      	lsls	r4, r2
 8001632:	ea20 0004 	bic.w	r0, r0, r4
 8001636:	680c      	ldr	r4, [r1, #0]
 8001638:	4094      	lsls	r4, r2
 800163a:	4320      	orrs	r0, r4
 800163c:	62e8      	str	r0, [r5, #44]	@ 0x2c
 800163e:	e7c3      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001640:	681c      	ldr	r4, [r3, #0]
 8001642:	6920      	ldr	r0, [r4, #16]
 8001644:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001648:	f04f 0c07 	mov.w	ip, #7
 800164c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001650:	ea20 000c 	bic.w	r0, r0, ip
 8001654:	688d      	ldr	r5, [r1, #8]
 8001656:	fa05 f202 	lsl.w	r2, r5, r2
 800165a:	4302      	orrs	r2, r0
 800165c:	6122      	str	r2, [r4, #16]
 800165e:	e7c6      	b.n	80015ee <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4816      	ldr	r0, [pc, #88]	@ (80016bc <HAL_ADC_ConfigChannel+0x134>)
 8001664:	4282      	cmp	r2, r0
 8001666:	d005      	beq.n	8001674 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001668:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800166a:	f042 0220 	orr.w	r2, r2, #32
 800166e:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8001670:	2001      	movs	r0, #1
 8001672:	e7c1      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001674:	6890      	ldr	r0, [r2, #8]
 8001676:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 800167a:	d11b      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800167c:	6890      	ldr	r0, [r2, #8]
 800167e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001682:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001684:	680a      	ldr	r2, [r1, #0]
 8001686:	2a10      	cmp	r2, #16
 8001688:	d001      	beq.n	800168e <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168a:	2000      	movs	r0, #0
 800168c:	e7b4      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800168e:	4a0c      	ldr	r2, [pc, #48]	@ (80016c0 <HAL_ADC_ConfigChannel+0x138>)
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <HAL_ADC_ConfigChannel+0x13c>)
 8001694:	fba1 1202 	umull	r1, r2, r1, r2
 8001698:	0c92      	lsrs	r2, r2, #18
 800169a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800169e:	0052      	lsls	r2, r2, #1
 80016a0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80016a2:	e002      	b.n	80016aa <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 80016a4:	9a01      	ldr	r2, [sp, #4]
 80016a6:	3a01      	subs	r2, #1
 80016a8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80016aa:	9a01      	ldr	r2, [sp, #4]
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	d1f9      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b0:	2000      	movs	r0, #0
 80016b2:	e7a1      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x70>
 80016b4:	2000      	movs	r0, #0
 80016b6:	e79f      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80016b8:	2002      	movs	r0, #2
 80016ba:	e7a0      	b.n	80015fe <HAL_ADC_ConfigChannel+0x76>
 80016bc:	40012400 	.word	0x40012400
 80016c0:	2000009c 	.word	0x2000009c
 80016c4:	431bde83 	.word	0x431bde83

080016c8 <ADC_Enable>:
{
 80016c8:	b530      	push	{r4, r5, lr}
 80016ca:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016d0:	6803      	ldr	r3, [r0, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	f012 0f01 	tst.w	r2, #1
 80016d8:	d133      	bne.n	8001742 <ADC_Enable+0x7a>
 80016da:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <ADC_Enable+0x80>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a18      	ldr	r2, [pc, #96]	@ (800174c <ADC_Enable+0x84>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0c9b      	lsrs	r3, r3, #18
 80016f0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80016f2:	e002      	b.n	80016fa <ADC_Enable+0x32>
      wait_loop_index--;
 80016f4:	9b01      	ldr	r3, [sp, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80016fa:	9b01      	ldr	r3, [sp, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f9      	bne.n	80016f4 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8001700:	f7ff feea 	bl	80014d8 <HAL_GetTick>
 8001704:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f013 0f01 	tst.w	r3, #1
 800170e:	d116      	bne.n	800173e <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001710:	f7ff fee2 	bl	80014d8 <HAL_GetTick>
 8001714:	1b43      	subs	r3, r0, r5
 8001716:	2b02      	cmp	r3, #2
 8001718:	d9f5      	bls.n	8001706 <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f013 0f01 	tst.w	r3, #1
 8001722:	d1f0      	bne.n	8001706 <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001724:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8001734:	2300      	movs	r3, #0
 8001736:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
 800173c:	e002      	b.n	8001744 <ADC_Enable+0x7c>
  return HAL_OK;
 800173e:	2000      	movs	r0, #0
 8001740:	e000      	b.n	8001744 <ADC_Enable+0x7c>
 8001742:	2000      	movs	r0, #0
}
 8001744:	b003      	add	sp, #12
 8001746:	bd30      	pop	{r4, r5, pc}
 8001748:	2000009c 	.word	0x2000009c
 800174c:	431bde83 	.word	0x431bde83

08001750 <HAL_ADC_Start_DMA>:
{
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001752:	4604      	mov	r4, r0
 8001754:	460d      	mov	r5, r1
 8001756:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001758:	6801      	ldr	r1, [r0, #0]
 800175a:	4844      	ldr	r0, [pc, #272]	@ (800186c <HAL_ADC_Start_DMA+0x11c>)
 800175c:	4281      	cmp	r1, r0
 800175e:	d059      	beq.n	8001814 <HAL_ADC_Start_DMA+0xc4>
 8001760:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <HAL_ADC_Start_DMA+0x120>)
 8001762:	4299      	cmp	r1, r3
 8001764:	d056      	beq.n	8001814 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8001766:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800176a:	2b01      	cmp	r3, #1
 800176c:	d07c      	beq.n	8001868 <HAL_ADC_Start_DMA+0x118>
 800176e:	2301      	movs	r3, #1
 8001770:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff ffa7 	bl	80016c8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800177a:	4607      	mov	r7, r0
 800177c:	2800      	cmp	r0, #0
 800177e:	d16e      	bne.n	800185e <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8001780:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001782:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8001786:	f021 0101 	bic.w	r1, r1, #1
 800178a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800178e:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001790:	6822      	ldr	r2, [r4, #0]
 8001792:	4b37      	ldr	r3, [pc, #220]	@ (8001870 <HAL_ADC_Start_DMA+0x120>)
 8001794:	429a      	cmp	r2, r3
 8001796:	d044      	beq.n	8001822 <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001798:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800179a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800179e:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017a0:	6853      	ldr	r3, [r2, #4]
 80017a2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80017a6:	d005      	beq.n	80017b4 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80017aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017b2:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80017b6:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80017ba:	d048      	beq.n	800184e <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80017be:	f023 0306 	bic.w	r3, r3, #6
 80017c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 80017c4:	2300      	movs	r3, #0
 80017c6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017ca:	6a23      	ldr	r3, [r4, #32]
 80017cc:	4a29      	ldr	r2, [pc, #164]	@ (8001874 <HAL_ADC_Start_DMA+0x124>)
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017d0:	6a23      	ldr	r3, [r4, #32]
 80017d2:	4a29      	ldr	r2, [pc, #164]	@ (8001878 <HAL_ADC_Start_DMA+0x128>)
 80017d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017d6:	6a23      	ldr	r3, [r4, #32]
 80017d8:	4a28      	ldr	r2, [pc, #160]	@ (800187c <HAL_ADC_Start_DMA+0x12c>)
 80017da:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	f06f 0202 	mvn.w	r2, #2
 80017e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017e4:	6822      	ldr	r2, [r4, #0]
 80017e6:	6893      	ldr	r3, [r2, #8]
 80017e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ec:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017ee:	6821      	ldr	r1, [r4, #0]
 80017f0:	4633      	mov	r3, r6
 80017f2:	462a      	mov	r2, r5
 80017f4:	314c      	adds	r1, #76	@ 0x4c
 80017f6:	6a20      	ldr	r0, [r4, #32]
 80017f8:	f000 f9b4 	bl	8001b64 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001804:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001808:	d024      	beq.n	8001854 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	e027      	b.n	8001864 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_ADC_Start_DMA+0x11c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 800181c:	d0a3      	beq.n	8001766 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800181e:	2701      	movs	r7, #1
 8001820:	e020      	b.n	8001864 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001822:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 800182c:	d0b4      	beq.n	8001798 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800182e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001830:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001834:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001836:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <HAL_ADC_Start_DMA+0x11c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800183e:	d0b9      	beq.n	80017b4 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001840:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001842:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001846:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800184a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800184c:	e7b2      	b.n	80017b4 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 800184e:	2300      	movs	r3, #0
 8001850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001852:	e7b7      	b.n	80017c4 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	e002      	b.n	8001864 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 800185e:	2300      	movs	r3, #0
 8001860:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001864:	4638      	mov	r0, r7
 8001866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001868:	2702      	movs	r7, #2
 800186a:	e7fb      	b.n	8001864 <HAL_ADC_Start_DMA+0x114>
 800186c:	40012400 	.word	0x40012400
 8001870:	40012800 	.word	0x40012800
 8001874:	0800150d 	.word	0x0800150d
 8001878:	08001561 	.word	0x08001561
 800187c:	0800156d 	.word	0x0800156d

08001880 <ADC_ConversionStop_Disable>:
{
 8001880:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001882:	6803      	ldr	r3, [r0, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	f012 0f01 	tst.w	r2, #1
 800188a:	d101      	bne.n	8001890 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800188c:	2000      	movs	r0, #0
}
 800188e:	bd38      	pop	{r3, r4, r5, pc}
 8001890:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800189a:	f7ff fe1d 	bl	80014d8 <HAL_GetTick>
 800189e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f013 0f01 	tst.w	r3, #1
 80018a8:	d013      	beq.n	80018d2 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018aa:	f7ff fe15 	bl	80014d8 <HAL_GetTick>
 80018ae:	1b43      	subs	r3, r0, r5
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d9f5      	bls.n	80018a0 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f013 0f01 	tst.w	r3, #1
 80018bc:	d0f0      	beq.n	80018a0 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80018c0:	f043 0310 	orr.w	r3, r3, #16
 80018c4:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80018ce:	2001      	movs	r0, #1
 80018d0:	e7dd      	b.n	800188e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80018d2:	2000      	movs	r0, #0
 80018d4:	e7db      	b.n	800188e <ADC_ConversionStop_Disable+0xe>
	...

080018d8 <HAL_ADC_Init>:
  if(hadc == NULL)
 80018d8:	2800      	cmp	r0, #0
 80018da:	d07b      	beq.n	80019d4 <HAL_ADC_Init+0xfc>
{
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d04d      	beq.n	8001982 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff ffca 	bl	8001880 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80018ee:	f013 0310 	ands.w	r3, r3, #16
 80018f2:	d169      	bne.n	80019c8 <HAL_ADC_Init+0xf0>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d167      	bne.n	80019c8 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 80018f8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018fa:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80018fe:	f022 0202 	bic.w	r2, r2, #2
 8001902:	f042 0202 	orr.w	r2, r2, #2
 8001906:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001908:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800190a:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800190c:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800190e:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001910:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001914:	68a5      	ldr	r5, [r4, #8]
 8001916:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800191a:	d002      	beq.n	8001922 <HAL_ADC_Init+0x4a>
 800191c:	2d01      	cmp	r5, #1
 800191e:	d036      	beq.n	800198e <HAL_ADC_Init+0xb6>
 8001920:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001922:	7d26      	ldrb	r6, [r4, #20]
 8001924:	2e01      	cmp	r6, #1
 8001926:	d035      	beq.n	8001994 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8001928:	6826      	ldr	r6, [r4, #0]
 800192a:	6871      	ldr	r1, [r6, #4]
 800192c:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8001930:	4329      	orrs	r1, r5
 8001932:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001934:	6825      	ldr	r5, [r4, #0]
 8001936:	68ae      	ldr	r6, [r5, #8]
 8001938:	4927      	ldr	r1, [pc, #156]	@ (80019d8 <HAL_ADC_Init+0x100>)
 800193a:	4031      	ands	r1, r6
 800193c:	4311      	orrs	r1, r2
 800193e:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001940:	68a1      	ldr	r1, [r4, #8]
 8001942:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001946:	d001      	beq.n	800194c <HAL_ADC_Init+0x74>
 8001948:	2901      	cmp	r1, #1
 800194a:	d102      	bne.n	8001952 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800194c:	6923      	ldr	r3, [r4, #16]
 800194e:	3b01      	subs	r3, #1
 8001950:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001952:	6825      	ldr	r5, [r4, #0]
 8001954:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8001956:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 800195a:	430b      	orrs	r3, r1
 800195c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <HAL_ADC_Init+0x104>)
 8001964:	400b      	ands	r3, r1
 8001966:	429a      	cmp	r2, r3
 8001968:	d025      	beq.n	80019b6 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 800196a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800196c:	f023 0312 	bic.w	r3, r3, #18
 8001970:	f043 0310 	orr.w	r3, r3, #16
 8001974:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001976:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 800197e:	2001      	movs	r0, #1
 8001980:	e027      	b.n	80019d2 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8001982:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001984:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8001988:	f7fe fddc 	bl	8000544 <HAL_ADC_MspInit>
 800198c:	e7ab      	b.n	80018e6 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800198e:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8001992:	e7c6      	b.n	8001922 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001994:	b931      	cbnz	r1, 80019a4 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001996:	69a1      	ldr	r1, [r4, #24]
 8001998:	3901      	subs	r1, #1
 800199a:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 800199e:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 80019a2:	e7c1      	b.n	8001928 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80019a6:	f041 0120 	orr.w	r1, r1, #32
 80019aa:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80019ae:	f041 0101 	orr.w	r1, r1, #1
 80019b2:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80019b4:	e7b8      	b.n	8001928 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 80019b6:	2300      	movs	r3, #0
 80019b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80019ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80019bc:	f023 0303 	bic.w	r3, r3, #3
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80019c6:	e004      	b.n	80019d2 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80019d0:	2001      	movs	r0, #1
}
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80019d4:	2001      	movs	r0, #1
}
 80019d6:	4770      	bx	lr
 80019d8:	ffe1f7fd 	.word	0xffe1f7fd
 80019dc:	ff1f0efe 	.word	0xff1f0efe

080019e0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80019e0:	2800      	cmp	r0, #0
 80019e2:	db08      	blt.n	80019f6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	0109      	lsls	r1, r1, #4
 80019e6:	b2c9      	uxtb	r1, r1
 80019e8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80019ec:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80019f0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80019f4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	f000 000f 	and.w	r0, r0, #15
 80019fa:	0109      	lsls	r1, r1, #4
 80019fc:	b2c9      	uxtb	r1, r1
 80019fe:	4b01      	ldr	r3, [pc, #4]	@ (8001a04 <__NVIC_SetPriority+0x24>)
 8001a00:	5419      	strb	r1, [r3, r0]
  }
}
 8001a02:	4770      	bx	lr
 8001a04:	e000ed14 	.word	0xe000ed14

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0e:	f1c0 0c07 	rsb	ip, r0, #7
 8001a12:	f1bc 0f04 	cmp.w	ip, #4
 8001a16:	bf28      	it	cs
 8001a18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1c:	1d03      	adds	r3, r0, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d90f      	bls.n	8001a42 <NVIC_EncodePriority+0x3a>
 8001a22:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 3eff 	mov.w	lr, #4294967295
 8001a28:	fa0e f00c 	lsl.w	r0, lr, ip
 8001a2c:	ea21 0100 	bic.w	r1, r1, r0
 8001a30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a32:	fa0e fe03 	lsl.w	lr, lr, r3
 8001a36:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001a3a:	ea41 0002 	orr.w	r0, r1, r2
 8001a3e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	2300      	movs	r3, #0
 8001a44:	e7ee      	b.n	8001a24 <NVIC_EncodePriority+0x1c>
	...

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4a07      	ldr	r2, [pc, #28]	@ (8001a68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a54:	0200      	lsls	r0, r0, #8
 8001a56:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001a64:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_NVIC_SetPriority+0x1c>)
 8001a72:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a74:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001a78:	f7ff ffc6 	bl	8001a08 <NVIC_EncodePriority>
 8001a7c:	4601      	mov	r1, r0
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff ffae 	bl	80019e0 <__NVIC_SetPriority>
}
 8001a84:	bd10      	pop	{r4, pc}
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	db07      	blt.n	8001aa0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a90:	f000 021f 	and.w	r2, r0, #31
 8001a94:	0940      	lsrs	r0, r0, #5
 8001a96:	2301      	movs	r3, #1
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	4a02      	ldr	r2, [pc, #8]	@ (8001aa4 <HAL_NVIC_EnableIRQ+0x18>)
 8001a9c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	3801      	subs	r0, #1
 8001aaa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001aae:	d20b      	bcs.n	8001ac8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001ab4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <HAL_SYSTICK_Config+0x24>)
 8001ab8:	21f0      	movs	r1, #240	@ 0xf0
 8001aba:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abe:	2000      	movs	r0, #0
 8001ac0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ac8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad0:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ad2:	2401      	movs	r4, #1
 8001ad4:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001ad6:	40ac      	lsls	r4, r5
 8001ad8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8001ada:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001adc:	6804      	ldr	r4, [r0, #0]
 8001ade:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ae0:	6843      	ldr	r3, [r0, #4]
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	d005      	beq.n	8001af2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ae6:	6803      	ldr	r3, [r0, #0]
 8001ae8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001aea:	6803      	ldr	r3, [r0, #0]
 8001aec:	60da      	str	r2, [r3, #12]
  }
}
 8001aee:	bc30      	pop	{r4, r5}
 8001af0:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001af2:	6803      	ldr	r3, [r0, #0]
 8001af4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001af6:	6803      	ldr	r3, [r0, #0]
 8001af8:	60d9      	str	r1, [r3, #12]
 8001afa:	e7f8      	b.n	8001aee <DMA_SetConfig+0x1e>

08001afc <HAL_DMA_Init>:
  if(hdma == NULL)
 8001afc:	b350      	cbz	r0, 8001b54 <HAL_DMA_Init+0x58>
{
 8001afe:	b410      	push	{r4}
 8001b00:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b02:	6801      	ldr	r1, [r0, #0]
 8001b04:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <HAL_DMA_Init+0x5c>)
 8001b06:	440b      	add	r3, r1
 8001b08:	4814      	ldr	r0, [pc, #80]	@ (8001b5c <HAL_DMA_Init+0x60>)
 8001b0a:	fba0 0303 	umull	r0, r3, r0, r3
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_DMA_Init+0x64>)
 8001b16:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8001b1e:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b20:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 8001b24:	6853      	ldr	r3, [r2, #4]
 8001b26:	6894      	ldr	r4, [r2, #8]
 8001b28:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2a:	68d4      	ldr	r4, [r2, #12]
 8001b2c:	4323      	orrs	r3, r4
 8001b2e:	6914      	ldr	r4, [r2, #16]
 8001b30:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b32:	6954      	ldr	r4, [r2, #20]
 8001b34:	4323      	orrs	r3, r4
 8001b36:	6994      	ldr	r4, [r2, #24]
 8001b38:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3a:	69d4      	ldr	r4, [r2, #28]
 8001b3c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001b3e:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001b40:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b42:	2000      	movs	r0, #0
 8001b44:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001b46:	2301      	movs	r3, #1
 8001b48:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001b4c:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001b50:	bc10      	pop	{r4}
 8001b52:	4770      	bx	lr
    return HAL_ERROR;
 8001b54:	2001      	movs	r0, #1
}
 8001b56:	4770      	bx	lr
 8001b58:	bffdfff8 	.word	0xbffdfff8
 8001b5c:	cccccccd 	.word	0xcccccccd
 8001b60:	40020000 	.word	0x40020000

08001b64 <HAL_DMA_Start_IT>:
{
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001b68:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001b6c:	2801      	cmp	r0, #1
 8001b6e:	d032      	beq.n	8001bd6 <HAL_DMA_Start_IT+0x72>
 8001b70:	2001      	movs	r0, #1
 8001b72:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b76:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8001b7a:	b2c0      	uxtb	r0, r0
 8001b7c:	2801      	cmp	r0, #1
 8001b7e:	d004      	beq.n	8001b8a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8001b80:	2300      	movs	r3, #0
 8001b82:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8001b86:	2002      	movs	r0, #2
}
 8001b88:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b90:	2000      	movs	r0, #0
 8001b92:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8001b94:	6825      	ldr	r5, [r4, #0]
 8001b96:	6828      	ldr	r0, [r5, #0]
 8001b98:	f020 0001 	bic.w	r0, r0, #1
 8001b9c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff ff96 	bl	8001ad0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8001ba4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001ba6:	b15b      	cbz	r3, 8001bc0 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	f043 030e 	orr.w	r3, r3, #14
 8001bb0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bb2:	6822      	ldr	r2, [r4, #0]
 8001bb4:	6813      	ldr	r3, [r2, #0]
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	e7e3      	b.n	8001b88 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	6813      	ldr	r3, [r2, #0]
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	6813      	ldr	r3, [r2, #0]
 8001bce:	f043 030a 	orr.w	r3, r3, #10
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e7ed      	b.n	8001bb2 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	e7d6      	b.n	8001b88 <HAL_DMA_Start_IT+0x24>

08001bda <HAL_DMA_Abort>:
{
 8001bda:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bdc:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	2a02      	cmp	r2, #2
 8001be4:	d006      	beq.n	8001bf4 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be6:	2204      	movs	r2, #4
 8001be8:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf4:	6801      	ldr	r1, [r0, #0]
 8001bf6:	680a      	ldr	r2, [r1, #0]
 8001bf8:	f022 020e 	bic.w	r2, r2, #14
 8001bfc:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001bfe:	6801      	ldr	r1, [r0, #0]
 8001c00:	680a      	ldr	r2, [r1, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c08:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001c0a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001c14:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f883 0020 	strb.w	r0, [r3, #32]
}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_DMA_Abort_IT>:
{  
 8001c20:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c22:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8001c30:	2001      	movs	r0, #1
}
 8001c32:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c34:	6802      	ldr	r2, [r0, #0]
 8001c36:	6813      	ldr	r3, [r2, #0]
 8001c38:	f023 030e 	bic.w	r3, r3, #14
 8001c3c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c3e:	6802      	ldr	r2, [r0, #0]
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c48:	6803      	ldr	r3, [r0, #0]
 8001c4a:	4a19      	ldr	r2, [pc, #100]	@ (8001cb0 <HAL_DMA_Abort_IT+0x90>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d014      	beq.n	8001c7a <HAL_DMA_Abort_IT+0x5a>
 8001c50:	3214      	adds	r2, #20
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_DMA_Abort_IT+0x76>
 8001c56:	3214      	adds	r2, #20
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d01e      	beq.n	8001c9a <HAL_DMA_Abort_IT+0x7a>
 8001c5c:	3214      	adds	r2, #20
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01e      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x80>
 8001c62:	3214      	adds	r2, #20
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d01e      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0x86>
 8001c68:	3214      	adds	r2, #20
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d002      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x54>
 8001c6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c72:	e003      	b.n	8001c7c <HAL_DMA_Abort_IT+0x5c>
 8001c74:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c78:	e000      	b.n	8001c7c <HAL_DMA_Abort_IT+0x5c>
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_DMA_Abort_IT+0x94>)
 8001c7e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001c86:	2300      	movs	r3, #0
 8001c88:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001c8c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001c8e:	b16b      	cbz	r3, 8001cac <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 8001c90:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7cd      	b.n	8001c32 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c96:	2210      	movs	r2, #16
 8001c98:	e7f0      	b.n	8001c7c <HAL_DMA_Abort_IT+0x5c>
 8001c9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c9e:	e7ed      	b.n	8001c7c <HAL_DMA_Abort_IT+0x5c>
 8001ca0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ca4:	e7ea      	b.n	8001c7c <HAL_DMA_Abort_IT+0x5c>
 8001ca6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001caa:	e7e7      	b.n	8001c7c <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8001cac:	2000      	movs	r0, #0
 8001cae:	e7c0      	b.n	8001c32 <HAL_DMA_Abort_IT+0x12>
 8001cb0:	40020008 	.word	0x40020008
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <HAL_DMA_IRQHandler>:
{
 8001cb8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cba:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001cbc:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001cbe:	6804      	ldr	r4, [r0, #0]
 8001cc0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cc2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	408b      	lsls	r3, r1
 8001cc8:	4213      	tst	r3, r2
 8001cca:	d035      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x80>
 8001ccc:	f015 0f04 	tst.w	r5, #4
 8001cd0:	d032      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	f013 0f20 	tst.w	r3, #32
 8001cd8:	d103      	bne.n	8001ce2 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ce2:	6803      	ldr	r3, [r0, #0]
 8001ce4:	4a43      	ldr	r2, [pc, #268]	@ (8001df4 <HAL_DMA_IRQHandler+0x13c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d014      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x5c>
 8001cea:	3214      	adds	r2, #20
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d018      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x6a>
 8001cf0:	3214      	adds	r2, #20
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d017      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x6e>
 8001cf6:	3214      	adds	r2, #20
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d017      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x74>
 8001cfc:	3214      	adds	r2, #20
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d017      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x7a>
 8001d02:	3214      	adds	r2, #20
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d002      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x56>
 8001d08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d0c:	e003      	b.n	8001d16 <HAL_DMA_IRQHandler+0x5e>
 8001d0e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d12:	e000      	b.n	8001d16 <HAL_DMA_IRQHandler+0x5e>
 8001d14:	2204      	movs	r2, #4
 8001d16:	4b38      	ldr	r3, [pc, #224]	@ (8001df8 <HAL_DMA_IRQHandler+0x140>)
 8001d18:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001d1a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001d1c:	b103      	cbz	r3, 8001d20 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8001d1e:	4798      	blx	r3
}
 8001d20:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d22:	2240      	movs	r2, #64	@ 0x40
 8001d24:	e7f7      	b.n	8001d16 <HAL_DMA_IRQHandler+0x5e>
 8001d26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d2a:	e7f4      	b.n	8001d16 <HAL_DMA_IRQHandler+0x5e>
 8001d2c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d30:	e7f1      	b.n	8001d16 <HAL_DMA_IRQHandler+0x5e>
 8001d32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d36:	e7ee      	b.n	8001d16 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d38:	2302      	movs	r3, #2
 8001d3a:	408b      	lsls	r3, r1
 8001d3c:	4213      	tst	r3, r2
 8001d3e:	d03c      	beq.n	8001dba <HAL_DMA_IRQHandler+0x102>
 8001d40:	f015 0f02 	tst.w	r5, #2
 8001d44:	d039      	beq.n	8001dba <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	f013 0f20 	tst.w	r3, #32
 8001d4c:	d106      	bne.n	8001d5c <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	f023 030a 	bic.w	r3, r3, #10
 8001d54:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d5c:	6803      	ldr	r3, [r0, #0]
 8001d5e:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <HAL_DMA_IRQHandler+0x13c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d014      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xd6>
 8001d64:	3214      	adds	r2, #20
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01c      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xec>
 8001d6a:	3214      	adds	r2, #20
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d01b      	beq.n	8001da8 <HAL_DMA_IRQHandler+0xf0>
 8001d70:	3214      	adds	r2, #20
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01b      	beq.n	8001dae <HAL_DMA_IRQHandler+0xf6>
 8001d76:	3214      	adds	r2, #20
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d01b      	beq.n	8001db4 <HAL_DMA_IRQHandler+0xfc>
 8001d7c:	3214      	adds	r2, #20
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d002      	beq.n	8001d88 <HAL_DMA_IRQHandler+0xd0>
 8001d82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d86:	e003      	b.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
 8001d88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d8c:	e000      	b.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_DMA_IRQHandler+0x140>)
 8001d92:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001d94:	2300      	movs	r3, #0
 8001d96:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001d9a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0bf      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8001da0:	4798      	blx	r3
 8001da2:	e7bd      	b.n	8001d20 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001da4:	2220      	movs	r2, #32
 8001da6:	e7f3      	b.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
 8001da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dac:	e7f0      	b.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
 8001dae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001db2:	e7ed      	b.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
 8001db4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001db8:	e7ea      	b.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dba:	2308      	movs	r3, #8
 8001dbc:	408b      	lsls	r3, r1
 8001dbe:	4213      	tst	r3, r2
 8001dc0:	d0ae      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x68>
 8001dc2:	f015 0f08 	tst.w	r5, #8
 8001dc6:	d0ab      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	f023 030e 	bic.w	r3, r3, #14
 8001dce:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dd0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001dd2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	fa03 f202 	lsl.w	r2, r3, r2
 8001dda:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ddc:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001dde:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001de2:	2300      	movs	r3, #0
 8001de4:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001de8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d098      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8001dee:	4798      	blx	r3
  return;
 8001df0:	e796      	b.n	8001d20 <HAL_DMA_IRQHandler+0x68>
 8001df2:	bf00      	nop
 8001df4:	40020008 	.word	0x40020008
 8001df8:	40020000 	.word	0x40020000

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e00:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001e02:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e04:	e0a1      	b.n	8001f4a <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e06:	4d7e      	ldr	r5, [pc, #504]	@ (8002000 <HAL_GPIO_Init+0x204>)
 8001e08:	42ab      	cmp	r3, r5
 8001e0a:	d014      	beq.n	8001e36 <HAL_GPIO_Init+0x3a>
 8001e0c:	d80c      	bhi.n	8001e28 <HAL_GPIO_Init+0x2c>
 8001e0e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001e12:	42ab      	cmp	r3, r5
 8001e14:	d00f      	beq.n	8001e36 <HAL_GPIO_Init+0x3a>
 8001e16:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8001e1a:	42ab      	cmp	r3, r5
 8001e1c:	d00b      	beq.n	8001e36 <HAL_GPIO_Init+0x3a>
 8001e1e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001e22:	42ab      	cmp	r3, r5
 8001e24:	d110      	bne.n	8001e48 <HAL_GPIO_Init+0x4c>
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_Init+0x3a>
 8001e28:	4d76      	ldr	r5, [pc, #472]	@ (8002004 <HAL_GPIO_Init+0x208>)
 8001e2a:	42ab      	cmp	r3, r5
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x3a>
 8001e2e:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8001e32:	42ab      	cmp	r3, r5
 8001e34:	d108      	bne.n	8001e48 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e36:	688b      	ldr	r3, [r1, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d050      	beq.n	8001ede <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d049      	beq.n	8001ed4 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001e40:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e42:	2408      	movs	r4, #8
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e46:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e48:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8001e4c:	d849      	bhi.n	8001ee2 <HAL_GPIO_Init+0xe6>
 8001e4e:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e54:	6833      	ldr	r3, [r6, #0]
 8001e56:	250f      	movs	r5, #15
 8001e58:	4095      	lsls	r5, r2
 8001e5a:	ea23 0305 	bic.w	r3, r3, r5
 8001e5e:	fa04 f202 	lsl.w	r2, r4, r2
 8001e62:	4313      	orrs	r3, r2
 8001e64:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e66:	684b      	ldr	r3, [r1, #4]
 8001e68:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001e6c:	d06b      	beq.n	8001f46 <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e6e:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <HAL_GPIO_Init+0x20c>)
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	619a      	str	r2, [r3, #24]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001e82:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001e86:	1c95      	adds	r5, r2, #2
 8001e88:	4b60      	ldr	r3, [pc, #384]	@ (800200c <HAL_GPIO_Init+0x210>)
 8001e8a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e8e:	f00c 0503 	and.w	r5, ip, #3
 8001e92:	00ad      	lsls	r5, r5, #2
 8001e94:	230f      	movs	r3, #15
 8001e96:	40ab      	lsls	r3, r5
 8001e98:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e9c:	4b5c      	ldr	r3, [pc, #368]	@ (8002010 <HAL_GPIO_Init+0x214>)
 8001e9e:	4298      	cmp	r0, r3
 8001ea0:	d026      	beq.n	8001ef0 <HAL_GPIO_Init+0xf4>
 8001ea2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ea6:	4298      	cmp	r0, r3
 8001ea8:	f000 808c 	beq.w	8001fc4 <HAL_GPIO_Init+0x1c8>
 8001eac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eb0:	4298      	cmp	r0, r3
 8001eb2:	f000 8089 	beq.w	8001fc8 <HAL_GPIO_Init+0x1cc>
 8001eb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eba:	4298      	cmp	r0, r3
 8001ebc:	d016      	beq.n	8001eec <HAL_GPIO_Init+0xf0>
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	e017      	b.n	8001ef2 <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec2:	68cc      	ldr	r4, [r1, #12]
 8001ec4:	3404      	adds	r4, #4
          break;
 8001ec6:	e7bf      	b.n	8001e48 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ec8:	68cc      	ldr	r4, [r1, #12]
 8001eca:	3408      	adds	r4, #8
          break;
 8001ecc:	e7bc      	b.n	8001e48 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ece:	68cc      	ldr	r4, [r1, #12]
 8001ed0:	340c      	adds	r4, #12
          break;
 8001ed2:	e7b9      	b.n	8001e48 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8001ed4:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed6:	2408      	movs	r4, #8
 8001ed8:	e7b6      	b.n	8001e48 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eda:	2400      	movs	r4, #0
 8001edc:	e7b4      	b.n	8001e48 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ede:	2404      	movs	r4, #4
 8001ee0:	e7b2      	b.n	8001e48 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee2:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee4:	f1ac 0208 	sub.w	r2, ip, #8
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	e7b3      	b.n	8001e54 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eec:	2303      	movs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <HAL_GPIO_Init+0xf6>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	40ab      	lsls	r3, r5
 8001ef4:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001ef6:	3202      	adds	r2, #2
 8001ef8:	4d44      	ldr	r5, [pc, #272]	@ (800200c <HAL_GPIO_Init+0x210>)
 8001efa:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001efe:	684b      	ldr	r3, [r1, #4]
 8001f00:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001f04:	d062      	beq.n	8001fcc <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f06:	4a43      	ldr	r2, [pc, #268]	@ (8002014 <HAL_GPIO_Init+0x218>)
 8001f08:	6893      	ldr	r3, [r2, #8]
 8001f0a:	ea43 030e 	orr.w	r3, r3, lr
 8001f0e:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f10:	684b      	ldr	r3, [r1, #4]
 8001f12:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001f16:	d05f      	beq.n	8001fd8 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f18:	4a3e      	ldr	r2, [pc, #248]	@ (8002014 <HAL_GPIO_Init+0x218>)
 8001f1a:	68d3      	ldr	r3, [r2, #12]
 8001f1c:	ea43 030e 	orr.w	r3, r3, lr
 8001f20:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f22:	684b      	ldr	r3, [r1, #4]
 8001f24:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001f28:	d05c      	beq.n	8001fe4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f2a:	4a3a      	ldr	r2, [pc, #232]	@ (8002014 <HAL_GPIO_Init+0x218>)
 8001f2c:	6853      	ldr	r3, [r2, #4]
 8001f2e:	ea43 030e 	orr.w	r3, r3, lr
 8001f32:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f34:	684b      	ldr	r3, [r1, #4]
 8001f36:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001f3a:	d059      	beq.n	8001ff0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4a35      	ldr	r2, [pc, #212]	@ (8002014 <HAL_GPIO_Init+0x218>)
 8001f3e:	6813      	ldr	r3, [r2, #0]
 8001f40:	ea43 030e 	orr.w	r3, r3, lr
 8001f44:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001f46:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4a:	680b      	ldr	r3, [r1, #0]
 8001f4c:	fa33 f20c 	lsrs.w	r2, r3, ip
 8001f50:	d054      	beq.n	8001ffc <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8001f52:	2201      	movs	r2, #1
 8001f54:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f58:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8001f5c:	ea32 0303 	bics.w	r3, r2, r3
 8001f60:	d1f1      	bne.n	8001f46 <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8001f62:	684b      	ldr	r3, [r1, #4]
 8001f64:	2b12      	cmp	r3, #18
 8001f66:	f63f af4e 	bhi.w	8001e06 <HAL_GPIO_Init+0xa>
 8001f6a:	2b12      	cmp	r3, #18
 8001f6c:	f63f af6c 	bhi.w	8001e48 <HAL_GPIO_Init+0x4c>
 8001f70:	a501      	add	r5, pc, #4	@ (adr r5, 8001f78 <HAL_GPIO_Init+0x17c>)
 8001f72:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001e37 	.word	0x08001e37
 8001f7c:	08001e47 	.word	0x08001e47
 8001f80:	08001ec9 	.word	0x08001ec9
 8001f84:	08001edb 	.word	0x08001edb
 8001f88:	08001e49 	.word	0x08001e49
 8001f8c:	08001e49 	.word	0x08001e49
 8001f90:	08001e49 	.word	0x08001e49
 8001f94:	08001e49 	.word	0x08001e49
 8001f98:	08001e49 	.word	0x08001e49
 8001f9c:	08001e49 	.word	0x08001e49
 8001fa0:	08001e49 	.word	0x08001e49
 8001fa4:	08001e49 	.word	0x08001e49
 8001fa8:	08001e49 	.word	0x08001e49
 8001fac:	08001e49 	.word	0x08001e49
 8001fb0:	08001e49 	.word	0x08001e49
 8001fb4:	08001e49 	.word	0x08001e49
 8001fb8:	08001e49 	.word	0x08001e49
 8001fbc:	08001ec3 	.word	0x08001ec3
 8001fc0:	08001ecf 	.word	0x08001ecf
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e794      	b.n	8001ef2 <HAL_GPIO_Init+0xf6>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e792      	b.n	8001ef2 <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fcc:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <HAL_GPIO_Init+0x218>)
 8001fce:	6893      	ldr	r3, [r2, #8]
 8001fd0:	ea23 030e 	bic.w	r3, r3, lr
 8001fd4:	6093      	str	r3, [r2, #8]
 8001fd6:	e79b      	b.n	8001f10 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8002014 <HAL_GPIO_Init+0x218>)
 8001fda:	68d3      	ldr	r3, [r2, #12]
 8001fdc:	ea23 030e 	bic.w	r3, r3, lr
 8001fe0:	60d3      	str	r3, [r2, #12]
 8001fe2:	e79e      	b.n	8001f22 <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <HAL_GPIO_Init+0x218>)
 8001fe6:	6853      	ldr	r3, [r2, #4]
 8001fe8:	ea23 030e 	bic.w	r3, r3, lr
 8001fec:	6053      	str	r3, [r2, #4]
 8001fee:	e7a1      	b.n	8001f34 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff0:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <HAL_GPIO_Init+0x218>)
 8001ff2:	6813      	ldr	r3, [r2, #0]
 8001ff4:	ea23 030e 	bic.w	r3, r3, lr
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e7a4      	b.n	8001f46 <HAL_GPIO_Init+0x14a>
  }
}
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
 8002000:	10220000 	.word	0x10220000
 8002004:	10310000 	.word	0x10310000
 8002008:	40021000 	.word	0x40021000
 800200c:	40010000 	.word	0x40010000
 8002010:	40010800 	.word	0x40010800
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002018:	6883      	ldr	r3, [r0, #8]
 800201a:	4219      	tst	r1, r3
 800201c:	d001      	beq.n	8002022 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800201e:	2001      	movs	r0, #1
 8002020:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002022:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002024:	4770      	bx	lr

08002026 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002026:	b10a      	cbz	r2, 800202c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002028:	6101      	str	r1, [r0, #16]
 800202a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800202c:	0409      	lsls	r1, r1, #16
 800202e:	6101      	str	r1, [r0, #16]
  }
}
 8002030:	4770      	bx	lr

08002032 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002032:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002034:	ea01 0203 	and.w	r2, r1, r3
 8002038:	ea21 0103 	bic.w	r1, r1, r3
 800203c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002040:	6101      	str	r1, [r0, #16]
}
 8002042:	4770      	bx	lr

08002044 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002044:	4b01      	ldr	r3, [pc, #4]	@ (800204c <HAL_PWR_EnableBkUpAccess+0x8>)
 8002046:	2201      	movs	r2, #1
 8002048:	621a      	str	r2, [r3, #32]
}
 800204a:	4770      	bx	lr
 800204c:	420e0000 	.word	0x420e0000

08002050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002050:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002052:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <RCC_Delay+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <RCC_Delay+0x28>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	0a5b      	lsrs	r3, r3, #9
 800205e:	fb00 f303 	mul.w	r3, r0, r3
 8002062:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002064:	bf00      	nop
  }
  while (Delay --);
 8002066:	9b01      	ldr	r3, [sp, #4]
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	9201      	str	r2, [sp, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f9      	bne.n	8002064 <RCC_Delay+0x14>
}
 8002070:	b002      	add	sp, #8
 8002072:	4770      	bx	lr
 8002074:	2000009c 	.word	0x2000009c
 8002078:	10624dd3 	.word	0x10624dd3

0800207c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800207c:	2800      	cmp	r0, #0
 800207e:	f000 81f1 	beq.w	8002464 <HAL_RCC_OscConfig+0x3e8>
{
 8002082:	b570      	push	{r4, r5, r6, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002088:	6803      	ldr	r3, [r0, #0]
 800208a:	f013 0f01 	tst.w	r3, #1
 800208e:	d02c      	beq.n	80020ea <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002090:	4b99      	ldr	r3, [pc, #612]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d01d      	beq.n	80020d8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800209c:	4b96      	ldr	r3, [pc, #600]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d012      	beq.n	80020ce <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ae:	d041      	beq.n	8002134 <HAL_RCC_OscConfig+0xb8>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d155      	bne.n	8002160 <HAL_RCC_OscConfig+0xe4>
 80020b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80020b8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e037      	b.n	800213e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ce:	4b8a      	ldr	r3, [pc, #552]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80020d6:	d0e7      	beq.n	80020a8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	4b87      	ldr	r3, [pc, #540]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_OscConfig+0x6e>
 80020e2:	6863      	ldr	r3, [r4, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 81bf 	beq.w	8002468 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	f013 0f02 	tst.w	r3, #2
 80020f0:	d075      	beq.n	80021de <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f2:	4b81      	ldr	r3, [pc, #516]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f013 0f0c 	tst.w	r3, #12
 80020fa:	d05f      	beq.n	80021bc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020fc:	4b7e      	ldr	r3, [pc, #504]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d054      	beq.n	80021b2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002108:	6923      	ldr	r3, [r4, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 808a 	beq.w	8002224 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002110:	4b7a      	ldr	r3, [pc, #488]	@ (80022fc <HAL_RCC_OscConfig+0x280>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002116:	f7ff f9df 	bl	80014d8 <HAL_GetTick>
 800211a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b76      	ldr	r3, [pc, #472]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f013 0f02 	tst.w	r3, #2
 8002124:	d175      	bne.n	8002212 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002126:	f7ff f9d7 	bl	80014d8 <HAL_GetTick>
 800212a:	1b40      	subs	r0, r0, r5
 800212c:	2802      	cmp	r0, #2
 800212e:	d9f5      	bls.n	800211c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002130:	2003      	movs	r0, #3
 8002132:	e19e      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	4a70      	ldr	r2, [pc, #448]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002136:	6813      	ldr	r3, [r2, #0]
 8002138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213e:	6863      	ldr	r3, [r4, #4]
 8002140:	b343      	cbz	r3, 8002194 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002142:	f7ff f9c9 	bl	80014d8 <HAL_GetTick>
 8002146:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002148:	4b6b      	ldr	r3, [pc, #428]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002150:	d1cb      	bne.n	80020ea <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002152:	f7ff f9c1 	bl	80014d8 <HAL_GetTick>
 8002156:	1b40      	subs	r0, r0, r5
 8002158:	2864      	cmp	r0, #100	@ 0x64
 800215a:	d9f5      	bls.n	8002148 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800215c:	2003      	movs	r0, #3
 800215e:	e188      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002164:	d009      	beq.n	800217a <HAL_RCC_OscConfig+0xfe>
 8002166:	4b64      	ldr	r3, [pc, #400]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e7e1      	b.n	800213e <HAL_RCC_OscConfig+0xc2>
 800217a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800217e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e7d4      	b.n	800213e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002194:	f7ff f9a0 	bl	80014d8 <HAL_GetTick>
 8002198:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b57      	ldr	r3, [pc, #348]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021a2:	d0a2      	beq.n	80020ea <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff f998 	bl	80014d8 <HAL_GetTick>
 80021a8:	1b40      	subs	r0, r0, r5
 80021aa:	2864      	cmp	r0, #100	@ 0x64
 80021ac:	d9f5      	bls.n	800219a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80021ae:	2003      	movs	r0, #3
 80021b0:	e15f      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021b2:	4b51      	ldr	r3, [pc, #324]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80021ba:	d1a5      	bne.n	8002108 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021bc:	4b4e      	ldr	r3, [pc, #312]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f013 0f02 	tst.w	r3, #2
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_OscConfig+0x152>
 80021c6:	6923      	ldr	r3, [r4, #16]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	f040 814f 	bne.w	800246c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ce:	4a4a      	ldr	r2, [pc, #296]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	6813      	ldr	r3, [r2, #0]
 80021d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80021d6:	6961      	ldr	r1, [r4, #20]
 80021d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021dc:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	f013 0f08 	tst.w	r3, #8
 80021e4:	d033      	beq.n	800224e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e6:	69a3      	ldr	r3, [r4, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d05c      	beq.n	80022a6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80021ec:	4b43      	ldr	r3, [pc, #268]	@ (80022fc <HAL_RCC_OscConfig+0x280>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80021f4:	f7ff f970 	bl	80014d8 <HAL_GetTick>
 80021f8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b3f      	ldr	r3, [pc, #252]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	f013 0f02 	tst.w	r3, #2
 8002202:	d121      	bne.n	8002248 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7ff f968 	bl	80014d8 <HAL_GetTick>
 8002208:	1b40      	subs	r0, r0, r5
 800220a:	2802      	cmp	r0, #2
 800220c:	d9f5      	bls.n	80021fa <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800220e:	2003      	movs	r0, #3
 8002210:	e12f      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002212:	4a39      	ldr	r2, [pc, #228]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800221a:	6961      	ldr	r1, [r4, #20]
 800221c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e7dc      	b.n	80021de <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002224:	4b35      	ldr	r3, [pc, #212]	@ (80022fc <HAL_RCC_OscConfig+0x280>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800222a:	f7ff f955 	bl	80014d8 <HAL_GetTick>
 800222e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002230:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f013 0f02 	tst.w	r3, #2
 8002238:	d0d1      	beq.n	80021de <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223a:	f7ff f94d 	bl	80014d8 <HAL_GetTick>
 800223e:	1b40      	subs	r0, r0, r5
 8002240:	2802      	cmp	r0, #2
 8002242:	d9f5      	bls.n	8002230 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002244:	2003      	movs	r0, #3
 8002246:	e114      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff ff01 	bl	8002050 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	f013 0f04 	tst.w	r3, #4
 8002254:	f000 8096 	beq.w	8002384 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002258:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002260:	d134      	bne.n	80022cc <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002264:	69da      	ldr	r2, [r3, #28]
 8002266:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800226a:	61da      	str	r2, [r3, #28]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002276:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_RCC_OscConfig+0x284>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002280:	d026      	beq.n	80022d0 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002282:	68e3      	ldr	r3, [r4, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d03d      	beq.n	8002304 <HAL_RCC_OscConfig+0x288>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d153      	bne.n	8002334 <HAL_RCC_OscConfig+0x2b8>
 800228c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002290:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002294:	6a1a      	ldr	r2, [r3, #32]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	621a      	str	r2, [r3, #32]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	f022 0204 	bic.w	r2, r2, #4
 80022a2:	621a      	str	r2, [r3, #32]
 80022a4:	e033      	b.n	800230e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80022a6:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <HAL_RCC_OscConfig+0x280>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80022ae:	f7ff f913 	bl	80014d8 <HAL_GetTick>
 80022b2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	f013 0f02 	tst.w	r3, #2
 80022bc:	d0c7      	beq.n	800224e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022be:	f7ff f90b 	bl	80014d8 <HAL_GetTick>
 80022c2:	1b40      	subs	r0, r0, r5
 80022c4:	2802      	cmp	r0, #2
 80022c6:	d9f5      	bls.n	80022b4 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80022c8:	2003      	movs	r0, #3
 80022ca:	e0d2      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80022cc:	2500      	movs	r5, #0
 80022ce:	e7d3      	b.n	8002278 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002300 <HAL_RCC_OscConfig+0x284>)
 80022d2:	6813      	ldr	r3, [r2, #0]
 80022d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022da:	f7ff f8fd 	bl	80014d8 <HAL_GetTick>
 80022de:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <HAL_RCC_OscConfig+0x284>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80022e8:	d1cb      	bne.n	8002282 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ea:	f7ff f8f5 	bl	80014d8 <HAL_GetTick>
 80022ee:	1b80      	subs	r0, r0, r6
 80022f0:	2864      	cmp	r0, #100	@ 0x64
 80022f2:	d9f5      	bls.n	80022e0 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80022f4:	2003      	movs	r0, #3
 80022f6:	e0bc      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
 80022f8:	40021000 	.word	0x40021000
 80022fc:	42420000 	.word	0x42420000
 8002300:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	4a5f      	ldr	r2, [pc, #380]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 8002306:	6a13      	ldr	r3, [r2, #32]
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800230e:	68e3      	ldr	r3, [r4, #12]
 8002310:	b333      	cbz	r3, 8002360 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8002312:	f7ff f8e1 	bl	80014d8 <HAL_GetTick>
 8002316:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	4b5a      	ldr	r3, [pc, #360]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f013 0f02 	tst.w	r3, #2
 8002320:	d12f      	bne.n	8002382 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7ff f8d9 	bl	80014d8 <HAL_GetTick>
 8002326:	1b80      	subs	r0, r0, r6
 8002328:	f241 3388 	movw	r3, #5000	@ 0x1388
 800232c:	4298      	cmp	r0, r3
 800232e:	d9f3      	bls.n	8002318 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002330:	2003      	movs	r0, #3
 8002332:	e09e      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002334:	2b05      	cmp	r3, #5
 8002336:	d009      	beq.n	800234c <HAL_RCC_OscConfig+0x2d0>
 8002338:	4b52      	ldr	r3, [pc, #328]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	621a      	str	r2, [r3, #32]
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	f022 0204 	bic.w	r2, r2, #4
 8002348:	621a      	str	r2, [r3, #32]
 800234a:	e7e0      	b.n	800230e <HAL_RCC_OscConfig+0x292>
 800234c:	4b4d      	ldr	r3, [pc, #308]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	f042 0204 	orr.w	r2, r2, #4
 8002354:	621a      	str	r2, [r3, #32]
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	621a      	str	r2, [r3, #32]
 800235e:	e7d6      	b.n	800230e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002360:	f7ff f8ba 	bl	80014d8 <HAL_GetTick>
 8002364:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f013 0f02 	tst.w	r3, #2
 800236e:	d008      	beq.n	8002382 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7ff f8b2 	bl	80014d8 <HAL_GetTick>
 8002374:	1b80      	subs	r0, r0, r6
 8002376:	f241 3388 	movw	r3, #5000	@ 0x1388
 800237a:	4298      	cmp	r0, r3
 800237c:	d9f3      	bls.n	8002366 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800237e:	2003      	movs	r0, #3
 8002380:	e077      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8002382:	b9e5      	cbnz	r5, 80023be <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002384:	69e3      	ldr	r3, [r4, #28]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d072      	beq.n	8002470 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800238a:	4a3e      	ldr	r2, [pc, #248]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 800238c:	6852      	ldr	r2, [r2, #4]
 800238e:	f002 020c 	and.w	r2, r2, #12
 8002392:	2a08      	cmp	r2, #8
 8002394:	d056      	beq.n	8002444 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002396:	2b02      	cmp	r3, #2
 8002398:	d017      	beq.n	80023ca <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b3b      	ldr	r3, [pc, #236]	@ (8002488 <HAL_RCC_OscConfig+0x40c>)
 800239c:	2200      	movs	r2, #0
 800239e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80023a0:	f7ff f89a 	bl	80014d8 <HAL_GetTick>
 80023a4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a6:	4b37      	ldr	r3, [pc, #220]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023ae:	d047      	beq.n	8002440 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff f892 	bl	80014d8 <HAL_GetTick>
 80023b4:	1b00      	subs	r0, r0, r4
 80023b6:	2802      	cmp	r0, #2
 80023b8:	d9f5      	bls.n	80023a6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80023ba:	2003      	movs	r0, #3
 80023bc:	e059      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4a31      	ldr	r2, [pc, #196]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 80023c0:	69d3      	ldr	r3, [r2, #28]
 80023c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	61d3      	str	r3, [r2, #28]
 80023c8:	e7dc      	b.n	8002384 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002488 <HAL_RCC_OscConfig+0x40c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80023d0:	f7ff f882 	bl	80014d8 <HAL_GetTick>
 80023d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023de:	d006      	beq.n	80023ee <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7ff f87a 	bl	80014d8 <HAL_GetTick>
 80023e4:	1b40      	subs	r0, r0, r5
 80023e6:	2802      	cmp	r0, #2
 80023e8:	d9f5      	bls.n	80023d6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80023ea:	2003      	movs	r0, #3
 80023ec:	e041      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023ee:	6a23      	ldr	r3, [r4, #32]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f4:	d01a      	beq.n	800242c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f6:	4923      	ldr	r1, [pc, #140]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 80023f8:	684b      	ldr	r3, [r1, #4]
 80023fa:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80023fe:	6a22      	ldr	r2, [r4, #32]
 8002400:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002402:	4302      	orrs	r2, r0
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002408:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <HAL_RCC_OscConfig+0x40c>)
 800240a:	2201      	movs	r2, #1
 800240c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800240e:	f7ff f863 	bl	80014d8 <HAL_GetTick>
 8002412:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002414:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800241c:	d10e      	bne.n	800243c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7ff f85b 	bl	80014d8 <HAL_GetTick>
 8002422:	1b00      	subs	r0, r0, r4
 8002424:	2802      	cmp	r0, #2
 8002426:	d9f5      	bls.n	8002414 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002428:	2003      	movs	r0, #3
 800242a:	e022      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800242c:	4a15      	ldr	r2, [pc, #84]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 800242e:	6853      	ldr	r3, [r2, #4]
 8002430:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002434:	68a1      	ldr	r1, [r4, #8]
 8002436:	430b      	orrs	r3, r1
 8002438:	6053      	str	r3, [r2, #4]
 800243a:	e7dc      	b.n	80023f6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800243c:	2000      	movs	r0, #0
 800243e:	e018      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
 8002440:	2000      	movs	r0, #0
 8002442:	e016      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002444:	2b01      	cmp	r3, #1
 8002446:	d016      	beq.n	8002476 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <HAL_RCC_OscConfig+0x408>)
 800244a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244c:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002450:	6a22      	ldr	r2, [r4, #32]
 8002452:	4291      	cmp	r1, r2
 8002454:	d111      	bne.n	800247a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002456:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800245a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245c:	4293      	cmp	r3, r2
 800245e:	d10e      	bne.n	800247e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002460:	2000      	movs	r0, #0
 8002462:	e006      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002464:	2001      	movs	r0, #1
}
 8002466:	4770      	bx	lr
        return HAL_ERROR;
 8002468:	2001      	movs	r0, #1
 800246a:	e002      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800246c:	2001      	movs	r0, #1
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002470:	2000      	movs	r0, #0
}
 8002472:	b002      	add	sp, #8
 8002474:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002476:	2001      	movs	r0, #1
 8002478:	e7fb      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800247a:	2001      	movs	r0, #1
 800247c:	e7f9      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
 800247e:	2001      	movs	r0, #1
 8002480:	e7f7      	b.n	8002472 <HAL_RCC_OscConfig+0x3f6>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	42420000 	.word	0x42420000

0800248c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800248c:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x40>)
 800248e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002490:	f003 020c 	and.w	r2, r3, #12
 8002494:	2a08      	cmp	r2, #8
 8002496:	d001      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002498:	480d      	ldr	r0, [pc, #52]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800249a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800249c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80024a0:	490c      	ldr	r1, [pc, #48]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x48>)
 80024a2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80024a8:	d00b      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024aa:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x40>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x4c>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024b6:	4a06      	ldr	r2, [pc, #24]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x44>)
 80024b8:	fb02 f000 	mul.w	r0, r2, r0
 80024bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80024c0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x50>)
 80024c4:	fb03 f000 	mul.w	r0, r3, r0
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	08004114 	.word	0x08004114
 80024d8:	08004110 	.word	0x08004110
 80024dc:	003d0900 	.word	0x003d0900

080024e0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80024e0:	2800      	cmp	r0, #0
 80024e2:	f000 80a0 	beq.w	8002626 <HAL_RCC_ClockConfig+0x146>
{
 80024e6:	b570      	push	{r4, r5, r6, lr}
 80024e8:	460d      	mov	r5, r1
 80024ea:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b52      	ldr	r3, [pc, #328]	@ (8002638 <HAL_RCC_ClockConfig+0x158>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	428b      	cmp	r3, r1
 80024f6:	d20b      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002638 <HAL_RCC_ClockConfig+0x158>)
 80024fa:	6813      	ldr	r3, [r2, #0]
 80024fc:	f023 0307 	bic.w	r3, r3, #7
 8002500:	430b      	orrs	r3, r1
 8002502:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002504:	6813      	ldr	r3, [r2, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	428b      	cmp	r3, r1
 800250c:	f040 808d 	bne.w	800262a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	f013 0f02 	tst.w	r3, #2
 8002516:	d017      	beq.n	8002548 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	f013 0f04 	tst.w	r3, #4
 800251c:	d004      	beq.n	8002528 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251e:	4a47      	ldr	r2, [pc, #284]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 8002520:	6853      	ldr	r3, [r2, #4]
 8002522:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002526:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	f013 0f08 	tst.w	r3, #8
 800252e:	d004      	beq.n	800253a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4a42      	ldr	r2, [pc, #264]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 8002532:	6853      	ldr	r3, [r2, #4]
 8002534:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002538:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253a:	4a40      	ldr	r2, [pc, #256]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 800253c:	6853      	ldr	r3, [r2, #4]
 800253e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002542:	68a1      	ldr	r1, [r4, #8]
 8002544:	430b      	orrs	r3, r1
 8002546:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	f013 0f01 	tst.w	r3, #1
 800254e:	d031      	beq.n	80025b4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002550:	6863      	ldr	r3, [r4, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d020      	beq.n	8002598 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002556:	2b02      	cmp	r3, #2
 8002558:	d025      	beq.n	80025a6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4a38      	ldr	r2, [pc, #224]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	f012 0f02 	tst.w	r2, #2
 8002562:	d064      	beq.n	800262e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002564:	4935      	ldr	r1, [pc, #212]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 8002566:	684a      	ldr	r2, [r1, #4]
 8002568:	f022 0203 	bic.w	r2, r2, #3
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002570:	f7fe ffb2 	bl	80014d8 <HAL_GetTick>
 8002574:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b31      	ldr	r3, [pc, #196]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	6862      	ldr	r2, [r4, #4]
 8002580:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002584:	d016      	beq.n	80025b4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002586:	f7fe ffa7 	bl	80014d8 <HAL_GetTick>
 800258a:	1b80      	subs	r0, r0, r6
 800258c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002590:	4298      	cmp	r0, r3
 8002592:	d9f0      	bls.n	8002576 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002594:	2003      	movs	r0, #3
 8002596:	e045      	b.n	8002624 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002598:	4a28      	ldr	r2, [pc, #160]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80025a0:	d1e0      	bne.n	8002564 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80025a2:	2001      	movs	r0, #1
 80025a4:	e03e      	b.n	8002624 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4a25      	ldr	r2, [pc, #148]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80025ae:	d1d9      	bne.n	8002564 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
 80025b2:	e037      	b.n	8002624 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <HAL_RCC_ClockConfig+0x158>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	42ab      	cmp	r3, r5
 80025be:	d90a      	bls.n	80025d6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002638 <HAL_RCC_ClockConfig+0x158>)
 80025c2:	6813      	ldr	r3, [r2, #0]
 80025c4:	f023 0307 	bic.w	r3, r3, #7
 80025c8:	432b      	orrs	r3, r5
 80025ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025cc:	6813      	ldr	r3, [r2, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	42ab      	cmp	r3, r5
 80025d4:	d12d      	bne.n	8002632 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	f013 0f04 	tst.w	r3, #4
 80025dc:	d006      	beq.n	80025ec <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025de:	4a17      	ldr	r2, [pc, #92]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 80025e0:	6853      	ldr	r3, [r2, #4]
 80025e2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80025e6:	68e1      	ldr	r1, [r4, #12]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	f013 0f08 	tst.w	r3, #8
 80025f2:	d007      	beq.n	8002604 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f4:	4a11      	ldr	r2, [pc, #68]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 80025f6:	6853      	ldr	r3, [r2, #4]
 80025f8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80025fc:	6921      	ldr	r1, [r4, #16]
 80025fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002602:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002604:	f7ff ff42 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <HAL_RCC_ClockConfig+0x15c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002610:	4a0b      	ldr	r2, [pc, #44]	@ (8002640 <HAL_RCC_ClockConfig+0x160>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	40d8      	lsrs	r0, r3
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <HAL_RCC_ClockConfig+0x164>)
 8002618:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800261a:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_RCC_ClockConfig+0x168>)
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	f7fe ff17 	bl	8001450 <HAL_InitTick>
  return HAL_OK;
 8002622:	2000      	movs	r0, #0
}
 8002624:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002626:	2001      	movs	r0, #1
}
 8002628:	4770      	bx	lr
    return HAL_ERROR;
 800262a:	2001      	movs	r0, #1
 800262c:	e7fa      	b.n	8002624 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800262e:	2001      	movs	r0, #1
 8002630:	e7f8      	b.n	8002624 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002632:	2001      	movs	r0, #1
 8002634:	e7f6      	b.n	8002624 <HAL_RCC_ClockConfig+0x144>
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000
 800263c:	40021000 	.word	0x40021000
 8002640:	08004100 	.word	0x08004100
 8002644:	2000009c 	.word	0x2000009c
 8002648:	200000a4 	.word	0x200000a4

0800264c <HAL_RCC_GetHCLKFreq>:
}
 800264c:	4b01      	ldr	r3, [pc, #4]	@ (8002654 <HAL_RCC_GetHCLKFreq+0x8>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	2000009c 	.word	0x2000009c

08002658 <HAL_RCC_GetPCLK1Freq>:
{
 8002658:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800265a:	f7ff fff7 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800265e:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002666:	4a03      	ldr	r2, [pc, #12]	@ (8002674 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002668:	5cd3      	ldrb	r3, [r2, r3]
}
 800266a:	40d8      	lsrs	r0, r3
 800266c:	bd08      	pop	{r3, pc}
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	080040f8 	.word	0x080040f8

08002678 <HAL_RCC_GetPCLK2Freq>:
{
 8002678:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800267a:	f7ff ffe7 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800267e:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002686:	4a03      	ldr	r2, [pc, #12]	@ (8002694 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
}
 800268a:	40d8      	lsrs	r0, r3
 800268c:	bd08      	pop	{r3, pc}
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	080040f8 	.word	0x080040f8

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800269e:	6803      	ldr	r3, [r0, #0]
 80026a0:	f013 0f01 	tst.w	r3, #1
 80026a4:	d036      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b3f      	ldr	r3, [pc, #252]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80026ae:	d149      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	4b3c      	ldr	r3, [pc, #240]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026b8:	61da      	str	r2, [r3, #28]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026c4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b38      	ldr	r3, [pc, #224]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80026ce:	d03b      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026d0:	4b34      	ldr	r3, [pc, #208]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026d4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80026d8:	d013      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80026da:	6862      	ldr	r2, [r4, #4]
 80026dc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d00e      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026e4:	4a2f      	ldr	r2, [pc, #188]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80026e6:	6a13      	ldr	r3, [r2, #32]
 80026e8:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ec:	492f      	ldr	r1, [pc, #188]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80026ee:	2601      	movs	r6, #1
 80026f0:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f4:	2600      	movs	r6, #0
 80026f6:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026fa:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026fc:	f013 0f01 	tst.w	r3, #1
 8002700:	d136      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002702:	4a28      	ldr	r2, [pc, #160]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002704:	6a13      	ldr	r3, [r2, #32]
 8002706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800270a:	6861      	ldr	r1, [r4, #4]
 800270c:	430b      	orrs	r3, r1
 800270e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002710:	2d00      	cmp	r5, #0
 8002712:	d13e      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	f013 0f02 	tst.w	r3, #2
 800271a:	d006      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800271c:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800271e:	6853      	ldr	r3, [r2, #4]
 8002720:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002724:	68a1      	ldr	r1, [r4, #8]
 8002726:	430b      	orrs	r3, r1
 8002728:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	f013 0f10 	tst.w	r3, #16
 8002730:	d034      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002732:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002734:	6853      	ldr	r3, [r2, #4]
 8002736:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800273a:	68e1      	ldr	r1, [r4, #12]
 800273c:	430b      	orrs	r3, r1
 800273e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002740:	2000      	movs	r0, #0
 8002742:	e02c      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8002744:	2500      	movs	r5, #0
 8002746:	e7be      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002748:	4a17      	ldr	r2, [pc, #92]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002750:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002752:	f7fe fec1 	bl	80014d8 <HAL_GetTick>
 8002756:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002760:	d1b6      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe feb9 	bl	80014d8 <HAL_GetTick>
 8002766:	1b80      	subs	r0, r0, r6
 8002768:	2864      	cmp	r0, #100	@ 0x64
 800276a:	d9f5      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 800276c:	2003      	movs	r0, #3
 800276e:	e016      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8002770:	f7fe feb2 	bl	80014d8 <HAL_GetTick>
 8002774:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f013 0f02 	tst.w	r3, #2
 800277e:	d1c0      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe feaa 	bl	80014d8 <HAL_GetTick>
 8002784:	1b80      	subs	r0, r0, r6
 8002786:	f241 3388 	movw	r3, #5000	@ 0x1388
 800278a:	4298      	cmp	r0, r3
 800278c:	d9f3      	bls.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 800278e:	2003      	movs	r0, #3
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	69d3      	ldr	r3, [r2, #28]
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	e7bb      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 800279c:	2000      	movs	r0, #0
}
 800279e:	b002      	add	sp, #8
 80027a0:	bd70      	pop	{r4, r5, r6, pc}
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40007000 	.word	0x40007000
 80027ac:	42420000 	.word	0x42420000

080027b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80027b0:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80027b2:	2802      	cmp	r0, #2
 80027b4:	d04e      	beq.n	8002854 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80027b6:	2810      	cmp	r0, #16
 80027b8:	d003      	beq.n	80027c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80027ba:	2801      	cmp	r0, #1
 80027bc:	d028      	beq.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80027be:	2000      	movs	r0, #0
 80027c0:	e052      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80027c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80027c4:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 80027cc:	d04c      	beq.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ce:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80027d2:	4928      	ldr	r1, [pc, #160]	@ (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80027d4:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d6:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80027da:	d015      	beq.n	8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027dc:	4b24      	ldr	r3, [pc, #144]	@ (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80027e4:	4a24      	ldr	r2, [pc, #144]	@ (8002878 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80027e6:	5cd2      	ldrb	r2, [r2, r3]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80027e8:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 80027ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80027ee:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80027f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80027fa:	d135      	bne.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80027fc:	0040      	lsls	r0, r0, #1
 80027fe:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8002800:	fba3 3000 	umull	r3, r0, r3, r0
 8002804:	0840      	lsrs	r0, r0, #1
 8002806:	e02f      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002808:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 800280a:	fb03 f000 	mul.w	r0, r3, r0
 800280e:	e7f0      	b.n	80027f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002810:	4b17      	ldr	r3, [pc, #92]	@ (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002812:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002814:	f240 3202 	movw	r2, #770	@ 0x302
 8002818:	401a      	ands	r2, r3
 800281a:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 800281e:	d024      	beq.n	800286a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002820:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002828:	d004      	beq.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800282a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800282e:	d009      	beq.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002830:	2000      	movs	r0, #0
 8002832:	e019      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002834:	4a0e      	ldr	r2, [pc, #56]	@ (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002836:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002838:	f012 0f02 	tst.w	r2, #2
 800283c:	d0f5      	beq.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 800283e:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8002842:	e011      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002844:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800284c:	d00c      	beq.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        frequency = HSE_VALUE / 128U;
 800284e:	f24f 4024 	movw	r0, #62500	@ 0xf424
    default:
    {
      break;
    }
  }
  return (frequency);
 8002852:	e009      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002854:	f7ff ff10 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002860:	3301      	adds	r3, #1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002868:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 800286a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800286e:	e7fb      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8002870:	40021000 	.word	0x40021000
 8002874:	08004128 	.word	0x08004128
 8002878:	08004124 	.word	0x08004124
 800287c:	007a1200 	.word	0x007a1200
 8002880:	aaaaaaab 	.word	0xaaaaaaab
 8002884:	003d0900 	.word	0x003d0900

08002888 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002888:	b500      	push	{lr}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800288a:	6803      	ldr	r3, [r0, #0]
 800288c:	6999      	ldr	r1, [r3, #24]
 800288e:	fa1f fe81 	uxth.w	lr, r1
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002892:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	fa1f fc82 	uxth.w	ip, r2

  if (high1 != high2)
 800289a:	45e6      	cmp	lr, ip
 800289c:	d005      	beq.n	80028aa <RTC_ReadTimeCounter+0x22>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800289e:	69d8      	ldr	r0, [r3, #28]
 80028a0:	b280      	uxth	r0, r0
 80028a2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 80028a6:	f85d fb04 	ldr.w	pc, [sp], #4
    timecounter = (((uint32_t) high1 << 16U) | low);
 80028aa:	b280      	uxth	r0, r0
 80028ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  return timecounter;
 80028b0:	e7f9      	b.n	80028a6 <RTC_ReadTimeCounter+0x1e>

080028b2 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80028b2:	6803      	ldr	r3, [r0, #0]
 80028b4:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

  return (((uint32_t) high1 << 16U) | low);
 80028b8:	b29b      	uxth	r3, r3
}
 80028ba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80028be:	4770      	bx	lr

080028c0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80028c0:	0903      	lsrs	r3, r0, #4
 80028c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80028c6:	f000 000f 	and.w	r0, r0, #15
 80028ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80028ce:	b2c0      	uxtb	r0, r0
 80028d0:	4770      	bx	lr
	...

080028d4 <RTC_WeekDayNum>:
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 80028d4:	f500 6cfa 	add.w	ip, r0, #2000	@ 0x7d0

  if (nMonth < 3U)
 80028d8:	2902      	cmp	r1, #2
 80028da:	d821      	bhi.n	8002920 <RTC_WeekDayNum+0x4c>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80028dc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80028e0:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 80028e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <RTC_WeekDayNum+0x8c>)
 80028e6:	fba3 3101 	umull	r3, r1, r3, r1
 80028ea:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 80028ee:	4463      	add	r3, ip
 80028f0:	f200 70cf 	addw	r0, r0, #1999	@ 0x7cf
 80028f4:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 80028f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002964 <RTC_WeekDayNum+0x90>)
 80028fa:	fba2 2000 	umull	r2, r0, r2, r0
 80028fe:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 8002902:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 8002906:	3304      	adds	r3, #4
 8002908:	4817      	ldr	r0, [pc, #92]	@ (8002968 <RTC_WeekDayNum+0x94>)
 800290a:	fba0 2003 	umull	r2, r0, r0, r3
 800290e:	1a1a      	subs	r2, r3, r0
 8002910:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8002914:	0880      	lsrs	r0, r0, #2
 8002916:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800291a:	1a18      	subs	r0, r3, r0
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
  }

  return (uint8_t)weekday;
}
 800291c:	b2c0      	uxtb	r0, r0
 800291e:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002920:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8002924:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8002928:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <RTC_WeekDayNum+0x8c>)
 800292a:	fba3 3101 	umull	r3, r1, r3, r1
 800292e:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 8002932:	4463      	add	r3, ip
 8002934:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <RTC_WeekDayNum+0x90>)
 800293a:	fba2 120c 	umull	r1, r2, r2, ip
 800293e:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
 8002942:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002946:	3302      	adds	r3, #2
 8002948:	4807      	ldr	r0, [pc, #28]	@ (8002968 <RTC_WeekDayNum+0x94>)
 800294a:	fba0 2003 	umull	r2, r0, r0, r3
 800294e:	1a1a      	subs	r2, r3, r0
 8002950:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8002954:	0880      	lsrs	r0, r0, #2
 8002956:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800295a:	1a18      	subs	r0, r3, r0
 800295c:	e7de      	b.n	800291c <RTC_WeekDayNum+0x48>
 800295e:	bf00      	nop
 8002960:	38e38e39 	.word	0x38e38e39
 8002964:	51eb851f 	.word	0x51eb851f
 8002968:	24924925 	.word	0x24924925

0800296c <RTC_EnterInitMode>:
{
 800296c:	b538      	push	{r3, r4, r5, lr}
 800296e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002970:	f7fe fdb2 	bl	80014d8 <HAL_GetTick>
 8002974:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	f012 0f20 	tst.w	r2, #32
 800297e:	d107      	bne.n	8002990 <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002980:	f7fe fdaa 	bl	80014d8 <HAL_GetTick>
 8002984:	1b40      	subs	r0, r0, r5
 8002986:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800298a:	d9f4      	bls.n	8002976 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800298c:	2003      	movs	r0, #3
 800298e:	e004      	b.n	800299a <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	f042 0210 	orr.w	r2, r2, #16
 8002996:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8002998:	2000      	movs	r0, #0
}
 800299a:	bd38      	pop	{r3, r4, r5, pc}

0800299c <RTC_ExitInitMode>:
{
 800299c:	b538      	push	{r3, r4, r5, lr}
 800299e:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029a0:	6802      	ldr	r2, [r0, #0]
 80029a2:	6853      	ldr	r3, [r2, #4]
 80029a4:	f023 0310 	bic.w	r3, r3, #16
 80029a8:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80029aa:	f7fe fd95 	bl	80014d8 <HAL_GetTick>
 80029ae:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f013 0f20 	tst.w	r3, #32
 80029b8:	d107      	bne.n	80029ca <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029ba:	f7fe fd8d 	bl	80014d8 <HAL_GetTick>
 80029be:	1b40      	subs	r0, r0, r5
 80029c0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80029c4:	d9f4      	bls.n	80029b0 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80029c6:	2003      	movs	r0, #3
 80029c8:	e000      	b.n	80029cc <RTC_ExitInitMode+0x30>
  return HAL_OK;
 80029ca:	2000      	movs	r0, #0
}
 80029cc:	bd38      	pop	{r3, r4, r5, pc}

080029ce <RTC_WriteTimeCounter>:
{
 80029ce:	b538      	push	{r3, r4, r5, lr}
 80029d0:	4605      	mov	r5, r0
 80029d2:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029d4:	f7ff ffca 	bl	800296c <RTC_EnterInitMode>
 80029d8:	b108      	cbz	r0, 80029de <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 80029da:	2001      	movs	r0, #1
}
 80029dc:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	0c22      	lsrs	r2, r4, #16
 80029e2:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	b2a4      	uxth	r4, r4
 80029e8:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80029ea:	4628      	mov	r0, r5
 80029ec:	f7ff ffd6 	bl	800299c <RTC_ExitInitMode>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d0f3      	beq.n	80029dc <RTC_WriteTimeCounter+0xe>
      status = HAL_ERROR;
 80029f4:	2001      	movs	r0, #1
 80029f6:	e7f1      	b.n	80029dc <RTC_WriteTimeCounter+0xe>

080029f8 <RTC_WriteAlarmCounter>:
{
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4605      	mov	r5, r0
 80029fc:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029fe:	f7ff ffb5 	bl	800296c <RTC_EnterInitMode>
 8002a02:	b108      	cbz	r0, 8002a08 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 8002a04:	2001      	movs	r0, #1
}
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	0c22      	lsrs	r2, r4, #16
 8002a0c:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	b2a4      	uxth	r4, r4
 8002a12:	625c      	str	r4, [r3, #36]	@ 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a14:	4628      	mov	r0, r5
 8002a16:	f7ff ffc1 	bl	800299c <RTC_ExitInitMode>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d0f3      	beq.n	8002a06 <RTC_WriteAlarmCounter+0xe>
      status = HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
 8002a20:	e7f1      	b.n	8002a06 <RTC_WriteAlarmCounter+0xe>

08002a22 <HAL_RTC_SetTime>:
{
 8002a22:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d057      	beq.n	8002ad8 <HAL_RTC_SetTime+0xb6>
 8002a28:	460d      	mov	r5, r1
 8002a2a:	4606      	mov	r6, r0
 8002a2c:	2900      	cmp	r1, #0
 8002a2e:	d055      	beq.n	8002adc <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 8002a30:	7c03      	ldrb	r3, [r0, #16]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d054      	beq.n	8002ae0 <HAL_RTC_SetTime+0xbe>
 8002a36:	2301      	movs	r3, #1
 8002a38:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8002a3e:	b9ba      	cbnz	r2, 8002a70 <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a40:	780b      	ldrb	r3, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002a42:	784c      	ldrb	r4, [r1, #1]
 8002a44:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002a48:	00a4      	lsls	r4, r4, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a4a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002a4e:	fb02 4403 	mla	r4, r2, r3, r4
                              ((uint32_t)sTime->Seconds));
 8002a52:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a54:	441c      	add	r4, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002a56:	4621      	mov	r1, r4
 8002a58:	4630      	mov	r0, r6
 8002a5a:	f7ff ffb8 	bl	80029ce <RTC_WriteTimeCounter>
 8002a5e:	4605      	mov	r5, r0
 8002a60:	b1c8      	cbz	r0, 8002a96 <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a62:	2304      	movs	r3, #4
 8002a64:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 8002a66:	2300      	movs	r3, #0
 8002a68:	7433      	strb	r3, [r6, #16]
    return HAL_ERROR;
 8002a6a:	2501      	movs	r5, #1
}
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a70:	7808      	ldrb	r0, [r1, #0]
 8002a72:	f7ff ff25 	bl	80028c0 <RTC_Bcd2ToByte>
 8002a76:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002a7a:	fb03 f400 	mul.w	r4, r3, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002a7e:	7868      	ldrb	r0, [r5, #1]
 8002a80:	f7ff ff1e 	bl	80028c0 <RTC_Bcd2ToByte>
 8002a84:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a88:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002a8c:	78a8      	ldrb	r0, [r5, #2]
 8002a8e:	f7ff ff17 	bl	80028c0 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a92:	4404      	add	r4, r0
 8002a94:	e7df      	b.n	8002a56 <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002a96:	6832      	ldr	r2, [r6, #0]
 8002a98:	6853      	ldr	r3, [r2, #4]
 8002a9a:	f023 0305 	bic.w	r3, r3, #5
 8002a9e:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	f7ff ff06 	bl	80028b2 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002aa6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 8002aac:	4284      	cmp	r4, r0
 8002aae:	d804      	bhi.n	8002aba <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	7433      	strb	r3, [r6, #16]
    return HAL_OK;
 8002ab8:	e7d8      	b.n	8002a6c <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002aba:	f500 31a8 	add.w	r1, r0, #86016	@ 0x15000
 8002abe:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	f7ff ff98 	bl	80029f8 <RTC_WriteAlarmCounter>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d0f1      	beq.n	8002ab0 <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002acc:	2304      	movs	r3, #4
 8002ace:	7473      	strb	r3, [r6, #17]
          __HAL_UNLOCK(hrtc);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	7433      	strb	r3, [r6, #16]
          return HAL_ERROR;
 8002ad4:	2501      	movs	r5, #1
 8002ad6:	e7c9      	b.n	8002a6c <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 8002ad8:	2501      	movs	r5, #1
 8002ada:	e7c7      	b.n	8002a6c <HAL_RTC_SetTime+0x4a>
 8002adc:	2501      	movs	r5, #1
 8002ade:	e7c5      	b.n	8002a6c <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 8002ae0:	2502      	movs	r5, #2
 8002ae2:	e7c3      	b.n	8002a6c <HAL_RTC_SetTime+0x4a>

08002ae4 <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d05a      	beq.n	8002b9e <HAL_RTC_SetDate+0xba>
{
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	460d      	mov	r5, r1
 8002aec:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 8002aee:	2900      	cmp	r1, #0
 8002af0:	d057      	beq.n	8002ba2 <HAL_RTC_SetDate+0xbe>
  __HAL_LOCK(hrtc);
 8002af2:	7c03      	ldrb	r3, [r0, #16]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d056      	beq.n	8002ba6 <HAL_RTC_SetDate+0xc2>
 8002af8:	2301      	movs	r3, #1
 8002afa:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002afc:	2302      	movs	r3, #2
 8002afe:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8002b00:	b9ba      	cbnz	r2, 8002b32 <HAL_RTC_SetDate+0x4e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002b02:	78cb      	ldrb	r3, [r1, #3]
 8002b04:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002b06:	784b      	ldrb	r3, [r1, #1]
 8002b08:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002b0a:	788b      	ldrb	r3, [r1, #2]
 8002b0c:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002b0e:	7ba2      	ldrb	r2, [r4, #14]
 8002b10:	7b61      	ldrb	r1, [r4, #13]
 8002b12:	7be0      	ldrb	r0, [r4, #15]
 8002b14:	f7ff fede 	bl	80028d4 <RTC_WeekDayNum>
 8002b18:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002b1a:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7ff feb3 	bl	8002888 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8002b22:	4b22      	ldr	r3, [pc, #136]	@ (8002bac <HAL_RTC_SetDate+0xc8>)
 8002b24:	4298      	cmp	r0, r3
 8002b26:	d811      	bhi.n	8002b4c <HAL_RTC_SetDate+0x68>
  hrtc->State = HAL_RTC_STATE_READY ;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	7420      	strb	r0, [r4, #16]
}
 8002b30:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002b32:	78c8      	ldrb	r0, [r1, #3]
 8002b34:	f7ff fec4 	bl	80028c0 <RTC_Bcd2ToByte>
 8002b38:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002b3a:	7868      	ldrb	r0, [r5, #1]
 8002b3c:	f7ff fec0 	bl	80028c0 <RTC_Bcd2ToByte>
 8002b40:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002b42:	78a8      	ldrb	r0, [r5, #2]
 8002b44:	f7ff febc 	bl	80028c0 <RTC_Bcd2ToByte>
 8002b48:	73a0      	strb	r0, [r4, #14]
 8002b4a:	e7e0      	b.n	8002b0e <HAL_RTC_SetDate+0x2a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002b4c:	4d18      	ldr	r5, [pc, #96]	@ (8002bb0 <HAL_RTC_SetDate+0xcc>)
 8002b4e:	fba5 3500 	umull	r3, r5, r5, r0
 8002b52:	0c2d      	lsrs	r5, r5, #16
 8002b54:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <HAL_RTC_SetDate+0xd0>)
 8002b56:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7ff ff36 	bl	80029ce <RTC_WriteTimeCounter>
 8002b62:	b128      	cbz	r0, 8002b70 <HAL_RTC_SetDate+0x8c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b64:	2304      	movs	r3, #4
 8002b66:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	e7df      	b.n	8002b30 <HAL_RTC_SetDate+0x4c>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7ff fe9e 	bl	80028b2 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002b76:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b7a:	d0d5      	beq.n	8002b28 <HAL_RTC_SetDate+0x44>
      if (counter_alarm < counter_time)
 8002b7c:	4285      	cmp	r5, r0
 8002b7e:	d9d3      	bls.n	8002b28 <HAL_RTC_SetDate+0x44>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002b80:	f500 31a8 	add.w	r1, r0, #86016	@ 0x15000
 8002b84:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f7ff ff35 	bl	80029f8 <RTC_WriteAlarmCounter>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d0ca      	beq.n	8002b28 <HAL_RTC_SetDate+0x44>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002b92:	2304      	movs	r3, #4
 8002b94:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8002b96:	2300      	movs	r3, #0
 8002b98:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	e7c8      	b.n	8002b30 <HAL_RTC_SetDate+0x4c>
    return HAL_ERROR;
 8002b9e:	2001      	movs	r0, #1
}
 8002ba0:	4770      	bx	lr
    return HAL_ERROR;
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	e7c4      	b.n	8002b30 <HAL_RTC_SetDate+0x4c>
  __HAL_LOCK(hrtc);
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	e7c2      	b.n	8002b30 <HAL_RTC_SetDate+0x4c>
 8002baa:	bf00      	nop
 8002bac:	00015f8f 	.word	0x00015f8f
 8002bb0:	c22e4507 	.word	0xc22e4507
 8002bb4:	00015180 	.word	0x00015180

08002bb8 <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 8002bb8:	b1c0      	cbz	r0, 8002bec <HAL_RTC_WaitForSynchro+0x34>
{
 8002bba:	b538      	push	{r3, r4, r5, lr}
 8002bbc:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002bbe:	6802      	ldr	r2, [r0, #0]
 8002bc0:	6853      	ldr	r3, [r2, #4]
 8002bc2:	f023 0308 	bic.w	r3, r3, #8
 8002bc6:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002bc8:	f7fe fc86 	bl	80014d8 <HAL_GetTick>
 8002bcc:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bce:	682b      	ldr	r3, [r5, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f013 0f08 	tst.w	r3, #8
 8002bd6:	d107      	bne.n	8002be8 <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bd8:	f7fe fc7e 	bl	80014d8 <HAL_GetTick>
 8002bdc:	1b00      	subs	r0, r0, r4
 8002bde:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002be2:	d9f4      	bls.n	8002bce <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8002be4:	2003      	movs	r0, #3
 8002be6:	e000      	b.n	8002bea <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8002be8:	2000      	movs	r0, #0
}
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002bec:	2001      	movs	r0, #1
}
 8002bee:	4770      	bx	lr

08002bf0 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d050      	beq.n	8002c96 <HAL_RTC_Init+0xa6>
{
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bf8:	7c43      	ldrb	r3, [r0, #17]
 8002bfa:	b14b      	cbz	r3, 8002c10 <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7ff ffd9 	bl	8002bb8 <HAL_RTC_WaitForSynchro>
 8002c06:	b138      	cbz	r0, 8002c18 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002c0c:	2001      	movs	r0, #1
}
 8002c0e:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002c10:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8002c12:	f7fe f86d 	bl	8000cf0 <HAL_RTC_MspInit>
 8002c16:	e7f1      	b.n	8002bfc <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff fea7 	bl	800296c <RTC_EnterInitMode>
 8002c1e:	bb28      	cbnz	r0, 8002c6c <HAL_RTC_Init+0x7c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002c20:	6822      	ldr	r2, [r4, #0]
 8002c22:	6853      	ldr	r3, [r2, #4]
 8002c24:	f023 0307 	bic.w	r3, r3, #7
 8002c28:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002c2a:	68a3      	ldr	r3, [r4, #8]
 8002c2c:	b123      	cbz	r3, 8002c38 <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c9c <HAL_RTC_Init+0xac>)
 8002c30:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002c38:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <HAL_RTC_Init+0xac>)
 8002c3a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002c3c:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 8002c40:	68a1      	ldr	r1, [r4, #8]
 8002c42:	430b      	orrs	r3, r1
 8002c44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002c46:	6863      	ldr	r3, [r4, #4]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d012      	beq.n	8002c74 <HAL_RTC_Init+0x84>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	f3c3 4103 	ubfx	r1, r3, #16, #4
 8002c54:	6091      	str	r1, [r2, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002c56:	6822      	ldr	r2, [r4, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	60d3      	str	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff fe9d 	bl	800299c <RTC_ExitInitMode>
 8002c62:	b188      	cbz	r0, 8002c88 <HAL_RTC_Init+0x98>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c64:	2304      	movs	r3, #4
 8002c66:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 8002c68:	2001      	movs	r0, #1
 8002c6a:	e7d0      	b.n	8002c0e <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
 8002c72:	e7cc      	b.n	8002c0e <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f7ff fd9b 	bl	80027b0 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002c7a:	b108      	cbz	r0, 8002c80 <HAL_RTC_Init+0x90>
        prescaler = prescaler - 1U;
 8002c7c:	1e43      	subs	r3, r0, #1
 8002c7e:	e7e6      	b.n	8002c4e <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c80:	2304      	movs	r3, #4
 8002c82:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 8002c84:	2001      	movs	r0, #1
 8002c86:	e7c2      	b.n	8002c0e <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002c90:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002c92:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8002c94:	e7bb      	b.n	8002c0e <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 8002c96:	2001      	movs	r0, #1
}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40006c00 	.word	0x40006c00

08002ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	4605      	mov	r5, r0
 8002ca8:	4688      	mov	r8, r1
 8002caa:	4617      	mov	r7, r2
 8002cac:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cae:	f7fe fc13 	bl	80014d8 <HAL_GetTick>
 8002cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002cb4:	1a1b      	subs	r3, r3, r0
 8002cb6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002cba:	f7fe fc0d 	bl	80014d8 <HAL_GetTick>
 8002cbe:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cc0:	4b28      	ldr	r3, [pc, #160]	@ (8002d64 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002cc8:	fb09 f303 	mul.w	r3, r9, r3
 8002ccc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cce:	682b      	ldr	r3, [r5, #0]
 8002cd0:	689c      	ldr	r4, [r3, #8]
 8002cd2:	ea38 0404 	bics.w	r4, r8, r4
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	42bb      	cmp	r3, r7
 8002cde:	d03d      	beq.n	8002d5c <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ce0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002ce4:	d0f3      	beq.n	8002cce <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ce6:	f7fe fbf7 	bl	80014d8 <HAL_GetTick>
 8002cea:	eba0 000a 	sub.w	r0, r0, sl
 8002cee:	4548      	cmp	r0, r9
 8002cf0:	d207      	bcs.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cf2:	9a01      	ldr	r2, [sp, #4]
 8002cf4:	b102      	cbz	r2, 8002cf8 <SPI_WaitFlagStateUntilTimeout+0x58>
 8002cf6:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002cf8:	9b01      	ldr	r3, [sp, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	4691      	mov	r9, r2
 8002d00:	e7e5      	b.n	8002cce <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d02:	682a      	ldr	r2, [r5, #0]
 8002d04:	6853      	ldr	r3, [r2, #4]
 8002d06:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8002d0a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d0c:	686b      	ldr	r3, [r5, #4]
 8002d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d12:	d00b      	beq.n	8002d2c <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d14:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d1a:	d014      	beq.n	8002d46 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002d22:	2300      	movs	r3, #0
 8002d24:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002d28:	2003      	movs	r0, #3
 8002d2a:	e018      	b.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d2c:	68ab      	ldr	r3, [r5, #8]
 8002d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d32:	d002      	beq.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d38:	d1ec      	bne.n	8002d14 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8002d3a:	682a      	ldr	r2, [r5, #0]
 8002d3c:	6813      	ldr	r3, [r2, #0]
 8002d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	e7e6      	b.n	8002d14 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8002d46:	682a      	ldr	r2, [r5, #0]
 8002d48:	6813      	ldr	r3, [r2, #0]
 8002d4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	682a      	ldr	r2, [r5, #0]
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e7df      	b.n	8002d1c <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8002d5c:	2000      	movs	r0, #0
}
 8002d5e:	b002      	add	sp, #8
 8002d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d64:	2000009c 	.word	0x2000009c

08002d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	4606      	mov	r6, r0
 8002d6e:	460c      	mov	r4, r1
 8002d70:	4615      	mov	r5, r2
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d72:	9200      	str	r2, [sp, #0]
 8002d74:	460b      	mov	r3, r1
 8002d76:	2201      	movs	r2, #1
 8002d78:	2102      	movs	r1, #2
 8002d7a:	f7ff ff91 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002d7e:	b948      	cbnz	r0, 8002d94 <SPI_EndRxTxTransaction+0x2c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d80:	9500      	str	r5, [sp, #0]
 8002d82:	4623      	mov	r3, r4
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	@ 0x80
 8002d88:	4630      	mov	r0, r6
 8002d8a:	f7ff ff89 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002d8e:	b938      	cbnz	r0, 8002da0 <SPI_EndRxTxTransaction+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002d90:	b002      	add	sp, #8
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d94:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	e7f7      	b.n	8002d90 <SPI_EndRxTxTransaction+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da0:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8002da2:	f043 0320 	orr.w	r3, r3, #32
 8002da6:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002da8:	2003      	movs	r0, #3
 8002daa:	e7f1      	b.n	8002d90 <SPI_EndRxTxTransaction+0x28>

08002dac <HAL_SPI_Init>:
  if (hspi == NULL)
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d056      	beq.n	8002e5e <HAL_SPI_Init+0xb2>
{
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002db4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002db6:	b933      	cbnz	r3, 8002dc6 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002db8:	6843      	ldr	r3, [r0, #4]
 8002dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dbe:	d005      	beq.n	8002dcc <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61c3      	str	r3, [r0, #28]
 8002dc4:	e002      	b.n	8002dcc <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dca:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dd0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d03c      	beq.n	8002e52 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	6813      	ldr	r3, [r2, #0]
 8002de2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002de6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002de8:	6863      	ldr	r3, [r4, #4]
 8002dea:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002dee:	68a2      	ldr	r2, [r4, #8]
 8002df0:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8002df4:	4313      	orrs	r3, r2
 8002df6:	68e2      	ldr	r2, [r4, #12]
 8002df8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	6922      	ldr	r2, [r4, #16]
 8002e00:	f002 0202 	and.w	r2, r2, #2
 8002e04:	4313      	orrs	r3, r2
 8002e06:	6962      	ldr	r2, [r4, #20]
 8002e08:	f002 0201 	and.w	r2, r2, #1
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	69a2      	ldr	r2, [r4, #24]
 8002e10:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002e14:	4313      	orrs	r3, r2
 8002e16:	69e2      	ldr	r2, [r4, #28]
 8002e18:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	6a22      	ldr	r2, [r4, #32]
 8002e20:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002e24:	4313      	orrs	r3, r2
 8002e26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002e28:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e2c:	6821      	ldr	r1, [r4, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e32:	8b63      	ldrh	r3, [r4, #26]
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e3c:	6822      	ldr	r2, [r4, #0]
 8002e3e:	69d3      	ldr	r3, [r2, #28]
 8002e40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e44:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e46:	2000      	movs	r0, #0
 8002e48:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8002e50:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002e52:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7fd ff8e 	bl	8000d78 <HAL_SPI_MspInit>
 8002e5c:	e7bc      	b.n	8002dd8 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002e5e:	2001      	movs	r0, #1
}
 8002e60:	4770      	bx	lr

08002e62 <HAL_SPI_TransmitReceive>:
{
 8002e62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e66:	b083      	sub	sp, #12
 8002e68:	4604      	mov	r4, r0
 8002e6a:	4688      	mov	r8, r1
 8002e6c:	4691      	mov	r9, r2
 8002e6e:	461f      	mov	r7, r3
 8002e70:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8002e72:	f7fe fb31 	bl	80014d8 <HAL_GetTick>
 8002e76:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002e78:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002e7c:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002e7e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d00a      	beq.n	8002e9a <HAL_SPI_TransmitReceive+0x38>
 8002e84:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002e88:	f040 8105 	bne.w	8003096 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002e8c:	68a2      	ldr	r2, [r4, #8]
 8002e8e:	2a00      	cmp	r2, #0
 8002e90:	f040 8105 	bne.w	800309e <HAL_SPI_TransmitReceive+0x23c>
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	f040 8104 	bne.w	80030a2 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e9a:	f1b8 0f00 	cmp.w	r8, #0
 8002e9e:	f000 8102 	beq.w	80030a6 <HAL_SPI_TransmitReceive+0x244>
 8002ea2:	f1b9 0f00 	cmp.w	r9, #0
 8002ea6:	f000 8100 	beq.w	80030aa <HAL_SPI_TransmitReceive+0x248>
 8002eaa:	2f00      	cmp	r7, #0
 8002eac:	f000 80ff 	beq.w	80030ae <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8002eb0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f000 80fc 	beq.w	80030b2 <HAL_SPI_TransmitReceive+0x250>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ec0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d002      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eca:	2305      	movs	r3, #5
 8002ecc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ed4:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ed8:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002eda:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002edc:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ee0:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002ee2:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8002ee4:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ee6:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002ef0:	d103      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ef8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002efa:	68e3      	ldr	r3, [r4, #12]
 8002efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f00:	d011      	beq.n	8002f26 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f02:	6863      	ldr	r3, [r4, #4]
 8002f04:	b10b      	cbz	r3, 8002f0a <HAL_SPI_TransmitReceive+0xa8>
 8002f06:	2f01      	cmp	r7, #1
 8002f08:	d10b      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f0a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002f14:	3301      	adds	r3, #1
 8002f16:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f18:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8002f22:	2701      	movs	r7, #1
 8002f24:	e071      	b.n	800300a <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f26:	6863      	ldr	r3, [r4, #4]
 8002f28:	b10b      	cbz	r3, 8002f2e <HAL_SPI_TransmitReceive+0xcc>
 8002f2a:	2f01      	cmp	r7, #1
 8002f2c:	d10b      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f2e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	8812      	ldrh	r2, [r2, #0]
 8002f34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002f38:	3302      	adds	r3, #2
 8002f3a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f3c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8002f46:	2701      	movs	r7, #1
 8002f48:	e01b      	b.n	8002f82 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	f012 0f01 	tst.w	r2, #1
 8002f52:	d00e      	beq.n	8002f72 <HAL_SPI_TransmitReceive+0x110>
 8002f54:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002f56:	b292      	uxth	r2, r2
 8002f58:	b15a      	cbz	r2, 8002f72 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f60:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f62:	3302      	adds	r3, #2
 8002f64:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f66:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002f70:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f72:	f7fe fab1 	bl	80014d8 <HAL_GetTick>
 8002f76:	1b80      	subs	r0, r0, r6
 8002f78:	42a8      	cmp	r0, r5
 8002f7a:	d302      	bcc.n	8002f82 <HAL_SPI_TransmitReceive+0x120>
 8002f7c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002f80:	d11e      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f82:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	b91b      	cbnz	r3, 8002f90 <HAL_SPI_TransmitReceive+0x12e>
 8002f88:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d062      	beq.n	8003056 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	f012 0f02 	tst.w	r2, #2
 8002f98:	d0d7      	beq.n	8002f4a <HAL_SPI_TransmitReceive+0xe8>
 8002f9a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d0d3      	beq.n	8002f4a <HAL_SPI_TransmitReceive+0xe8>
 8002fa2:	2f00      	cmp	r7, #0
 8002fa4:	d0d1      	beq.n	8002f4a <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fa6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002fa8:	8812      	ldrh	r2, [r2, #0]
 8002faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002fae:	3302      	adds	r3, #2
 8002fb0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fb2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8002fbc:	2700      	movs	r7, #0
 8002fbe:	e7c4      	b.n	8002f4a <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002fcc:	2003      	movs	r0, #3
 8002fce:	e063      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	f012 0f01 	tst.w	r2, #1
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_SPI_TransmitReceive+0x196>
 8002fda:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002fdc:	b292      	uxth	r2, r2
 8002fde:	b15a      	cbz	r2, 8002ff8 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002fe4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fe6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002fe8:	3301      	adds	r3, #1
 8002fea:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002ff6:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ff8:	f7fe fa6e 	bl	80014d8 <HAL_GetTick>
 8002ffc:	1b83      	subs	r3, r0, r6
 8002ffe:	42ab      	cmp	r3, r5
 8003000:	d302      	bcc.n	8003008 <HAL_SPI_TransmitReceive+0x1a6>
 8003002:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003006:	d11e      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x1e4>
 8003008:	b1ed      	cbz	r5, 8003046 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800300a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	b913      	cbnz	r3, 8003016 <HAL_SPI_TransmitReceive+0x1b4>
 8003010:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003012:	b29b      	uxth	r3, r3
 8003014:	b1fb      	cbz	r3, 8003056 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	f012 0f02 	tst.w	r2, #2
 800301e:	d0d7      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x16e>
 8003020:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003022:	b292      	uxth	r2, r2
 8003024:	2a00      	cmp	r2, #0
 8003026:	d0d3      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x16e>
 8003028:	2f00      	cmp	r7, #0
 800302a:	d0d1      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800302c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003032:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003034:	3301      	adds	r3, #1
 8003036:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003038:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003042:	2700      	movs	r7, #0
 8003044:	e7c4      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8003046:	2301      	movs	r3, #1
 8003048:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800304c:	2300      	movs	r3, #0
 800304e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003052:	2003      	movs	r0, #3
 8003054:	e020      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003056:	4632      	mov	r2, r6
 8003058:	4629      	mov	r1, r5
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff fe84 	bl	8002d68 <SPI_EndRxTxTransaction>
 8003060:	b990      	cbnz	r0, 8003088 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003062:	68a3      	ldr	r3, [r4, #8]
 8003064:	b933      	cbnz	r3, 8003074 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	9201      	str	r2, [sp, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	2301      	movs	r3, #1
 8003076:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800307a:	2300      	movs	r3, #0
 800307c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003080:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003082:	b14b      	cbz	r3, 8003098 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8003084:	2001      	movs	r0, #1
 8003086:	e007      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003088:	2320      	movs	r3, #32
 800308a:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800308c:	2300      	movs	r3, #0
 800308e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	e000      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8003096:	2002      	movs	r0, #2
}
 8003098:	b003      	add	sp, #12
 800309a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800309e:	2002      	movs	r0, #2
 80030a0:	e7fa      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>
 80030a2:	2002      	movs	r0, #2
 80030a4:	e7f8      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 80030a6:	2001      	movs	r0, #1
 80030a8:	e7f6      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>
 80030aa:	2001      	movs	r0, #1
 80030ac:	e7f4      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>
 80030ae:	2001      	movs	r0, #1
 80030b0:	e7f2      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 80030b2:	2002      	movs	r0, #2
 80030b4:	e7f0      	b.n	8003098 <HAL_SPI_TransmitReceive+0x236>

080030b6 <HAL_SPI_ErrorCallback>:
}
 80030b6:	4770      	bx	lr

080030b8 <HAL_SPI_IRQHandler>:
{
 80030b8:	b530      	push	{r4, r5, lr}
 80030ba:	b085      	sub	sp, #20
 80030bc:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80030be:	6802      	ldr	r2, [r0, #0]
 80030c0:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80030c2:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030c4:	f3c3 1080 	ubfx	r0, r3, #6, #1
 80030c8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80030cc:	d105      	bne.n	80030da <HAL_SPI_IRQHandler+0x22>
 80030ce:	f013 0f01 	tst.w	r3, #1
 80030d2:	d002      	beq.n	80030da <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80030d4:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80030d8:	d15a      	bne.n	8003190 <HAL_SPI_IRQHandler+0xd8>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80030da:	f013 0f02 	tst.w	r3, #2
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_IRQHandler+0x2e>
 80030e0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80030e4:	d158      	bne.n	8003198 <HAL_SPI_IRQHandler+0xe0>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80030e6:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80030ea:	f013 0f20 	tst.w	r3, #32
 80030ee:	d101      	bne.n	80030f4 <HAL_SPI_IRQHandler+0x3c>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d054      	beq.n	800319e <HAL_SPI_IRQHandler+0xe6>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80030f4:	f011 0f20 	tst.w	r1, #32
 80030f8:	d051      	beq.n	800319e <HAL_SPI_IRQHandler+0xe6>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80030fa:	b178      	cbz	r0, 800311c <HAL_SPI_IRQHandler+0x64>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80030fc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b03      	cmp	r3, #3
 8003104:	d04d      	beq.n	80031a2 <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003106:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800310e:	2300      	movs	r3, #0
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	68d3      	ldr	r3, [r2, #12]
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	6893      	ldr	r3, [r2, #8]
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	9b01      	ldr	r3, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800311c:	b165      	cbz	r5, 8003138 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800311e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6563      	str	r3, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003126:	2300      	movs	r3, #0
 8003128:	9303      	str	r3, [sp, #12]
 800312a:	6893      	ldr	r3, [r2, #8]
 800312c:	9303      	str	r3, [sp, #12]
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003138:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02f      	beq.n	800319e <HAL_SPI_IRQHandler+0xe6>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	6853      	ldr	r3, [r2, #4]
 8003142:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003146:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003148:	2301      	movs	r3, #1
 800314a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800314e:	f011 0f03 	tst.w	r1, #3
 8003152:	d02e      	beq.n	80031b2 <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003154:	6822      	ldr	r2, [r4, #0]
 8003156:	6853      	ldr	r3, [r2, #4]
 8003158:	f023 0303 	bic.w	r3, r3, #3
 800315c:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800315e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003160:	b14b      	cbz	r3, 8003176 <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003162:	4a16      	ldr	r2, [pc, #88]	@ (80031bc <HAL_SPI_IRQHandler+0x104>)
 8003164:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003166:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003168:	f7fe fd5a 	bl	8001c20 <HAL_DMA_Abort_IT>
 800316c:	b118      	cbz	r0, 8003176 <HAL_SPI_IRQHandler+0xbe>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800316e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003174:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003176:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003178:	b18b      	cbz	r3, 800319e <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800317a:	4a10      	ldr	r2, [pc, #64]	@ (80031bc <HAL_SPI_IRQHandler+0x104>)
 800317c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800317e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003180:	f7fe fd4e 	bl	8001c20 <HAL_DMA_Abort_IT>
 8003184:	b158      	cbz	r0, 800319e <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003186:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800318c:	6563      	str	r3, [r4, #84]	@ 0x54
 800318e:	e006      	b.n	800319e <HAL_SPI_IRQHandler+0xe6>
    hspi->RxISR(hspi);
 8003190:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003192:	4620      	mov	r0, r4
 8003194:	4798      	blx	r3
    return;
 8003196:	e002      	b.n	800319e <HAL_SPI_IRQHandler+0xe6>
    hspi->TxISR(hspi);
 8003198:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800319a:	4620      	mov	r0, r4
 800319c:	4798      	blx	r3
}
 800319e:	b005      	add	sp, #20
 80031a0:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031a2:	2300      	movs	r3, #0
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	68d3      	ldr	r3, [r2, #12]
 80031a8:	9302      	str	r3, [sp, #8]
 80031aa:	6893      	ldr	r3, [r2, #8]
 80031ac:	9302      	str	r3, [sp, #8]
 80031ae:	9b02      	ldr	r3, [sp, #8]
        return;
 80031b0:	e7f5      	b.n	800319e <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 80031b2:	4620      	mov	r0, r4
 80031b4:	f7ff ff7f 	bl	80030b6 <HAL_SPI_ErrorCallback>
    return;
 80031b8:	e7f1      	b.n	800319e <HAL_SPI_IRQHandler+0xe6>
 80031ba:	bf00      	nop
 80031bc:	080031c1 	.word	0x080031c1

080031c0 <SPI_DMAAbortOnError>:
{
 80031c0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80031c2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80031c8:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 80031ca:	f7ff ff74 	bl	80030b6 <HAL_SPI_ErrorCallback>
}
 80031ce:	bd08      	pop	{r3, pc}

080031d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d2:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d4:	6a03      	ldr	r3, [r0, #32]
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031dc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031de:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031e0:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e4:	680c      	ldr	r4, [r1, #0]
 80031e6:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e8:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ec:	688b      	ldr	r3, [r1, #8]
 80031ee:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003220 <TIM_OC1_SetConfig+0x50>)
 80031f2:	4290      	cmp	r0, r2
 80031f4:	d006      	beq.n	8003204 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031f8:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031fa:	684a      	ldr	r2, [r1, #4]
 80031fc:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031fe:	6203      	str	r3, [r0, #32]
}
 8003200:	bc30      	pop	{r4, r5}
 8003202:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003204:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003208:	68ca      	ldr	r2, [r1, #12]
 800320a:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800320c:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003210:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003214:	694a      	ldr	r2, [r1, #20]
 8003216:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003218:	698d      	ldr	r5, [r1, #24]
 800321a:	4315      	orrs	r5, r2
 800321c:	e7eb      	b.n	80031f6 <TIM_OC1_SetConfig+0x26>
 800321e:	bf00      	nop
 8003220:	40012c00 	.word	0x40012c00

08003224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003226:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003228:	6a02      	ldr	r2, [r0, #32]
 800322a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800322e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003230:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003232:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003234:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003238:	680d      	ldr	r5, [r1, #0]
 800323a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800323c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003240:	688a      	ldr	r2, [r1, #8]
 8003242:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003246:	4a0d      	ldr	r2, [pc, #52]	@ (800327c <TIM_OC3_SetConfig+0x58>)
 8003248:	4290      	cmp	r0, r2
 800324a:	d006      	beq.n	800325a <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324e:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003250:	684a      	ldr	r2, [r1, #4]
 8003252:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003254:	6203      	str	r3, [r0, #32]
}
 8003256:	bc30      	pop	{r4, r5}
 8003258:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800325a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800325e:	68ca      	ldr	r2, [r1, #12]
 8003260:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003264:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003268:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800326c:	694a      	ldr	r2, [r1, #20]
 800326e:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003272:	698a      	ldr	r2, [r1, #24]
 8003274:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003278:	e7e8      	b.n	800324c <TIM_OC3_SetConfig+0x28>
 800327a:	bf00      	nop
 800327c:	40012c00 	.word	0x40012c00

08003280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003284:	6a02      	ldr	r2, [r0, #32]
 8003286:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800328a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800328e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003290:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003294:	680d      	ldr	r5, [r1, #0]
 8003296:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800329a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800329e:	688d      	ldr	r5, [r1, #8]
 80032a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a4:	4d07      	ldr	r5, [pc, #28]	@ (80032c4 <TIM_OC4_SetConfig+0x44>)
 80032a6:	42a8      	cmp	r0, r5
 80032a8:	d006      	beq.n	80032b8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ac:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032ae:	684a      	ldr	r2, [r1, #4]
 80032b0:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b2:	6203      	str	r3, [r0, #32]
}
 80032b4:	bc30      	pop	{r4, r5}
 80032b6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032b8:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032bc:	694d      	ldr	r5, [r1, #20]
 80032be:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80032c2:	e7f2      	b.n	80032aa <TIM_OC4_SetConfig+0x2a>
 80032c4:	40012c00 	.word	0x40012c00

080032c8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032c8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032ca:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032cc:	6a04      	ldr	r4, [r0, #32]
 80032ce:	f024 0410 	bic.w	r4, r4, #16
 80032d2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d4:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80032d6:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80032da:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032de:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80032e2:	031b      	lsls	r3, r3, #12
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ea:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80032ee:	0109      	lsls	r1, r1, #4
 80032f0:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 80032f4:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032f6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80032f8:	6201      	str	r1, [r0, #32]
}
 80032fa:	bc30      	pop	{r4, r5}
 80032fc:	4770      	bx	lr

080032fe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032fe:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003300:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003302:	6a04      	ldr	r4, [r0, #32]
 8003304:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8003308:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800330a:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800330c:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003310:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003314:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	b2db      	uxtb	r3, r3
 800331c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003320:	f425 7500 	bic.w	r5, r5, #512	@ 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003324:	0209      	lsls	r1, r1, #8
 8003326:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 800332a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800332c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 800332e:	6201      	str	r1, [r0, #32]
}
 8003330:	bc30      	pop	{r4, r5}
 8003332:	4770      	bx	lr

08003334 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003334:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003336:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003338:	6a04      	ldr	r4, [r0, #32]
 800333a:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 800333e:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003340:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003342:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003346:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800334a:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800334e:	031b      	lsls	r3, r3, #12
 8003350:	b29b      	uxth	r3, r3
 8003352:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003356:	f425 5500 	bic.w	r5, r5, #8192	@ 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800335a:	0309      	lsls	r1, r1, #12
 800335c:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8003360:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003362:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003364:	6201      	str	r1, [r0, #32]
}
 8003366:	bc30      	pop	{r4, r5}
 8003368:	4770      	bx	lr
	...

0800336c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800336c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d127      	bne.n	80033c6 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003376:	2302      	movs	r3, #2
 8003378:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800337c:	6802      	ldr	r2, [r0, #0]
 800337e:	68d3      	ldr	r3, [r2, #12]
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003386:	6803      	ldr	r3, [r0, #0]
 8003388:	4a11      	ldr	r2, [pc, #68]	@ (80033d0 <HAL_TIM_Base_Start_IT+0x64>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d010      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x44>
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003392:	d00d      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x44>
 8003394:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003398:	4293      	cmp	r3, r2
 800339a:	d009      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x44>
 800339c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d005      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80033ac:	2000      	movs	r0, #0
 80033ae:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b6:	2a06      	cmp	r2, #6
 80033b8:	d007      	beq.n	80033ca <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80033c2:	2000      	movs	r0, #0
 80033c4:	4770      	bx	lr
    return HAL_ERROR;
 80033c6:	2001      	movs	r0, #1
 80033c8:	4770      	bx	lr
  return HAL_OK;
 80033ca:	2000      	movs	r0, #0
}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40012c00 	.word	0x40012c00

080033d4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80033d4:	4770      	bx	lr

080033d6 <HAL_TIM_IC_CaptureCallback>:
}
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80033d8:	4770      	bx	lr

080033da <HAL_TIM_TriggerCallback>:
}
 80033da:	4770      	bx	lr

080033dc <HAL_TIM_IRQHandler>:
{
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80033e0:	6803      	ldr	r3, [r0, #0]
 80033e2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033e4:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033e6:	f015 0f02 	tst.w	r5, #2
 80033ea:	d010      	beq.n	800340e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ec:	f016 0f02 	tst.w	r6, #2
 80033f0:	d00d      	beq.n	800340e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033f2:	f06f 0202 	mvn.w	r2, #2
 80033f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033f8:	2301      	movs	r3, #1
 80033fa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033fc:	6803      	ldr	r3, [r0, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f013 0f03 	tst.w	r3, #3
 8003404:	d05e      	beq.n	80034c4 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003406:	f7ff ffe6 	bl	80033d6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	2300      	movs	r3, #0
 800340c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800340e:	f015 0f04 	tst.w	r5, #4
 8003412:	d012      	beq.n	800343a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003414:	f016 0f04 	tst.w	r6, #4
 8003418:	d00f      	beq.n	800343a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	f06f 0204 	mvn.w	r2, #4
 8003420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003422:	2302      	movs	r3, #2
 8003424:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800342e:	d04f      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003430:	4620      	mov	r0, r4
 8003432:	f7ff ffd0 	bl	80033d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	2300      	movs	r3, #0
 8003438:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800343a:	f015 0f08 	tst.w	r5, #8
 800343e:	d012      	beq.n	8003466 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003440:	f016 0f08 	tst.w	r6, #8
 8003444:	d00f      	beq.n	8003466 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	f06f 0208 	mvn.w	r2, #8
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800344e:	2304      	movs	r3, #4
 8003450:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f013 0f03 	tst.w	r3, #3
 800345a:	d040      	beq.n	80034de <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800345c:	4620      	mov	r0, r4
 800345e:	f7ff ffba 	bl	80033d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	2300      	movs	r3, #0
 8003464:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003466:	f015 0f10 	tst.w	r5, #16
 800346a:	d012      	beq.n	8003492 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800346c:	f016 0f10 	tst.w	r6, #16
 8003470:	d00f      	beq.n	8003492 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	f06f 0210 	mvn.w	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347a:	2308      	movs	r3, #8
 800347c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003486:	d031      	beq.n	80034ec <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003488:	4620      	mov	r0, r4
 800348a:	f7ff ffa4 	bl	80033d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	2300      	movs	r3, #0
 8003490:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003492:	f015 0f01 	tst.w	r5, #1
 8003496:	d002      	beq.n	800349e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003498:	f016 0f01 	tst.w	r6, #1
 800349c:	d12d      	bne.n	80034fa <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800349e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80034a2:	d002      	beq.n	80034aa <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034a4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80034a8:	d12f      	bne.n	800350a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034aa:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80034ae:	d002      	beq.n	80034b6 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034b0:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80034b4:	d131      	bne.n	800351a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034b6:	f015 0f20 	tst.w	r5, #32
 80034ba:	d002      	beq.n	80034c2 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034bc:	f016 0f20 	tst.w	r6, #32
 80034c0:	d133      	bne.n	800352a <HAL_TIM_IRQHandler+0x14e>
}
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c4:	f7ff ff86 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff ff85 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80034ce:	e79c      	b.n	800340a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7ff ff7f 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d6:	4620      	mov	r0, r4
 80034d8:	f7ff ff7e 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80034dc:	e7ab      	b.n	8003436 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	4620      	mov	r0, r4
 80034e0:	f7ff ff78 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	4620      	mov	r0, r4
 80034e6:	f7ff ff77 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80034ea:	e7ba      	b.n	8003462 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ec:	4620      	mov	r0, r4
 80034ee:	f7ff ff71 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f2:	4620      	mov	r0, r4
 80034f4:	f7ff ff70 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80034f8:	e7c9      	b.n	800348e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	f06f 0201 	mvn.w	r2, #1
 8003500:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003502:	4620      	mov	r0, r4
 8003504:	f7fd fa26 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
 8003508:	e7c9      	b.n	800349e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003510:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003512:	4620      	mov	r0, r4
 8003514:	f000 faeb 	bl	8003aee <HAL_TIMEx_BreakCallback>
 8003518:	e7c7      	b.n	80034aa <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003520:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003522:	4620      	mov	r0, r4
 8003524:	f7ff ff59 	bl	80033da <HAL_TIM_TriggerCallback>
 8003528:	e7c5      	b.n	80034b6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	f06f 0220 	mvn.w	r2, #32
 8003530:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003532:	4620      	mov	r0, r4
 8003534:	f000 fada 	bl	8003aec <HAL_TIMEx_CommutCallback>
}
 8003538:	e7c3      	b.n	80034c2 <HAL_TIM_IRQHandler+0xe6>
	...

0800353c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800353c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800353e:	4a1f      	ldr	r2, [pc, #124]	@ (80035bc <TIM_Base_SetConfig+0x80>)
 8003540:	4290      	cmp	r0, r2
 8003542:	d00a      	beq.n	800355a <TIM_Base_SetConfig+0x1e>
 8003544:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003548:	d007      	beq.n	800355a <TIM_Base_SetConfig+0x1e>
 800354a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800354e:	4290      	cmp	r0, r2
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0x1e>
 8003552:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003556:	4290      	cmp	r0, r2
 8003558:	d103      	bne.n	8003562 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800355e:	684a      	ldr	r2, [r1, #4]
 8003560:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003562:	4a16      	ldr	r2, [pc, #88]	@ (80035bc <TIM_Base_SetConfig+0x80>)
 8003564:	4290      	cmp	r0, r2
 8003566:	d00a      	beq.n	800357e <TIM_Base_SetConfig+0x42>
 8003568:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800356c:	d007      	beq.n	800357e <TIM_Base_SetConfig+0x42>
 800356e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003572:	4290      	cmp	r0, r2
 8003574:	d003      	beq.n	800357e <TIM_Base_SetConfig+0x42>
 8003576:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800357a:	4290      	cmp	r0, r2
 800357c:	d103      	bne.n	8003586 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800357e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003582:	68ca      	ldr	r2, [r1, #12]
 8003584:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800358a:	694a      	ldr	r2, [r1, #20]
 800358c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800358e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003590:	688b      	ldr	r3, [r1, #8]
 8003592:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003594:	680b      	ldr	r3, [r1, #0]
 8003596:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003598:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <TIM_Base_SetConfig+0x80>)
 800359a:	4298      	cmp	r0, r3
 800359c:	d00a      	beq.n	80035b4 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 800359e:	2301      	movs	r3, #1
 80035a0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035a2:	6903      	ldr	r3, [r0, #16]
 80035a4:	f013 0f01 	tst.w	r3, #1
 80035a8:	d003      	beq.n	80035b2 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035aa:	6903      	ldr	r3, [r0, #16]
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6103      	str	r3, [r0, #16]
}
 80035b2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80035b4:	690b      	ldr	r3, [r1, #16]
 80035b6:	6303      	str	r3, [r0, #48]	@ 0x30
 80035b8:	e7f1      	b.n	800359e <TIM_Base_SetConfig+0x62>
 80035ba:	bf00      	nop
 80035bc:	40012c00 	.word	0x40012c00

080035c0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80035c0:	b340      	cbz	r0, 8003614 <HAL_TIM_PWM_Init+0x54>
{
 80035c2:	b510      	push	{r4, lr}
 80035c4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80035c6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80035ca:	b1f3      	cbz	r3, 800360a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	2302      	movs	r3, #2
 80035ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d2:	4621      	mov	r1, r4
 80035d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80035d8:	f7ff ffb0 	bl	800353c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035dc:	2301      	movs	r3, #1
 80035de:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80035e6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80035ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80035ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035fa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80035fe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003602:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003606:	2000      	movs	r0, #0
}
 8003608:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800360a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800360e:	f7fd fdb9 	bl	8001184 <HAL_TIM_PWM_MspInit>
 8003612:	e7db      	b.n	80035cc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003614:	2001      	movs	r0, #1
}
 8003616:	4770      	bx	lr

08003618 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003618:	b340      	cbz	r0, 800366c <HAL_TIM_IC_Init+0x54>
{
 800361a:	b510      	push	{r4, lr}
 800361c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003622:	b1f3      	cbz	r3, 8003662 <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	2302      	movs	r3, #2
 8003626:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362a:	4621      	mov	r1, r4
 800362c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003630:	f7ff ff84 	bl	800353c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003634:	2301      	movs	r3, #1
 8003636:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800363e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003642:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003646:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800364e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003652:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003656:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800365a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800365e:	2000      	movs	r0, #0
}
 8003660:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003662:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003666:	f7fd fdad 	bl	80011c4 <HAL_TIM_IC_MspInit>
 800366a:	e7db      	b.n	8003624 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800366c:	2001      	movs	r0, #1
}
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8003670:	2800      	cmp	r0, #0
 8003672:	d056      	beq.n	8003722 <HAL_TIM_Encoder_Init+0xb2>
{
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	460d      	mov	r5, r1
 8003678:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800367e:	2b00      	cmp	r3, #0
 8003680:	d04a      	beq.n	8003718 <HAL_TIM_Encoder_Init+0xa8>
  htim->State = HAL_TIM_STATE_BUSY;
 8003682:	2302      	movs	r3, #2
 8003684:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003688:	6822      	ldr	r2, [r4, #0]
 800368a:	6893      	ldr	r3, [r2, #8]
 800368c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003690:	f023 0307 	bic.w	r3, r3, #7
 8003694:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003696:	4621      	mov	r1, r4
 8003698:	f851 0b04 	ldr.w	r0, [r1], #4
 800369c:	f7ff ff4e 	bl	800353c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	6821      	ldr	r1, [r4, #0]
 80036a2:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80036a4:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 80036a6:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 80036a8:	6828      	ldr	r0, [r5, #0]
 80036aa:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80036b0:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036b4:	68ab      	ldr	r3, [r5, #8]
 80036b6:	f8d5 c018 	ldr.w	ip, [r5, #24]
 80036ba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80036be:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036c0:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80036c4:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036c8:	68ea      	ldr	r2, [r5, #12]
 80036ca:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 80036ce:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80036d2:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036d4:	6a2b      	ldr	r3, [r5, #32]
 80036d6:	031b      	lsls	r3, r3, #12
 80036d8:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80036dc:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80036e0:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036e2:	f026 0622 	bic.w	r6, r6, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036e6:	686a      	ldr	r2, [r5, #4]
 80036e8:	696d      	ldr	r5, [r5, #20]
 80036ea:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80036ee:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 80036f0:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80036f2:	6821      	ldr	r1, [r4, #0]
 80036f4:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8003710:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003714:	2000      	movs	r0, #0
}
 8003716:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003718:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800371c:	f7fd fcc4 	bl	80010a8 <HAL_TIM_Encoder_MspInit>
 8003720:	e7af      	b.n	8003682 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8003722:	2001      	movs	r0, #1
}
 8003724:	4770      	bx	lr
	...

08003728 <TIM_OC2_SetConfig>:
{
 8003728:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800372a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372c:	6a02      	ldr	r2, [r0, #32]
 800372e:	f022 0210 	bic.w	r2, r2, #16
 8003732:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003734:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003736:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003738:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373c:	680d      	ldr	r5, [r1, #0]
 800373e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003742:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003746:	688d      	ldr	r5, [r1, #8]
 8003748:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800374c:	4d0c      	ldr	r5, [pc, #48]	@ (8003780 <TIM_OC2_SetConfig+0x58>)
 800374e:	42a8      	cmp	r0, r5
 8003750:	d006      	beq.n	8003760 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003752:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003754:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003756:	684a      	ldr	r2, [r1, #4]
 8003758:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800375a:	6203      	str	r3, [r0, #32]
}
 800375c:	bc30      	pop	{r4, r5}
 800375e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003764:	68cd      	ldr	r5, [r1, #12]
 8003766:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800376a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800376e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003772:	694d      	ldr	r5, [r1, #20]
 8003774:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003778:	698d      	ldr	r5, [r1, #24]
 800377a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800377e:	e7e8      	b.n	8003752 <TIM_OC2_SetConfig+0x2a>
 8003780:	40012c00 	.word	0x40012c00

08003784 <HAL_TIM_PWM_ConfigChannel>:
{
 8003784:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003786:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d066      	beq.n	800385c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800378e:	4604      	mov	r4, r0
 8003790:	460d      	mov	r5, r1
 8003792:	2301      	movs	r3, #1
 8003794:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003798:	2a0c      	cmp	r2, #12
 800379a:	d85a      	bhi.n	8003852 <HAL_TIM_PWM_ConfigChannel+0xce>
 800379c:	e8df f002 	tbb	[pc, r2]
 80037a0:	59595907 	.word	0x59595907
 80037a4:	5959591b 	.word	0x5959591b
 80037a8:	59595930 	.word	0x59595930
 80037ac:	44          	.byte	0x44
 80037ad:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ae:	6800      	ldr	r0, [r0, #0]
 80037b0:	f7ff fd0e 	bl	80031d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	6993      	ldr	r3, [r2, #24]
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037be:	6822      	ldr	r2, [r4, #0]
 80037c0:	6993      	ldr	r3, [r2, #24]
 80037c2:	f023 0304 	bic.w	r3, r3, #4
 80037c6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c8:	6822      	ldr	r2, [r4, #0]
 80037ca:	6993      	ldr	r3, [r2, #24]
 80037cc:	6929      	ldr	r1, [r5, #16]
 80037ce:	430b      	orrs	r3, r1
 80037d0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2000      	movs	r0, #0
      break;
 80037d4:	e03e      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037d6:	6800      	ldr	r0, [r0, #0]
 80037d8:	f7ff ffa6 	bl	8003728 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037dc:	6822      	ldr	r2, [r4, #0]
 80037de:	6993      	ldr	r3, [r2, #24]
 80037e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037e4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	6993      	ldr	r3, [r2, #24]
 80037ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037ee:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	6993      	ldr	r3, [r2, #24]
 80037f4:	6929      	ldr	r1, [r5, #16]
 80037f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037fa:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2000      	movs	r0, #0
      break;
 80037fe:	e029      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003800:	6800      	ldr	r0, [r0, #0]
 8003802:	f7ff fd0f 	bl	8003224 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	69d3      	ldr	r3, [r2, #28]
 800380a:	f043 0308 	orr.w	r3, r3, #8
 800380e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	69d3      	ldr	r3, [r2, #28]
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	69d3      	ldr	r3, [r2, #28]
 800381e:	6929      	ldr	r1, [r5, #16]
 8003820:	430b      	orrs	r3, r1
 8003822:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003824:	2000      	movs	r0, #0
      break;
 8003826:	e015      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003828:	6800      	ldr	r0, [r0, #0]
 800382a:	f7ff fd29 	bl	8003280 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	69d3      	ldr	r3, [r2, #28]
 8003832:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003836:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003838:	6822      	ldr	r2, [r4, #0]
 800383a:	69d3      	ldr	r3, [r2, #28]
 800383c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003840:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	69d3      	ldr	r3, [r2, #28]
 8003846:	6929      	ldr	r1, [r5, #16]
 8003848:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800384c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800384e:	2000      	movs	r0, #0
      break;
 8003850:	e000      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003852:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003854:	2300      	movs	r3, #0
 8003856:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800385a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800385c:	2002      	movs	r0, #2
 800385e:	e7fc      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0xd6>

08003860 <TIM_TI1_SetConfig>:
{
 8003860:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8003862:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003864:	6a04      	ldr	r4, [r0, #32]
 8003866:	f024 0401 	bic.w	r4, r4, #1
 800386a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386c:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800386e:	4e11      	ldr	r6, [pc, #68]	@ (80038b4 <TIM_TI1_SetConfig+0x54>)
 8003870:	42b0      	cmp	r0, r6
 8003872:	d00d      	beq.n	8003890 <TIM_TI1_SetConfig+0x30>
 8003874:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003878:	d00a      	beq.n	8003890 <TIM_TI1_SetConfig+0x30>
 800387a:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800387e:	42b0      	cmp	r0, r6
 8003880:	d006      	beq.n	8003890 <TIM_TI1_SetConfig+0x30>
 8003882:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003886:	42b0      	cmp	r0, r6
 8003888:	d002      	beq.n	8003890 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800388a:	f044 0201 	orr.w	r2, r4, #1
 800388e:	e002      	b.n	8003896 <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003890:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003894:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003896:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a0:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038a4:	f001 010a 	and.w	r1, r1, #10
 80038a8:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80038aa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80038ac:	6201      	str	r1, [r0, #32]
}
 80038ae:	bc70      	pop	{r4, r5, r6}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40012c00 	.word	0x40012c00

080038b8 <HAL_TIM_IC_ConfigChannel>:
{
 80038b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80038ba:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d05e      	beq.n	8003980 <HAL_TIM_IC_ConfigChannel+0xc8>
 80038c2:	4604      	mov	r4, r0
 80038c4:	460d      	mov	r5, r1
 80038c6:	2301      	movs	r3, #1
 80038c8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 80038cc:	2a0c      	cmp	r2, #12
 80038ce:	d852      	bhi.n	8003976 <HAL_TIM_IC_ConfigChannel+0xbe>
 80038d0:	e8df f002 	tbb	[pc, r2]
 80038d4:	51515107 	.word	0x51515107
 80038d8:	51515119 	.word	0x51515119
 80038dc:	5151512c 	.word	0x5151512c
 80038e0:	3e          	.byte	0x3e
 80038e1:	00          	.byte	0x00
    TIM_TI1_SetConfig(htim->Instance,
 80038e2:	68cb      	ldr	r3, [r1, #12]
 80038e4:	684a      	ldr	r2, [r1, #4]
 80038e6:	6809      	ldr	r1, [r1, #0]
 80038e8:	6800      	ldr	r0, [r0, #0]
 80038ea:	f7ff ffb9 	bl	8003860 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038ee:	6822      	ldr	r2, [r4, #0]
 80038f0:	6993      	ldr	r3, [r2, #24]
 80038f2:	f023 030c 	bic.w	r3, r3, #12
 80038f6:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038f8:	6822      	ldr	r2, [r4, #0]
 80038fa:	6993      	ldr	r3, [r2, #24]
 80038fc:	68a9      	ldr	r1, [r5, #8]
 80038fe:	430b      	orrs	r3, r1
 8003900:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2000      	movs	r0, #0
 8003904:	e038      	b.n	8003978 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI2_SetConfig(htim->Instance,
 8003906:	68cb      	ldr	r3, [r1, #12]
 8003908:	684a      	ldr	r2, [r1, #4]
 800390a:	6809      	ldr	r1, [r1, #0]
 800390c:	6800      	ldr	r0, [r0, #0]
 800390e:	f7ff fcdb 	bl	80032c8 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003912:	6822      	ldr	r2, [r4, #0]
 8003914:	6993      	ldr	r3, [r2, #24]
 8003916:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800391a:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	6993      	ldr	r3, [r2, #24]
 8003920:	68a9      	ldr	r1, [r5, #8]
 8003922:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003926:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	2000      	movs	r0, #0
 800392a:	e025      	b.n	8003978 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI3_SetConfig(htim->Instance,
 800392c:	68cb      	ldr	r3, [r1, #12]
 800392e:	684a      	ldr	r2, [r1, #4]
 8003930:	6809      	ldr	r1, [r1, #0]
 8003932:	6800      	ldr	r0, [r0, #0]
 8003934:	f7ff fce3 	bl	80032fe <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	69d3      	ldr	r3, [r2, #28]
 800393c:	f023 030c 	bic.w	r3, r3, #12
 8003940:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	69d3      	ldr	r3, [r2, #28]
 8003946:	68a9      	ldr	r1, [r5, #8]
 8003948:	430b      	orrs	r3, r1
 800394a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2000      	movs	r0, #0
 800394e:	e013      	b.n	8003978 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI4_SetConfig(htim->Instance,
 8003950:	68cb      	ldr	r3, [r1, #12]
 8003952:	684a      	ldr	r2, [r1, #4]
 8003954:	6809      	ldr	r1, [r1, #0]
 8003956:	6800      	ldr	r0, [r0, #0]
 8003958:	f7ff fcec 	bl	8003334 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800395c:	6822      	ldr	r2, [r4, #0]
 800395e:	69d3      	ldr	r3, [r2, #28]
 8003960:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003964:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	69d3      	ldr	r3, [r2, #28]
 800396a:	68a9      	ldr	r1, [r5, #8]
 800396c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003970:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2000      	movs	r0, #0
 8003974:	e000      	b.n	8003978 <HAL_TIM_IC_ConfigChannel+0xc0>
  __HAL_LOCK(htim);
 8003976:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003978:	2300      	movs	r3, #0
 800397a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800397e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003980:	2002      	movs	r0, #2
 8003982:	e7fc      	b.n	800397e <HAL_TIM_IC_ConfigChannel+0xc6>

08003984 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003984:	f001 011f 	and.w	r1, r1, #31
 8003988:	f04f 0c01 	mov.w	ip, #1
 800398c:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003990:	6a03      	ldr	r3, [r0, #32]
 8003992:	ea23 030c 	bic.w	r3, r3, ip
 8003996:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003998:	6a03      	ldr	r3, [r0, #32]
 800399a:	408a      	lsls	r2, r1
 800399c:	4313      	orrs	r3, r2
 800399e:	6203      	str	r3, [r0, #32]
}
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_TIM_PWM_Start>:
{
 80039a4:	b510      	push	{r4, lr}
 80039a6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039a8:	4608      	mov	r0, r1
 80039aa:	bb51      	cbnz	r1, 8003a02 <HAL_TIM_PWM_Start+0x5e>
 80039ac:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	bf18      	it	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d15b      	bne.n	8003a74 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039bc:	2800      	cmp	r0, #0
 80039be:	d139      	bne.n	8003a34 <HAL_TIM_PWM_Start+0x90>
 80039c0:	2302      	movs	r3, #2
 80039c2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039c6:	2201      	movs	r2, #1
 80039c8:	4601      	mov	r1, r0
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	f7ff ffda 	bl	8003984 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a7c <HAL_TIM_PWM_Start+0xd8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d03d      	beq.n	8003a54 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	4a28      	ldr	r2, [pc, #160]	@ (8003a7c <HAL_TIM_PWM_Start+0xd8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d03e      	beq.n	8003a5e <HAL_TIM_PWM_Start+0xba>
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e4:	d03b      	beq.n	8003a5e <HAL_TIM_PWM_Start+0xba>
 80039e6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d037      	beq.n	8003a5e <HAL_TIM_PWM_Start+0xba>
 80039ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d033      	beq.n	8003a5e <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80039fe:	2000      	movs	r0, #0
 8003a00:	e039      	b.n	8003a76 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a02:	2904      	cmp	r1, #4
 8003a04:	d008      	beq.n	8003a18 <HAL_TIM_PWM_Start+0x74>
 8003a06:	2908      	cmp	r1, #8
 8003a08:	d00d      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x82>
 8003a0a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	bf18      	it	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	e7cf      	b.n	80039b8 <HAL_TIM_PWM_Start+0x14>
 8003a18:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	bf18      	it	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	e7c8      	b.n	80039b8 <HAL_TIM_PWM_Start+0x14>
 8003a26:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	bf18      	it	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	e7c1      	b.n	80039b8 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a34:	2804      	cmp	r0, #4
 8003a36:	d005      	beq.n	8003a44 <HAL_TIM_PWM_Start+0xa0>
 8003a38:	2808      	cmp	r0, #8
 8003a3a:	d007      	beq.n	8003a4c <HAL_TIM_PWM_Start+0xa8>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003a42:	e7c0      	b.n	80039c6 <HAL_TIM_PWM_Start+0x22>
 8003a44:	2302      	movs	r3, #2
 8003a46:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003a4a:	e7bc      	b.n	80039c6 <HAL_TIM_PWM_Start+0x22>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003a52:	e7b8      	b.n	80039c6 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8003a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a5a:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a5c:	e7bc      	b.n	80039d8 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a64:	2a06      	cmp	r2, #6
 8003a66:	d007      	beq.n	8003a78 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003a70:	2000      	movs	r0, #0
 8003a72:	e000      	b.n	8003a76 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8003a74:	2001      	movs	r0, #1
}
 8003a76:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003a78:	2000      	movs	r0, #0
 8003a7a:	e7fc      	b.n	8003a76 <HAL_TIM_PWM_Start+0xd2>
 8003a7c:	40012c00 	.word	0x40012c00

08003a80 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a80:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003a84:	2a01      	cmp	r2, #1
 8003a86:	d02c      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8003a88:	b410      	push	{r4}
 8003a8a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a92:	2202      	movs	r2, #2
 8003a94:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a98:	6802      	ldr	r2, [r0, #0]
 8003a9a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a9c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a9e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa2:	6808      	ldr	r0, [r1, #0]
 8003aa4:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aa8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	480e      	ldr	r0, [pc, #56]	@ (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003aae:	4282      	cmp	r2, r0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003ab2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003ab6:	d007      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003ab8:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003abc:	4282      	cmp	r2, r0
 8003abe:	d003      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003ac0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003ac4:	4282      	cmp	r2, r0
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003acc:	6849      	ldr	r1, [r1, #4]
 8003ace:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003ade:	bc10      	pop	{r4}
 8003ae0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ae2:	2002      	movs	r0, #2
}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00

08003aec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aec:	4770      	bx	lr

08003aee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aee:	4770      	bx	lr

08003af0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	f102 030c 	add.w	r3, r2, #12
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	320c      	adds	r2, #12
 8003b00:	e842 3100 	strex	r1, r3, [r2]
 8003b04:	2900      	cmp	r1, #0
 8003b06:	d1f3      	bne.n	8003af0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b08:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	f102 0314 	add.w	r3, r2, #20
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	3214      	adds	r2, #20
 8003b18:	e842 3100 	strex	r1, r3, [r2]
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	d1f3      	bne.n	8003b08 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b20:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d005      	beq.n	8003b32 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b26:	2320      	movs	r3, #32
 8003b28:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003b30:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b32:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	f102 030c 	add.w	r3, r2, #12
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	320c      	adds	r2, #12
 8003b42:	e842 3100 	strex	r1, r3, [r2]
 8003b46:	2900      	cmp	r1, #0
 8003b48:	d1f3      	bne.n	8003b32 <UART_EndRxTransfer+0x42>
 8003b4a:	e7ec      	b.n	8003b26 <UART_EndRxTransfer+0x36>

08003b4c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b4c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b21      	cmp	r3, #33	@ 0x21
 8003b54:	d001      	beq.n	8003b5a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2002      	movs	r0, #2
  }
}
 8003b58:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5a:	6883      	ldr	r3, [r0, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b60:	d017      	beq.n	8003b92 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b62:	6a03      	ldr	r3, [r0, #32]
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	6202      	str	r2, [r0, #32]
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	6803      	ldr	r3, [r0, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003b6e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8003b78:	b94b      	cbnz	r3, 8003b8e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b7a:	6802      	ldr	r2, [r0, #0]
 8003b7c:	68d3      	ldr	r3, [r2, #12]
 8003b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b82:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b84:	6802      	ldr	r2, [r0, #0]
 8003b86:	68d3      	ldr	r3, [r2, #12]
 8003b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b8c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b92:	6903      	ldr	r3, [r0, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e4      	bne.n	8003b62 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b98:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8003ba4:	6a03      	ldr	r3, [r0, #32]
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	6203      	str	r3, [r0, #32]
 8003baa:	e7e0      	b.n	8003b6e <UART_Transmit_IT+0x22>

08003bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bac:	b510      	push	{r4, lr}
 8003bae:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb0:	6802      	ldr	r2, [r0, #0]
 8003bb2:	6913      	ldr	r3, [r2, #16]
 8003bb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bb8:	68c1      	ldr	r1, [r0, #12]
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bbe:	6883      	ldr	r3, [r0, #8]
 8003bc0:	6902      	ldr	r2, [r0, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	6942      	ldr	r2, [r0, #20]
 8003bc6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003bc8:	6801      	ldr	r1, [r0, #0]
 8003bca:	68cb      	ldr	r3, [r1, #12]
 8003bcc:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003bd0:	f023 030c 	bic.w	r3, r3, #12
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd8:	6802      	ldr	r2, [r0, #0]
 8003bda:	6953      	ldr	r3, [r2, #20]
 8003bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be0:	6981      	ldr	r1, [r0, #24]
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003be6:	6802      	ldr	r2, [r0, #0]
 8003be8:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <UART_SetConfig+0x8c>)
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d020      	beq.n	8003c30 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bee:	f7fe fd33 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8003bf2:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003bf8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003bfc:	6863      	ldr	r3, [r4, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c04:	480d      	ldr	r0, [pc, #52]	@ (8003c3c <UART_SetConfig+0x90>)
 8003c06:	fba0 3102 	umull	r3, r1, r0, r2
 8003c0a:	0949      	lsrs	r1, r1, #5
 8003c0c:	2364      	movs	r3, #100	@ 0x64
 8003c0e:	fb03 2311 	mls	r3, r3, r1, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	3332      	adds	r3, #50	@ 0x32
 8003c16:	fba0 0303 	umull	r0, r3, r0, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c20:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	6821      	ldr	r1, [r4, #0]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c2e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c30:	f7fe fd22 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	e7dd      	b.n	8003bf4 <UART_SetConfig+0x48>
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	51eb851f 	.word	0x51eb851f

08003c40 <HAL_UART_Init>:
  if (huart == NULL)
 8003c40:	b360      	cbz	r0, 8003c9c <HAL_UART_Init+0x5c>
{
 8003c42:	b510      	push	{r4, lr}
 8003c44:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c46:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003c4a:	b313      	cbz	r3, 8003c92 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003c4c:	2324      	movs	r3, #36	@ 0x24
 8003c4e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003c52:	6822      	ldr	r2, [r4, #0]
 8003c54:	68d3      	ldr	r3, [r2, #12]
 8003c56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c5a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7ff ffa5 	bl	8003bac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c62:	6822      	ldr	r2, [r4, #0]
 8003c64:	6913      	ldr	r3, [r2, #16]
 8003c66:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003c6a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6c:	6822      	ldr	r2, [r4, #0]
 8003c6e:	6953      	ldr	r3, [r2, #20]
 8003c70:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003c74:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	68d3      	ldr	r3, [r2, #12]
 8003c7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c7e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	2000      	movs	r0, #0
 8003c82:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c84:	2320      	movs	r3, #32
 8003c86:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c8e:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8003c90:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003c92:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003c96:	f7fd fb59 	bl	800134c <HAL_UART_MspInit>
 8003c9a:	e7d7      	b.n	8003c4c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003c9c:	2001      	movs	r0, #1
}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_UART_TxCpltCallback>:
}
 8003ca0:	4770      	bx	lr

08003ca2 <UART_EndTransmit_IT>:
{
 8003ca2:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ca4:	6801      	ldr	r1, [r0, #0]
 8003ca6:	68ca      	ldr	r2, [r1, #12]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cac:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8003cb4:	f7ff fff4 	bl	8003ca0 <HAL_UART_TxCpltCallback>
}
 8003cb8:	2000      	movs	r0, #0
 8003cba:	bd08      	pop	{r3, pc}

08003cbc <HAL_UART_RxCpltCallback>:
}
 8003cbc:	4770      	bx	lr

08003cbe <HAL_UART_ErrorCallback>:
}
 8003cbe:	4770      	bx	lr

08003cc0 <UART_DMAAbortOnError>:
{
 8003cc0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003cc8:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8003cca:	f7ff fff8 	bl	8003cbe <HAL_UART_ErrorCallback>
}
 8003cce:	bd08      	pop	{r3, pc}

08003cd0 <HAL_UARTEx_RxEventCallback>:
}
 8003cd0:	4770      	bx	lr

08003cd2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b22      	cmp	r3, #34	@ 0x22
 8003cda:	d169      	bne.n	8003db0 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	6883      	ldr	r3, [r0, #8]
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce2:	d04f      	beq.n	8003d84 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ce4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cea:	d004      	beq.n	8003cf6 <UART_Receive_IT+0x24>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d156      	bne.n	8003d9e <UART_Receive_IT+0xcc>
 8003cf0:	6903      	ldr	r3, [r0, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d153      	bne.n	8003d9e <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cf6:	6803      	ldr	r3, [r0, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003cfc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003cfe:	3301      	adds	r3, #1
 8003d00:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8003d02:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d151      	bne.n	8003db4 <UART_Receive_IT+0xe2>
{
 8003d10:	b500      	push	{lr}
 8003d12:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d14:	6802      	ldr	r2, [r0, #0]
 8003d16:	68d3      	ldr	r3, [r2, #12]
 8003d18:	f023 0320 	bic.w	r3, r3, #32
 8003d1c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d1e:	6802      	ldr	r2, [r0, #0]
 8003d20:	68d3      	ldr	r3, [r2, #12]
 8003d22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d26:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d28:	6802      	ldr	r2, [r0, #0]
 8003d2a:	6953      	ldr	r3, [r2, #20]
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003d32:	2320      	movs	r3, #32
 8003d34:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d133      	bne.n	8003daa <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	2300      	movs	r3, #0
 8003d44:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	f102 030c 	add.w	r3, r2, #12
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	320c      	adds	r2, #12
 8003d56:	e842 3100 	strex	r1, r3, [r2]
 8003d5a:	2900      	cmp	r1, #0
 8003d5c:	d1f3      	bne.n	8003d46 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d5e:	6803      	ldr	r3, [r0, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	f012 0f10 	tst.w	r2, #16
 8003d66:	d006      	beq.n	8003d76 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d68:	2200      	movs	r2, #0
 8003d6a:	9201      	str	r2, [sp, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	9201      	str	r2, [sp, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d76:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003d78:	f7ff ffaa 	bl	8003cd0 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003d7c:	2000      	movs	r0, #0
}
 8003d7e:	b003      	add	sp, #12
 8003d80:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d84:	6902      	ldr	r2, [r0, #16]
 8003d86:	2a00      	cmp	r2, #0
 8003d88:	d1ac      	bne.n	8003ce4 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d8a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d8c:	6803      	ldr	r3, [r0, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d94:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003d96:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003d98:	3302      	adds	r3, #2
 8003d9a:	6283      	str	r3, [r0, #40]	@ 0x28
 8003d9c:	e7b1      	b.n	8003d02 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d9e:	6803      	ldr	r3, [r0, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da6:	7013      	strb	r3, [r2, #0]
 8003da8:	e7a8      	b.n	8003cfc <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8003daa:	f7ff ff87 	bl	8003cbc <HAL_UART_RxCpltCallback>
 8003dae:	e7e5      	b.n	8003d7c <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8003db0:	2002      	movs	r0, #2
 8003db2:	4770      	bx	lr
    return HAL_OK;
 8003db4:	2000      	movs	r0, #0
}
 8003db6:	4770      	bx	lr

08003db8 <HAL_UART_IRQHandler>:
{
 8003db8:	b510      	push	{r4, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dbe:	6802      	ldr	r2, [r0, #0]
 8003dc0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dc2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dc4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8003dc6:	f013 0f0f 	tst.w	r3, #15
 8003dca:	d109      	bne.n	8003de0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dcc:	f013 0f20 	tst.w	r3, #32
 8003dd0:	d00c      	beq.n	8003dec <HAL_UART_IRQHandler+0x34>
 8003dd2:	f010 0f20 	tst.w	r0, #32
 8003dd6:	d009      	beq.n	8003dec <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7ff ff7a 	bl	8003cd2 <UART_Receive_IT>
      return;
 8003dde:	e016      	b.n	8003e0e <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003de0:	f011 0101 	ands.w	r1, r1, #1
 8003de4:	d115      	bne.n	8003e12 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003de6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8003dea:	d112      	bne.n	8003e12 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003dee:	2901      	cmp	r1, #1
 8003df0:	d079      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003df2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003df6:	d003      	beq.n	8003e00 <HAL_UART_IRQHandler+0x48>
 8003df8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003dfc:	f040 8113 	bne.w	8004026 <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e00:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003e04:	d003      	beq.n	8003e0e <HAL_UART_IRQHandler+0x56>
 8003e06:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8003e0a:	f040 8110 	bne.w	800402e <HAL_UART_IRQHandler+0x276>
}
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e12:	f013 0f01 	tst.w	r3, #1
 8003e16:	d006      	beq.n	8003e26 <HAL_UART_IRQHandler+0x6e>
 8003e18:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003e1c:	d003      	beq.n	8003e26 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e1e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e26:	f013 0f04 	tst.w	r3, #4
 8003e2a:	d004      	beq.n	8003e36 <HAL_UART_IRQHandler+0x7e>
 8003e2c:	b119      	cbz	r1, 8003e36 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e2e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e30:	f042 0202 	orr.w	r2, r2, #2
 8003e34:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e36:	f013 0f02 	tst.w	r3, #2
 8003e3a:	d004      	beq.n	8003e46 <HAL_UART_IRQHandler+0x8e>
 8003e3c:	b119      	cbz	r1, 8003e46 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e3e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e40:	f042 0204 	orr.w	r2, r2, #4
 8003e44:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e46:	f013 0f08 	tst.w	r3, #8
 8003e4a:	d007      	beq.n	8003e5c <HAL_UART_IRQHandler+0xa4>
 8003e4c:	f010 0f20 	tst.w	r0, #32
 8003e50:	d100      	bne.n	8003e54 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e52:	b119      	cbz	r1, 8003e5c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e54:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e56:	f042 0208 	orr.w	r2, r2, #8
 8003e5a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e5c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e5e:	2a00      	cmp	r2, #0
 8003e60:	d0d5      	beq.n	8003e0e <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e62:	f013 0f20 	tst.w	r3, #32
 8003e66:	d002      	beq.n	8003e6e <HAL_UART_IRQHandler+0xb6>
 8003e68:	f010 0f20 	tst.w	r0, #32
 8003e6c:	d129      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e76:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e78:	f012 0f08 	tst.w	r2, #8
 8003e7c:	d100      	bne.n	8003e80 <HAL_UART_IRQHandler+0xc8>
 8003e7e:	b363      	cbz	r3, 8003eda <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003e80:	4620      	mov	r0, r4
 8003e82:	f7ff fe35 	bl	8003af0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003e8e:	d020      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e90:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	f102 0314 	add.w	r3, r2, #20
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	3214      	adds	r2, #20
 8003ea0:	e842 3100 	strex	r1, r3, [r2]
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	d1f3      	bne.n	8003e90 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8003ea8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003eaa:	b173      	cbz	r3, 8003eca <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eac:	4a62      	ldr	r2, [pc, #392]	@ (8004038 <HAL_UART_IRQHandler+0x280>)
 8003eae:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eb0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003eb2:	f7fd feb5 	bl	8001c20 <HAL_DMA_Abort_IT>
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d0a9      	beq.n	8003e0e <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eba:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003ebc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003ebe:	4798      	blx	r3
 8003ec0:	e7a5      	b.n	8003e0e <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7ff ff05 	bl	8003cd2 <UART_Receive_IT>
 8003ec8:	e7d1      	b.n	8003e6e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7ff fef7 	bl	8003cbe <HAL_UART_ErrorCallback>
 8003ed0:	e79d      	b.n	8003e0e <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7ff fef3 	bl	8003cbe <HAL_UART_ErrorCallback>
 8003ed8:	e799      	b.n	8003e0e <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7ff feef 	bl	8003cbe <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8003ee4:	e793      	b.n	8003e0e <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ee6:	f013 0f10 	tst.w	r3, #16
 8003eea:	d082      	beq.n	8003df2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003eec:	f010 0f10 	tst.w	r0, #16
 8003ef0:	f43f af7f 	beq.w	8003df2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6813      	ldr	r3, [r2, #0]
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	6853      	ldr	r3, [r2, #4]
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f02:	6953      	ldr	r3, [r2, #20]
 8003f04:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003f08:	d051      	beq.n	8003fae <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f0a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003f0c:	6813      	ldr	r3, [r2, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f43f af7b 	beq.w	8003e0e <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f18:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003f1a:	4299      	cmp	r1, r3
 8003f1c:	f67f af77 	bls.w	8003e0e <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8003f20:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f22:	6993      	ldr	r3, [r2, #24]
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d037      	beq.n	8003f98 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f28:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	f102 030c 	add.w	r3, r2, #12
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	320c      	adds	r2, #12
 8003f38:	e842 3100 	strex	r1, r3, [r2]
 8003f3c:	2900      	cmp	r1, #0
 8003f3e:	d1f3      	bne.n	8003f28 <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	f102 0314 	add.w	r3, r2, #20
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	3214      	adds	r2, #20
 8003f50:	e842 3100 	strex	r1, r3, [r2]
 8003f54:	2900      	cmp	r1, #0
 8003f56:	d1f3      	bne.n	8003f40 <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f58:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	f102 0314 	add.w	r3, r2, #20
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	3214      	adds	r2, #20
 8003f68:	e842 3100 	strex	r1, r3, [r2]
 8003f6c:	2900      	cmp	r1, #0
 8003f6e:	d1f3      	bne.n	8003f58 <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 8003f70:	2320      	movs	r3, #32
 8003f72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	2300      	movs	r3, #0
 8003f78:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	f102 030c 	add.w	r3, r2, #12
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	320c      	adds	r2, #12
 8003f8a:	e842 3100 	strex	r1, r3, [r2]
 8003f8e:	2900      	cmp	r1, #0
 8003f90:	d1f3      	bne.n	8003f7a <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f92:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003f94:	f7fd fe21 	bl	8001bda <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f9c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003f9e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	1ac9      	subs	r1, r1, r3
 8003fa4:	b289      	uxth	r1, r1
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7ff fe92 	bl	8003cd0 <HAL_UARTEx_RxEventCallback>
      return;
 8003fac:	e72f      	b.n	8003e0e <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fae:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003fb0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	1ac9      	subs	r1, r1, r3
 8003fb6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003fb8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f43f af26 	beq.w	8003e0e <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8003fc2:	2900      	cmp	r1, #0
 8003fc4:	f43f af23 	beq.w	8003e0e <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	f102 030c 	add.w	r3, r2, #12
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	320c      	adds	r2, #12
 8003fd8:	e842 3000 	strex	r0, r3, [r2]
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d1f3      	bne.n	8003fc8 <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	f102 0314 	add.w	r3, r2, #20
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	3214      	adds	r2, #20
 8003ff0:	e842 3000 	strex	r0, r3, [r2]
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d1f3      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	2300      	movs	r3, #0
 8004000:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004002:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	f102 030c 	add.w	r3, r2, #12
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	320c      	adds	r2, #12
 8004012:	e842 3000 	strex	r0, r3, [r2]
 8004016:	2800      	cmp	r0, #0
 8004018:	d1f3      	bne.n	8004002 <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800401a:	2302      	movs	r3, #2
 800401c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800401e:	4620      	mov	r0, r4
 8004020:	f7ff fe56 	bl	8003cd0 <HAL_UARTEx_RxEventCallback>
      return;
 8004024:	e6f3      	b.n	8003e0e <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8004026:	4620      	mov	r0, r4
 8004028:	f7ff fd90 	bl	8003b4c <UART_Transmit_IT>
    return;
 800402c:	e6ef      	b.n	8003e0e <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 800402e:	4620      	mov	r0, r4
 8004030:	f7ff fe37 	bl	8003ca2 <UART_EndTransmit_IT>
    return;
 8004034:	e6eb      	b.n	8003e0e <HAL_UART_IRQHandler+0x56>
 8004036:	bf00      	nop
 8004038:	08003cc1 	.word	0x08003cc1

0800403c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800403c:	f7fc ff8c 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004040:	480b      	ldr	r0, [pc, #44]	@ (8004070 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004042:	490c      	ldr	r1, [pc, #48]	@ (8004074 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004044:	4a0c      	ldr	r2, [pc, #48]	@ (8004078 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004048:	e002      	b.n	8004050 <LoopCopyDataInit>

0800404a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800404a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800404c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800404e:	3304      	adds	r3, #4

08004050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004054:	d3f9      	bcc.n	800404a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004056:	4a09      	ldr	r2, [pc, #36]	@ (800407c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004058:	4c09      	ldr	r4, [pc, #36]	@ (8004080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800405a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800405c:	e001      	b.n	8004062 <LoopFillZerobss>

0800405e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800405e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004060:	3204      	adds	r2, #4

08004062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004064:	d3fb      	bcc.n	800405e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004066:	f000 f817 	bl	8004098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800406a:	f7fc fd49 	bl	8000b00 <main>
  bx lr
 800406e:	4770      	bx	lr
  ldr r0, =_sdata
 8004070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004074:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8004078:	08004140 	.word	0x08004140
  ldr r2, =_sbss
 800407c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8004080:	2000043c 	.word	0x2000043c

08004084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004084:	e7fe      	b.n	8004084 <ADC1_2_IRQHandler>

08004086 <memset>:
 8004086:	4603      	mov	r3, r0
 8004088:	4402      	add	r2, r0
 800408a:	4293      	cmp	r3, r2
 800408c:	d100      	bne.n	8004090 <memset+0xa>
 800408e:	4770      	bx	lr
 8004090:	f803 1b01 	strb.w	r1, [r3], #1
 8004094:	e7f9      	b.n	800408a <memset+0x4>
	...

08004098 <__libc_init_array>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	2600      	movs	r6, #0
 800409c:	4d0c      	ldr	r5, [pc, #48]	@ (80040d0 <__libc_init_array+0x38>)
 800409e:	4c0d      	ldr	r4, [pc, #52]	@ (80040d4 <__libc_init_array+0x3c>)
 80040a0:	1b64      	subs	r4, r4, r5
 80040a2:	10a4      	asrs	r4, r4, #2
 80040a4:	42a6      	cmp	r6, r4
 80040a6:	d109      	bne.n	80040bc <__libc_init_array+0x24>
 80040a8:	f000 f81a 	bl	80040e0 <_init>
 80040ac:	2600      	movs	r6, #0
 80040ae:	4d0a      	ldr	r5, [pc, #40]	@ (80040d8 <__libc_init_array+0x40>)
 80040b0:	4c0a      	ldr	r4, [pc, #40]	@ (80040dc <__libc_init_array+0x44>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	42a6      	cmp	r6, r4
 80040b8:	d105      	bne.n	80040c6 <__libc_init_array+0x2e>
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c0:	4798      	blx	r3
 80040c2:	3601      	adds	r6, #1
 80040c4:	e7ee      	b.n	80040a4 <__libc_init_array+0xc>
 80040c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ca:	4798      	blx	r3
 80040cc:	3601      	adds	r6, #1
 80040ce:	e7f2      	b.n	80040b6 <__libc_init_array+0x1e>
 80040d0:	08004138 	.word	0x08004138
 80040d4:	08004138 	.word	0x08004138
 80040d8:	08004138 	.word	0x08004138
 80040dc:	0800413c 	.word	0x0800413c

080040e0 <_init>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	bf00      	nop
 80040e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e6:	bc08      	pop	{r3}
 80040e8:	469e      	mov	lr, r3
 80040ea:	4770      	bx	lr

080040ec <_fini>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr
