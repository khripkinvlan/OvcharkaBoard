
build/ovcharka-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005168  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005274  08005274  00006274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080052b4  080052b4  000062b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080052b8  080052b8  000062b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000ac  20000000  080052bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000064c  200000ac  08005368  000070ac  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200006f8  08005368  000076f8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  000070d5  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f8f2  00000000  00000000  0000710e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004cb5  00000000  00000000  00026a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000c59f  00000000  00000000  0002b6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001420  00000000  00000000  00037c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f13  00000000  00000000  00039078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000169bc  00000000  00000000  00039f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00005d7d  00000000  00000000  00050947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000033a8  00000000  00000000  000566c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000016d  00000000  00000000  00059a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__aeabi_fmul>:
 800010c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000110:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000114:	bf1e      	ittt	ne
 8000116:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800011a:	ea92 0f0c 	teqne	r2, ip
 800011e:	ea93 0f0c 	teqne	r3, ip
 8000122:	d06f      	beq.n	8000204 <__aeabi_fmul+0xf8>
 8000124:	441a      	add	r2, r3
 8000126:	ea80 0c01 	eor.w	ip, r0, r1
 800012a:	0240      	lsls	r0, r0, #9
 800012c:	bf18      	it	ne
 800012e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000132:	d01e      	beq.n	8000172 <__aeabi_fmul+0x66>
 8000134:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000138:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800013c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000140:	fba0 3101 	umull	r3, r1, r0, r1
 8000144:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000148:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800014c:	bf3e      	ittt	cc
 800014e:	0049      	lslcc	r1, r1, #1
 8000150:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000154:	005b      	lslcc	r3, r3, #1
 8000156:	ea40 0001 	orr.w	r0, r0, r1
 800015a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800015e:	2afd      	cmp	r2, #253	@ 0xfd
 8000160:	d81d      	bhi.n	800019e <__aeabi_fmul+0x92>
 8000162:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000166:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800016a:	bf08      	it	eq
 800016c:	f020 0001 	biceq.w	r0, r0, #1
 8000170:	4770      	bx	lr
 8000172:	f090 0f00 	teq	r0, #0
 8000176:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800017a:	bf08      	it	eq
 800017c:	0249      	lsleq	r1, r1, #9
 800017e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000182:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000186:	3a7f      	subs	r2, #127	@ 0x7f
 8000188:	bfc2      	ittt	gt
 800018a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800018e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000192:	4770      	bxgt	lr
 8000194:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000198:	f04f 0300 	mov.w	r3, #0
 800019c:	3a01      	subs	r2, #1
 800019e:	dc5d      	bgt.n	800025c <__aeabi_fmul+0x150>
 80001a0:	f112 0f19 	cmn.w	r2, #25
 80001a4:	bfdc      	itt	le
 80001a6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001aa:	4770      	bxle	lr
 80001ac:	f1c2 0200 	rsb	r2, r2, #0
 80001b0:	0041      	lsls	r1, r0, #1
 80001b2:	fa21 f102 	lsr.w	r1, r1, r2
 80001b6:	f1c2 0220 	rsb	r2, r2, #32
 80001ba:	fa00 fc02 	lsl.w	ip, r0, r2
 80001be:	ea5f 0031 	movs.w	r0, r1, rrx
 80001c2:	f140 0000 	adc.w	r0, r0, #0
 80001c6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80001ca:	bf08      	it	eq
 80001cc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80001d0:	4770      	bx	lr
 80001d2:	f092 0f00 	teq	r2, #0
 80001d6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80001da:	bf02      	ittt	eq
 80001dc:	0040      	lsleq	r0, r0, #1
 80001de:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80001e2:	3a01      	subeq	r2, #1
 80001e4:	d0f9      	beq.n	80001da <__aeabi_fmul+0xce>
 80001e6:	ea40 000c 	orr.w	r0, r0, ip
 80001ea:	f093 0f00 	teq	r3, #0
 80001ee:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80001f2:	bf02      	ittt	eq
 80001f4:	0049      	lsleq	r1, r1, #1
 80001f6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80001fa:	3b01      	subeq	r3, #1
 80001fc:	d0f9      	beq.n	80001f2 <__aeabi_fmul+0xe6>
 80001fe:	ea41 010c 	orr.w	r1, r1, ip
 8000202:	e78f      	b.n	8000124 <__aeabi_fmul+0x18>
 8000204:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000208:	ea92 0f0c 	teq	r2, ip
 800020c:	bf18      	it	ne
 800020e:	ea93 0f0c 	teqne	r3, ip
 8000212:	d00a      	beq.n	800022a <__aeabi_fmul+0x11e>
 8000214:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000218:	bf18      	it	ne
 800021a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800021e:	d1d8      	bne.n	80001d2 <__aeabi_fmul+0xc6>
 8000220:	ea80 0001 	eor.w	r0, r0, r1
 8000224:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000228:	4770      	bx	lr
 800022a:	f090 0f00 	teq	r0, #0
 800022e:	bf17      	itett	ne
 8000230:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000234:	4608      	moveq	r0, r1
 8000236:	f091 0f00 	teqne	r1, #0
 800023a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800023e:	d014      	beq.n	800026a <__aeabi_fmul+0x15e>
 8000240:	ea92 0f0c 	teq	r2, ip
 8000244:	d101      	bne.n	800024a <__aeabi_fmul+0x13e>
 8000246:	0242      	lsls	r2, r0, #9
 8000248:	d10f      	bne.n	800026a <__aeabi_fmul+0x15e>
 800024a:	ea93 0f0c 	teq	r3, ip
 800024e:	d103      	bne.n	8000258 <__aeabi_fmul+0x14c>
 8000250:	024b      	lsls	r3, r1, #9
 8000252:	bf18      	it	ne
 8000254:	4608      	movne	r0, r1
 8000256:	d108      	bne.n	800026a <__aeabi_fmul+0x15e>
 8000258:	ea80 0001 	eor.w	r0, r0, r1
 800025c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000260:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000264:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000268:	4770      	bx	lr
 800026a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800026e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000272:	4770      	bx	lr

08000274 <__aeabi_fdiv>:
 8000274:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000278:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800027c:	bf1e      	ittt	ne
 800027e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000282:	ea92 0f0c 	teqne	r2, ip
 8000286:	ea93 0f0c 	teqne	r3, ip
 800028a:	d069      	beq.n	8000360 <__aeabi_fdiv+0xec>
 800028c:	eba2 0203 	sub.w	r2, r2, r3
 8000290:	ea80 0c01 	eor.w	ip, r0, r1
 8000294:	0249      	lsls	r1, r1, #9
 8000296:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800029a:	d037      	beq.n	800030c <__aeabi_fdiv+0x98>
 800029c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80002a0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80002a4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80002a8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80002ac:	428b      	cmp	r3, r1
 80002ae:	bf38      	it	cc
 80002b0:	005b      	lslcc	r3, r3, #1
 80002b2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80002b6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80002ba:	428b      	cmp	r3, r1
 80002bc:	bf24      	itt	cs
 80002be:	1a5b      	subcs	r3, r3, r1
 80002c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80002c4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80002c8:	bf24      	itt	cs
 80002ca:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80002ce:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80002d2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80002d6:	bf24      	itt	cs
 80002d8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80002dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80002e0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80002e4:	bf24      	itt	cs
 80002e6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80002ea:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80002ee:	011b      	lsls	r3, r3, #4
 80002f0:	bf18      	it	ne
 80002f2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80002f6:	d1e0      	bne.n	80002ba <__aeabi_fdiv+0x46>
 80002f8:	2afd      	cmp	r2, #253	@ 0xfd
 80002fa:	f63f af50 	bhi.w	800019e <__aeabi_fmul+0x92>
 80002fe:	428b      	cmp	r3, r1
 8000300:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000304:	bf08      	it	eq
 8000306:	f020 0001 	biceq.w	r0, r0, #1
 800030a:	4770      	bx	lr
 800030c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000310:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000314:	327f      	adds	r2, #127	@ 0x7f
 8000316:	bfc2      	ittt	gt
 8000318:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800031c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000320:	4770      	bxgt	lr
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000326:	f04f 0300 	mov.w	r3, #0
 800032a:	3a01      	subs	r2, #1
 800032c:	e737      	b.n	800019e <__aeabi_fmul+0x92>
 800032e:	f092 0f00 	teq	r2, #0
 8000332:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000336:	bf02      	ittt	eq
 8000338:	0040      	lsleq	r0, r0, #1
 800033a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800033e:	3a01      	subeq	r2, #1
 8000340:	d0f9      	beq.n	8000336 <__aeabi_fdiv+0xc2>
 8000342:	ea40 000c 	orr.w	r0, r0, ip
 8000346:	f093 0f00 	teq	r3, #0
 800034a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800034e:	bf02      	ittt	eq
 8000350:	0049      	lsleq	r1, r1, #1
 8000352:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000356:	3b01      	subeq	r3, #1
 8000358:	d0f9      	beq.n	800034e <__aeabi_fdiv+0xda>
 800035a:	ea41 010c 	orr.w	r1, r1, ip
 800035e:	e795      	b.n	800028c <__aeabi_fdiv+0x18>
 8000360:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000364:	ea92 0f0c 	teq	r2, ip
 8000368:	d108      	bne.n	800037c <__aeabi_fdiv+0x108>
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	f47f af7d 	bne.w	800026a <__aeabi_fmul+0x15e>
 8000370:	ea93 0f0c 	teq	r3, ip
 8000374:	f47f af70 	bne.w	8000258 <__aeabi_fmul+0x14c>
 8000378:	4608      	mov	r0, r1
 800037a:	e776      	b.n	800026a <__aeabi_fmul+0x15e>
 800037c:	ea93 0f0c 	teq	r3, ip
 8000380:	d104      	bne.n	800038c <__aeabi_fdiv+0x118>
 8000382:	024b      	lsls	r3, r1, #9
 8000384:	f43f af4c 	beq.w	8000220 <__aeabi_fmul+0x114>
 8000388:	4608      	mov	r0, r1
 800038a:	e76e      	b.n	800026a <__aeabi_fmul+0x15e>
 800038c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000390:	bf18      	it	ne
 8000392:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000396:	d1ca      	bne.n	800032e <__aeabi_fdiv+0xba>
 8000398:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800039c:	f47f af5c 	bne.w	8000258 <__aeabi_fmul+0x14c>
 80003a0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80003a4:	f47f af3c 	bne.w	8000220 <__aeabi_fmul+0x114>
 80003a8:	e75f      	b.n	800026a <__aeabi_fmul+0x15e>
 80003aa:	bf00      	nop

080003ac <__aeabi_f2iz>:
 80003ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80003b4:	d30f      	bcc.n	80003d6 <__aeabi_f2iz+0x2a>
 80003b6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80003ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80003be:	d90d      	bls.n	80003dc <__aeabi_f2iz+0x30>
 80003c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80003c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80003c8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003cc:	fa23 f002 	lsr.w	r0, r3, r2
 80003d0:	bf18      	it	ne
 80003d2:	4240      	negne	r0, r0
 80003d4:	4770      	bx	lr
 80003d6:	f04f 0000 	mov.w	r0, #0
 80003da:	4770      	bx	lr
 80003dc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80003e0:	d101      	bne.n	80003e6 <__aeabi_f2iz+0x3a>
 80003e2:	0242      	lsls	r2, r0, #9
 80003e4:	d105      	bne.n	80003f2 <__aeabi_f2iz+0x46>
 80003e6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80003f0:	4770      	bx	lr
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	4770      	bx	lr

080003f8 <__do_global_dtors_aux>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	4c05      	ldr	r4, [pc, #20]	@ (8000410 <__do_global_dtors_aux+0x18>)
 80003fc:	7823      	ldrb	r3, [r4, #0]
 80003fe:	b933      	cbnz	r3, 800040e <__do_global_dtors_aux+0x16>
 8000400:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <__do_global_dtors_aux+0x1c>)
 8000402:	b113      	cbz	r3, 800040a <__do_global_dtors_aux+0x12>
 8000404:	4804      	ldr	r0, [pc, #16]	@ (8000418 <__do_global_dtors_aux+0x20>)
 8000406:	f3af 8000 	nop.w
 800040a:	2301      	movs	r3, #1
 800040c:	7023      	strb	r3, [r4, #0]
 800040e:	bd10      	pop	{r4, pc}
 8000410:	200000ac 	.word	0x200000ac
 8000414:	00000000 	.word	0x00000000
 8000418:	0800525c 	.word	0x0800525c

0800041c <frame_dummy>:
 800041c:	b508      	push	{r3, lr}
 800041e:	4b03      	ldr	r3, [pc, #12]	@ (800042c <frame_dummy+0x10>)
 8000420:	b11b      	cbz	r3, 800042a <frame_dummy+0xe>
 8000422:	4903      	ldr	r1, [pc, #12]	@ (8000430 <frame_dummy+0x14>)
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <frame_dummy+0x18>)
 8000426:	f3af 8000 	nop.w
 800042a:	bd08      	pop	{r3, pc}
 800042c:	00000000 	.word	0x00000000
 8000430:	200000b0 	.word	0x200000b0
 8000434:	0800525c 	.word	0x0800525c

08000438 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000438:	b500      	push	{lr}
 800043a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800043c:	2300      	movs	r3, #0
 800043e:	9301      	str	r3, [sp, #4]
 8000440:	9302      	str	r3, [sp, #8]
 8000442:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000444:	4817      	ldr	r0, [pc, #92]	@ (80004a4 <MX_ADC1_Init+0x6c>)
 8000446:	4a18      	ldr	r2, [pc, #96]	@ (80004a8 <MX_ADC1_Init+0x70>)
 8000448:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800044a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800044e:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000450:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000452:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000454:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000458:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800045a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 800045c:	2302      	movs	r3, #2
 800045e:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000460:	f002 f9b8 	bl	80027d4 <HAL_ADC_Init>
 8000464:	b9a8      	cbnz	r0, 8000492 <MX_ADC1_Init+0x5a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000466:	2303      	movs	r3, #3
 8000468:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046a:	2301      	movs	r3, #1
 800046c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800046e:	2307      	movs	r3, #7
 8000470:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000472:	a901      	add	r1, sp, #4
 8000474:	480b      	ldr	r0, [pc, #44]	@ (80004a4 <MX_ADC1_Init+0x6c>)
 8000476:	f002 f805 	bl	8002484 <HAL_ADC_ConfigChannel>
 800047a:	b968      	cbnz	r0, 8000498 <MX_ADC1_Init+0x60>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800047c:	2302      	movs	r3, #2
 800047e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000480:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000482:	a901      	add	r1, sp, #4
 8000484:	4807      	ldr	r0, [pc, #28]	@ (80004a4 <MX_ADC1_Init+0x6c>)
 8000486:	f001 fffd 	bl	8002484 <HAL_ADC_ConfigChannel>
 800048a:	b940      	cbnz	r0, 800049e <MX_ADC1_Init+0x66>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800048c:	b005      	add	sp, #20
 800048e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000492:	f000 fd31 	bl	8000ef8 <Error_Handler>
 8000496:	e7e6      	b.n	8000466 <MX_ADC1_Init+0x2e>
    Error_Handler();
 8000498:	f000 fd2e 	bl	8000ef8 <Error_Handler>
 800049c:	e7ee      	b.n	800047c <MX_ADC1_Init+0x44>
    Error_Handler();
 800049e:	f000 fd2b 	bl	8000ef8 <Error_Handler>
}
 80004a2:	e7f3      	b.n	800048c <MX_ADC1_Init+0x54>
 80004a4:	2000010c 	.word	0x2000010c
 80004a8:	40012400 	.word	0x40012400

080004ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004ac:	b510      	push	{r4, lr}
 80004ae:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	2300      	movs	r3, #0
 80004b2:	9302      	str	r3, [sp, #8]
 80004b4:	9303      	str	r3, [sp, #12]
 80004b6:	9304      	str	r3, [sp, #16]
 80004b8:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 80004ba:	6802      	ldr	r2, [r0, #0]
 80004bc:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <HAL_ADC_MspInit+0x90>)
 80004be:	429a      	cmp	r2, r3
 80004c0:	d001      	beq.n	80004c6 <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004c2:	b006      	add	sp, #24
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004c8:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80004cc:	699a      	ldr	r2, [r3, #24]
 80004ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80004d2:	619a      	str	r2, [r3, #24]
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80004da:	9200      	str	r2, [sp, #0]
 80004dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	699a      	ldr	r2, [r3, #24]
 80004e0:	f042 0204 	orr.w	r2, r2, #4
 80004e4:	619a      	str	r2, [r3, #24]
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CS2_Pin|CS1_Pin;
 80004f0:	230c      	movs	r3, #12
 80004f2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f4:	2303      	movs	r3, #3
 80004f6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	a902      	add	r1, sp, #8
 80004fa:	4811      	ldr	r0, [pc, #68]	@ (8000540 <HAL_ADC_MspInit+0x94>)
 80004fc:	f002 fc7c 	bl	8002df8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000500:	4810      	ldr	r0, [pc, #64]	@ (8000544 <HAL_ADC_MspInit+0x98>)
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <HAL_ADC_MspInit+0x9c>)
 8000504:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000506:	2300      	movs	r3, #0
 8000508:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800050a:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800050c:	2380      	movs	r3, #128	@ 0x80
 800050e:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000510:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000514:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800051a:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800051c:	2320      	movs	r3, #32
 800051e:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000524:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000526:	f002 fae7 	bl	8002af8 <HAL_DMA_Init>
 800052a:	b918      	cbnz	r0, 8000534 <HAL_ADC_MspInit+0x88>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <HAL_ADC_MspInit+0x98>)
 800052e:	6223      	str	r3, [r4, #32]
 8000530:	625c      	str	r4, [r3, #36]	@ 0x24
}
 8000532:	e7c6      	b.n	80004c2 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8000534:	f000 fce0 	bl	8000ef8 <Error_Handler>
 8000538:	e7f8      	b.n	800052c <HAL_ADC_MspInit+0x80>
 800053a:	bf00      	nop
 800053c:	40012400 	.word	0x40012400
 8000540:	40010800 	.word	0x40010800
 8000544:	200000c8 	.word	0x200000c8
 8000548:	40020008 	.word	0x40020008

0800054c <adc_cur_init>:
int16_t CS_ADC_M2_Offset = M2_ADC_OFFSET;
float CS_ADC_M1_Gain = 0.00107;
float CS_ADC_M2_Gain = 0.00107;

void adc_cur_init()
{
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Starting DMA for capturing current measures from ADC
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc, 2);
 800054e:	4c0e      	ldr	r4, [pc, #56]	@ (8000588 <adc_cur_init+0x3c>)
 8000550:	2202      	movs	r2, #2
 8000552:	4621      	mov	r1, r4
 8000554:	480d      	ldr	r0, [pc, #52]	@ (800058c <adc_cur_init+0x40>)
 8000556:	f002 f879 	bl	800264c <HAL_ADC_Start_DMA>

    // Initia;lization of filters
    initEMA_iq18(&filter1, 0.005, _IQ18(CS_ADC_M1_Offset));
 800055a:	4e0d      	ldr	r6, [pc, #52]	@ (8000590 <adc_cur_init+0x44>)
 800055c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8000560:	4f0c      	ldr	r7, [pc, #48]	@ (8000594 <adc_cur_init+0x48>)
 8000562:	0492      	lsls	r2, r2, #18
 8000564:	4639      	mov	r1, r7
 8000566:	480c      	ldr	r0, [pc, #48]	@ (8000598 <adc_cur_init+0x4c>)
 8000568:	f000 f9b5 	bl	80008d6 <initEMA_iq18>
    initEMA_iq18(&filter2, 0.005, _IQ18(CS_ADC_M2_Offset));
 800056c:	4d0b      	ldr	r5, [pc, #44]	@ (800059c <adc_cur_init+0x50>)
 800056e:	f9b5 2000 	ldrsh.w	r2, [r5]
 8000572:	0492      	lsls	r2, r2, #18
 8000574:	4639      	mov	r1, r7
 8000576:	480a      	ldr	r0, [pc, #40]	@ (80005a0 <adc_cur_init+0x54>)
 8000578:	f000 f9ad 	bl	80008d6 <initEMA_iq18>
    adc[0] = CS_ADC_M1_Offset;
 800057c:	8833      	ldrh	r3, [r6, #0]
 800057e:	8023      	strh	r3, [r4, #0]
    adc[1] = CS_ADC_M2_Offset;
 8000580:	882b      	ldrh	r3, [r5, #0]
 8000582:	8063      	strh	r3, [r4, #2]
}
 8000584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000586:	bf00      	nop
 8000588:	20000154 	.word	0x20000154
 800058c:	2000010c 	.word	0x2000010c
 8000590:	2000000a 	.word	0x2000000a
 8000594:	3ba3d70a 	.word	0x3ba3d70a
 8000598:	20000144 	.word	0x20000144
 800059c:	20000008 	.word	0x20000008
 80005a0:	2000013c 	.word	0x2000013c

080005a4 <adc_callback_handler>:

void adc_callback_handler()
{
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _iq18 adc0_filtered = updateEMA_iq18(&filter1, _IQ18(adc[0]));
 80005a6:	4f18      	ldr	r7, [pc, #96]	@ (8000608 <adc_callback_handler+0x64>)
 80005a8:	8839      	ldrh	r1, [r7, #0]
 80005aa:	0489      	lsls	r1, r1, #18
 80005ac:	4817      	ldr	r0, [pc, #92]	@ (800060c <adc_callback_handler+0x68>)
 80005ae:	f000 f99f 	bl	80008f0 <updateEMA_iq18>
 80005b2:	4605      	mov	r5, r0
    current[0] = _IQ18mpy((adc0_filtered - _IQ18(CS_ADC_M1_Offset)), _IQ18(CS_ADC_M1_Gain));
 80005b4:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <adc_callback_handler+0x6c>)
 80005b6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80005ba:	04a4      	lsls	r4, r4, #18
 80005bc:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <adc_callback_handler+0x70>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	f7ff fda2 	bl	800010c <__aeabi_fmul>
 80005c8:	f7ff fef0 	bl	80003ac <__aeabi_f2iz>
 80005cc:	4601      	mov	r1, r0
 80005ce:	1b28      	subs	r0, r5, r4
 80005d0:	f004 fdfc 	bl	80051cc <_IQ18mpy>
 80005d4:	4e10      	ldr	r6, [pc, #64]	@ (8000618 <adc_callback_handler+0x74>)
 80005d6:	6030      	str	r0, [r6, #0]

    _iq18 adc1_filtered = updateEMA_iq18(&filter2, _IQ18(adc[1]));
 80005d8:	8879      	ldrh	r1, [r7, #2]
 80005da:	0489      	lsls	r1, r1, #18
 80005dc:	480f      	ldr	r0, [pc, #60]	@ (800061c <adc_callback_handler+0x78>)
 80005de:	f000 f987 	bl	80008f0 <updateEMA_iq18>
 80005e2:	4605      	mov	r5, r0
    current[1] = _IQ18mpy((adc1_filtered - _IQ18(CS_ADC_M2_Offset)), _IQ18(CS_ADC_M2_Gain));
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <adc_callback_handler+0x7c>)
 80005e6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80005ea:	04a4      	lsls	r4, r4, #18
 80005ec:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <adc_callback_handler+0x80>)
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	f7ff fd8a 	bl	800010c <__aeabi_fmul>
 80005f8:	f7ff fed8 	bl	80003ac <__aeabi_f2iz>
 80005fc:	4601      	mov	r1, r0
 80005fe:	1b28      	subs	r0, r5, r4
 8000600:	f004 fde4 	bl	80051cc <_IQ18mpy>
 8000604:	6070      	str	r0, [r6, #4]
}
 8000606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000608:	20000154 	.word	0x20000154
 800060c:	20000144 	.word	0x20000144
 8000610:	2000000a 	.word	0x2000000a
 8000614:	20000004 	.word	0x20000004
 8000618:	2000014c 	.word	0x2000014c
 800061c:	2000013c 	.word	0x2000013c
 8000620:	20000008 	.word	0x20000008
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000628:	b508      	push	{r3, lr}
    adc_callback_handler();
 800062a:	f7ff ffbb 	bl	80005a4 <adc_callback_handler>
 800062e:	bd08      	pop	{r3, pc}

08000630 <crc8_ccitt>:
#include "crc_8_16.h"

// CRC-8-CCITT-FALSE calculation
uint8_t crc8_ccitt(uint8_t *data, size_t length) {
 8000630:	b500      	push	{lr}
 8000632:	4686      	mov	lr, r0
    uint8_t crc = CRC8_INIT;

    for (size_t i = 0; i < length; ++i) {
 8000634:	f04f 0c00 	mov.w	ip, #0
    uint8_t crc = CRC8_INIT;
 8000638:	4660      	mov	r0, ip
    for (size_t i = 0; i < length; ++i) {
 800063a:	e00e      	b.n	800065a <crc8_ccitt+0x2a>
        crc ^= data[i];
        for (uint8_t bit = 8; bit > 0; --bit) {
            if (crc & 0x80) {
                crc = (crc << 1) ^ CRC8_POLY;
            } else {
                crc <<= 1;
 800063c:	0040      	lsls	r0, r0, #1
 800063e:	b2c0      	uxtb	r0, r0
        for (uint8_t bit = 8; bit > 0; --bit) {
 8000640:	3b01      	subs	r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	b13b      	cbz	r3, 8000656 <crc8_ccitt+0x26>
            if (crc & 0x80) {
 8000646:	b242      	sxtb	r2, r0
 8000648:	2a00      	cmp	r2, #0
 800064a:	daf7      	bge.n	800063c <crc8_ccitt+0xc>
                crc = (crc << 1) ^ CRC8_POLY;
 800064c:	0052      	lsls	r2, r2, #1
 800064e:	f082 0207 	eor.w	r2, r2, #7
 8000652:	b2d0      	uxtb	r0, r2
 8000654:	e7f4      	b.n	8000640 <crc8_ccitt+0x10>
    for (size_t i = 0; i < length; ++i) {
 8000656:	f10c 0c01 	add.w	ip, ip, #1
 800065a:	458c      	cmp	ip, r1
 800065c:	d204      	bcs.n	8000668 <crc8_ccitt+0x38>
        crc ^= data[i];
 800065e:	f81e 300c 	ldrb.w	r3, [lr, ip]
 8000662:	4058      	eors	r0, r3
        for (uint8_t bit = 8; bit > 0; --bit) {
 8000664:	2308      	movs	r3, #8
 8000666:	e7ed      	b.n	8000644 <crc8_ccitt+0x14>
            }
        }
    }
    return crc;
}
 8000668:	f85d fb04 	ldr.w	pc, [sp], #4

0800066c <crc16_ccitt>:

// CRC-16-CCITT-FALSE calculation
uint16_t crc16_ccitt(uint8_t *data, size_t length) {
 800066c:	b500      	push	{lr}
 800066e:	4686      	mov	lr, r0
    uint16_t crc = CRC16_INIT;

    for (size_t i = 0; i < length; ++i) {
 8000670:	f04f 0c00 	mov.w	ip, #0
    uint16_t crc = CRC16_INIT;
 8000674:	f64f 70ff 	movw	r0, #65535	@ 0xffff
    for (size_t i = 0; i < length; ++i) {
 8000678:	e00f      	b.n	800069a <crc16_ccitt+0x2e>
        crc ^= (data[i] << 8);
        for (uint8_t bit = 8; bit > 0; --bit) {
            if (crc & 0x8000) {
                crc = (crc << 1) ^ CRC16_POLY;
            } else {
                crc <<= 1;
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	b280      	uxth	r0, r0
        for (uint8_t bit = 8; bit > 0; --bit) {
 800067e:	3b01      	subs	r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	b143      	cbz	r3, 8000696 <crc16_ccitt+0x2a>
            if (crc & 0x8000) {
 8000684:	b202      	sxth	r2, r0
 8000686:	2a00      	cmp	r2, #0
 8000688:	daf7      	bge.n	800067a <crc16_ccitt+0xe>
                crc = (crc << 1) ^ CRC16_POLY;
 800068a:	f241 0021 	movw	r0, #4129	@ 0x1021
 800068e:	ea80 0042 	eor.w	r0, r0, r2, lsl #1
 8000692:	b280      	uxth	r0, r0
 8000694:	e7f3      	b.n	800067e <crc16_ccitt+0x12>
    for (size_t i = 0; i < length; ++i) {
 8000696:	f10c 0c01 	add.w	ip, ip, #1
 800069a:	458c      	cmp	ip, r1
 800069c:	d205      	bcs.n	80006aa <crc16_ccitt+0x3e>
        crc ^= (data[i] << 8);
 800069e:	f81e 300c 	ldrb.w	r3, [lr, ip]
 80006a2:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
        for (uint8_t bit = 8; bit > 0; --bit) {
 80006a6:	2308      	movs	r3, #8
 80006a8:	e7eb      	b.n	8000682 <crc16_ccitt+0x16>
            }
        }
    }
    return crc;
 80006aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080006b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b0:	b500      	push	{lr}
 80006b2:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_DMA_Init+0x70>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	f042 0201 	orr.w	r2, r2, #1
 80006bc:	615a      	str	r2, [r3, #20]
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	4611      	mov	r1, r2
 80006cc:	200b      	movs	r0, #11
 80006ce:	f002 f9cb 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006d2:	200b      	movs	r0, #11
 80006d4:	f002 f9d8 	bl	8002a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	4611      	mov	r1, r2
 80006dc:	200c      	movs	r0, #12
 80006de:	f002 f9c3 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006e2:	200c      	movs	r0, #12
 80006e4:	f002 f9d0 	bl	8002a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	4611      	mov	r1, r2
 80006ec:	200d      	movs	r0, #13
 80006ee:	f002 f9bb 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006f2:	200d      	movs	r0, #13
 80006f4:	f002 f9c8 	bl	8002a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	4611      	mov	r1, r2
 80006fc:	200e      	movs	r0, #14
 80006fe:	f002 f9b3 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000702:	200e      	movs	r0, #14
 8000704:	f002 f9c0 	bl	8002a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	4611      	mov	r1, r2
 800070c:	200f      	movs	r0, #15
 800070e:	f002 f9ab 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000712:	200f      	movs	r0, #15
 8000714:	f002 f9b8 	bl	8002a88 <HAL_NVIC_EnableIRQ>

}
 8000718:	b003      	add	sp, #12
 800071a:	f85d fb04 	ldr.w	pc, [sp], #4
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <drv8106_read_reg_blocking>:
uint8_t drv8106_cur_read_addr;
uint8_t drv8106_read_flag;


void drv8106_read_reg_blocking(drv8106_t* drv_inst, uint8_t reg_addr)
{
 8000724:	b510      	push	{r4, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	4604      	mov	r4, r0
    uint16_t tx = (reg_addr | DRV8106_READ_MASK) << 8;
 800072a:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800072e:	0209      	lsls	r1, r1, #8
 8000730:	f8ad 100e 	strh.w	r1, [sp, #14]

    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	8901      	ldrh	r1, [r0, #8]
 8000738:	6840      	ldr	r0, [r0, #4]
 800073a:	f002 fc72 	bl	8003022 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(drv_inst->spi_handler_ptr, (uint8_t*)&tx, (uint8_t*)&drv_inst->rxbuff, 1, HAL_MAX_DELAY);
 800073e:	4622      	mov	r2, r4
 8000740:	f852 0b0a 	ldr.w	r0, [r2], #10
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	f10d 010e 	add.w	r1, sp, #14
 8000750:	f003 f96b 	bl	8003a2a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	8921      	ldrh	r1, [r4, #8]
 8000758:	6860      	ldr	r0, [r4, #4]
 800075a:	f002 fc62 	bl	8003022 <HAL_GPIO_WritePin>
    // HAL_Delay(1); // in case it doesnt manage to flip CS
}
 800075e:	b004      	add	sp, #16
 8000760:	bd10      	pop	{r4, pc}

08000762 <drv8106_write_reg_blocking>:

void drv8106_write_reg_blocking(drv8106_t* drv_inst, uint8_t reg_addr, uint8_t data){
 8000762:	b510      	push	{r4, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	4604      	mov	r4, r0
    uint16_t tx;
    tx = (reg_addr << 8) | data;
 8000768:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800076c:	f8ad 200e 	strh.w	r2, [sp, #14]

    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	8901      	ldrh	r1, [r0, #8]
 8000774:	6840      	ldr	r0, [r0, #4]
 8000776:	f002 fc54 	bl	8003022 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(drv_inst->spi_handler_ptr, (uint8_t*)&tx, (uint8_t*)&drv_inst->rxbuff, 1, HAL_MAX_DELAY);
 800077a:	4622      	mov	r2, r4
 800077c:	f852 0b0a 	ldr.w	r0, [r2], #10
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	f10d 010e 	add.w	r1, sp, #14
 800078c:	f003 f94d 	bl	8003a2a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	8921      	ldrh	r1, [r4, #8]
 8000794:	6860      	ldr	r0, [r4, #4]
 8000796:	f002 fc44 	bl	8003022 <HAL_GPIO_WritePin>
    // HAL_Delay(1); // in case it doesnt manage to flip CS
}
 800079a:	b004      	add	sp, #16
 800079c:	bd10      	pop	{r4, pc}

0800079e <drv8106_read_all_blocking>:


void drv8106_read_all_blocking(drv8106_t* drv_inst){
 800079e:	b510      	push	{r4, lr}
 80007a0:	4604      	mov	r4, r0

    drv8106_read_reg_blocking(drv_inst, DRV8106_IC_STAT_1);
 80007a2:	2100      	movs	r1, #0
 80007a4:	f7ff ffbe 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.IC_STAT_1 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80007a8:	7aa3      	ldrb	r3, [r4, #10]
 80007aa:	73a3      	strb	r3, [r4, #14]

    drv8106_read_reg_blocking(drv_inst, DRV8106_VGS_VDS_STAT);
 80007ac:	2101      	movs	r1, #1
 80007ae:	4620      	mov	r0, r4
 80007b0:	f7ff ffb8 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.VGS_VDS_STAT = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80007b4:	7aa3      	ldrb	r3, [r4, #10]
 80007b6:	73e3      	strb	r3, [r4, #15]

    drv8106_read_reg_blocking(drv_inst, DRV8106_IC_STAT_2);
 80007b8:	2102      	movs	r1, #2
 80007ba:	4620      	mov	r0, r4
 80007bc:	f7ff ffb2 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.IC_STAT_2 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80007c0:	7aa3      	ldrb	r3, [r4, #10]
 80007c2:	7423      	strb	r3, [r4, #16]

    drv8106_read_reg_blocking(drv_inst, DRV8106_IC_CTRL);
 80007c4:	2104      	movs	r1, #4
 80007c6:	4620      	mov	r0, r4
 80007c8:	f7ff ffac 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.IC_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80007cc:	7aa3      	ldrb	r3, [r4, #10]
 80007ce:	74a3      	strb	r3, [r4, #18]

    drv8106_read_reg_blocking(drv_inst, DRV8106_BRG_CTRL);
 80007d0:	2105      	movs	r1, #5
 80007d2:	4620      	mov	r0, r4
 80007d4:	f7ff ffa6 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.BRG_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80007d8:	7aa3      	ldrb	r3, [r4, #10]
 80007da:	74e3      	strb	r3, [r4, #19]

    drv8106_read_reg_blocking(drv_inst, DRV8106_DRV_CTRL_1);
 80007dc:	2106      	movs	r1, #6
 80007de:	4620      	mov	r0, r4
 80007e0:	f7ff ffa0 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.DRV_CTRL_1 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80007e4:	7aa3      	ldrb	r3, [r4, #10]
 80007e6:	7523      	strb	r3, [r4, #20]

    drv8106_read_reg_blocking(drv_inst, DRV8106_DRV_CTRL_2);
 80007e8:	2107      	movs	r1, #7
 80007ea:	4620      	mov	r0, r4
 80007ec:	f7ff ff9a 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.DRV_CTRL_2 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80007f0:	7aa3      	ldrb	r3, [r4, #10]
 80007f2:	7563      	strb	r3, [r4, #21]

    drv8106_read_reg_blocking(drv_inst, DRV8106_DRV_CTRL_3);
 80007f4:	2108      	movs	r1, #8
 80007f6:	4620      	mov	r0, r4
 80007f8:	f7ff ff94 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.DRV_CTRL_3 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80007fc:	7aa3      	ldrb	r3, [r4, #10]
 80007fe:	75a3      	strb	r3, [r4, #22]

    drv8106_read_reg_blocking(drv_inst, DRV8106_VDS_CTRL_1);
 8000800:	2109      	movs	r1, #9
 8000802:	4620      	mov	r0, r4
 8000804:	f7ff ff8e 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.VDS_CTRL_1 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000808:	7aa3      	ldrb	r3, [r4, #10]
 800080a:	75e3      	strb	r3, [r4, #23]

    drv8106_read_reg_blocking(drv_inst, DRV8106_VDS_CTRL_2);
 800080c:	210a      	movs	r1, #10
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff ff88 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.VDS_CTRL_2 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000814:	7aa3      	ldrb	r3, [r4, #10]
 8000816:	7623      	strb	r3, [r4, #24]

    drv8106_read_reg_blocking(drv_inst, DRV8106_OLSC_CTRL);
 8000818:	210b      	movs	r1, #11
 800081a:	4620      	mov	r0, r4
 800081c:	f7ff ff82 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.OLSC_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000820:	7aa3      	ldrb	r3, [r4, #10]
 8000822:	7663      	strb	r3, [r4, #25]

    drv8106_read_reg_blocking(drv_inst, DRV8106_UVOV_CTRL);
 8000824:	210c      	movs	r1, #12
 8000826:	4620      	mov	r0, r4
 8000828:	f7ff ff7c 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.UVOV_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 800082c:	7aa3      	ldrb	r3, [r4, #10]
 800082e:	76a3      	strb	r3, [r4, #26]

    drv8106_read_reg_blocking(drv_inst, DRV8106_CSA_CTRL);
 8000830:	210d      	movs	r1, #13
 8000832:	4620      	mov	r0, r4
 8000834:	f7ff ff76 	bl	8000724 <drv8106_read_reg_blocking>
    drv_inst->register_map.CSA_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000838:	7aa3      	ldrb	r3, [r4, #10]
 800083a:	76e3      	strb	r3, [r4, #27]
}
 800083c:	bd10      	pop	{r4, pc}

0800083e <drv8106_reset_blocking>:

void drv8106_reset_blocking(drv8106_t* drv_inst){
 800083e:	b510      	push	{r4, lr}
 8000840:	4604      	mov	r4, r0
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, DRV8106_IC_CTRL_DEFAULT);
 8000842:	2206      	movs	r2, #6
 8000844:	2104      	movs	r1, #4
 8000846:	f7ff ff8c 	bl	8000762 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_BRG_CTRL, DRV8106_BRG_CTRL_DEFAULT);
 800084a:	2200      	movs	r2, #0
 800084c:	2105      	movs	r1, #5
 800084e:	4620      	mov	r0, r4
 8000850:	f7ff ff87 	bl	8000762 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_DRV_CTRL_1, DRV8106_DRV_CTRL_1_DEFAULT);
 8000854:	22ff      	movs	r2, #255	@ 0xff
 8000856:	2106      	movs	r1, #6
 8000858:	4620      	mov	r0, r4
 800085a:	f7ff ff82 	bl	8000762 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_DRV_CTRL_2, DRV8106_DRV_CTRL_2_DEFAULT);
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	2107      	movs	r1, #7
 8000862:	4620      	mov	r0, r4
 8000864:	f7ff ff7d 	bl	8000762 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_DRV_CTRL_3, DRV8106_DRV_CTRL_3_DEFAULT);
 8000868:	2220      	movs	r2, #32
 800086a:	2108      	movs	r1, #8
 800086c:	4620      	mov	r0, r4
 800086e:	f7ff ff78 	bl	8000762 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_VDS_CTRL_1, DRV8106_VDS_CTRL_1_DEFAULT);
 8000872:	2220      	movs	r2, #32
 8000874:	2109      	movs	r1, #9
 8000876:	4620      	mov	r0, r4
 8000878:	f7ff ff73 	bl	8000762 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_VDS_CTRL_2, DRV8106_VDS_CTRL_2_DEFAULT);
 800087c:	22dd      	movs	r2, #221	@ 0xdd
 800087e:	210a      	movs	r1, #10
 8000880:	4620      	mov	r0, r4
 8000882:	f7ff ff6e 	bl	8000762 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_OLSC_CTRL, DRV8106_OLSC_CTRL_DEFAULT);
 8000886:	2200      	movs	r2, #0
 8000888:	210b      	movs	r1, #11
 800088a:	4620      	mov	r0, r4
 800088c:	f7ff ff69 	bl	8000762 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_UVOV_CTRL, DRV8106_UVOV_CTRL_DEFAULT);
 8000890:	2214      	movs	r2, #20
 8000892:	210c      	movs	r1, #12
 8000894:	4620      	mov	r0, r4
 8000896:	f7ff ff64 	bl	8000762 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_CSA_CTRL, DRV8106_CSA_CTRL_DEFAULT);
 800089a:	2201      	movs	r2, #1
 800089c:	210d      	movs	r1, #13
 800089e:	4620      	mov	r0, r4
 80008a0:	f7ff ff5f 	bl	8000762 <drv8106_write_reg_blocking>
}
 80008a4:	bd10      	pop	{r4, pc}

080008a6 <drv8106_Enable_blocking>:
// // disable drv ic in non-blocking manner via dma
// void drv8106_Disable_dma(drv8106_t* drv_inst){
//     drv8106_write_reg_dma(drv_inst, DRV8106_IC_CTRL, 0);
// }

void drv8106_Enable_blocking(drv8106_t* drv_inst){
 80008a6:	b508      	push	{r3, lr}
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, DRV8106_EN_DRV);
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	2104      	movs	r1, #4
 80008ac:	f7ff ff59 	bl	8000762 <drv8106_write_reg_blocking>
}
 80008b0:	bd08      	pop	{r3, pc}

080008b2 <drv8106_CSA_enable_g10_blocking>:

void drv8106_Disable_blocking(drv8106_t* drv_inst){
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, 0);
}

void drv8106_CSA_enable_g10_blocking(drv8106_t* drv_inst){
 80008b2:	b508      	push	{r3, lr}
    drv8106_write_reg_blocking(drv_inst, DRV8106_CSA_CTRL, DRV8106_CSA_SH_EN | DRV8106_CSA_GAIN_10);
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	210d      	movs	r1, #13
 80008b8:	f7ff ff53 	bl	8000762 <drv8106_write_reg_blocking>
}
 80008bc:	bd08      	pop	{r3, pc}

080008be <drv8106_clear_fault_blocking>:
    drv_inst->faults_list.Undervoltage = drv_inst->register_map.IC_STAT_1 & DRV8106_UV;
    drv_inst->faults_list.Overvoltage = drv_inst->register_map.IC_STAT_1 & DRV8106_OV;
    drv_inst->faults_list.Overtemperature = drv_inst->register_map.IC_STAT_1 & DRV8106_OT;
}

void drv8106_clear_fault_blocking(drv8106_t* drv_inst){
 80008be:	b508      	push	{r3, lr}
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, DRV8106_CLR_FLT);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2104      	movs	r1, #4
 80008c4:	f7ff ff4d 	bl	8000762 <drv8106_write_reg_blocking>
}
 80008c8:	bd08      	pop	{r3, pc}

080008ca <drv8106_set_fault_autorecovery_blocking>:

void drv8106_set_fault_autorecovery_blocking(drv8106_t* drv_inst){
 80008ca:	b508      	push	{r3, lr}
    uint8_t data = DRV8106_UV_MODE | DRV8106_OV_MODE_AUTO | DRV8106_OV_DG_4us | DRV8106_OV_LVL;
    drv8106_write_reg_blocking(drv_inst, DRV8106_UVOV_CTRL, data);
 80008cc:	22b4      	movs	r2, #180	@ 0xb4
 80008ce:	210c      	movs	r1, #12
 80008d0:	f7ff ff47 	bl	8000762 <drv8106_write_reg_blocking>
}
 80008d4:	bd08      	pop	{r3, pc}

080008d6 <initEMA_iq18>:
 */

#include "ema_iq18.h"

// Initialize the EMA filter
void initEMA_iq18(EMA_iq18* filter, float alpha, _iq18 initial_value) {
 80008d6:	b538      	push	{r3, r4, r5, lr}
 80008d8:	4604      	mov	r4, r0
 80008da:	4608      	mov	r0, r1
 80008dc:	4615      	mov	r5, r2
	filter->alpha = _IQ18(alpha);
 80008de:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80008e2:	f7ff fc13 	bl	800010c <__aeabi_fmul>
 80008e6:	f7ff fd61 	bl	80003ac <__aeabi_f2iz>
 80008ea:	6020      	str	r0, [r4, #0]
	filter->previous = initial_value;
 80008ec:	6065      	str	r5, [r4, #4]
}
 80008ee:	bd38      	pop	{r3, r4, r5, pc}

080008f0 <updateEMA_iq18>:

// Update the EMA filter with a new value and return the filtered result
_iq18 updateEMA_iq18(EMA_iq18 *filter, _iq18 newValue) {
 80008f0:	b538      	push	{r3, r4, r5, lr}
 80008f2:	4605      	mov	r5, r0
	_iq18 ema = _IQ18mpy(filter->alpha, newValue)
 80008f4:	6800      	ldr	r0, [r0, #0]
 80008f6:	f004 fc69 	bl	80051cc <_IQ18mpy>
 80008fa:	4604      	mov	r4, r0
			+ _IQ18mpy((_IQ18(1) - filter->alpha), filter->previous);
 80008fc:	6828      	ldr	r0, [r5, #0]
 80008fe:	6869      	ldr	r1, [r5, #4]
 8000900:	f5c0 2080 	rsb	r0, r0, #262144	@ 0x40000
 8000904:	f004 fc62 	bl	80051cc <_IQ18mpy>
	_iq18 ema = _IQ18mpy(filter->alpha, newValue)
 8000908:	4420      	add	r0, r4
	filter->previous = ema;
 800090a:	6068      	str	r0, [r5, #4]
	return ema;
}
 800090c:	bd38      	pop	{r3, r4, r5, pc}
	...

08000910 <encoder_updatePosition_iq18>:
		encoder->reverse_flag = 1;
	} else {
		encoder->reverse_flag = -1;
	}
}
void encoder_updatePosition_iq18(encoder_iq18_t *encoder) {
 8000910:	b538      	push	{r3, r4, r5, lr}
 8000912:	4604      	mov	r4, r0
	encoder->currentTicks = (int16_t) encoder->htim->Instance->CNT;
 8000914:	6803      	ldr	r3, [r0, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800091a:	b200      	sxth	r0, r0
 800091c:	8520      	strh	r0, [r4, #40]	@ 0x28

	encoder->fullRevolutions += _IQ18div(
			_IQ18(encoder->currentTicks / encoder->countsPerRevolution),
 800091e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8000920:	fb90 f0f3 	sdiv	r0, r0, r3
	encoder->fullRevolutions += _IQ18div(
 8000924:	6a21      	ldr	r1, [r4, #32]
 8000926:	0480      	lsls	r0, r0, #18
 8000928:	f004 fc08 	bl	800513c <_IQ18div>
 800092c:	6963      	ldr	r3, [r4, #20]
 800092e:	4403      	add	r3, r0
 8000930:	6163      	str	r3, [r4, #20]
			encoder->gearRatio);

	encoder->currentTicks = encoder->currentTicks
 8000932:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
			% encoder->countsPerRevolution;
 8000936:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8000938:	fb93 f1f2 	sdiv	r1, r3, r2
 800093c:	fb02 3311 	mls	r3, r2, r1, r3
	encoder->currentTicks = encoder->currentTicks
 8000940:	8523      	strh	r3, [r4, #40]	@ 0x28
	encoder->htim->Instance->CNT = (uint16_t) encoder->currentTicks;
 8000942:	6822      	ldr	r2, [r4, #0]
 8000944:	6812      	ldr	r2, [r2, #0]
 8000946:	b29b      	uxth	r3, r3
 8000948:	6253      	str	r3, [r2, #36]	@ 0x24

	encoder->angle = _IQ18mpy(
			(encoder->fullRevolutions
 800094a:	6965      	ldr	r5, [r4, #20]
					+ _IQ18div(
							_IQ18div(_IQ18(encoder->currentTicks),
 800094c:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	@ 0x28
									_IQ18(encoder->countsPerRevolution)),
 8000950:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
					+ _IQ18div(
 8000952:	0489      	lsls	r1, r1, #18
 8000954:	0480      	lsls	r0, r0, #18
 8000956:	f004 fbf1 	bl	800513c <_IQ18div>
 800095a:	6a21      	ldr	r1, [r4, #32]
 800095c:	f004 fbee 	bl	800513c <_IQ18div>
 8000960:	4428      	add	r0, r5
	encoder->angle = _IQ18mpy(
 8000962:	4905      	ldr	r1, [pc, #20]	@ (8000978 <encoder_updatePosition_iq18+0x68>)
 8000964:	0040      	lsls	r0, r0, #1
 8000966:	f004 fc31 	bl	80051cc <_IQ18mpy>
							encoder->gearRatio)) << 1,
			PI_IQ18) * encoder->reverse_flag;
 800096a:	f994 302c 	ldrsb.w	r3, [r4, #44]	@ 0x2c
 800096e:	fb03 f000 	mul.w	r0, r3, r0
	encoder->angle = _IQ18mpy(
 8000972:	60e0      	str	r0, [r4, #12]
}
 8000974:	bd38      	pop	{r3, r4, r5, pc}
 8000976:	bf00      	nop
 8000978:	000c90fd 	.word	0x000c90fd

0800097c <encoder_updateVelocity_qep_iq18>:

void encoder_updateVelocity_qep_iq18(encoder_iq18_t *encoder) {
 800097c:	b510      	push	{r4, lr}
 800097e:	4604      	mov	r4, r0
	_iq18 velocity = _IQ18div((encoder->angle - encoder->previousAngle),
 8000980:	68c0      	ldr	r0, [r0, #12]
 8000982:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000984:	69e1      	ldr	r1, [r4, #28]
 8000986:	1ac0      	subs	r0, r0, r3
 8000988:	f004 fbd8 	bl	800513c <_IQ18div>
 800098c:	4601      	mov	r1, r0
			encoder->dt);
//	encoder->angularVelocity = velocity;
	encoder->angularVelocity = updateEMA_iq18(&encoder->filter, velocity);
 800098e:	1d20      	adds	r0, r4, #4
 8000990:	f7ff ffae 	bl	80008f0 <updateEMA_iq18>
 8000994:	6120      	str	r0, [r4, #16]
	encoder->previousAngle = encoder->angle;
 8000996:	68e3      	ldr	r3, [r4, #12]
 8000998:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800099a:	bd10      	pop	{r4, pc}

0800099c <encoder_reset_iq18>:
void encoder_reset_iq18(encoder_iq18_t *encoder) {
	encoder->htim->Instance->CNT = 0;
 800099c:	6803      	ldr	r3, [r0, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	2300      	movs	r3, #0
 80009a2:	6253      	str	r3, [r2, #36]	@ 0x24
	encoder->angularVelocity = 0;
 80009a4:	6103      	str	r3, [r0, #16]
	encoder->previousAngle = 0;
 80009a6:	6243      	str	r3, [r0, #36]	@ 0x24
	encoder->angle = 0;
 80009a8:	60c3      	str	r3, [r0, #12]
	encoder->fullRevolutions = 0;
 80009aa:	6143      	str	r3, [r0, #20]
	encoder->currentTicks = 0;
 80009ac:	8503      	strh	r3, [r0, #40]	@ 0x28
	encoder->filter.previous = 0;
 80009ae:	6083      	str	r3, [r0, #8]
}
 80009b0:	4770      	bx	lr

080009b2 <encoder_getAngle_iq18>:

_iq18 encoder_getAngle_iq18(encoder_iq18_t *encoder) {
	return encoder->angle; // * encoder->reverse_flag;
	// return encoder->angle * encoder->reverse_flag;
}
 80009b2:	68c0      	ldr	r0, [r0, #12]
 80009b4:	4770      	bx	lr

080009b6 <encoder_getVelocity_iq18>:
_iq18 encoder_getVelocity_iq18(encoder_iq18_t *encoder) {
	return encoder->angularVelocity;// * encoder->reverse_flag;
	// return encoder->angularVelocity * encoder->reverse_flag;
}
 80009b6:	6900      	ldr	r0, [r0, #16]
 80009b8:	4770      	bx	lr
	...

080009bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	2400      	movs	r4, #0
 80009c4:	9404      	str	r4, [sp, #16]
 80009c6:	9405      	str	r4, [sp, #20]
 80009c8:	9406      	str	r4, [sp, #24]
 80009ca:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b4c      	ldr	r3, [pc, #304]	@ (8000b00 <MX_GPIO_Init+0x144>)
 80009ce:	699a      	ldr	r2, [r3, #24]
 80009d0:	f042 0220 	orr.w	r2, r2, #32
 80009d4:	619a      	str	r2, [r3, #24]
 80009d6:	699a      	ldr	r2, [r3, #24]
 80009d8:	f002 0220 	and.w	r2, r2, #32
 80009dc:	9200      	str	r2, [sp, #0]
 80009de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e0:	699a      	ldr	r2, [r3, #24]
 80009e2:	f042 0210 	orr.w	r2, r2, #16
 80009e6:	619a      	str	r2, [r3, #24]
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	f002 0210 	and.w	r2, r2, #16
 80009ee:	9201      	str	r2, [sp, #4]
 80009f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	699a      	ldr	r2, [r3, #24]
 80009f4:	f042 0204 	orr.w	r2, r2, #4
 80009f8:	619a      	str	r2, [r3, #24]
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	f002 0204 	and.w	r2, r2, #4
 8000a00:	9202      	str	r2, [sp, #8]
 8000a02:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	699a      	ldr	r2, [r3, #24]
 8000a06:	f042 0208 	orr.w	r2, r2, #8
 8000a0a:	619a      	str	r2, [r3, #24]
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	9303      	str	r3, [sp, #12]
 8000a14:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BRIDGESLEEP1_Pin|DRVOFF2_Pin|SPI1_SS2_Pin|SPI1_SS3_Pin, GPIO_PIN_RESET);
 8000a16:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8000b04 <MX_GPIO_Init+0x148>
 8000a1a:	4622      	mov	r2, r4
 8000a1c:	213c      	movs	r1, #60	@ 0x3c
 8000a1e:	4648      	mov	r0, r9
 8000a20:	f002 faff 	bl	8003022 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR2_1_Pin|SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000a24:	4e38      	ldr	r6, [pc, #224]	@ (8000b08 <MX_GPIO_Init+0x14c>)
 8000a26:	4622      	mov	r2, r4
 8000a28:	2112      	movs	r1, #18
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	f002 faf9 	bl	8003022 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SS4_Pin|DIR1_1_Pin|HIZ1_Pin|HIZ2_Pin
 8000a30:	4f36      	ldr	r7, [pc, #216]	@ (8000b0c <MX_GPIO_Init+0x150>)
 8000a32:	4622      	mov	r2, r4
 8000a34:	f643 0137 	movw	r1, #14391	@ 0x3837
 8000a38:	4638      	mov	r0, r7
 8000a3a:	f002 faf2 	bl	8003022 <HAL_GPIO_WritePin>
                          |DRVOFF1_Pin|BRIDGESLEEP2_Pin|IND_LED_Pin|RS485_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nFAULT_L2_Pin nFAULT_R2_Pin ENC1_Z_Pin ENC2_Z_Pin */
  GPIO_InitStruct.Pin = nFAULT_L2_Pin|nFAULT_R2_Pin|ENC1_Z_Pin|ENC2_Z_Pin;
 8000a3e:	f240 3303 	movw	r3, #771	@ 0x303
 8000a42:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	a904      	add	r1, sp, #16
 8000a4a:	4648      	mov	r0, r9
 8000a4c:	f002 f9d4 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRIDGESLEEP1_Pin DRVOFF2_Pin */
  GPIO_InitStruct.Pin = BRIDGESLEEP1_Pin|DRVOFF2_Pin;
 8000a50:	230c      	movs	r3, #12
 8000a52:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2501      	movs	r5, #1
 8000a56:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	f04f 0802 	mov.w	r8, #2
 8000a5e:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	a904      	add	r1, sp, #16
 8000a64:	4648      	mov	r0, r9
 8000a66:	f002 f9c7 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR2_1_Pin */
  GPIO_InitStruct.Pin = DIR2_1_Pin;
 8000a6a:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(DIR2_1_GPIO_Port, &GPIO_InitStruct);
 8000a76:	a904      	add	r1, sp, #16
 8000a78:	4630      	mov	r0, r6
 8000a7a:	f002 f9bd 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS1_Pin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a86:	f04f 0a03 	mov.w	sl, #3
 8000a8a:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	eb0d 0103 	add.w	r1, sp, r3
 8000a92:	4630      	mov	r0, r6
 8000a94:	f002 f9b0 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SS2_Pin SPI1_SS3_Pin */
  GPIO_InitStruct.Pin = SPI1_SS2_Pin|SPI1_SS3_Pin;
 8000a98:	2330      	movs	r3, #48	@ 0x30
 8000a9a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa0:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	a904      	add	r1, sp, #16
 8000aa6:	4648      	mov	r0, r9
 8000aa8:	f002 f9a6 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SS4_Pin RS485_CTRL_Pin */
  GPIO_InitStruct.Pin = SPI1_SS4_Pin|RS485_CTRL_Pin;
 8000aac:	2321      	movs	r3, #33	@ 0x21
 8000aae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab4:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	a904      	add	r1, sp, #16
 8000aba:	4638      	mov	r0, r7
 8000abc:	f002 f99c 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_1_Pin HIZ1_Pin HIZ2_Pin DRVOFF1_Pin
                           BRIDGESLEEP2_Pin IND_LED_Pin */
  GPIO_InitStruct.Pin = DIR1_1_Pin|HIZ1_Pin|HIZ2_Pin|DRVOFF1_Pin
 8000ac0:	f643 0316 	movw	r3, #14358	@ 0x3816
 8000ac4:	9304      	str	r3, [sp, #16]
                          |BRIDGESLEEP2_Pin|IND_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	a904      	add	r1, sp, #16
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	f002 f991 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT_R1_Pin nFAULT_L1_Pin */
  GPIO_InitStruct.Pin = nFAULT_R1_Pin|nFAULT_L1_Pin;
 8000ad6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ada:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	a904      	add	r1, sp, #16
 8000ae2:	4638      	mov	r0, r7
 8000ae4:	f002 f988 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ID_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(USB_ID_GPIO_Port, &GPIO_InitStruct);
 8000af2:	a904      	add	r1, sp, #16
 8000af4:	4630      	mov	r0, r6
 8000af6:	f002 f97f 	bl	8002df8 <HAL_GPIO_Init>

}
 8000afa:	b008      	add	sp, #32
 8000afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40011000 	.word	0x40011000
 8000b08:	40010800 	.word	0x40010800
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <ind_led_init>:
#include "ind_led.h"

ind_led_t ind_led_red;

void ind_led_init(ind_led_t* led, GPIO_TypeDef* port, uint16_t pin, uint16_t call_freq_hz, uint8_t lowtrig_flag)
{
 8000b10:	b508      	push	{r3, lr}
 8000b12:	4684      	mov	ip, r0
 8000b14:	4608      	mov	r0, r1
 8000b16:	4611      	mov	r1, r2
 8000b18:	f89d 2008 	ldrb.w	r2, [sp, #8]
    led->port = port;
 8000b1c:	f8cc 0000 	str.w	r0, [ip]
    led->pin = pin;
 8000b20:	f8ac 1004 	strh.w	r1, [ip, #4]
    led->call_freq = call_freq_hz;
 8000b24:	f8ac 3006 	strh.w	r3, [ip, #6]
    led->div8_hz = call_freq_hz >> 3;
 8000b28:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000b2c:	f8ac e00a 	strh.w	lr, [ip, #10]
    led->div4_hz = call_freq_hz >> 2;
 8000b30:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8000b34:	f8ac e00c 	strh.w	lr, [ip, #12]
    led->div2_hz = call_freq_hz >> 1;
 8000b38:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8000b3c:	f8ac e00e 	strh.w	lr, [ip, #14]
    led->div05_hz = call_freq_hz << 1;
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	f8ac 3010 	strh.w	r3, [ip, #16]
    led->lowtrigflag = lowtrig_flag;
 8000b46:	f88c 2016 	strb.w	r2, [ip, #22]
    led->opmode = OFF;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f88c 3014 	strb.w	r3, [ip, #20]
    led->prev_opmode = OFF;
 8000b50:	f88c 3015 	strb.w	r3, [ip, #21]
    led->CNT_LED = 0;
 8000b54:	f8ac 3008 	strh.w	r3, [ip, #8]
    HAL_GPIO_WritePin(led->port, led->pin, led->lowtrigflag);
 8000b58:	f002 fa63 	bl	8003022 <HAL_GPIO_WritePin>
}
 8000b5c:	bd08      	pop	{r3, pc}

08000b5e <ind_led_handler>:

void ind_led_handler(ind_led_t* led){
 8000b5e:	b510      	push	{r4, lr}
 8000b60:	4604      	mov	r4, r0
    if(led->opmode != led->prev_opmode){
 8000b62:	7d03      	ldrb	r3, [r0, #20]
 8000b64:	7d42      	ldrb	r2, [r0, #21]
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d002      	beq.n	8000b70 <ind_led_handler+0x12>
        led->CNT_LED = 0;
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	8102      	strh	r2, [r0, #8]
        led->prev_opmode = led->opmode;
 8000b6e:	7543      	strb	r3, [r0, #21]
    }
    if(led->opmode == OFF){
 8000b70:	b1cb      	cbz	r3, 8000ba6 <ind_led_handler+0x48>
        HAL_GPIO_WritePin(led->port, led->pin, led->lowtrigflag);
    } else if (led->opmode == STATIC){
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d01d      	beq.n	8000bb2 <ind_led_handler+0x54>
        HAL_GPIO_WritePin(led->port, led->pin, !led->lowtrigflag);
    } else {
        if (led->CNT_LED < (led->cur_div >> 1)){
 8000b76:	8923      	ldrh	r3, [r4, #8]
 8000b78:	8a62      	ldrh	r2, [r4, #18]
 8000b7a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8000b7e:	d221      	bcs.n	8000bc4 <ind_led_handler+0x66>
            HAL_GPIO_WritePin(led->port, led->pin, !led->lowtrigflag);
 8000b80:	7da2      	ldrb	r2, [r4, #22]
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	0952      	lsrs	r2, r2, #5
 8000b88:	88a1      	ldrh	r1, [r4, #4]
 8000b8a:	6820      	ldr	r0, [r4, #0]
 8000b8c:	f002 fa49 	bl	8003022 <HAL_GPIO_WritePin>
        } else {
            HAL_GPIO_WritePin(led->port, led->pin, led->lowtrigflag);
        }
        if (led->CNT_LED >= (led->cur_div-1)){
 8000b90:	8922      	ldrh	r2, [r4, #8]
 8000b92:	8a63      	ldrh	r3, [r4, #18]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	429a      	cmp	r2, r3
 8000b98:	db01      	blt.n	8000b9e <ind_led_handler+0x40>
            led->CNT_LED = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	8123      	strh	r3, [r4, #8]
        }
        led->CNT_LED++;
 8000b9e:	8923      	ldrh	r3, [r4, #8]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	8123      	strh	r3, [r4, #8]
    }
}
 8000ba4:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(led->port, led->pin, led->lowtrigflag);
 8000ba6:	7da2      	ldrb	r2, [r4, #22]
 8000ba8:	88a1      	ldrh	r1, [r4, #4]
 8000baa:	6820      	ldr	r0, [r4, #0]
 8000bac:	f002 fa39 	bl	8003022 <HAL_GPIO_WritePin>
 8000bb0:	e7f8      	b.n	8000ba4 <ind_led_handler+0x46>
        HAL_GPIO_WritePin(led->port, led->pin, !led->lowtrigflag);
 8000bb2:	7da2      	ldrb	r2, [r4, #22]
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	0952      	lsrs	r2, r2, #5
 8000bba:	88a1      	ldrh	r1, [r4, #4]
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	f002 fa30 	bl	8003022 <HAL_GPIO_WritePin>
 8000bc2:	e7ef      	b.n	8000ba4 <ind_led_handler+0x46>
            HAL_GPIO_WritePin(led->port, led->pin, led->lowtrigflag);
 8000bc4:	7da2      	ldrb	r2, [r4, #22]
 8000bc6:	88a1      	ldrh	r1, [r4, #4]
 8000bc8:	6820      	ldr	r0, [r4, #0]
 8000bca:	f002 fa2a 	bl	8003022 <HAL_GPIO_WritePin>
 8000bce:	e7df      	b.n	8000b90 <ind_led_handler+0x32>

08000bd0 <ind_led_set_opmode>:

void ind_led_set_opmode(ind_led_t* led, ind_led_opmode opmode){
    led->opmode = opmode;
 8000bd0:	7501      	strb	r1, [r0, #20]
    switch (opmode)
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	2904      	cmp	r1, #4
 8000bd6:	d812      	bhi.n	8000bfe <ind_led_set_opmode+0x2e>
 8000bd8:	e8df f001 	tbb	[pc, r1]
 8000bdc:	0c090603 	.word	0x0c090603
 8000be0:	0f          	.byte	0x0f
 8000be1:	00          	.byte	0x00
    {
    case BLINK_05HZ:
        led->cur_div = led->div05_hz;
 8000be2:	8a03      	ldrh	r3, [r0, #16]
 8000be4:	8243      	strh	r3, [r0, #18]
        break;
 8000be6:	4770      	bx	lr
    case BLINK_1HZ:
        led->cur_div = led->call_freq;
 8000be8:	88c3      	ldrh	r3, [r0, #6]
 8000bea:	8243      	strh	r3, [r0, #18]
        break;
 8000bec:	4770      	bx	lr
    case BLINK_2HZ:
        led->cur_div = led->div2_hz;
 8000bee:	89c3      	ldrh	r3, [r0, #14]
 8000bf0:	8243      	strh	r3, [r0, #18]
        break;
 8000bf2:	4770      	bx	lr
    case BLINK_4HZ:
        led->cur_div = led->div4_hz;
 8000bf4:	8983      	ldrh	r3, [r0, #12]
 8000bf6:	8243      	strh	r3, [r0, #18]
        break;
 8000bf8:	4770      	bx	lr
    case BLINK_8HZ:
        led->cur_div = led->div8_hz;
 8000bfa:	8943      	ldrh	r3, [r0, #10]
 8000bfc:	8243      	strh	r3, [r0, #18]
    default:
        break;
    }
 8000bfe:	4770      	bx	lr

08000c00 <HAL_TIM_PeriodElapsedCallback>:
uint8_t fault1, fault2, fault3, fault4, loops_op_mode, prev_control_mode;

float cur_debug_set_1, cur_debug_set_2, vel_debug_set_1, vel_debug_set_2, ang_debug_set_1, ang_debug_set_2;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b538      	push	{r3, r4, r5, lr}
    if(htim->Instance == TIM3){
 8000c02:	6802      	ldr	r2, [r0, #0]
 8000c04:	4ba3      	ldr	r3, [pc, #652]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d000      	beq.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0xc>
            encoder_reset_iq18(&servo1_g.encoder);
            encoder_reset_iq18(&servo2_g.encoder);
            reset_flag = 0;
        }
    }
 8000c0a:	bd38      	pop	{r3, r4, r5, pc}
        if ((get_crc_success_rate() < 50) && !loops_op_mode){
 8000c0c:	f000 fb14 	bl	8001238 <get_crc_success_rate>
 8000c10:	2831      	cmp	r0, #49	@ 0x31
 8000c12:	d809      	bhi.n	8000c28 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000c14:	4ba0      	ldr	r3, [pc, #640]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b933      	cbnz	r3, 8000c28 <HAL_TIM_PeriodElapsedCallback+0x28>
            system_enabled = 0;
 8000c1a:	4ba0      	ldr	r3, [pc, #640]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
            comms_fault_flag = 1;
 8000c20:	4b9f      	ldr	r3, [pc, #636]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e002      	b.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x2e>
            comms_fault_flag = 0;
 8000c28:	4b9d      	ldr	r3, [pc, #628]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
        if(control_mode != prev_control_mode){
 8000c2e:	4b9d      	ldr	r3, [pc, #628]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4a9c      	ldr	r2, [pc, #624]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000c36:	7812      	ldrb	r2, [r2, #0]
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d12b      	bne.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x94>
        if (system_enabled){
 8000c3c:	4b97      	ldr	r3, [pc, #604]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d136      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0xb2>
        irq_counter250++;
 8000c44:	4a99      	ldr	r2, [pc, #612]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000c46:	8813      	ldrh	r3, [r2, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	8013      	strh	r3, [r2, #0]
        if (irq_counter250 == 36)
 8000c4e:	2b24      	cmp	r3, #36	@ 0x24
 8000c50:	d039      	beq.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0xc6>
        if (irq_counter250 == 72)
 8000c52:	4b96      	ldr	r3, [pc, #600]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	2b48      	cmp	r3, #72	@ 0x48
 8000c58:	d07b      	beq.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x152>
        if(!system_enabled)
 8000c5a:	4b90      	ldr	r3, [pc, #576]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80ff 	beq.w	8000e62 <HAL_TIM_PeriodElapsedCallback+0x262>
        if (brg_fault_flag){
 8000c64:	4b92      	ldr	r3, [pc, #584]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f040 8109 	bne.w	8000e80 <HAL_TIM_PeriodElapsedCallback+0x280>
        if (comms_fault_flag){
 8000c6e:	4b8c      	ldr	r3, [pc, #560]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8109 	bne.w	8000e8a <HAL_TIM_PeriodElapsedCallback+0x28a>
        if (reset_flag)
 8000c78:	4b8e      	ldr	r3, [pc, #568]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0c4      	beq.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0xa>
            encoder_reset_iq18(&servo1_g.encoder);
 8000c80:	488d      	ldr	r0, [pc, #564]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000c82:	f7ff fe8b 	bl	800099c <encoder_reset_iq18>
            encoder_reset_iq18(&servo2_g.encoder);
 8000c86:	488d      	ldr	r0, [pc, #564]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c88:	f7ff fe88 	bl	800099c <encoder_reset_iq18>
            reset_flag = 0;
 8000c8c:	4b89      	ldr	r3, [pc, #548]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	e7ba      	b.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0xa>
            TIM3->CCR1 = 0;
 8000c94:	4b7f      	ldr	r3, [pc, #508]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM3->CCR2 = 0;
 8000c9a:	639a      	str	r2, [r3, #56]	@ 0x38
            servo_iq18_reset(&servo1_g);
 8000c9c:	4886      	ldr	r0, [pc, #536]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000c9e:	f000 ffac 	bl	8001bfa <servo_iq18_reset>
            servo_iq18_reset(&servo2_g);
 8000ca2:	4886      	ldr	r0, [pc, #536]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ca4:	f000 ffa9 	bl	8001bfa <servo_iq18_reset>
            prev_control_mode = control_mode;
 8000ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	4b7e      	ldr	r3, [pc, #504]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	e7c4      	b.n	8000c3c <HAL_TIM_PeriodElapsedCallback+0x3c>
            servo_iq18_currentLoop(&servo1_g, current[0]);
 8000cb2:	4c83      	ldr	r4, [pc, #524]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000cb4:	6821      	ldr	r1, [r4, #0]
 8000cb6:	4880      	ldr	r0, [pc, #512]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000cb8:	f000 ff42 	bl	8001b40 <servo_iq18_currentLoop>
            servo_iq18_currentLoop(&servo2_g, current[1]);
 8000cbc:	6861      	ldr	r1, [r4, #4]
 8000cbe:	487f      	ldr	r0, [pc, #508]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000cc0:	f000 ff3e 	bl	8001b40 <servo_iq18_currentLoop>
 8000cc4:	e7be      	b.n	8000c44 <HAL_TIM_PeriodElapsedCallback+0x44>
            encoder_updatePosition_iq18(&servo1_g.encoder);
 8000cc6:	4c7c      	ldr	r4, [pc, #496]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f7ff fe21 	bl	8000910 <encoder_updatePosition_iq18>
            encoder_updateVelocity_qep_iq18(&servo1_g.encoder);
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f7ff fe54 	bl	800097c <encoder_updateVelocity_qep_iq18>
            if (system_enabled){
 8000cd4:	4b71      	ldr	r3, [pc, #452]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	bb7b      	cbnz	r3, 8000d3a <HAL_TIM_PeriodElapsedCallback+0x13a>
            fault1 = HAL_GPIO_ReadPin(nFAULT_L1_GPIO_Port, nFAULT_L1_Pin);
 8000cda:	4d7a      	ldr	r5, [pc, #488]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000cdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	f002 f997 	bl	8003014 <HAL_GPIO_ReadPin>
 8000ce6:	4c78      	ldr	r4, [pc, #480]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ce8:	7020      	strb	r0, [r4, #0]
            fault2 = HAL_GPIO_ReadPin(nFAULT_R1_GPIO_Port, nFAULT_R1_Pin);
 8000cea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cee:	4628      	mov	r0, r5
 8000cf0:	f002 f990 	bl	8003014 <HAL_GPIO_ReadPin>
 8000cf4:	4b75      	ldr	r3, [pc, #468]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000cf6:	7018      	strb	r0, [r3, #0]
            fault3 = HAL_GPIO_ReadPin(nFAULT_L2_GPIO_Port, nFAULT_L2_Pin);
 8000cf8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f002 f988 	bl	8003014 <HAL_GPIO_ReadPin>
 8000d04:	4b72      	ldr	r3, [pc, #456]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000d06:	7018      	strb	r0, [r3, #0]
            fault4 = HAL_GPIO_ReadPin(nFAULT_R2_GPIO_Port, nFAULT_R2_Pin);
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	f002 f982 	bl	8003014 <HAL_GPIO_ReadPin>
 8000d10:	4b70      	ldr	r3, [pc, #448]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d12:	7018      	strb	r0, [r3, #0]
            if(!(fault1 && fault2 && fault3 && fault4)){
 8000d14:	7823      	ldrb	r3, [r4, #0]
 8000d16:	b133      	cbz	r3, 8000d26 <HAL_TIM_PeriodElapsedCallback+0x126>
 8000d18:	4b6c      	ldr	r3, [pc, #432]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b11b      	cbz	r3, 8000d26 <HAL_TIM_PeriodElapsedCallback+0x126>
 8000d1e:	4b6c      	ldr	r3, [pc, #432]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b103      	cbz	r3, 8000d26 <HAL_TIM_PeriodElapsedCallback+0x126>
 8000d24:	b988      	cbnz	r0, 8000d4a <HAL_TIM_PeriodElapsedCallback+0x14a>
                system_enabled = 0;
 8000d26:	4b5d      	ldr	r3, [pc, #372]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
                brg_fault_flag = 1;
 8000d2c:	4b60      	ldr	r3, [pc, #384]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
            ind_led_handler(&ind_led_red);
 8000d32:	4869      	ldr	r0, [pc, #420]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d34:	f7ff ff13 	bl	8000b5e <ind_led_handler>
 8000d38:	e78b      	b.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x52>
                servo_iq18_velocityLoop(&servo1_g);
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 feba 	bl	8001ab4 <servo_iq18_velocityLoop>
                ind_led_set_opmode(&ind_led_red, BLINK_1HZ);
 8000d40:	2103      	movs	r1, #3
 8000d42:	4865      	ldr	r0, [pc, #404]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d44:	f7ff ff44 	bl	8000bd0 <ind_led_set_opmode>
 8000d48:	e7c7      	b.n	8000cda <HAL_TIM_PeriodElapsedCallback+0xda>
                brg_fault_flag = 0;
 8000d4a:	4b59      	ldr	r3, [pc, #356]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	e7ef      	b.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x132>
            encoder_updatePosition_iq18(&servo2_g.encoder);
 8000d52:	4c5a      	ldr	r4, [pc, #360]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d54:	4620      	mov	r0, r4
 8000d56:	f7ff fddb 	bl	8000910 <encoder_updatePosition_iq18>
            encoder_updateVelocity_qep_iq18(&servo2_g.encoder);
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f7ff fe0e 	bl	800097c <encoder_updateVelocity_qep_iq18>
            if (system_enabled){
 8000d60:	4b4e      	ldr	r3, [pc, #312]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b953      	cbnz	r3, 8000d7c <HAL_TIM_PeriodElapsedCallback+0x17c>
            irq_counter250 = 0;
 8000d66:	4b51      	ldr	r3, [pc, #324]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	801a      	strh	r2, [r3, #0]
            switch (loops_op_mode)
 8000d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d872      	bhi.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x25a>
 8000d74:	e8df f003 	tbb	[pc, r3]
 8000d78:	59402706 	.word	0x59402706
                servo_iq18_velocityLoop(&servo2_g);
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f000 fe99 	bl	8001ab4 <servo_iq18_velocityLoop>
 8000d82:	e7f0      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x166>
                if(!control_mode){
 8000d84:	4b47      	ldr	r3, [pc, #284]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b973      	cbnz	r3, 8000da8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
                    _iq18 comms_vel1 = (_iq18)data_ctrl.velocity_1 << 9;
 8000d8a:	4b54      	ldr	r3, [pc, #336]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000d8c:	f9b3 1005 	ldrsh.w	r1, [r3, #5]
                    _iq18 comms_vel2 = (_iq18)data_ctrl.velocity_2 << 9;
 8000d90:	f9b3 400b 	ldrsh.w	r4, [r3, #11]
 8000d94:	0264      	lsls	r4, r4, #9
                    servo_iq18_controlVelocity(&servo1_g, comms_vel1);
 8000d96:	0249      	lsls	r1, r1, #9
 8000d98:	4847      	ldr	r0, [pc, #284]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000d9a:	f000 ff02 	bl	8001ba2 <servo_iq18_controlVelocity>
                    servo_iq18_controlVelocity(&servo2_g, comms_vel2);
 8000d9e:	4621      	mov	r1, r4
 8000da0:	4846      	ldr	r0, [pc, #280]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000da2:	f000 fefe 	bl	8001ba2 <servo_iq18_controlVelocity>
 8000da6:	e758      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x5a>
                    _iq18 comms_ang1 = (_iq18)data_ctrl.angle_1 << 8;
 8000da8:	4b4c      	ldr	r3, [pc, #304]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000daa:	f8d3 1001 	ldr.w	r1, [r3, #1]
                    _iq18 comms_ang2 = (_iq18)data_ctrl.angle_2 << 8;
 8000dae:	f8d3 4007 	ldr.w	r4, [r3, #7]
 8000db2:	0224      	lsls	r4, r4, #8
                    servo_iq18_controlPosition(&servo1_g, comms_ang1);
 8000db4:	0209      	lsls	r1, r1, #8
 8000db6:	4840      	ldr	r0, [pc, #256]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000db8:	f000 fee9 	bl	8001b8e <servo_iq18_controlPosition>
                    servo_iq18_controlPosition(&servo2_g, comms_ang2);
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	483f      	ldr	r0, [pc, #252]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000dc0:	f000 fee5 	bl	8001b8e <servo_iq18_controlPosition>
 8000dc4:	e749      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x5a>
                servo_iq18_controlCurrent(&servo1_g, _IQ18(cur_debug_set_1));
 8000dc6:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000dca:	4b45      	ldr	r3, [pc, #276]	@ (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	f7ff f99d 	bl	800010c <__aeabi_fmul>
 8000dd2:	f7ff faeb 	bl	80003ac <__aeabi_f2iz>
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	4837      	ldr	r0, [pc, #220]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000dda:	f000 fef7 	bl	8001bcc <servo_iq18_controlCurrent>
                servo_iq18_controlCurrent(&servo2_g, _IQ18(cur_debug_set_2));
 8000dde:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000de2:	4b40      	ldr	r3, [pc, #256]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	f7ff f991 	bl	800010c <__aeabi_fmul>
 8000dea:	f7ff fadf 	bl	80003ac <__aeabi_f2iz>
 8000dee:	4601      	mov	r1, r0
 8000df0:	4832      	ldr	r0, [pc, #200]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000df2:	f000 feeb 	bl	8001bcc <servo_iq18_controlCurrent>
                break;
 8000df6:	e730      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x5a>
                servo_iq18_controlVelocity(&servo1_g, _IQ18(vel_debug_set_1));
 8000df8:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	f7ff f984 	bl	800010c <__aeabi_fmul>
 8000e04:	f7ff fad2 	bl	80003ac <__aeabi_f2iz>
 8000e08:	4601      	mov	r1, r0
 8000e0a:	482b      	ldr	r0, [pc, #172]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e0c:	f000 fec9 	bl	8001ba2 <servo_iq18_controlVelocity>
                servo_iq18_controlVelocity(&servo2_g, _IQ18(vel_debug_set_2));
 8000e10:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	f7ff f978 	bl	800010c <__aeabi_fmul>
 8000e1c:	f7ff fac6 	bl	80003ac <__aeabi_f2iz>
 8000e20:	4601      	mov	r1, r0
 8000e22:	4826      	ldr	r0, [pc, #152]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e24:	f000 febd 	bl	8001ba2 <servo_iq18_controlVelocity>
                break;
 8000e28:	e717      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x5a>
                servo_iq18_controlPosition(&servo1_g, _IQ18(ang_debug_set_1));
 8000e2a:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000e2e:	4b30      	ldr	r3, [pc, #192]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	f7ff f96b 	bl	800010c <__aeabi_fmul>
 8000e36:	f7ff fab9 	bl	80003ac <__aeabi_f2iz>
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	481e      	ldr	r0, [pc, #120]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e3e:	f000 fea6 	bl	8001b8e <servo_iq18_controlPosition>
                servo_iq18_controlPosition(&servo2_g, _IQ18(ang_debug_set_2));
 8000e42:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000e46:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	f7ff f95f 	bl	800010c <__aeabi_fmul>
 8000e4e:	f7ff faad 	bl	80003ac <__aeabi_f2iz>
 8000e52:	4601      	mov	r1, r0
 8000e54:	4819      	ldr	r0, [pc, #100]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e56:	f000 fe9a 	bl	8001b8e <servo_iq18_controlPosition>
                system_enabled = 0;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
                break;
 8000e60:	e6fb      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x5a>
            TIM3->CCR1 = 0;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM3->CCR2 = 0;
 8000e68:	639a      	str	r2, [r3, #56]	@ 0x38
            servo_iq18_reset(&servo1_g);
 8000e6a:	4813      	ldr	r0, [pc, #76]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e6c:	f000 fec5 	bl	8001bfa <servo_iq18_reset>
            servo_iq18_reset(&servo2_g);
 8000e70:	4812      	ldr	r0, [pc, #72]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e72:	f000 fec2 	bl	8001bfa <servo_iq18_reset>
            ind_led_set_opmode(&ind_led_red, BLINK_05HZ);
 8000e76:	2102      	movs	r1, #2
 8000e78:	4817      	ldr	r0, [pc, #92]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000e7a:	f7ff fea9 	bl	8000bd0 <ind_led_set_opmode>
 8000e7e:	e6f1      	b.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x64>
            ind_led_set_opmode(&ind_led_red, BLINK_8HZ);
 8000e80:	2106      	movs	r1, #6
 8000e82:	4815      	ldr	r0, [pc, #84]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000e84:	f7ff fea4 	bl	8000bd0 <ind_led_set_opmode>
 8000e88:	e6f1      	b.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x6e>
            ind_led_set_opmode(&ind_led_red, BLINK_4HZ);
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000e8e:	f7ff fe9f 	bl	8000bd0 <ind_led_set_opmode>
 8000e92:	e6f1      	b.n	8000c78 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000e94:	40000400 	.word	0x40000400
 8000e98:	20000191 	.word	0x20000191
 8000e9c:	2000015d 	.word	0x2000015d
 8000ea0:	20000159 	.word	0x20000159
 8000ea4:	2000015c 	.word	0x2000015c
 8000ea8:	20000190 	.word	0x20000190
 8000eac:	20000196 	.word	0x20000196
 8000eb0:	2000015a 	.word	0x2000015a
 8000eb4:	2000015b 	.word	0x2000015b
 8000eb8:	200002b0 	.word	0x200002b0
 8000ebc:	20000198 	.word	0x20000198
 8000ec0:	2000014c 	.word	0x2000014c
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	20000195 	.word	0x20000195
 8000ecc:	20000194 	.word	0x20000194
 8000ed0:	20000193 	.word	0x20000193
 8000ed4:	20000192 	.word	0x20000192
 8000ed8:	20000160 	.word	0x20000160
 8000edc:	200003ec 	.word	0x200003ec
 8000ee0:	2000018c 	.word	0x2000018c
 8000ee4:	20000188 	.word	0x20000188
 8000ee8:	20000184 	.word	0x20000184
 8000eec:	20000180 	.word	0x20000180
 8000ef0:	2000017c 	.word	0x2000017c
 8000ef4:	20000178 	.word	0x20000178

08000ef8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efa:	e7fe      	b.n	8000efa <Error_Handler+0x2>

08000efc <SystemClock_Config>:
{
 8000efc:	b500      	push	{lr}
 8000efe:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f00:	2228      	movs	r2, #40	@ 0x28
 8000f02:	2100      	movs	r1, #0
 8000f04:	eb0d 0002 	add.w	r0, sp, r2
 8000f08:	f004 f968 	bl	80051dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9305      	str	r3, [sp, #20]
 8000f10:	9306      	str	r3, [sp, #24]
 8000f12:	9307      	str	r3, [sp, #28]
 8000f14:	9308      	str	r3, [sp, #32]
 8000f16:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	9303      	str	r3, [sp, #12]
 8000f1e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f20:	2201      	movs	r2, #1
 8000f22:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f28:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f30:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f32:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f36:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f38:	a80a      	add	r0, sp, #40	@ 0x28
 8000f3a:	f002 f88f 	bl	800305c <HAL_RCC_OscConfig>
 8000f3e:	b9c8      	cbnz	r0, 8000f74 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f44:	2102      	movs	r1, #2
 8000f46:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f50:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f54:	a805      	add	r0, sp, #20
 8000f56:	f002 fab3 	bl	80034c0 <HAL_RCC_ClockConfig>
 8000f5a:	b968      	cbnz	r0, 8000f78 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f64:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f66:	a801      	add	r0, sp, #4
 8000f68:	f002 fb86 	bl	8003678 <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	b930      	cbnz	r0, 8000f7c <SystemClock_Config+0x80>
}
 8000f6e:	b015      	add	sp, #84	@ 0x54
 8000f70:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f74:	f7ff ffc0 	bl	8000ef8 <Error_Handler>
    Error_Handler();
 8000f78:	f7ff ffbe 	bl	8000ef8 <Error_Handler>
    Error_Handler();
 8000f7c:	f7ff ffbc 	bl	8000ef8 <Error_Handler>

08000f80 <main>:
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
  HAL_Init();
 8000f84:	f001 fa08 	bl	8002398 <HAL_Init>
  SystemClock_Config();
 8000f88:	f7ff ffb8 	bl	8000efc <SystemClock_Config>
  MX_GPIO_Init();
 8000f8c:	f7ff fd16 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f90:	f7ff fb8e 	bl	80006b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f94:	f7ff fa50 	bl	8000438 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000f98:	f000 fe3e 	bl	8001c18 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f9c:	f000 ff52 	bl	8001e44 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fa0:	f000 ff86 	bl	8001eb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa4:	f001 f8e8 	bl	8002178 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fa8:	f000 ffb4 	bl	8001f14 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fac:	f001 f930 	bl	8002210 <MX_USART1_UART_Init>
  TXOFF;
 8000fb0:	4c48      	ldr	r4, [pc, #288]	@ (80010d4 <main+0x154>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f002 f833 	bl	8003022 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	4845      	ldr	r0, [pc, #276]	@ (80010d8 <main+0x158>)
 8000fc2:	f002 f82e 	bl	8003022 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS2_GPIO_Port, SPI1_SS2_Pin, GPIO_PIN_SET);
 8000fc6:	4d45      	ldr	r5, [pc, #276]	@ (80010dc <main+0x15c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4628      	mov	r0, r5
 8000fce:	f002 f828 	bl	8003022 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS3_GPIO_Port, SPI1_SS3_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	f002 f823 	bl	8003022 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS4_GPIO_Port, SPI1_SS4_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f002 f81e 	bl	8003022 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f001 f9fa 	bl	80023e0 <HAL_Delay>
  HAL_GPIO_WritePin(BRIDGESLEEP1_GPIO_Port, BRIDGESLEEP1_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	f002 f816 	bl	8003022 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGESLEEP2_GPIO_Port, BRIDGESLEEP2_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f002 f810 	bl	8003022 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HIZ1_GPIO_Port, HIZ1_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2104      	movs	r1, #4
 8001006:	4620      	mov	r0, r4
 8001008:	f002 f80b 	bl	8003022 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HIZ2_GPIO_Port, HIZ2_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001012:	4620      	mov	r0, r4
 8001014:	f002 f805 	bl	8003022 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f001 f9e1 	bl	80023e0 <HAL_Delay>
  drv8106_reset_blocking(&drv_l1_dd6);
 800101e:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80010e0 <main+0x160>
 8001022:	4640      	mov	r0, r8
 8001024:	f7ff fc0b 	bl	800083e <drv8106_reset_blocking>
  drv8106_reset_blocking(&drv_r1_dd7);
 8001028:	4f2e      	ldr	r7, [pc, #184]	@ (80010e4 <main+0x164>)
 800102a:	4638      	mov	r0, r7
 800102c:	f7ff fc07 	bl	800083e <drv8106_reset_blocking>
  drv8106_reset_blocking(&drv_l2_dd8);
 8001030:	4e2d      	ldr	r6, [pc, #180]	@ (80010e8 <main+0x168>)
 8001032:	4630      	mov	r0, r6
 8001034:	f7ff fc03 	bl	800083e <drv8106_reset_blocking>
  drv8106_reset_blocking(&drv_r2_dd9);
 8001038:	4d2c      	ldr	r5, [pc, #176]	@ (80010ec <main+0x16c>)
 800103a:	4628      	mov	r0, r5
 800103c:	f7ff fbff 	bl	800083e <drv8106_reset_blocking>
  drv8106_clear_fault_blocking(&drv_l1_dd6);
 8001040:	4640      	mov	r0, r8
 8001042:	f7ff fc3c 	bl	80008be <drv8106_clear_fault_blocking>
  drv8106_clear_fault_blocking(&drv_r1_dd7);
 8001046:	4638      	mov	r0, r7
 8001048:	f7ff fc39 	bl	80008be <drv8106_clear_fault_blocking>
  drv8106_clear_fault_blocking(&drv_l2_dd8);
 800104c:	4630      	mov	r0, r6
 800104e:	f7ff fc36 	bl	80008be <drv8106_clear_fault_blocking>
  drv8106_clear_fault_blocking(&drv_r2_dd9);
 8001052:	4628      	mov	r0, r5
 8001054:	f7ff fc33 	bl	80008be <drv8106_clear_fault_blocking>
  drv8106_read_all_blocking(&drv_l1_dd6);
 8001058:	4640      	mov	r0, r8
 800105a:	f7ff fba0 	bl	800079e <drv8106_read_all_blocking>
  drv8106_read_all_blocking(&drv_r1_dd7);
 800105e:	4638      	mov	r0, r7
 8001060:	f7ff fb9d 	bl	800079e <drv8106_read_all_blocking>
  drv8106_read_all_blocking(&drv_l2_dd8);
 8001064:	4630      	mov	r0, r6
 8001066:	f7ff fb9a 	bl	800079e <drv8106_read_all_blocking>
  drv8106_read_all_blocking(&drv_r2_dd9);
 800106a:	4628      	mov	r0, r5
 800106c:	f7ff fb97 	bl	800079e <drv8106_read_all_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_l1_dd6);
 8001070:	4640      	mov	r0, r8
 8001072:	f7ff fc1e 	bl	80008b2 <drv8106_CSA_enable_g10_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_r1_dd7);
 8001076:	4638      	mov	r0, r7
 8001078:	f7ff fc1b 	bl	80008b2 <drv8106_CSA_enable_g10_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_l2_dd8);
 800107c:	4630      	mov	r0, r6
 800107e:	f7ff fc18 	bl	80008b2 <drv8106_CSA_enable_g10_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_r2_dd9);
 8001082:	4628      	mov	r0, r5
 8001084:	f7ff fc15 	bl	80008b2 <drv8106_CSA_enable_g10_blocking>
  drv8106_set_fault_autorecovery_blocking(&drv_l1_dd6);
 8001088:	4640      	mov	r0, r8
 800108a:	f7ff fc1e 	bl	80008ca <drv8106_set_fault_autorecovery_blocking>
  drv8106_set_fault_autorecovery_blocking(&drv_r1_dd7);
 800108e:	4638      	mov	r0, r7
 8001090:	f7ff fc1b 	bl	80008ca <drv8106_set_fault_autorecovery_blocking>
  drv8106_set_fault_autorecovery_blocking(&drv_l2_dd8);
 8001094:	4630      	mov	r0, r6
 8001096:	f7ff fc18 	bl	80008ca <drv8106_set_fault_autorecovery_blocking>
  drv8106_set_fault_autorecovery_blocking(&drv_r2_dd9);
 800109a:	4628      	mov	r0, r5
 800109c:	f7ff fc15 	bl	80008ca <drv8106_set_fault_autorecovery_blocking>
  drv8106_Enable_blocking(&drv_l1_dd6);
 80010a0:	4640      	mov	r0, r8
 80010a2:	f7ff fc00 	bl	80008a6 <drv8106_Enable_blocking>
  drv8106_Enable_blocking(&drv_r1_dd7);
 80010a6:	4638      	mov	r0, r7
 80010a8:	f7ff fbfd 	bl	80008a6 <drv8106_Enable_blocking>
  drv8106_Enable_blocking(&drv_l2_dd8);
 80010ac:	4630      	mov	r0, r6
 80010ae:	f7ff fbfa 	bl	80008a6 <drv8106_Enable_blocking>
  drv8106_Enable_blocking(&drv_r2_dd9);
 80010b2:	4628      	mov	r0, r5
 80010b4:	f7ff fbf7 	bl	80008a6 <drv8106_Enable_blocking>
  HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f001 f991 	bl	80023e0 <HAL_Delay>
  ind_led_init(&ind_led_red, IND_LED_GPIO_Port, IND_LED_Pin, 250, 0);
 80010be:	2300      	movs	r3, #0
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	23fa      	movs	r3, #250	@ 0xfa
 80010c4:	2210      	movs	r2, #16
 80010c6:	4621      	mov	r1, r4
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <main+0x170>)
 80010ca:	f7ff fd21 	bl	8000b10 <ind_led_init>
  init_mtr_ctrl();
 80010ce:	f000 f811 	bl	80010f4 <init_mtr_ctrl>
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <main+0x152>
 80010d4:	40010c00 	.word	0x40010c00
 80010d8:	40010800 	.word	0x40010800
 80010dc:	40011000 	.word	0x40011000
 80010e0:	20000078 	.word	0x20000078
 80010e4:	20000054 	.word	0x20000054
 80010e8:	20000030 	.word	0x20000030
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	20000160 	.word	0x20000160

080010f4 <init_mtr_ctrl>:
#include "main_init.h"

EMA_iq18 IC_filter;

void init_mtr_ctrl()
{
 80010f4:	b510      	push	{r4, lr}
    system_enabled = 0;
 80010f6:	2400      	movs	r4, #0
 80010f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <init_mtr_ctrl+0x70>)
 80010fa:	701c      	strb	r4, [r3, #0]
    servo_init();
 80010fc:	f000 fb02 	bl	8001704 <servo_init>

    // Reset servos
    servo_iq18_reset(&servo1_g);
 8001100:	4819      	ldr	r0, [pc, #100]	@ (8001168 <init_mtr_ctrl+0x74>)
 8001102:	f000 fd7a 	bl	8001bfa <servo_iq18_reset>
    servo_iq18_reset(&servo2_g);
 8001106:	4819      	ldr	r0, [pc, #100]	@ (800116c <init_mtr_ctrl+0x78>)
 8001108:	f000 fd77 	bl	8001bfa <servo_iq18_reset>

    servo_periph_init();
 800110c:	f000 fabc 	bl	8001688 <servo_periph_init>
    adc_cur_init();
 8001110:	f7ff fa1c 	bl	800054c <adc_cur_init>

    initEMA_iq18(&IC_filter, VEL_EMA, 0);
 8001114:	4622      	mov	r2, r4
 8001116:	4916      	ldr	r1, [pc, #88]	@ (8001170 <init_mtr_ctrl+0x7c>)
 8001118:	4816      	ldr	r0, [pc, #88]	@ (8001174 <init_mtr_ctrl+0x80>)
 800111a:	f7ff fbdc 	bl	80008d6 <initEMA_iq18>
    axis_define = S_NUM;
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <init_mtr_ctrl+0x84>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]

    if (axis_define == 1){ // if front axis
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4293      	cmp	r3, r2
 800112a:	d013      	beq.n	8001154 <init_mtr_ctrl+0x60>
        data_encoder.ID = ID_DATA_ENC_S1;
        data_current.ID = ID_DATA_CUR_S1;
    } else { // if rear axis
        data_encoder.ID = ID_DATA_ENC_S2;
 800112c:	4b13      	ldr	r3, [pc, #76]	@ (800117c <init_mtr_ctrl+0x88>)
 800112e:	2251      	movs	r2, #81	@ 0x51
 8001130:	701a      	strb	r2, [r3, #0]
        data_current.ID = ID_DATA_CUR_S2;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <init_mtr_ctrl+0x8c>)
 8001134:	2253      	movs	r2, #83	@ 0x53
 8001136:	701a      	strb	r2, [r3, #0]
    }

    TXOFF;
 8001138:	2200      	movs	r2, #0
 800113a:	2120      	movs	r1, #32
 800113c:	4811      	ldr	r0, [pc, #68]	@ (8001184 <init_mtr_ctrl+0x90>)
 800113e:	f001 ff70 	bl	8003022 <HAL_GPIO_WritePin>
    expected_packet = SYNC;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <init_mtr_ctrl+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)&packet_sync, S_SYNC);
 8001148:	2202      	movs	r2, #2
 800114a:	4910      	ldr	r1, [pc, #64]	@ (800118c <init_mtr_ctrl+0x98>)
 800114c:	4810      	ldr	r0, [pc, #64]	@ (8001190 <init_mtr_ctrl+0x9c>)
 800114e:	f003 ffbb 	bl	80050c8 <HAL_UART_Receive_DMA>
    
}
 8001152:	bd10      	pop	{r4, pc}
        data_encoder.ID = ID_DATA_ENC_S1;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <init_mtr_ctrl+0x88>)
 8001156:	2250      	movs	r2, #80	@ 0x50
 8001158:	701a      	strb	r2, [r3, #0]
        data_current.ID = ID_DATA_CUR_S1;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <init_mtr_ctrl+0x8c>)
 800115c:	2252      	movs	r2, #82	@ 0x52
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e7ea      	b.n	8001138 <init_mtr_ctrl+0x44>
 8001162:	bf00      	nop
 8001164:	2000015d 	.word	0x2000015d
 8001168:	200002b0 	.word	0x200002b0
 800116c:	20000198 	.word	0x20000198
 8001170:	3ecccccd 	.word	0x3ecccccd
 8001174:	200003c8 	.word	0x200003c8
 8001178:	20000158 	.word	0x20000158
 800117c:	200003dc 	.word	0x200003dc
 8001180:	200003d4 	.word	0x200003d4
 8001184:	40010c00 	.word	0x40010c00
 8001188:	200003d1 	.word	0x200003d1
 800118c:	2000040c 	.word	0x2000040c
 8001190:	200006ac 	.word	0x200006ac

08001194 <pid_iq18_reset>:
	pid->previousError = pid->error;
}

// Resets all the components and previous error
void pid_iq18_reset(pid_iq18_t *pid) {
	pid->P = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	6183      	str	r3, [r0, #24]
	pid->I = 0;
 8001198:	61c3      	str	r3, [r0, #28]
	pid->D = 0;
 800119a:	6203      	str	r3, [r0, #32]
	pid->previousError = 0;
 800119c:	6383      	str	r3, [r0, #56]	@ 0x38
	pid->output = 0;
 800119e:	6343      	str	r3, [r0, #52]	@ 0x34
}
 80011a0:	4770      	bx	lr

080011a2 <pid_iq18_calculate>:
void pid_iq18_calculate(pid_iq18_t *pid, _iq18 setpoint, _iq18 feedback) {
 80011a2:	b538      	push	{r3, r4, r5, lr}
 80011a4:	4604      	mov	r4, r0
	pid->error = setpoint - feedback;
 80011a6:	1a89      	subs	r1, r1, r2
 80011a8:	6001      	str	r1, [r0, #0]
	if ((pid->error > -(pid->toleranceBand))
 80011aa:	6943      	ldr	r3, [r0, #20]
 80011ac:	425a      	negs	r2, r3
 80011ae:	4291      	cmp	r1, r2
 80011b0:	dd01      	ble.n	80011b6 <pid_iq18_calculate+0x14>
			&& (pid->error < pid->toleranceBand)) {
 80011b2:	4299      	cmp	r1, r3
 80011b4:	db30      	blt.n	8001218 <pid_iq18_calculate+0x76>
	pid->P = _IQ18mpy(pid->error, pid->kp);
 80011b6:	6861      	ldr	r1, [r4, #4]
 80011b8:	6820      	ldr	r0, [r4, #0]
 80011ba:	f004 f807 	bl	80051cc <_IQ18mpy>
 80011be:	61a0      	str	r0, [r4, #24]
			(_IQ18mpy(pid->error, pid->ki)
 80011c0:	68a1      	ldr	r1, [r4, #8]
 80011c2:	6820      	ldr	r0, [r4, #0]
 80011c4:	f004 f802 	bl	80051cc <_IQ18mpy>
 80011c8:	4605      	mov	r5, r0
					+ _IQ18mpy(pid->output - pid->rawOutput, pid->kb)),
 80011ca:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80011cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80011ce:	6921      	ldr	r1, [r4, #16]
 80011d0:	1ac0      	subs	r0, r0, r3
 80011d2:	f003 fffb 	bl	80051cc <_IQ18mpy>
	pid->I += _IQ18mpy(
 80011d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80011d8:	4428      	add	r0, r5
 80011da:	f003 fff7 	bl	80051cc <_IQ18mpy>
 80011de:	69e3      	ldr	r3, [r4, #28]
 80011e0:	4403      	add	r3, r0
 80011e2:	61e3      	str	r3, [r4, #28]
	pid->D = _IQ18div(_IQ18mpy((pid->error - pid->previousError), pid->kd),
 80011e4:	6820      	ldr	r0, [r4, #0]
 80011e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80011e8:	68e1      	ldr	r1, [r4, #12]
 80011ea:	1ac0      	subs	r0, r0, r3
 80011ec:	f003 ffee 	bl	80051cc <_IQ18mpy>
 80011f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80011f2:	f003 ffa3 	bl	800513c <_IQ18div>
 80011f6:	6220      	str	r0, [r4, #32]
	pid->rawOutput = pid->P + pid->I + pid->D;
 80011f8:	69a3      	ldr	r3, [r4, #24]
 80011fa:	69e2      	ldr	r2, [r4, #28]
 80011fc:	4413      	add	r3, r2
 80011fe:	4418      	add	r0, r3
 8001200:	6320      	str	r0, [r4, #48]	@ 0x30
	pid->output = _IQsat(pid->rawOutput, pid->upperLimit, pid->lowerLimit);
 8001202:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001204:	4298      	cmp	r0, r3
 8001206:	dc03      	bgt.n	8001210 <pid_iq18_calculate+0x6e>
 8001208:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800120a:	4283      	cmp	r3, r0
 800120c:	bfb8      	it	lt
 800120e:	4603      	movlt	r3, r0
 8001210:	6363      	str	r3, [r4, #52]	@ 0x34
	pid->previousError = pid->error;
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8001216:	bd38      	pop	{r3, r4, r5, pc}
		pid->error = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	6003      	str	r3, [r0, #0]
		pid_iq18_reset(pid);
 800121c:	f7ff ffba 	bl	8001194 <pid_iq18_reset>
 8001220:	e7c9      	b.n	80011b6 <pid_iq18_calculate+0x14>

08001222 <pid_iq18_getOutput>:

// Getter for output
_iq18 pid_iq18_getOutput(pid_iq18_t *pid) {
	return pid->output;
}
 8001222:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001224:	4770      	bx	lr
	...

08001228 <update_crc_history>:

// Counters for packets that failed crc check
uint32_t failed_sync_packets_count, failed_data_packets_count;

void update_crc_history(uint8_t crc_ok){
    bus_crc_history = (bus_crc_history << 1) | crc_ok;
 8001228:	4b02      	ldr	r3, [pc, #8]	@ (8001234 <update_crc_history+0xc>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 8001230:	6018      	str	r0, [r3, #0]
}
 8001232:	4770      	bx	lr
 8001234:	2000009c 	.word	0x2000009c

08001238 <get_crc_success_rate>:

uint8_t  get_crc_success_rate(){
 8001238:	b508      	push	{r3, lr}
    uint8_t success_count = __builtin_popcount(bus_crc_history);
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <get_crc_success_rate+0x18>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f003 fff9 	bl	8005234 <__popcountsi2>
    return (success_count * 100) / 32;
 8001242:	b2c0      	uxtb	r0, r0
 8001244:	2364      	movs	r3, #100	@ 0x64
 8001246:	fb03 f000 	mul.w	r0, r3, r0
}
 800124a:	f3c0 1047 	ubfx	r0, r0, #5, #8
 800124e:	bd08      	pop	{r3, pc}
 8001250:	2000009c 	.word	0x2000009c

08001254 <pack_encoder_feedback>:

void pack_encoder_feedback(pack_data_encoder_t *packet) // Pack and crc encoder data
{
 8001254:	b570      	push	{r4, r5, r6, lr}
 8001256:	4604      	mov	r4, r0
    packet->angle_1 = encoder_getAngle_iq18(&servo1_g.encoder) >> 9;
 8001258:	4e11      	ldr	r6, [pc, #68]	@ (80012a0 <pack_encoder_feedback+0x4c>)
 800125a:	4630      	mov	r0, r6
 800125c:	f7ff fba9 	bl	80009b2 <encoder_getAngle_iq18>
 8001260:	1240      	asrs	r0, r0, #9
 8001262:	f8c4 0001 	str.w	r0, [r4, #1]
    packet->angle_1 = encoder_getAngle_iq18(&servo2_g.encoder) >> 9;
 8001266:	4d0f      	ldr	r5, [pc, #60]	@ (80012a4 <pack_encoder_feedback+0x50>)
 8001268:	4628      	mov	r0, r5
 800126a:	f7ff fba2 	bl	80009b2 <encoder_getAngle_iq18>
 800126e:	1240      	asrs	r0, r0, #9
 8001270:	f8c4 0001 	str.w	r0, [r4, #1]
    packet->velocity_1 = (int16_t)(encoder_getVelocity_iq18(&servo1_g.encoder) >> 9);
 8001274:	4630      	mov	r0, r6
 8001276:	f7ff fb9e 	bl	80009b6 <encoder_getVelocity_iq18>
 800127a:	f340 204f 	sbfx	r0, r0, #9, #16
 800127e:	f8a4 0005 	strh.w	r0, [r4, #5]
    packet->velocity_2 = (int16_t)(encoder_getVelocity_iq18(&servo2_g.encoder) >> 9);
 8001282:	4628      	mov	r0, r5
 8001284:	f7ff fb97 	bl	80009b6 <encoder_getVelocity_iq18>
 8001288:	f340 204f 	sbfx	r0, r0, #9, #16
 800128c:	f8a4 000b 	strh.w	r0, [r4, #11]
    packet->crc16 = crc16_ccitt((uint8_t*)packet, S_DATA_ENC_S1-2); // Using S1 size since they are same
 8001290:	210d      	movs	r1, #13
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff f9ea 	bl	800066c <crc16_ccitt>
 8001298:	f8a4 000d 	strh.w	r0, [r4, #13]
}
 800129c:	bd70      	pop	{r4, r5, r6, pc}
 800129e:	bf00      	nop
 80012a0:	200002b0 	.word	0x200002b0
 80012a4:	20000198 	.word	0x20000198

080012a8 <pack_current_feedback>:

void pack_current_feedback(pack_data_current_t *packet) // Pack and crc encoder data
{
 80012a8:	b510      	push	{r4, lr}
 80012aa:	4604      	mov	r4, r0
    packet->current1 = (int16_t)(current[0] >> 9);
 80012ac:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <pack_current_feedback+0x24>)
 80012ae:	6813      	ldr	r3, [r2, #0]
 80012b0:	f343 234f 	sbfx	r3, r3, #9, #16
 80012b4:	f8a0 3001 	strh.w	r3, [r0, #1]
    packet->current2 = (int16_t)(current[1] >> 9);
 80012b8:	6853      	ldr	r3, [r2, #4]
 80012ba:	f343 234f 	sbfx	r3, r3, #9, #16
 80012be:	f8a0 3003 	strh.w	r3, [r0, #3]
    packet->crc16 = crc16_ccitt((uint8_t*)packet, S_DATA_CUR_S1-2); // Using S1 size since they are same
 80012c2:	2106      	movs	r1, #6
 80012c4:	f7ff f9d2 	bl	800066c <crc16_ccitt>
 80012c8:	80e0      	strh	r0, [r4, #6]
}
 80012ca:	bd10      	pop	{r4, pc}
 80012cc:	2000014c 	.word	0x2000014c

080012d0 <sync_packet_handler>:

void sync_packet_handler(pack_sync_t *packet)
{
 80012d0:	b510      	push	{r4, lr}
    switch (packet->ID)
 80012d2:	7803      	ldrb	r3, [r0, #0]
 80012d4:	2b0c      	cmp	r3, #12
 80012d6:	d817      	bhi.n	8001308 <sync_packet_handler+0x38>
 80012d8:	e8df f003 	tbb	[pc, r3]
 80012dc:	16251707 	.word	0x16251707
 80012e0:	47331616 	.word	0x47331616
 80012e4:	95785b16 	.word	0x95785b16
 80012e8:	b2          	.byte	0xb2
 80012e9:	00          	.byte	0x00
    {
    case ID_S_STBY:
        system_enabled = 0;
 80012ea:	2400      	movs	r4, #0
 80012ec:	4b63      	ldr	r3, [pc, #396]	@ (800147c <sync_packet_handler+0x1ac>)
 80012ee:	701c      	strb	r4, [r3, #0]
        expected_packet = SYNC;
 80012f0:	4b63      	ldr	r3, [pc, #396]	@ (8001480 <sync_packet_handler+0x1b0>)
 80012f2:	701c      	strb	r4, [r3, #0]
        HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 80012f4:	2202      	movs	r2, #2
 80012f6:	4963      	ldr	r1, [pc, #396]	@ (8001484 <sync_packet_handler+0x1b4>)
 80012f8:	4863      	ldr	r0, [pc, #396]	@ (8001488 <sync_packet_handler+0x1b8>)
 80012fa:	f003 fee5 	bl	80050c8 <HAL_UART_Receive_DMA>
        data_ctrl.velocity_1 = 0;
 80012fe:	4b63      	ldr	r3, [pc, #396]	@ (800148c <sync_packet_handler+0x1bc>)
 8001300:	715c      	strb	r4, [r3, #5]
 8001302:	719c      	strb	r4, [r3, #6]
        data_ctrl.velocity_2 = 0;
 8001304:	72dc      	strb	r4, [r3, #11]
 8001306:	731c      	strb	r4, [r3, #12]
        }
        break;
    default:
        break;
    }
}
 8001308:	bd10      	pop	{r4, pc}
        system_enabled = 1;
 800130a:	4b5c      	ldr	r3, [pc, #368]	@ (800147c <sync_packet_handler+0x1ac>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
        control_mode = 0; // control velocity
 8001310:	2300      	movs	r3, #0
 8001312:	4a5f      	ldr	r2, [pc, #380]	@ (8001490 <sync_packet_handler+0x1c0>)
 8001314:	7013      	strb	r3, [r2, #0]
        expected_packet = SYNC;
 8001316:	4a5a      	ldr	r2, [pc, #360]	@ (8001480 <sync_packet_handler+0x1b0>)
 8001318:	7013      	strb	r3, [r2, #0]
        HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 800131a:	2202      	movs	r2, #2
 800131c:	4959      	ldr	r1, [pc, #356]	@ (8001484 <sync_packet_handler+0x1b4>)
 800131e:	485a      	ldr	r0, [pc, #360]	@ (8001488 <sync_packet_handler+0x1b8>)
 8001320:	f003 fed2 	bl	80050c8 <HAL_UART_Receive_DMA>
        break;
 8001324:	e7f0      	b.n	8001308 <sync_packet_handler+0x38>
        system_enabled = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	4a54      	ldr	r2, [pc, #336]	@ (800147c <sync_packet_handler+0x1ac>)
 800132a:	7013      	strb	r3, [r2, #0]
        control_mode = 1; // control angle
 800132c:	4a58      	ldr	r2, [pc, #352]	@ (8001490 <sync_packet_handler+0x1c0>)
 800132e:	7013      	strb	r3, [r2, #0]
        expected_packet = SYNC;
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <sync_packet_handler+0x1b0>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 8001336:	2202      	movs	r2, #2
 8001338:	4952      	ldr	r1, [pc, #328]	@ (8001484 <sync_packet_handler+0x1b4>)
 800133a:	4853      	ldr	r0, [pc, #332]	@ (8001488 <sync_packet_handler+0x1b8>)
 800133c:	f003 fec4 	bl	80050c8 <HAL_UART_Receive_DMA>
        break;
 8001340:	e7e2      	b.n	8001308 <sync_packet_handler+0x38>
        expected_packet = DATA_CTRL_S1;
 8001342:	4b4f      	ldr	r3, [pc, #316]	@ (8001480 <sync_packet_handler+0x1b0>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
        if (axis_define == 1)
 8001348:	4b52      	ldr	r3, [pc, #328]	@ (8001494 <sync_packet_handler+0x1c4>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4293      	cmp	r3, r2
 8001350:	d005      	beq.n	800135e <sync_packet_handler+0x8e>
            HAL_UART_Receive_DMA(&huart1, uart_rx_dump_buffer, S_DATA_CTRL_S1);
 8001352:	2210      	movs	r2, #16
 8001354:	4950      	ldr	r1, [pc, #320]	@ (8001498 <sync_packet_handler+0x1c8>)
 8001356:	484c      	ldr	r0, [pc, #304]	@ (8001488 <sync_packet_handler+0x1b8>)
 8001358:	f003 feb6 	bl	80050c8 <HAL_UART_Receive_DMA>
 800135c:	e7d4      	b.n	8001308 <sync_packet_handler+0x38>
            HAL_UART_Receive_DMA(&huart1, (uint8_t *)&data_ctrl_unchecked, S_DATA_CTRL_S1);
 800135e:	2210      	movs	r2, #16
 8001360:	494e      	ldr	r1, [pc, #312]	@ (800149c <sync_packet_handler+0x1cc>)
 8001362:	4849      	ldr	r0, [pc, #292]	@ (8001488 <sync_packet_handler+0x1b8>)
 8001364:	f003 feb0 	bl	80050c8 <HAL_UART_Receive_DMA>
 8001368:	e7ce      	b.n	8001308 <sync_packet_handler+0x38>
        expected_packet = DATA_CTRL_S2;
 800136a:	4b45      	ldr	r3, [pc, #276]	@ (8001480 <sync_packet_handler+0x1b0>)
 800136c:	2202      	movs	r2, #2
 800136e:	701a      	strb	r2, [r3, #0]
        if (axis_define == 2)
 8001370:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <sync_packet_handler+0x1c4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4293      	cmp	r3, r2
 8001378:	d005      	beq.n	8001386 <sync_packet_handler+0xb6>
            HAL_UART_Receive_DMA(&huart1, uart_rx_dump_buffer, S_DATA_CTRL_S2);
 800137a:	2210      	movs	r2, #16
 800137c:	4946      	ldr	r1, [pc, #280]	@ (8001498 <sync_packet_handler+0x1c8>)
 800137e:	4842      	ldr	r0, [pc, #264]	@ (8001488 <sync_packet_handler+0x1b8>)
 8001380:	f003 fea2 	bl	80050c8 <HAL_UART_Receive_DMA>
 8001384:	e7c0      	b.n	8001308 <sync_packet_handler+0x38>
            HAL_UART_Receive_DMA(&huart1, (uint8_t *)&data_ctrl_unchecked, S_DATA_CTRL_S2);
 8001386:	2210      	movs	r2, #16
 8001388:	4944      	ldr	r1, [pc, #272]	@ (800149c <sync_packet_handler+0x1cc>)
 800138a:	483f      	ldr	r0, [pc, #252]	@ (8001488 <sync_packet_handler+0x1b8>)
 800138c:	f003 fe9c 	bl	80050c8 <HAL_UART_Receive_DMA>
 8001390:	e7ba      	b.n	8001308 <sync_packet_handler+0x38>
        expected_packet = DATA_ENC_S1;
 8001392:	4b3b      	ldr	r3, [pc, #236]	@ (8001480 <sync_packet_handler+0x1b0>)
 8001394:	2203      	movs	r2, #3
 8001396:	701a      	strb	r2, [r3, #0]
        if (axis_define == 1)
 8001398:	4b3e      	ldr	r3, [pc, #248]	@ (8001494 <sync_packet_handler+0x1c4>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d005      	beq.n	80013ae <sync_packet_handler+0xde>
            HAL_UART_Receive_DMA(&huart1, uart_rx_dump_buffer, S_DATA_ENC_S1);
 80013a2:	220f      	movs	r2, #15
 80013a4:	493c      	ldr	r1, [pc, #240]	@ (8001498 <sync_packet_handler+0x1c8>)
 80013a6:	4838      	ldr	r0, [pc, #224]	@ (8001488 <sync_packet_handler+0x1b8>)
 80013a8:	f003 fe8e 	bl	80050c8 <HAL_UART_Receive_DMA>
 80013ac:	e7ac      	b.n	8001308 <sync_packet_handler+0x38>
            pack_encoder_feedback(&data_encoder);
 80013ae:	4c3c      	ldr	r4, [pc, #240]	@ (80014a0 <sync_packet_handler+0x1d0>)
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff ff4f 	bl	8001254 <pack_encoder_feedback>
            TXON; // Turn on transmission on Transceiver
 80013b6:	2201      	movs	r2, #1
 80013b8:	2120      	movs	r1, #32
 80013ba:	483a      	ldr	r0, [pc, #232]	@ (80014a4 <sync_packet_handler+0x1d4>)
 80013bc:	f001 fe31 	bl	8003022 <HAL_GPIO_WritePin>
            HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&data_encoder, S_DATA_ENC_S1);
 80013c0:	220f      	movs	r2, #15
 80013c2:	4621      	mov	r1, r4
 80013c4:	4830      	ldr	r0, [pc, #192]	@ (8001488 <sync_packet_handler+0x1b8>)
 80013c6:	f003 fb69 	bl	8004a9c <HAL_UART_Transmit_DMA>
 80013ca:	e79d      	b.n	8001308 <sync_packet_handler+0x38>
        expected_packet = DATA_ENC_S2;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001480 <sync_packet_handler+0x1b0>)
 80013ce:	2204      	movs	r2, #4
 80013d0:	701a      	strb	r2, [r3, #0]
        if (axis_define == 2)
 80013d2:	4b30      	ldr	r3, [pc, #192]	@ (8001494 <sync_packet_handler+0x1c4>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d005      	beq.n	80013e8 <sync_packet_handler+0x118>
            HAL_UART_Receive_DMA(&huart1, uart_rx_dump_buffer, S_DATA_ENC_S2);
 80013dc:	220f      	movs	r2, #15
 80013de:	492e      	ldr	r1, [pc, #184]	@ (8001498 <sync_packet_handler+0x1c8>)
 80013e0:	4829      	ldr	r0, [pc, #164]	@ (8001488 <sync_packet_handler+0x1b8>)
 80013e2:	f003 fe71 	bl	80050c8 <HAL_UART_Receive_DMA>
 80013e6:	e78f      	b.n	8001308 <sync_packet_handler+0x38>
            pack_encoder_feedback(&data_encoder);
 80013e8:	4c2d      	ldr	r4, [pc, #180]	@ (80014a0 <sync_packet_handler+0x1d0>)
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff ff32 	bl	8001254 <pack_encoder_feedback>
            TXON; // Turn on transmission on Transceiver
 80013f0:	2201      	movs	r2, #1
 80013f2:	2120      	movs	r1, #32
 80013f4:	482b      	ldr	r0, [pc, #172]	@ (80014a4 <sync_packet_handler+0x1d4>)
 80013f6:	f001 fe14 	bl	8003022 <HAL_GPIO_WritePin>
            HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&data_encoder, S_DATA_ENC_S2);
 80013fa:	220f      	movs	r2, #15
 80013fc:	4621      	mov	r1, r4
 80013fe:	4822      	ldr	r0, [pc, #136]	@ (8001488 <sync_packet_handler+0x1b8>)
 8001400:	f003 fb4c 	bl	8004a9c <HAL_UART_Transmit_DMA>
 8001404:	e780      	b.n	8001308 <sync_packet_handler+0x38>
        expected_packet = DATA_CUR_S1;
 8001406:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <sync_packet_handler+0x1b0>)
 8001408:	2205      	movs	r2, #5
 800140a:	701a      	strb	r2, [r3, #0]
        if (axis_define == 1)
 800140c:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <sync_packet_handler+0x1c4>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d005      	beq.n	8001422 <sync_packet_handler+0x152>
            HAL_UART_Receive_DMA(&huart1, uart_rx_dump_buffer, S_DATA_CUR_S1);
 8001416:	2208      	movs	r2, #8
 8001418:	491f      	ldr	r1, [pc, #124]	@ (8001498 <sync_packet_handler+0x1c8>)
 800141a:	481b      	ldr	r0, [pc, #108]	@ (8001488 <sync_packet_handler+0x1b8>)
 800141c:	f003 fe54 	bl	80050c8 <HAL_UART_Receive_DMA>
 8001420:	e772      	b.n	8001308 <sync_packet_handler+0x38>
            pack_current_feedback(&data_current);
 8001422:	4c21      	ldr	r4, [pc, #132]	@ (80014a8 <sync_packet_handler+0x1d8>)
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff ff3f 	bl	80012a8 <pack_current_feedback>
            TXON; // Turn on transmission on Transceiver
 800142a:	2201      	movs	r2, #1
 800142c:	2120      	movs	r1, #32
 800142e:	481d      	ldr	r0, [pc, #116]	@ (80014a4 <sync_packet_handler+0x1d4>)
 8001430:	f001 fdf7 	bl	8003022 <HAL_GPIO_WritePin>
            HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&data_current, S_DATA_CUR_S1);
 8001434:	2208      	movs	r2, #8
 8001436:	4621      	mov	r1, r4
 8001438:	4813      	ldr	r0, [pc, #76]	@ (8001488 <sync_packet_handler+0x1b8>)
 800143a:	f003 fb2f 	bl	8004a9c <HAL_UART_Transmit_DMA>
 800143e:	e763      	b.n	8001308 <sync_packet_handler+0x38>
        expected_packet = DATA_CUR_S2;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <sync_packet_handler+0x1b0>)
 8001442:	2206      	movs	r2, #6
 8001444:	701a      	strb	r2, [r3, #0]
        if (axis_define == 2)
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <sync_packet_handler+0x1c4>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d005      	beq.n	800145c <sync_packet_handler+0x18c>
            HAL_UART_Receive_DMA(&huart1, uart_rx_dump_buffer, S_DATA_CUR_S2);
 8001450:	2208      	movs	r2, #8
 8001452:	4911      	ldr	r1, [pc, #68]	@ (8001498 <sync_packet_handler+0x1c8>)
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <sync_packet_handler+0x1b8>)
 8001456:	f003 fe37 	bl	80050c8 <HAL_UART_Receive_DMA>
}
 800145a:	e755      	b.n	8001308 <sync_packet_handler+0x38>
            pack_current_feedback(&data_current);
 800145c:	4c12      	ldr	r4, [pc, #72]	@ (80014a8 <sync_packet_handler+0x1d8>)
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff ff22 	bl	80012a8 <pack_current_feedback>
            TXON; // Turn on transmission on Transceiver
 8001464:	2201      	movs	r2, #1
 8001466:	2120      	movs	r1, #32
 8001468:	480e      	ldr	r0, [pc, #56]	@ (80014a4 <sync_packet_handler+0x1d4>)
 800146a:	f001 fdda 	bl	8003022 <HAL_GPIO_WritePin>
            HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&data_current, S_DATA_CUR_S2);
 800146e:	2208      	movs	r2, #8
 8001470:	4621      	mov	r1, r4
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <sync_packet_handler+0x1b8>)
 8001474:	f003 fb12 	bl	8004a9c <HAL_UART_Transmit_DMA>
 8001478:	e746      	b.n	8001308 <sync_packet_handler+0x38>
 800147a:	bf00      	nop
 800147c:	2000015d 	.word	0x2000015d
 8001480:	200003d1 	.word	0x200003d1
 8001484:	2000040c 	.word	0x2000040c
 8001488:	200006ac 	.word	0x200006ac
 800148c:	200003ec 	.word	0x200003ec
 8001490:	2000015c 	.word	0x2000015c
 8001494:	20000158 	.word	0x20000158
 8001498:	20000410 	.word	0x20000410
 800149c:	200003fc 	.word	0x200003fc
 80014a0:	200003dc 	.word	0x200003dc
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	200003d4 	.word	0x200003d4

080014ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014ac:	b510      	push	{r4, lr}
    switch (expected_packet)
 80014ae:	4b42      	ldr	r3, [pc, #264]	@ (80015b8 <HAL_UART_RxCpltCallback+0x10c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d023      	beq.n	80014fe <HAL_UART_RxCpltCallback+0x52>
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d04b      	beq.n	8001552 <HAL_UART_RxCpltCallback+0xa6>
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d173      	bne.n	80015a6 <HAL_UART_RxCpltCallback+0xfa>
    {
    case SYNC:
        if (packet_sync.crc8 == crc8_ccitt((uint8_t *)&packet_sync, 1))
 80014be:	483f      	ldr	r0, [pc, #252]	@ (80015bc <HAL_UART_RxCpltCallback+0x110>)
 80014c0:	7844      	ldrb	r4, [r0, #1]
 80014c2:	2101      	movs	r1, #1
 80014c4:	f7ff f8b4 	bl	8000630 <crc8_ccitt>
 80014c8:	4284      	cmp	r4, r0
 80014ca:	d00e      	beq.n	80014ea <HAL_UART_RxCpltCallback+0x3e>
            update_crc_history(1);
            sync_packet_handler(&packet_sync);
        }
        else
        {
            fail_sync = 1;
 80014cc:	4b3c      	ldr	r3, [pc, #240]	@ (80015c0 <HAL_UART_RxCpltCallback+0x114>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
            update_crc_history(0);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fea8 	bl	8001228 <update_crc_history>
            // // LED_ON;
            // failed_sync_packets_count++;
            // system_enabled = 0;
            // data_ctrl.velocity_1 = 0;
            // data_ctrl.velocity_2 = 0;
            expected_packet = SYNC;
 80014d8:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <HAL_UART_RxCpltCallback+0x10c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 80014de:	2202      	movs	r2, #2
 80014e0:	4936      	ldr	r1, [pc, #216]	@ (80015bc <HAL_UART_RxCpltCallback+0x110>)
 80014e2:	4838      	ldr	r0, [pc, #224]	@ (80015c4 <HAL_UART_RxCpltCallback+0x118>)
 80014e4:	f003 fdf0 	bl	80050c8 <HAL_UART_Receive_DMA>
 80014e8:	e016      	b.n	8001518 <HAL_UART_RxCpltCallback+0x6c>
            fail_sync = 0;
 80014ea:	4b35      	ldr	r3, [pc, #212]	@ (80015c0 <HAL_UART_RxCpltCallback+0x114>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
            update_crc_history(1);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff fe99 	bl	8001228 <update_crc_history>
            sync_packet_handler(&packet_sync);
 80014f6:	4831      	ldr	r0, [pc, #196]	@ (80015bc <HAL_UART_RxCpltCallback+0x110>)
 80014f8:	f7ff feea 	bl	80012d0 <sync_packet_handler>
 80014fc:	e00c      	b.n	8001518 <HAL_UART_RxCpltCallback+0x6c>
        }
        break;
    case DATA_CTRL_S1:
        if (axis_define == 1)
 80014fe:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <HAL_UART_RxCpltCallback+0x11c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d008      	beq.n	800151a <HAL_UART_RxCpltCallback+0x6e>
                // failed_data_packets_count++;
                expected_packet = SYNC;
                HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
            }
        }
        expected_packet = SYNC;
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <HAL_UART_RxCpltCallback+0x10c>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 800150e:	2202      	movs	r2, #2
 8001510:	492a      	ldr	r1, [pc, #168]	@ (80015bc <HAL_UART_RxCpltCallback+0x110>)
 8001512:	482c      	ldr	r0, [pc, #176]	@ (80015c4 <HAL_UART_RxCpltCallback+0x118>)
 8001514:	f003 fdd8 	bl	80050c8 <HAL_UART_Receive_DMA>
    default:
        expected_packet = SYNC;
        HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
        break;
    }
}
 8001518:	bd10      	pop	{r4, pc}
            if (data_ctrl_unchecked.crc16 == crc16_ccitt((uint8_t *)&data_ctrl_unchecked, S_DATA_CTRL_S1 - 2))
 800151a:	482c      	ldr	r0, [pc, #176]	@ (80015cc <HAL_UART_RxCpltCallback+0x120>)
 800151c:	89c4      	ldrh	r4, [r0, #14]
 800151e:	210e      	movs	r1, #14
 8001520:	f7ff f8a4 	bl	800066c <crc16_ccitt>
 8001524:	4284      	cmp	r4, r0
 8001526:	d00b      	beq.n	8001540 <HAL_UART_RxCpltCallback+0x94>
                update_crc_history(0);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fe7d 	bl	8001228 <update_crc_history>
                expected_packet = SYNC;
 800152e:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <HAL_UART_RxCpltCallback+0x10c>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 8001534:	2202      	movs	r2, #2
 8001536:	4921      	ldr	r1, [pc, #132]	@ (80015bc <HAL_UART_RxCpltCallback+0x110>)
 8001538:	4822      	ldr	r0, [pc, #136]	@ (80015c4 <HAL_UART_RxCpltCallback+0x118>)
 800153a:	f003 fdc5 	bl	80050c8 <HAL_UART_Receive_DMA>
 800153e:	e7e3      	b.n	8001508 <HAL_UART_RxCpltCallback+0x5c>
                update_crc_history(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fe71 	bl	8001228 <update_crc_history>
                memcpy(&data_ctrl, &data_ctrl_unchecked, S_DATA_CTRL_S1);
 8001546:	4c22      	ldr	r4, [pc, #136]	@ (80015d0 <HAL_UART_RxCpltCallback+0x124>)
 8001548:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_UART_RxCpltCallback+0x120>)
 800154a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001550:	e7da      	b.n	8001508 <HAL_UART_RxCpltCallback+0x5c>
        if (axis_define == 2)
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <HAL_UART_RxCpltCallback+0x11c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d008      	beq.n	800156e <HAL_UART_RxCpltCallback+0xc2>
        expected_packet = SYNC;
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_UART_RxCpltCallback+0x10c>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 8001562:	2202      	movs	r2, #2
 8001564:	4915      	ldr	r1, [pc, #84]	@ (80015bc <HAL_UART_RxCpltCallback+0x110>)
 8001566:	4817      	ldr	r0, [pc, #92]	@ (80015c4 <HAL_UART_RxCpltCallback+0x118>)
 8001568:	f003 fdae 	bl	80050c8 <HAL_UART_Receive_DMA>
        break;
 800156c:	e7d4      	b.n	8001518 <HAL_UART_RxCpltCallback+0x6c>
            if (data_ctrl_unchecked.crc16 == crc16_ccitt((uint8_t *)&data_ctrl_unchecked, S_DATA_CTRL_S2 - 2))
 800156e:	4817      	ldr	r0, [pc, #92]	@ (80015cc <HAL_UART_RxCpltCallback+0x120>)
 8001570:	89c4      	ldrh	r4, [r0, #14]
 8001572:	210e      	movs	r1, #14
 8001574:	f7ff f87a 	bl	800066c <crc16_ccitt>
 8001578:	4284      	cmp	r4, r0
 800157a:	d00b      	beq.n	8001594 <HAL_UART_RxCpltCallback+0xe8>
                update_crc_history(0);
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff fe53 	bl	8001228 <update_crc_history>
                expected_packet = SYNC;
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_UART_RxCpltCallback+0x10c>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 8001588:	2202      	movs	r2, #2
 800158a:	490c      	ldr	r1, [pc, #48]	@ (80015bc <HAL_UART_RxCpltCallback+0x110>)
 800158c:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <HAL_UART_RxCpltCallback+0x118>)
 800158e:	f003 fd9b 	bl	80050c8 <HAL_UART_Receive_DMA>
 8001592:	e7e3      	b.n	800155c <HAL_UART_RxCpltCallback+0xb0>
                update_crc_history(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff fe47 	bl	8001228 <update_crc_history>
                memcpy(&data_ctrl, &data_ctrl_unchecked, S_DATA_CTRL_S2);
 800159a:	4c0d      	ldr	r4, [pc, #52]	@ (80015d0 <HAL_UART_RxCpltCallback+0x124>)
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_UART_RxCpltCallback+0x120>)
 800159e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015a4:	e7da      	b.n	800155c <HAL_UART_RxCpltCallback+0xb0>
        expected_packet = SYNC;
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <HAL_UART_RxCpltCallback+0x10c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 80015ac:	2202      	movs	r2, #2
 80015ae:	4903      	ldr	r1, [pc, #12]	@ (80015bc <HAL_UART_RxCpltCallback+0x110>)
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <HAL_UART_RxCpltCallback+0x118>)
 80015b2:	f003 fd89 	bl	80050c8 <HAL_UART_Receive_DMA>
}
 80015b6:	e7af      	b.n	8001518 <HAL_UART_RxCpltCallback+0x6c>
 80015b8:	200003d1 	.word	0x200003d1
 80015bc:	2000040c 	.word	0x2000040c
 80015c0:	200003d0 	.word	0x200003d0
 80015c4:	200006ac 	.word	0x200006ac
 80015c8:	20000158 	.word	0x20000158
 80015cc:	200003fc 	.word	0x200003fc
 80015d0:	200003ec 	.word	0x200003ec

080015d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015d4:	b508      	push	{r3, lr}
    TXOFF; // Turn of transmission on transceiver in order to not hang the bus
 80015d6:	2200      	movs	r2, #0
 80015d8:	2120      	movs	r1, #32
 80015da:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <HAL_UART_TxCpltCallback+0x20>)
 80015dc:	f001 fd21 	bl	8003022 <HAL_GPIO_WritePin>
    expected_packet = SYNC;
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_UART_TxCpltCallback+0x24>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_DMA(&huart1, (uint8_t *)&packet_sync, S_SYNC);
 80015e6:	2202      	movs	r2, #2
 80015e8:	4904      	ldr	r1, [pc, #16]	@ (80015fc <HAL_UART_TxCpltCallback+0x28>)
 80015ea:	4805      	ldr	r0, [pc, #20]	@ (8001600 <HAL_UART_TxCpltCallback+0x2c>)
 80015ec:	f003 fd6c 	bl	80050c8 <HAL_UART_Receive_DMA>
 80015f0:	bd08      	pop	{r3, pc}
 80015f2:	bf00      	nop
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	200003d1 	.word	0x200003d1
 80015fc:	2000040c 	.word	0x2000040c
 8001600:	200006ac 	.word	0x200006ac

08001604 <pwm_setSpeed>:
void pwm_dutyLimits(pwmControl_t *driver, uint16_t minDuty, uint16_t maxDuty) {
	driver->minDuty = minDuty;
	driver->maxDuty = maxDuty;
}

void pwm_setSpeed(pwmControl_t *driver, int32_t duty) {
 8001604:	b510      	push	{r4, lr}
 8001606:	4604      	mov	r4, r0
	if (!duty) {
 8001608:	b951      	cbnz	r1, 8001620 <pwm_setSpeed+0x1c>
		driver->_duty = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	6083      	str	r3, [r0, #8]
		driver->dir = 0;
 800160e:	7503      	strb	r3, [r0, #20]
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
			driver->dir = -1;
		}
	}

	switch (driver->timerChannel) {
 8001610:	7d63      	ldrb	r3, [r4, #21]
 8001612:	3b01      	subs	r3, #1
 8001614:	2b03      	cmp	r3, #3
 8001616:	d826      	bhi.n	8001666 <pwm_setSpeed+0x62>
 8001618:	e8df f003 	tbb	[pc, r3]
 800161c:	302b2621 	.word	0x302b2621
 8001620:	460a      	mov	r2, r1
		driver->_duty = constrain(ABS(duty), driver->minDuty, driver->maxDuty);
 8001622:	ea81 71e1 	eor.w	r1, r1, r1, asr #31
 8001626:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800162a:	8a43      	ldrh	r3, [r0, #18]
 800162c:	4299      	cmp	r1, r3
 800162e:	db03      	blt.n	8001638 <pwm_setSpeed+0x34>
 8001630:	8a03      	ldrh	r3, [r0, #16]
 8001632:	428b      	cmp	r3, r1
 8001634:	bfa8      	it	ge
 8001636:	460b      	movge	r3, r1
 8001638:	60a3      	str	r3, [r4, #8]
		if (duty > 0) {
 800163a:	2a00      	cmp	r2, #0
 800163c:	dd07      	ble.n	800164e <pwm_setSpeed+0x4a>
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	89a1      	ldrh	r1, [r4, #12]
 8001642:	6860      	ldr	r0, [r4, #4]
 8001644:	f001 fced 	bl	8003022 <HAL_GPIO_WritePin>
			driver->dir = 1;
 8001648:	2301      	movs	r3, #1
 800164a:	7523      	strb	r3, [r4, #20]
 800164c:	e7e0      	b.n	8001610 <pwm_setSpeed+0xc>
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	89a1      	ldrh	r1, [r4, #12]
 8001652:	6860      	ldr	r0, [r4, #4]
 8001654:	f001 fce5 	bl	8003022 <HAL_GPIO_WritePin>
			driver->dir = -1;
 8001658:	23ff      	movs	r3, #255	@ 0xff
 800165a:	7523      	strb	r3, [r4, #20]
 800165c:	e7d8      	b.n	8001610 <pwm_setSpeed+0xc>
	case 1:
		driver->htim->Instance->CCR1 = driver->_duty;
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68a2      	ldr	r2, [r4, #8]
 8001664:	635a      	str	r2, [r3, #52]	@ 0x34
		driver->htim->Instance->CCR4 = driver->_duty;
		break;
	default:
		break;
	}
}
 8001666:	bd10      	pop	{r4, pc}
		driver->htim->Instance->CCR2 = driver->_duty;
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68a2      	ldr	r2, [r4, #8]
 800166e:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8001670:	e7f9      	b.n	8001666 <pwm_setSpeed+0x62>
		driver->htim->Instance->CCR3 = driver->_duty;
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68a2      	ldr	r2, [r4, #8]
 8001678:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 800167a:	e7f4      	b.n	8001666 <pwm_setSpeed+0x62>
		driver->htim->Instance->CCR4 = driver->_duty;
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68a2      	ldr	r2, [r4, #8]
 8001682:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001684:	e7ef      	b.n	8001666 <pwm_setSpeed+0x62>
	...

08001688 <servo_periph_init>:
#include "servo_init.h"

// servo_iq18_t servo1_g, servo2_g;

void servo_periph_init()
{
 8001688:	b510      	push	{r4, lr}
    // Init timers

    // TIM1&2 for encoders
    MX_TIM1_Init();
 800168a:	f000 fbdb 	bl	8001e44 <MX_TIM1_Init>
    MX_TIM2_Init();
 800168e:	f000 fc0f 	bl	8001eb0 <MX_TIM2_Init>

    // TIM3&4 for periodical tasks
    MX_TIM3_Init(); // PWM as well
 8001692:	f000 fd71 	bl	8002178 <MX_TIM3_Init>

    // Init & calibrate ADC
    MX_ADC1_Init();
 8001696:	f7fe fecf 	bl	8000438 <MX_ADC1_Init>
    HAL_ADCEx_Calibration_Start(&hadc1);
 800169a:	4815      	ldr	r0, [pc, #84]	@ (80016f0 <servo_periph_init+0x68>)
 800169c:	f001 f91e 	bl	80028dc <HAL_ADCEx_Calibration_Start>

    // Start timers

    // Clear CNT and start timers 1&2 in encoder mode
    __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 80016a0:	4814      	ldr	r0, [pc, #80]	@ (80016f4 <servo_periph_init+0x6c>)
 80016a2:	6803      	ldr	r3, [r0, #0]
 80016a4:	f06f 0401 	mvn.w	r4, #1
 80016a8:	611c      	str	r4, [r3, #16]
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80016aa:	213c      	movs	r1, #60	@ 0x3c
 80016ac:	f003 f870 	bl	8004790 <HAL_TIM_Encoder_Start>
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80016b0:	4811      	ldr	r0, [pc, #68]	@ (80016f8 <servo_periph_init+0x70>)
 80016b2:	6803      	ldr	r3, [r0, #0]
 80016b4:	611c      	str	r4, [r3, #16]
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80016b6:	213c      	movs	r1, #60	@ 0x3c
 80016b8:	f003 f86a 	bl	8004790 <HAL_TIM_Encoder_Start>

    // Start TIM3 in PWM mode and also turn on interrupts
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016bc:	4c0f      	ldr	r4, [pc, #60]	@ (80016fc <servo_periph_init+0x74>)
 80016be:	2100      	movs	r1, #0
 80016c0:	4620      	mov	r0, r4
 80016c2:	f002 ff53 	bl	800456c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016c6:	2104      	movs	r1, #4
 80016c8:	4620      	mov	r0, r4
 80016ca:	f002 ff4f 	bl	800456c <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim3);
 80016ce:	4620      	mov	r0, r4
 80016d0:	f002 fc30 	bl	8003f34 <HAL_TIM_Base_Start_IT>

    
    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 80016d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001700 <servo_periph_init+0x78>)
 80016d6:	2108      	movs	r1, #8
 80016d8:	4620      	mov	r0, r4
 80016da:	f002 ffb5 	bl	8004648 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 80016de:	210c      	movs	r1, #12
 80016e0:	4620      	mov	r0, r4
 80016e2:	f002 ffb1 	bl	8004648 <HAL_TIM_IC_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 80016e6:	4620      	mov	r0, r4
 80016e8:	f002 fc24 	bl	8003f34 <HAL_TIM_Base_Start_IT>
}
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	bf00      	nop
 80016f0:	2000010c 	.word	0x2000010c
 80016f4:	200005dc 	.word	0x200005dc
 80016f8:	20000594 	.word	0x20000594
 80016fc:	2000054c 	.word	0x2000054c
 8001700:	20000504 	.word	0x20000504

08001704 <servo_init>:

void servo_init()
{
 8001704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001708:	b085      	sub	sp, #20
    // Init servo1
    if (SERVO1_ENABLE)
    {
        servo_iq18_base_init(&servo1_g, Triple, MT_VELOCITY, MT_GEAR_RATIO, SERVO1_REVERSE);
 800170a:	4d43      	ldr	r5, [pc, #268]	@ (8001818 <servo_init+0x114>)
 800170c:	f04f 0800 	mov.w	r8, #0
 8001710:	f8cd 8000 	str.w	r8, [sp]
 8001714:	4b41      	ldr	r3, [pc, #260]	@ (800181c <servo_init+0x118>)
 8001716:	4a42      	ldr	r2, [pc, #264]	@ (8001820 <servo_init+0x11c>)
 8001718:	2102      	movs	r1, #2
 800171a:	4628      	mov	r0, r5
 800171c:	f000 f8a2 	bl	8001864 <servo_iq18_base_init>
        servo_iq18_encoder_init(&servo1_g, &htim1, ENC_TPR, SERVO1_ENC_REVERSE);
 8001720:	2301      	movs	r3, #1
 8001722:	222c      	movs	r2, #44	@ 0x2c
 8001724:	493f      	ldr	r1, [pc, #252]	@ (8001824 <servo_init+0x120>)
 8001726:	4628      	mov	r0, r5
 8001728:	f000 f8ca 	bl	80018c0 <servo_iq18_encoder_init>

        servo_iq18_driver_init(&servo1_g, &htim3, 1, DIR1_1_GPIO_Port, DIR1_1_Pin, 0, 1000);
 800172c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	f8cd 8004 	str.w	r8, [sp, #4]
 8001736:	2702      	movs	r7, #2
 8001738:	9700      	str	r7, [sp, #0]
 800173a:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <servo_init+0x124>)
 800173c:	2201      	movs	r2, #1
 800173e:	493b      	ldr	r1, [pc, #236]	@ (800182c <servo_init+0x128>)
 8001740:	4628      	mov	r0, r5
 8001742:	f000 f8d3 	bl	80018ec <servo_iq18_driver_init>

        servo_iq18_position_init(&servo1_g, ANG_KP, ANG_KI, ANG_KD, ANG_DT, ANG_KB);
 8001746:	2400      	movs	r4, #0
 8001748:	9401      	str	r4, [sp, #4]
 800174a:	4e39      	ldr	r6, [pc, #228]	@ (8001830 <servo_init+0x12c>)
 800174c:	9600      	str	r6, [sp, #0]
 800174e:	4623      	mov	r3, r4
 8001750:	4622      	mov	r2, r4
 8001752:	4938      	ldr	r1, [pc, #224]	@ (8001834 <servo_init+0x130>)
 8001754:	4628      	mov	r0, r5
 8001756:	f000 f8fb 	bl	8001950 <servo_iq18_position_init>
        servo_iq18_velocity_init(&servo1_g, VEL_KP, VEL_KI,
 800175a:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 8001838 <servo_init+0x134>
 800175e:	f8cd b004 	str.w	fp, [sp, #4]
 8001762:	9600      	str	r6, [sp, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	4a35      	ldr	r2, [pc, #212]	@ (800183c <servo_init+0x138>)
 8001768:	4935      	ldr	r1, [pc, #212]	@ (8001840 <servo_init+0x13c>)
 800176a:	4628      	mov	r0, r5
 800176c:	f000 f91d 	bl	80019aa <servo_iq18_velocity_init>
                                 VEL_KD, VEL_DT, VEL_KB);
        servo_iq18_current_init(&servo1_g, CUR_LIMIT, CUR_KP, CUR_KI, CUR_KD,
 8001770:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 8001844 <servo_init+0x140>
 8001774:	f8cd a008 	str.w	sl, [sp, #8]
 8001778:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 8001848 <servo_init+0x144>
 800177c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001780:	9400      	str	r4, [sp, #0]
 8001782:	4b32      	ldr	r3, [pc, #200]	@ (800184c <servo_init+0x148>)
 8001784:	4a32      	ldr	r2, [pc, #200]	@ (8001850 <servo_init+0x14c>)
 8001786:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800178a:	4628      	mov	r0, r5
 800178c:	f000 f93d 	bl	8001a0a <servo_iq18_current_init>
                                CUR_DT, CUR_KB);
        servo_iq18_setPositionTolerance(&servo1_g, ANG_TOLERANCE);
 8001790:	4930      	ldr	r1, [pc, #192]	@ (8001854 <servo_init+0x150>)
 8001792:	4628      	mov	r0, r5
 8001794:	f000 f983 	bl	8001a9e <servo_iq18_setPositionTolerance>
    }

    // Init servo2
    if (SERVO2_ENABLE)
    {
        servo_iq18_base_init(&servo2_g, Triple, MT_VELOCITY, MT_GEAR_RATIO, SERVO2_REVERSE);
 8001798:	4d2f      	ldr	r5, [pc, #188]	@ (8001858 <servo_init+0x154>)
 800179a:	f8cd 8000 	str.w	r8, [sp]
 800179e:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <servo_init+0x118>)
 80017a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001820 <servo_init+0x11c>)
 80017a2:	4639      	mov	r1, r7
 80017a4:	4628      	mov	r0, r5
 80017a6:	f000 f85d 	bl	8001864 <servo_iq18_base_init>
        servo_iq18_encoder_init(&servo2_g, &htim2, ENC_TPR, SERVO2_ENC_REVERSE);
 80017aa:	2301      	movs	r3, #1
 80017ac:	222c      	movs	r2, #44	@ 0x2c
 80017ae:	492b      	ldr	r1, [pc, #172]	@ (800185c <servo_init+0x158>)
 80017b0:	4628      	mov	r0, r5
 80017b2:	f000 f885 	bl	80018c0 <servo_iq18_encoder_init>

        servo_iq18_driver_init(&servo2_g, &htim3, 2, DIR2_1_GPIO_Port, DIR2_1_Pin, 0, 1000);
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80017c0:	9700      	str	r7, [sp, #0]
 80017c2:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <servo_init+0x15c>)
 80017c4:	463a      	mov	r2, r7
 80017c6:	4919      	ldr	r1, [pc, #100]	@ (800182c <servo_init+0x128>)
 80017c8:	4628      	mov	r0, r5
 80017ca:	f000 f88f 	bl	80018ec <servo_iq18_driver_init>

        servo_iq18_position_init(&servo2_g, ANG_KP, ANG_KI, ANG_KD, ANG_DT, ANG_KB);
 80017ce:	9401      	str	r4, [sp, #4]
 80017d0:	9600      	str	r6, [sp, #0]
 80017d2:	4623      	mov	r3, r4
 80017d4:	4622      	mov	r2, r4
 80017d6:	4917      	ldr	r1, [pc, #92]	@ (8001834 <servo_init+0x130>)
 80017d8:	4628      	mov	r0, r5
 80017da:	f000 f8b9 	bl	8001950 <servo_iq18_position_init>
        servo_iq18_velocity_init(&servo2_g, VEL_KP, VEL_KI,
 80017de:	f8cd b004 	str.w	fp, [sp, #4]
 80017e2:	9600      	str	r6, [sp, #0]
 80017e4:	4623      	mov	r3, r4
 80017e6:	4a15      	ldr	r2, [pc, #84]	@ (800183c <servo_init+0x138>)
 80017e8:	4915      	ldr	r1, [pc, #84]	@ (8001840 <servo_init+0x13c>)
 80017ea:	4628      	mov	r0, r5
 80017ec:	f000 f8dd 	bl	80019aa <servo_iq18_velocity_init>
                                 VEL_KD, VEL_DT, VEL_KB);
        servo_iq18_current_init(&servo2_g, CUR_LIMIT, CUR_KP, CUR_KI, CUR_KD,
 80017f0:	f8cd a008 	str.w	sl, [sp, #8]
 80017f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80017f8:	9400      	str	r4, [sp, #0]
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <servo_init+0x148>)
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <servo_init+0x14c>)
 80017fe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001802:	4628      	mov	r0, r5
 8001804:	f000 f901 	bl	8001a0a <servo_iq18_current_init>
                                CUR_DT, CUR_KB);
        servo_iq18_setPositionTolerance(&servo2_g, ANG_TOLERANCE);
 8001808:	4912      	ldr	r1, [pc, #72]	@ (8001854 <servo_init+0x150>)
 800180a:	4628      	mov	r0, r5
 800180c:	f000 f947 	bl	8001a9e <servo_iq18_setPositionTolerance>
    }
 8001810:	b005      	add	sp, #20
 8001812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001816:	bf00      	nop
 8001818:	200002b0 	.word	0x200002b0
 800181c:	41aa6666 	.word	0x41aa6666
 8001820:	44852000 	.word	0x44852000
 8001824:	200005dc 	.word	0x200005dc
 8001828:	40010c00 	.word	0x40010c00
 800182c:	2000054c 	.word	0x2000054c
 8001830:	3b83126f 	.word	0x3b83126f
 8001834:	4064dd2f 	.word	0x4064dd2f
 8001838:	3f126e98 	.word	0x3f126e98
 800183c:	3e428f5c 	.word	0x3e428f5c
 8001840:	3d6a5f85 	.word	0x3d6a5f85
 8001844:	44a2472b 	.word	0x44a2472b
 8001848:	386903ba 	.word	0x386903ba
 800184c:	44e15b12 	.word	0x44e15b12
 8001850:	40bfd639 	.word	0x40bfd639
 8001854:	3ca3d70a 	.word	0x3ca3d70a
 8001858:	20000198 	.word	0x20000198
 800185c:	20000594 	.word	0x20000594
 8001860:	40010800 	.word	0x40010800

08001864 <servo_iq18_base_init>:
 *      Author: zhmis
 */
#include "servo_iq18.h"

void servo_iq18_base_init(servo_iq18_t *servo, enum loops servoLoops,
		float motorSpeed, float gearRatio, uint8_t reverse) {
 8001864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001868:	4604      	mov	r4, r0
 800186a:	460d      	mov	r5, r1
 800186c:	4617      	mov	r7, r2
 800186e:	461e      	mov	r6, r3
 8001870:	f89d 8018 	ldrb.w	r8, [sp, #24]
	servo->controllerLoops = servoLoops;
 8001874:	f880 1114 	strb.w	r1, [r0, #276]	@ 0x114
	servo->encoder.gearRatio = _IQ18(gearRatio);
 8001878:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fc45 	bl	800010c <__aeabi_fmul>
 8001882:	f7fe fd93 	bl	80003ac <__aeabi_f2iz>
 8001886:	6220      	str	r0, [r4, #32]
	if (reverse) {
 8001888:	f1b8 0f00 	cmp.w	r8, #0
 800188c:	d014      	beq.n	80018b8 <servo_iq18_base_init+0x54>
		servo->reverseFlag = -1;
 800188e:	23ff      	movs	r3, #255	@ 0xff
 8001890:	f884 3110 	strb.w	r3, [r4, #272]	@ 0x110
	} else {
		servo->reverseFlag = 1;
	}
	servo->maxShaftSpeed = _IQ18(motorSpeed / gearRatio);
 8001894:	4631      	mov	r1, r6
 8001896:	4638      	mov	r0, r7
 8001898:	f7fe fcec 	bl	8000274 <__aeabi_fdiv>
 800189c:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80018a0:	f7fe fc34 	bl	800010c <__aeabi_fmul>
 80018a4:	f7fe fd82 	bl	80003ac <__aeabi_f2iz>
 80018a8:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108

	if (servoLoops != Single) {
 80018ac:	b115      	cbz	r5, 80018b4 <servo_iq18_base_init+0x50>
		servo->pid_position.lowerLimit = -servo->maxShaftSpeed;
 80018ae:	4243      	negs	r3, r0
 80018b0:	65e3      	str	r3, [r4, #92]	@ 0x5c
		servo->pid_position.upperLimit = servo->maxShaftSpeed;
 80018b2:	65a0      	str	r0, [r4, #88]	@ 0x58
	}
}
 80018b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		servo->reverseFlag = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f884 3110 	strb.w	r3, [r4, #272]	@ 0x110
 80018be:	e7e9      	b.n	8001894 <servo_iq18_base_init+0x30>

080018c0 <servo_iq18_encoder_init>:

void servo_iq18_encoder_init(servo_iq18_t *servo, TIM_HandleTypeDef *htim,
		uint16_t CPR, uint8_t encoder_is_reversed) {
 80018c0:	b538      	push	{r3, r4, r5, lr}
 80018c2:	4604      	mov	r4, r0
 80018c4:	461d      	mov	r5, r3
	servo->encoder.htim = htim;
 80018c6:	6001      	str	r1, [r0, #0]
	servo->encoder.countsPerRevolution = CPR;
 80018c8:	8542      	strh	r2, [r0, #42]	@ 0x2a
	initEMA_iq18(&servo->encoder.filter, VEL_EMA, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	4906      	ldr	r1, [pc, #24]	@ (80018e8 <servo_iq18_encoder_init+0x28>)
 80018ce:	3004      	adds	r0, #4
 80018d0:	f7ff f801 	bl	80008d6 <initEMA_iq18>
	if(!encoder_is_reversed){
 80018d4:	b91d      	cbnz	r5, 80018de <servo_iq18_encoder_init+0x1e>
		servo->encoder.reverse_flag = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	}else{
		servo->encoder.reverse_flag = -1;
	}
}
 80018dc:	bd38      	pop	{r3, r4, r5, pc}
		servo->encoder.reverse_flag = -1;
 80018de:	23ff      	movs	r3, #255	@ 0xff
 80018e0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 80018e4:	e7fa      	b.n	80018dc <servo_iq18_encoder_init+0x1c>
 80018e6:	bf00      	nop
 80018e8:	3ecccccd 	.word	0x3ecccccd

080018ec <servo_iq18_driver_init>:

void servo_iq18_driver_init(servo_iq18_t *servo, TIM_HandleTypeDef *htim,
		uint8_t timerChannel, GPIO_TypeDef *dir1_Port, uint32_t dir1_Pin, uint16_t minDuty,
		uint16_t maxDuty) {
	servo->driver.htim = htim;
 80018ec:	f8c0 10e4 	str.w	r1, [r0, #228]	@ 0xe4
	servo->driver.timerChannel = timerChannel;
 80018f0:	f880 20f9 	strb.w	r2, [r0, #249]	@ 0xf9
	servo->driver.dir1_Port = dir1_Port;
 80018f4:	f8c0 30e8 	str.w	r3, [r0, #232]	@ 0xe8
	servo->driver.dir1_Pin = dir1_Pin;
 80018f8:	9b00      	ldr	r3, [sp, #0]
 80018fa:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0

	servo->driver.minDuty = minDuty;
 80018fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001902:	f8a0 30f6 	strh.w	r3, [r0, #246]	@ 0xf6
	servo->driver.maxDuty = maxDuty;
 8001906:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800190a:	f8a0 30f4 	strh.w	r3, [r0, #244]	@ 0xf4

	switch (servo->controllerLoops) {
 800190e:	f890 3114 	ldrb.w	r3, [r0, #276]	@ 0x114
 8001912:	2b01      	cmp	r3, #1
 8001914:	d009      	beq.n	800192a <servo_iq18_driver_init+0x3e>
 8001916:	2b02      	cmp	r3, #2
 8001918:	d00f      	beq.n	800193a <servo_iq18_driver_init+0x4e>
 800191a:	b9ab      	cbnz	r3, 8001948 <servo_iq18_driver_init+0x5c>
	case Single:
		servo->pid_position.lowerLimit = _IQ18(-1);
 800191c:	f5a3 2380 	sub.w	r3, r3, #262144	@ 0x40000
 8001920:	65c3      	str	r3, [r0, #92]	@ 0x5c
		servo->pid_position.upperLimit = _IQ18(1);
 8001922:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001926:	6583      	str	r3, [r0, #88]	@ 0x58
		break;
 8001928:	4770      	bx	lr
	case Double:
		servo->pid_velocity.lowerLimit = _IQ18(-1);
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <servo_iq18_driver_init+0x60>)
 800192c:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
		servo->pid_velocity.upperLimit = _IQ18(1);
 8001930:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001934:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
		break;
 8001938:	4770      	bx	lr
	case Triple:
		servo->pid_current.lowerLimit = _IQ18(-1);
 800193a:	4b04      	ldr	r3, [pc, #16]	@ (800194c <servo_iq18_driver_init+0x60>)
 800193c:	f8c0 30d4 	str.w	r3, [r0, #212]	@ 0xd4
		servo->pid_current.upperLimit = _IQ18(1);
 8001940:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001944:	f8c0 30d0 	str.w	r3, [r0, #208]	@ 0xd0
		break;
	default:
		break;
	}
}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	fffc0000 	.word	0xfffc0000

08001950 <servo_iq18_position_init>:

void servo_iq18_position_init(servo_iq18_t *servo, float kp, float ki, float kd,
		float dt, float kb) {
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	4604      	mov	r4, r0
 8001954:	4608      	mov	r0, r1
 8001956:	4616      	mov	r6, r2
 8001958:	461d      	mov	r5, r3
	servo->pid_position.kp = _IQ18(kp);
 800195a:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 800195e:	f7fe fbd5 	bl	800010c <__aeabi_fmul>
 8001962:	f7fe fd23 	bl	80003ac <__aeabi_f2iz>
 8001966:	6360      	str	r0, [r4, #52]	@ 0x34
	servo->pid_position.ki = _IQ18(ki);
 8001968:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 800196c:	4630      	mov	r0, r6
 800196e:	f7fe fbcd 	bl	800010c <__aeabi_fmul>
 8001972:	f7fe fd1b 	bl	80003ac <__aeabi_f2iz>
 8001976:	63a0      	str	r0, [r4, #56]	@ 0x38
	servo->pid_position.kd = _IQ18(kd);
 8001978:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 800197c:	4628      	mov	r0, r5
 800197e:	f7fe fbc5 	bl	800010c <__aeabi_fmul>
 8001982:	f7fe fd13 	bl	80003ac <__aeabi_f2iz>
 8001986:	63e0      	str	r0, [r4, #60]	@ 0x3c
	servo->pid_position.dt = _IQ18(dt);
 8001988:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 800198c:	9804      	ldr	r0, [sp, #16]
 800198e:	f7fe fbbd 	bl	800010c <__aeabi_fmul>
 8001992:	f7fe fd0b 	bl	80003ac <__aeabi_f2iz>
 8001996:	6560      	str	r0, [r4, #84]	@ 0x54
	servo->pid_position.kb = _IQ18(kb);
 8001998:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 800199c:	9805      	ldr	r0, [sp, #20]
 800199e:	f7fe fbb5 	bl	800010c <__aeabi_fmul>
 80019a2:	f7fe fd03 	bl	80003ac <__aeabi_f2iz>
 80019a6:	6420      	str	r0, [r4, #64]	@ 0x40
}
 80019a8:	bd70      	pop	{r4, r5, r6, pc}

080019aa <servo_iq18_velocity_init>:

void servo_iq18_velocity_init(servo_iq18_t *servo, float kp, float ki, float kd,
		float dt, float kb) {
 80019aa:	b570      	push	{r4, r5, r6, lr}
 80019ac:	4604      	mov	r4, r0
 80019ae:	4608      	mov	r0, r1
 80019b0:	4616      	mov	r6, r2
 80019b2:	461d      	mov	r5, r3
	servo->pid_velocity.kp = _IQ18(kp);
 80019b4:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80019b8:	f7fe fba8 	bl	800010c <__aeabi_fmul>
 80019bc:	f7fe fcf6 	bl	80003ac <__aeabi_f2iz>
 80019c0:	6720      	str	r0, [r4, #112]	@ 0x70
	servo->pid_velocity.ki = _IQ18(ki);
 80019c2:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80019c6:	4630      	mov	r0, r6
 80019c8:	f7fe fba0 	bl	800010c <__aeabi_fmul>
 80019cc:	f7fe fcee 	bl	80003ac <__aeabi_f2iz>
 80019d0:	6760      	str	r0, [r4, #116]	@ 0x74
	servo->pid_velocity.kd = _IQ18(kd);
 80019d2:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80019d6:	4628      	mov	r0, r5
 80019d8:	f7fe fb98 	bl	800010c <__aeabi_fmul>
 80019dc:	f7fe fce6 	bl	80003ac <__aeabi_f2iz>
 80019e0:	67a0      	str	r0, [r4, #120]	@ 0x78
	servo->pid_velocity.dt = _IQ18(dt);
 80019e2:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80019e6:	9804      	ldr	r0, [sp, #16]
 80019e8:	f7fe fb90 	bl	800010c <__aeabi_fmul>
 80019ec:	f7fe fcde 	bl	80003ac <__aeabi_f2iz>
 80019f0:	4605      	mov	r5, r0
 80019f2:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
	servo->pid_velocity.kb = _IQ18(kb);
 80019f6:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80019fa:	9805      	ldr	r0, [sp, #20]
 80019fc:	f7fe fb86 	bl	800010c <__aeabi_fmul>
 8001a00:	f7fe fcd4 	bl	80003ac <__aeabi_f2iz>
 8001a04:	67e0      	str	r0, [r4, #124]	@ 0x7c
	servo->encoder.dt = _IQ18(dt);
 8001a06:	61e5      	str	r5, [r4, #28]
}
 8001a08:	bd70      	pop	{r4, r5, r6, pc}

08001a0a <servo_iq18_current_init>:

void servo_iq18_current_init(servo_iq18_t *servo, float ratedCurrent, float kp,
		float ki, float kd, float dt, float kb) {
 8001a0a:	b570      	push	{r4, r5, r6, lr}
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	460d      	mov	r5, r1
 8001a10:	461e      	mov	r6, r3
	servo->pid_current.kp = _IQ18(kp);
 8001a12:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001a16:	4610      	mov	r0, r2
 8001a18:	f7fe fb78 	bl	800010c <__aeabi_fmul>
 8001a1c:	f7fe fcc6 	bl	80003ac <__aeabi_f2iz>
 8001a20:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac
	servo->pid_current.ki = _IQ18(ki);
 8001a24:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f7fe fb6f 	bl	800010c <__aeabi_fmul>
 8001a2e:	f7fe fcbd 	bl	80003ac <__aeabi_f2iz>
 8001a32:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
	servo->pid_current.kd = _IQ18(kd);
 8001a36:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001a3a:	9804      	ldr	r0, [sp, #16]
 8001a3c:	f7fe fb66 	bl	800010c <__aeabi_fmul>
 8001a40:	f7fe fcb4 	bl	80003ac <__aeabi_f2iz>
 8001a44:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
	servo->pid_current.dt = _IQ18(dt);
 8001a48:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001a4c:	9805      	ldr	r0, [sp, #20]
 8001a4e:	f7fe fb5d 	bl	800010c <__aeabi_fmul>
 8001a52:	f7fe fcab 	bl	80003ac <__aeabi_f2iz>
 8001a56:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
	servo->pid_current.kb = _IQ18(kb);
 8001a5a:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001a5e:	9806      	ldr	r0, [sp, #24]
 8001a60:	f7fe fb54 	bl	800010c <__aeabi_fmul>
 8001a64:	f7fe fca2 	bl	80003ac <__aeabi_f2iz>
 8001a68:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
	servo->maxCurrent = _IQ18(ratedCurrent);
 8001a6c:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001a70:	4628      	mov	r0, r5
 8001a72:	f7fe fb4b 	bl	800010c <__aeabi_fmul>
 8001a76:	4606      	mov	r6, r0
 8001a78:	f7fe fc98 	bl	80003ac <__aeabi_f2iz>
 8001a7c:	f8c4 010c 	str.w	r0, [r4, #268]	@ 0x10c
	if (servo->controllerLoops == Triple) {
 8001a80:	f894 3114 	ldrb.w	r3, [r4, #276]	@ 0x114
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d000      	beq.n	8001a8a <servo_iq18_current_init+0x80>
		servo->pid_velocity.lowerLimit = _IQ18(-ratedCurrent);
		servo->pid_velocity.upperLimit = _IQ18(ratedCurrent);
	}
}
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
 8001a8a:	4605      	mov	r5, r0
		servo->pid_velocity.lowerLimit = _IQ18(-ratedCurrent);
 8001a8c:	f106 4000 	add.w	r0, r6, #2147483648	@ 0x80000000
 8001a90:	f7fe fc8c 	bl	80003ac <__aeabi_f2iz>
 8001a94:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98
		servo->pid_velocity.upperLimit = _IQ18(ratedCurrent);
 8001a98:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
}
 8001a9c:	e7f4      	b.n	8001a88 <servo_iq18_current_init+0x7e>

08001a9e <servo_iq18_setPositionTolerance>:

void servo_iq18_setPositionTolerance(servo_iq18_t *servo, float tolerance) {
 8001a9e:	b510      	push	{r4, lr}
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	4608      	mov	r0, r1
	servo->pid_position.toleranceBand = _IQ18(tolerance);
 8001aa4:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001aa8:	f7fe fb30 	bl	800010c <__aeabi_fmul>
 8001aac:	f7fe fc7e 	bl	80003ac <__aeabi_f2iz>
 8001ab0:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8001ab2:	bd10      	pop	{r4, pc}

08001ab4 <servo_iq18_velocityLoop>:
		break;
	}
	}
}

void servo_iq18_velocityLoop(servo_iq18_t *servo) {
 8001ab4:	b538      	push	{r3, r4, r5, lr}
 8001ab6:	4604      	mov	r4, r0
	// encoder_updatePosition_iq18(&servo->encoder);
	// encoder_updateVelocity_qep_iq18(&servo->encoder);
	if (servo->currentMode != Current) {
 8001ab8:	f890 3115 	ldrb.w	r3, [r0, #277]	@ 0x115
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d10e      	bne.n	8001ade <servo_iq18_velocityLoop+0x2a>
		pid_iq18_calculate(&servo->pid_velocity, servo->velocitySetpoint,
				encoder_getVelocity_iq18(&servo->encoder));
	}

	switch (servo->controllerLoops) {
 8001ac0:	f894 3114 	ldrb.w	r3, [r4, #276]	@ 0x114
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d015      	beq.n	8001af4 <servo_iq18_velocityLoop+0x40>
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d026      	beq.n	8001b1a <servo_iq18_velocityLoop+0x66>
 8001acc:	b933      	cbnz	r3, 8001adc <servo_iq18_velocityLoop+0x28>
	case Single:
		pid_iq18_reset(&servo->pid_velocity);
 8001ace:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8001ad2:	f7ff fb5f 	bl	8001194 <pid_iq18_reset>
		servo->velocitySetpoint = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
			pid_iq18_reset(&servo->pid_velocity);
			servo->velocitySetpoint = 0;
		}
		break;
	}
}
 8001adc:	bd38      	pop	{r3, r4, r5, pc}
		pid_iq18_calculate(&servo->pid_velocity, servo->velocitySetpoint,
 8001ade:	f8d0 5100 	ldr.w	r5, [r0, #256]	@ 0x100
 8001ae2:	f7fe ff68 	bl	80009b6 <encoder_getVelocity_iq18>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4629      	mov	r1, r5
 8001aea:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8001aee:	f7ff fb58 	bl	80011a2 <pid_iq18_calculate>
 8001af2:	e7e5      	b.n	8001ac0 <servo_iq18_velocityLoop+0xc>
		int32_t duty = (int32_t) (((int64_t) pid_iq18_getOutput(
 8001af4:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8001af8:	f7ff fb93 	bl	8001222 <pid_iq18_getOutput>
 8001afc:	17c2      	asrs	r2, r0, #31
				&servo->pid_velocity) * servo->driver.maxDuty) >> 18);
 8001afe:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	@ 0xf4
 8001b02:	fba0 0103 	umull	r0, r1, r0, r3
 8001b06:	fb03 1102 	mla	r1, r3, r2, r1
 8001b0a:	0c80      	lsrs	r0, r0, #18
		pwm_setSpeed(&servo->driver, duty);
 8001b0c:	ea40 3181 	orr.w	r1, r0, r1, lsl #14
 8001b10:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8001b14:	f7ff fd76 	bl	8001604 <pwm_setSpeed>
		break;
 8001b18:	e7e0      	b.n	8001adc <servo_iq18_velocityLoop+0x28>
		if (servo->currentMode != Current) {
 8001b1a:	f894 3115 	ldrb.w	r3, [r4, #277]	@ 0x115
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d006      	beq.n	8001b30 <servo_iq18_velocityLoop+0x7c>
			servo->currentSetpoint = pid_iq18_getOutput(&servo->pid_velocity);
 8001b22:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8001b26:	f7ff fb7c 	bl	8001222 <pid_iq18_getOutput>
 8001b2a:	f8c4 0104 	str.w	r0, [r4, #260]	@ 0x104
 8001b2e:	e7d5      	b.n	8001adc <servo_iq18_velocityLoop+0x28>
			pid_iq18_reset(&servo->pid_velocity);
 8001b30:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8001b34:	f7ff fb2e 	bl	8001194 <pid_iq18_reset>
			servo->velocitySetpoint = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
}
 8001b3e:	e7cd      	b.n	8001adc <servo_iq18_velocityLoop+0x28>

08001b40 <servo_iq18_currentLoop>:

void servo_iq18_currentLoop(servo_iq18_t *servo, _iq18 currentFeedback) {
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4604      	mov	r4, r0
	if (servo->controllerLoops == Triple) {
 8001b44:	f890 3114 	ldrb.w	r3, [r0, #276]	@ 0x114
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d006      	beq.n	8001b5a <servo_iq18_currentLoop+0x1a>
				currentFeedback);
		int32_t duty = (int32_t) (((int64_t) pid_iq18_getOutput(
				&servo->pid_current) * servo->driver.maxDuty) >> 18);
		pwm_setSpeed(&servo->driver, duty);
	} else {
		pid_iq18_reset(&servo->pid_current);
 8001b4c:	30a8      	adds	r0, #168	@ 0xa8
 8001b4e:	f7ff fb21 	bl	8001194 <pid_iq18_reset>
		servo->currentSetpoint = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
	}
}
 8001b58:	bd38      	pop	{r3, r4, r5, pc}
		pid_iq18_calculate(&servo->pid_current, servo->currentSetpoint,
 8001b5a:	f100 05a8 	add.w	r5, r0, #168	@ 0xa8
 8001b5e:	460a      	mov	r2, r1
 8001b60:	f8d0 1104 	ldr.w	r1, [r0, #260]	@ 0x104
 8001b64:	4628      	mov	r0, r5
 8001b66:	f7ff fb1c 	bl	80011a2 <pid_iq18_calculate>
		int32_t duty = (int32_t) (((int64_t) pid_iq18_getOutput(
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f7ff fb59 	bl	8001222 <pid_iq18_getOutput>
 8001b70:	17c2      	asrs	r2, r0, #31
				&servo->pid_current) * servo->driver.maxDuty) >> 18);
 8001b72:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	@ 0xf4
 8001b76:	fba0 0103 	umull	r0, r1, r0, r3
 8001b7a:	fb03 1102 	mla	r1, r3, r2, r1
 8001b7e:	0c80      	lsrs	r0, r0, #18
		pwm_setSpeed(&servo->driver, duty);
 8001b80:	ea40 3181 	orr.w	r1, r0, r1, lsl #14
 8001b84:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8001b88:	f7ff fd3c 	bl	8001604 <pwm_setSpeed>
 8001b8c:	e7e4      	b.n	8001b58 <servo_iq18_currentLoop+0x18>

08001b8e <servo_iq18_controlPosition>:

void servo_iq18_controlPosition(servo_iq18_t *servo, _iq18 setpoint) {
	servo->currentMode = Position;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f880 3115 	strb.w	r3, [r0, #277]	@ 0x115
	servo->positionSetpoint = setpoint * servo->reverseFlag;
 8001b94:	f990 3110 	ldrsb.w	r3, [r0, #272]	@ 0x110
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	f8c0 30fc 	str.w	r3, [r0, #252]	@ 0xfc
}
 8001ba0:	4770      	bx	lr

08001ba2 <servo_iq18_controlVelocity>:

void servo_iq18_controlVelocity(servo_iq18_t *servo, _iq18 setpoint) {
	if (servo->controllerLoops != Single) {
 8001ba2:	f890 3114 	ldrb.w	r3, [r0, #276]	@ 0x114
 8001ba6:	b183      	cbz	r3, 8001bca <servo_iq18_controlVelocity+0x28>
		servo->currentMode = Velocity;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f880 3115 	strb.w	r3, [r0, #277]	@ 0x115
		// _iq18 vel_setp_iq18 = (_iq18)setpoint_q9 << 9;
		servo->velocitySetpoint = _IQsat(setpoint * servo->reverseFlag,
 8001bae:	f990 2110 	ldrsb.w	r2, [r0, #272]	@ 0x110
 8001bb2:	fb01 f202 	mul.w	r2, r1, r2
 8001bb6:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dc03      	bgt.n	8001bc6 <servo_iq18_controlVelocity+0x24>
 8001bbe:	425b      	negs	r3, r3
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bfb8      	it	lt
 8001bc4:	4613      	movlt	r3, r2
 8001bc6:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
				servo->maxShaftSpeed, -servo->maxShaftSpeed);
	}
}
 8001bca:	4770      	bx	lr

08001bcc <servo_iq18_controlCurrent>:

void servo_iq18_controlCurrent(servo_iq18_t *servo, _iq18 setpoint) {
	if (servo->controllerLoops == Triple) {
 8001bcc:	f890 3114 	ldrb.w	r3, [r0, #276]	@ 0x114
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d000      	beq.n	8001bd6 <servo_iq18_controlCurrent+0xa>
		servo->currentMode = Current;
		servo->currentSetpoint = _IQsat(setpoint * servo->reverseFlag,
				servo->maxCurrent, -servo->maxCurrent);
		// servo->currentSetpoint = _IQ18(setpoint);
	}
}
 8001bd4:	4770      	bx	lr
		servo->currentMode = Current;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	f880 3115 	strb.w	r3, [r0, #277]	@ 0x115
		servo->currentSetpoint = _IQsat(setpoint * servo->reverseFlag,
 8001bdc:	f990 2110 	ldrsb.w	r2, [r0, #272]	@ 0x110
 8001be0:	fb01 f202 	mul.w	r2, r1, r2
 8001be4:	f8d0 310c 	ldr.w	r3, [r0, #268]	@ 0x10c
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dc03      	bgt.n	8001bf4 <servo_iq18_controlCurrent+0x28>
 8001bec:	425b      	negs	r3, r3
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	bfb8      	it	lt
 8001bf2:	4613      	movlt	r3, r2
 8001bf4:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
}
 8001bf8:	e7ec      	b.n	8001bd4 <servo_iq18_controlCurrent+0x8>

08001bfa <servo_iq18_reset>:

void servo_iq18_reset(servo_iq18_t *servo){
 8001bfa:	b510      	push	{r4, lr}
 8001bfc:	4604      	mov	r4, r0
	// encoder_reset_iq18(&servo->encoder);
	pid_iq18_reset(&servo->pid_current);
 8001bfe:	30a8      	adds	r0, #168	@ 0xa8
 8001c00:	f7ff fac8 	bl	8001194 <pid_iq18_reset>
	pid_iq18_reset(&servo->pid_velocity);
 8001c04:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8001c08:	f7ff fac4 	bl	8001194 <pid_iq18_reset>
	pid_iq18_reset(&servo->pid_position);
 8001c0c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8001c10:	f7ff fac0 	bl	8001194 <pid_iq18_reset>
 8001c14:	bd10      	pop	{r4, pc}
	...

08001c18 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c18:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c1a:	480f      	ldr	r0, [pc, #60]	@ (8001c58 <MX_SPI1_Init+0x40>)
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <MX_SPI1_Init+0x44>)
 8001c1e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c20:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001c24:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c26:	2300      	movs	r3, #0
 8001c28:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c2e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c30:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c32:	2201      	movs	r2, #1
 8001c34:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c3a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c3c:	2228      	movs	r2, #40	@ 0x28
 8001c3e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c40:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c42:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c44:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c46:	230a      	movs	r3, #10
 8001c48:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c4a:	f001 fe93 	bl	8003974 <HAL_SPI_Init>
 8001c4e:	b900      	cbnz	r0, 8001c52 <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c50:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c52:	f7ff f951 	bl	8000ef8 <Error_Handler>
}
 8001c56:	e7fb      	b.n	8001c50 <MX_SPI1_Init+0x38>
 8001c58:	200004ac 	.word	0x200004ac
 8001c5c:	40013000 	.word	0x40013000

08001c60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	2300      	movs	r3, #0
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	9303      	str	r3, [sp, #12]
 8001c6a:	9304      	str	r3, [sp, #16]
 8001c6c:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	4b36      	ldr	r3, [pc, #216]	@ (8001d4c <HAL_SPI_MspInit+0xec>)
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_SPI_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c76:	b006      	add	sp, #24
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
 8001c7a:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001c8e:	9200      	str	r2, [sp, #0]
 8001c90:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	f042 0204 	orr.w	r2, r2, #4
 8001c98:	619a      	str	r2, [r3, #24]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ca4:	23a0      	movs	r3, #160	@ 0xa0
 8001ca6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	4e27      	ldr	r6, [pc, #156]	@ (8001d50 <HAL_SPI_MspInit+0xf0>)
 8001cb2:	a902      	add	r1, sp, #8
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	f001 f89f 	bl	8002df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cba:	2340      	movs	r3, #64	@ 0x40
 8001cbc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbe:	2500      	movs	r5, #0
 8001cc0:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	a902      	add	r1, sp, #8
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	f001 f896 	bl	8002df8 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001ccc:	4821      	ldr	r0, [pc, #132]	@ (8001d54 <HAL_SPI_MspInit+0xf4>)
 8001cce:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <HAL_SPI_MspInit+0xf8>)
 8001cd0:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd2:	6045      	str	r5, [r0, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd4:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cde:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ce4:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001ce6:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cec:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001cee:	f000 ff03 	bl	8002af8 <HAL_DMA_Init>
 8001cf2:	bb20      	cbnz	r0, 8001d3e <HAL_SPI_MspInit+0xde>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001cf4:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <HAL_SPI_MspInit+0xf4>)
 8001cf6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001cf8:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001cfa:	4818      	ldr	r0, [pc, #96]	@ (8001d5c <HAL_SPI_MspInit+0xfc>)
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_SPI_MspInit+0x100>)
 8001cfe:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d00:	2310      	movs	r3, #16
 8001d02:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d08:	2280      	movs	r2, #128	@ 0x80
 8001d0a:	60c2      	str	r2, [r0, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d10:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d16:	6142      	str	r2, [r0, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d18:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d1e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d20:	f000 feea 	bl	8002af8 <HAL_DMA_Init>
 8001d24:	b970      	cbnz	r0, 8001d44 <HAL_SPI_MspInit+0xe4>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001d26:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <HAL_SPI_MspInit+0xfc>)
 8001d28:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001d2a:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2103      	movs	r1, #3
 8001d30:	2023      	movs	r0, #35	@ 0x23
 8001d32:	f000 fe99 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d36:	2023      	movs	r0, #35	@ 0x23
 8001d38:	f000 fea6 	bl	8002a88 <HAL_NVIC_EnableIRQ>
}
 8001d3c:	e79b      	b.n	8001c76 <HAL_SPI_MspInit+0x16>
      Error_Handler();
 8001d3e:	f7ff f8db 	bl	8000ef8 <Error_Handler>
 8001d42:	e7d7      	b.n	8001cf4 <HAL_SPI_MspInit+0x94>
      Error_Handler();
 8001d44:	f7ff f8d8 	bl	8000ef8 <Error_Handler>
 8001d48:	e7ed      	b.n	8001d26 <HAL_SPI_MspInit+0xc6>
 8001d4a:	bf00      	nop
 8001d4c:	40013000 	.word	0x40013000
 8001d50:	40010800 	.word	0x40010800
 8001d54:	20000468 	.word	0x20000468
 8001d58:	4002001c 	.word	0x4002001c
 8001d5c:	20000424 	.word	0x20000424
 8001d60:	40020030 	.word	0x40020030

08001d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d64:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <HAL_MspInit+0x3c>)
 8001d68:	699a      	ldr	r2, [r3, #24]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	619a      	str	r2, [r3, #24]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	f002 0201 	and.w	r2, r2, #1
 8001d76:	9200      	str	r2, [sp, #0]
 8001d78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d80:	61da      	str	r2, [r3, #28]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d8c:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <HAL_MspInit+0x40>)
 8001d8e:	6853      	ldr	r3, [r2, #4]
 8001d90:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	b002      	add	sp, #8
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000

08001da8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler>

08001daa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler>

08001dac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <MemManage_Handler>

08001dae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <BusFault_Handler>

08001db0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler>

08001db2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	4770      	bx	lr

08001db4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db4:	4770      	bx	lr

08001db6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dba:	f000 faff 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbe:	bd08      	pop	{r3, pc}

08001dc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dc2:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <DMA1_Channel1_IRQHandler+0xc>)
 8001dc4:	f000 ff76 	bl	8002cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dc8:	bd08      	pop	{r3, pc}
 8001dca:	bf00      	nop
 8001dcc:	200000c8 	.word	0x200000c8

08001dd0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001dd2:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <DMA1_Channel2_IRQHandler+0xc>)
 8001dd4:	f000 ff6e 	bl	8002cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001dd8:	bd08      	pop	{r3, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000468 	.word	0x20000468

08001de0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001de0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001de2:	4802      	ldr	r0, [pc, #8]	@ (8001dec <DMA1_Channel3_IRQHandler+0xc>)
 8001de4:	f000 ff66 	bl	8002cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001de8:	bd08      	pop	{r3, pc}
 8001dea:	bf00      	nop
 8001dec:	20000424 	.word	0x20000424

08001df0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001df0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001df2:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <DMA1_Channel4_IRQHandler+0xc>)
 8001df4:	f000 ff5e 	bl	8002cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001df8:	bd08      	pop	{r3, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000668 	.word	0x20000668

08001e00 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e02:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <DMA1_Channel5_IRQHandler+0xc>)
 8001e04:	f000 ff56 	bl	8002cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e08:	bd08      	pop	{r3, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000624 	.word	0x20000624

08001e10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e12:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <TIM3_IRQHandler+0xc>)
 8001e14:	f002 f8c6 	bl	8003fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  // sos++;
  // task18khz();

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e18:	bd08      	pop	{r3, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000054c 	.word	0x2000054c

08001e20 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e22:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <SPI1_IRQHandler+0xc>)
 8001e24:	f001 ff2c 	bl	8003c80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e28:	bd08      	pop	{r3, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200004ac 	.word	0x200004ac

08001e30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e32:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <USART1_IRQHandler+0xc>)
 8001e34:	f002 ff58 	bl	8004ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e38:	bd08      	pop	{r3, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200006ac 	.word	0x200006ac

08001e40 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	4770      	bx	lr
	...

08001e44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e44:	b500      	push	{lr}
 8001e46:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e48:	2224      	movs	r2, #36	@ 0x24
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	a803      	add	r0, sp, #12
 8001e4e:	f003 f9c5 	bl	80051dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	2300      	movs	r3, #0
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e58:	4813      	ldr	r0, [pc, #76]	@ (8001ea8 <MX_TIM1_Init+0x64>)
 8001e5a:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <MX_TIM1_Init+0x68>)
 8001e5c:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001e5e:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e60:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8001e62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e66:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e6a:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6c:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e72:	2201      	movs	r2, #1
 8001e74:	9205      	str	r2, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
 8001e76:	230a      	movs	r3, #10
 8001e78:	9307      	str	r3, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e7a:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 10;
 8001e7c:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e7e:	a903      	add	r1, sp, #12
 8001e80:	f002 f9da 	bl	8004238 <HAL_TIM_Encoder_Init>
 8001e84:	b950      	cbnz	r0, 8001e9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e8c:	a901      	add	r1, sp, #4
 8001e8e:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <MX_TIM1_Init+0x64>)
 8001e90:	f002 fce4 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8001e94:	b928      	cbnz	r0, 8001ea2 <MX_TIM1_Init+0x5e>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e96:	b00d      	add	sp, #52	@ 0x34
 8001e98:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001e9c:	f7ff f82c 	bl	8000ef8 <Error_Handler>
 8001ea0:	e7f1      	b.n	8001e86 <MX_TIM1_Init+0x42>
    Error_Handler();
 8001ea2:	f7ff f829 	bl	8000ef8 <Error_Handler>
}
 8001ea6:	e7f6      	b.n	8001e96 <MX_TIM1_Init+0x52>
 8001ea8:	200005dc 	.word	0x200005dc
 8001eac:	40012c00 	.word	0x40012c00

08001eb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eb0:	b500      	push	{lr}
 8001eb2:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eb4:	2224      	movs	r2, #36	@ 0x24
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	a803      	add	r0, sp, #12
 8001eba:	f003 f98f 	bl	80051dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ec4:	4812      	ldr	r0, [pc, #72]	@ (8001f10 <MX_TIM2_Init+0x60>)
 8001ec6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eca:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001ecc:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8001ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed8:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eda:	2303      	movs	r3, #3
 8001edc:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ee2:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ee4:	a903      	add	r1, sp, #12
 8001ee6:	f002 f9a7 	bl	8004238 <HAL_TIM_Encoder_Init>
 8001eea:	b950      	cbnz	r0, 8001f02 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef2:	a901      	add	r1, sp, #4
 8001ef4:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <MX_TIM2_Init+0x60>)
 8001ef6:	f002 fcb1 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8001efa:	b928      	cbnz	r0, 8001f08 <MX_TIM2_Init+0x58>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001efc:	b00d      	add	sp, #52	@ 0x34
 8001efe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f02:	f7fe fff9 	bl	8000ef8 <Error_Handler>
 8001f06:	e7f1      	b.n	8001eec <MX_TIM2_Init+0x3c>
    Error_Handler();
 8001f08:	f7fe fff6 	bl	8000ef8 <Error_Handler>
}
 8001f0c:	e7f6      	b.n	8001efc <MX_TIM2_Init+0x4c>
 8001f0e:	bf00      	nop
 8001f10:	20000594 	.word	0x20000594

08001f14 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f14:	b500      	push	{lr}
 8001f16:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9304      	str	r3, [sp, #16]
 8001f1c:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f26:	481c      	ldr	r0, [pc, #112]	@ (8001f98 <MX_TIM4_Init+0x84>)
 8001f28:	4a1c      	ldr	r2, [pc, #112]	@ (8001f9c <MX_TIM4_Init+0x88>)
 8001f2a:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 1100-1;
 8001f2c:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001f30:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f32:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 72-1;
 8001f34:	2247      	movs	r2, #71	@ 0x47
 8001f36:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f38:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001f3c:	f002 f950 	bl	80041e0 <HAL_TIM_IC_Init>
 8001f40:	b9e8      	cbnz	r0, 8001f7e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f46:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f48:	a904      	add	r1, sp, #16
 8001f4a:	4813      	ldr	r0, [pc, #76]	@ (8001f98 <MX_TIM4_Init+0x84>)
 8001f4c:	f002 fc86 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	b9c0      	cbnz	r0, 8001f84 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2201      	movs	r2, #1
 8001f58:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f5a:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 15;
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f60:	2208      	movs	r2, #8
 8001f62:	4669      	mov	r1, sp
 8001f64:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <MX_TIM4_Init+0x84>)
 8001f66:	f002 fa8b 	bl	8004480 <HAL_TIM_IC_ConfigChannel>
 8001f6a:	b970      	cbnz	r0, 8001f8a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	4669      	mov	r1, sp
 8001f70:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <MX_TIM4_Init+0x84>)
 8001f72:	f002 fa85 	bl	8004480 <HAL_TIM_IC_ConfigChannel>
 8001f76:	b958      	cbnz	r0, 8001f90 <MX_TIM4_Init+0x7c>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f78:	b007      	add	sp, #28
 8001f7a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f7e:	f7fe ffbb 	bl	8000ef8 <Error_Handler>
 8001f82:	e7de      	b.n	8001f42 <MX_TIM4_Init+0x2e>
    Error_Handler();
 8001f84:	f7fe ffb8 	bl	8000ef8 <Error_Handler>
 8001f88:	e7e3      	b.n	8001f52 <MX_TIM4_Init+0x3e>
    Error_Handler();
 8001f8a:	f7fe ffb5 	bl	8000ef8 <Error_Handler>
 8001f8e:	e7ed      	b.n	8001f6c <MX_TIM4_Init+0x58>
    Error_Handler();
 8001f90:	f7fe ffb2 	bl	8000ef8 <Error_Handler>
}
 8001f94:	e7f0      	b.n	8001f78 <MX_TIM4_Init+0x64>
 8001f96:	bf00      	nop
 8001f98:	20000504 	.word	0x20000504
 8001f9c:	40000800 	.word	0x40000800

08001fa0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fa0:	b500      	push	{lr}
 8001fa2:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9306      	str	r3, [sp, #24]
 8001fa8:	9307      	str	r3, [sp, #28]
 8001faa:	9308      	str	r3, [sp, #32]
 8001fac:	9309      	str	r3, [sp, #36]	@ 0x24
  if(tim_encoderHandle->Instance==TIM1)
 8001fae:	6803      	ldr	r3, [r0, #0]
 8001fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d005      	beq.n	8001fc2 <HAL_TIM_Encoder_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM2)
 8001fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fba:	d01d      	beq.n	8001ff8 <HAL_TIM_Encoder_MspInit+0x58>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001fbc:	b00b      	add	sp, #44	@ 0x2c
 8001fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fca:	619a      	str	r2, [r3, #24]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001fd2:	9201      	str	r2, [sp, #4]
 8001fd4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	f042 0204 	orr.w	r2, r2, #4
 8001fdc:	619a      	str	r2, [r3, #24]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	9302      	str	r3, [sp, #8]
 8001fe6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 8001fe8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	a906      	add	r1, sp, #24
 8001ff0:	481f      	ldr	r0, [pc, #124]	@ (8002070 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001ff2:	f000 ff01 	bl	8002df8 <HAL_GPIO_Init>
 8001ff6:	e7e1      	b.n	8001fbc <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	61da      	str	r2, [r3, #28]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	f002 0201 	and.w	r2, r2, #1
 800200a:	9203      	str	r2, [sp, #12]
 800200c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	f042 0204 	orr.w	r2, r2, #4
 8002014:	619a      	str	r2, [r3, #24]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	f002 0204 	and.w	r2, r2, #4
 800201c:	9204      	str	r2, [sp, #16]
 800201e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	f042 0208 	orr.w	r2, r2, #8
 8002026:	619a      	str	r2, [r3, #24]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	9305      	str	r3, [sp, #20]
 8002030:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin;
 8002032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002036:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(ENC2_CH1_GPIO_Port, &GPIO_InitStruct);
 8002038:	a906      	add	r1, sp, #24
 800203a:	480d      	ldr	r0, [pc, #52]	@ (8002070 <HAL_TIM_Encoder_MspInit+0xd0>)
 800203c:	f000 fedc 	bl	8002df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC2_CH2_Pin;
 8002040:	2308      	movs	r3, #8
 8002042:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002044:	2300      	movs	r3, #0
 8002046:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(ENC2_CH2_GPIO_Port, &GPIO_InitStruct);
 800204a:	a906      	add	r1, sp, #24
 800204c:	4809      	ldr	r0, [pc, #36]	@ (8002074 <HAL_TIM_Encoder_MspInit+0xd4>)
 800204e:	f000 fed3 	bl	8002df8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002052:	4a09      	ldr	r2, [pc, #36]	@ (8002078 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002054:	6853      	ldr	r3, [r2, #4]
 8002056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800205a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800205e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002062:	6053      	str	r3, [r2, #4]
}
 8002064:	e7aa      	b.n	8001fbc <HAL_TIM_Encoder_MspInit+0x1c>
 8002066:	bf00      	nop
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40021000 	.word	0x40021000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00
 8002078:	40010000 	.word	0x40010000

0800207c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 800207c:	6802      	ldr	r2, [r0, #0]
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002080:	429a      	cmp	r2, r3
 8002082:	d000      	beq.n	8002086 <HAL_TIM_PWM_MspInit+0xa>
 8002084:	4770      	bx	lr
{
 8002086:	b500      	push	{lr}
 8002088:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800208a:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	f042 0202 	orr.w	r2, r2, #2
 8002094:	61da      	str	r2, [r3, #28]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	9b01      	ldr	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2101      	movs	r1, #1
 80020a4:	201d      	movs	r0, #29
 80020a6:	f000 fcdf 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020aa:	201d      	movs	r0, #29
 80020ac:	f000 fcec 	bl	8002a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020b0:	b003      	add	sp, #12
 80020b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b6:	bf00      	nop
 80020b8:	40000400 	.word	0x40000400

080020bc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80020bc:	b500      	push	{lr}
 80020be:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	2300      	movs	r3, #0
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	9304      	str	r3, [sp, #16]
 80020c8:	9305      	str	r3, [sp, #20]
  if(tim_icHandle->Instance==TIM4)
 80020ca:	6802      	ldr	r2, [r0, #0]
 80020cc:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <HAL_TIM_IC_MspInit+0x54>)
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d002      	beq.n	80020d8 <HAL_TIM_IC_MspInit+0x1c>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020d2:	b007      	add	sp, #28
 80020d4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020d8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80020dc:	69da      	ldr	r2, [r3, #28]
 80020de:	f042 0204 	orr.w	r2, r2, #4
 80020e2:	61da      	str	r2, [r3, #28]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	f002 0204 	and.w	r2, r2, #4
 80020ea:	9200      	str	r2, [sp, #0]
 80020ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	f042 0208 	orr.w	r2, r2, #8
 80020f4:	619a      	str	r2, [r3, #24]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENC1_CH1_F_Pin|ENC2_CH1_F_Pin;
 8002100:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002104:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	a902      	add	r1, sp, #8
 8002108:	4802      	ldr	r0, [pc, #8]	@ (8002114 <HAL_TIM_IC_MspInit+0x58>)
 800210a:	f000 fe75 	bl	8002df8 <HAL_GPIO_Init>
}
 800210e:	e7e0      	b.n	80020d2 <HAL_TIM_IC_MspInit+0x16>
 8002110:	40000800 	.word	0x40000800
 8002114:	40010c00 	.word	0x40010c00

08002118 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002118:	b500      	push	{lr}
 800211a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	2300      	movs	r3, #0
 800211e:	9302      	str	r3, [sp, #8]
 8002120:	9303      	str	r3, [sp, #12]
 8002122:	9304      	str	r3, [sp, #16]
 8002124:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8002126:	6802      	ldr	r2, [r0, #0]
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_TIM_MspPostInit+0x54>)
 800212a:	429a      	cmp	r2, r3
 800212c:	d002      	beq.n	8002134 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800212e:	b007      	add	sp, #28
 8002130:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002134:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	f042 0210 	orr.w	r2, r2, #16
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 800214a:	23c0      	movs	r3, #192	@ 0xc0
 800214c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002154:	a902      	add	r1, sp, #8
 8002156:	4806      	ldr	r0, [pc, #24]	@ (8002170 <HAL_TIM_MspPostInit+0x58>)
 8002158:	f000 fe4e 	bl	8002df8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800215c:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <HAL_TIM_MspPostInit+0x5c>)
 800215e:	6853      	ldr	r3, [r2, #4]
 8002160:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002164:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8002168:	6053      	str	r3, [r2, #4]
}
 800216a:	e7e0      	b.n	800212e <HAL_TIM_MspPostInit+0x16>
 800216c:	40000400 	.word	0x40000400
 8002170:	40011000 	.word	0x40011000
 8002174:	40010000 	.word	0x40010000

08002178 <MX_TIM3_Init>:
{
 8002178:	b500      	push	{lr}
 800217a:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217c:	2300      	movs	r3, #0
 800217e:	9308      	str	r3, [sp, #32]
 8002180:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	9303      	str	r3, [sp, #12]
 8002188:	9304      	str	r3, [sp, #16]
 800218a:	9305      	str	r3, [sp, #20]
 800218c:	9306      	str	r3, [sp, #24]
 800218e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8002190:	481d      	ldr	r0, [pc, #116]	@ (8002208 <MX_TIM3_Init+0x90>)
 8002192:	4a1e      	ldr	r2, [pc, #120]	@ (800220c <MX_TIM3_Init+0x94>)
 8002194:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4-1;
 8002196:	2203      	movs	r2, #3
 8002198:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000-1;
 800219c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021a0:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021a6:	f001 ffef 	bl	8004188 <HAL_TIM_PWM_Init>
 80021aa:	bb00      	cbnz	r0, 80021ee <MX_TIM3_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021ac:	2320      	movs	r3, #32
 80021ae:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b4:	a908      	add	r1, sp, #32
 80021b6:	4814      	ldr	r0, [pc, #80]	@ (8002208 <MX_TIM3_Init+0x90>)
 80021b8:	f002 fb50 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	b9d0      	cbnz	r0, 80021f4 <MX_TIM3_Init+0x7c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021be:	2360      	movs	r3, #96	@ 0x60
 80021c0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80021c2:	2200      	movs	r2, #0
 80021c4:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c6:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021c8:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ca:	a901      	add	r1, sp, #4
 80021cc:	480e      	ldr	r0, [pc, #56]	@ (8002208 <MX_TIM3_Init+0x90>)
 80021ce:	f002 f8bd 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 80021d2:	b990      	cbnz	r0, 80021fa <MX_TIM3_Init+0x82>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d4:	2204      	movs	r2, #4
 80021d6:	eb0d 0102 	add.w	r1, sp, r2
 80021da:	480b      	ldr	r0, [pc, #44]	@ (8002208 <MX_TIM3_Init+0x90>)
 80021dc:	f002 f8b6 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 80021e0:	b970      	cbnz	r0, 8002200 <MX_TIM3_Init+0x88>
  HAL_TIM_MspPostInit(&htim3);
 80021e2:	4809      	ldr	r0, [pc, #36]	@ (8002208 <MX_TIM3_Init+0x90>)
 80021e4:	f7ff ff98 	bl	8002118 <HAL_TIM_MspPostInit>
}
 80021e8:	b00b      	add	sp, #44	@ 0x2c
 80021ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80021ee:	f7fe fe83 	bl	8000ef8 <Error_Handler>
 80021f2:	e7db      	b.n	80021ac <MX_TIM3_Init+0x34>
    Error_Handler();
 80021f4:	f7fe fe80 	bl	8000ef8 <Error_Handler>
 80021f8:	e7e1      	b.n	80021be <MX_TIM3_Init+0x46>
    Error_Handler();
 80021fa:	f7fe fe7d 	bl	8000ef8 <Error_Handler>
 80021fe:	e7e9      	b.n	80021d4 <MX_TIM3_Init+0x5c>
    Error_Handler();
 8002200:	f7fe fe7a 	bl	8000ef8 <Error_Handler>
 8002204:	e7ed      	b.n	80021e2 <MX_TIM3_Init+0x6a>
 8002206:	bf00      	nop
 8002208:	2000054c 	.word	0x2000054c
 800220c:	40000400 	.word	0x40000400

08002210 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002210:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002212:	480a      	ldr	r0, [pc, #40]	@ (800223c <MX_USART1_UART_Init+0x2c>)
 8002214:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <MX_USART1_UART_Init+0x30>)
 8002216:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 1000000;
 8002218:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <MX_USART1_UART_Init+0x34>)
 800221a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800221c:	2300      	movs	r3, #0
 800221e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002220:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002222:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002224:	220c      	movs	r2, #12
 8002226:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002228:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800222a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800222c:	f002 fc06 	bl	8004a3c <HAL_UART_Init>
 8002230:	b900      	cbnz	r0, 8002234 <MX_USART1_UART_Init+0x24>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002232:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002234:	f7fe fe60 	bl	8000ef8 <Error_Handler>
}
 8002238:	e7fb      	b.n	8002232 <MX_USART1_UART_Init+0x22>
 800223a:	bf00      	nop
 800223c:	200006ac 	.word	0x200006ac
 8002240:	40013800 	.word	0x40013800
 8002244:	000f4240 	.word	0x000f4240

08002248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	2300      	movs	r3, #0
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	9303      	str	r3, [sp, #12]
 8002252:	9304      	str	r3, [sp, #16]
 8002254:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8002256:	6802      	ldr	r2, [r0, #0]
 8002258:	4b35      	ldr	r3, [pc, #212]	@ (8002330 <HAL_UART_MspInit+0xe8>)
 800225a:	429a      	cmp	r2, r3
 800225c:	d001      	beq.n	8002262 <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800225e:	b007      	add	sp, #28
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002264:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800226e:	619a      	str	r2, [r3, #24]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002276:	9200      	str	r2, [sp, #0]
 8002278:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	699a      	ldr	r2, [r3, #24]
 800227c:	f042 0208 	orr.w	r2, r2, #8
 8002280:	619a      	str	r2, [r3, #24]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800228c:	2340      	movs	r3, #64	@ 0x40
 800228e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	4f26      	ldr	r7, [pc, #152]	@ (8002334 <HAL_UART_MspInit+0xec>)
 800229a:	a902      	add	r1, sp, #8
 800229c:	4638      	mov	r0, r7
 800229e:	f000 fdab 	bl	8002df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022a2:	2680      	movs	r6, #128	@ 0x80
 80022a4:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	2500      	movs	r5, #0
 80022a8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	a902      	add	r1, sp, #8
 80022ae:	4638      	mov	r0, r7
 80022b0:	f000 fda2 	bl	8002df8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80022b4:	4a20      	ldr	r2, [pc, #128]	@ (8002338 <HAL_UART_MspInit+0xf0>)
 80022b6:	6853      	ldr	r3, [r2, #4]
 80022b8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6053      	str	r3, [r2, #4]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80022c2:	481e      	ldr	r0, [pc, #120]	@ (800233c <HAL_UART_MspInit+0xf4>)
 80022c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_UART_MspInit+0xf8>)
 80022c6:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022c8:	2310      	movs	r3, #16
 80022ca:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022cc:	6085      	str	r5, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ce:	60c6      	str	r6, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d0:	6105      	str	r5, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d2:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022d4:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80022d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022da:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022dc:	f000 fc0c 	bl	8002af8 <HAL_DMA_Init>
 80022e0:	b9f8      	cbnz	r0, 8002322 <HAL_UART_MspInit+0xda>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <HAL_UART_MspInit+0xf4>)
 80022e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80022e6:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80022e8:	4816      	ldr	r0, [pc, #88]	@ (8002344 <HAL_UART_MspInit+0xfc>)
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <HAL_UART_MspInit+0x100>)
 80022ec:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ee:	2300      	movs	r3, #0
 80022f0:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f2:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022f4:	2280      	movs	r2, #128	@ 0x80
 80022f6:	60c2      	str	r2, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022f8:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022fa:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80022fc:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80022fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002302:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002304:	f000 fbf8 	bl	8002af8 <HAL_DMA_Init>
 8002308:	b970      	cbnz	r0, 8002328 <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_UART_MspInit+0xfc>)
 800230c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800230e:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2102      	movs	r1, #2
 8002314:	2025      	movs	r0, #37	@ 0x25
 8002316:	f000 fba7 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800231a:	2025      	movs	r0, #37	@ 0x25
 800231c:	f000 fbb4 	bl	8002a88 <HAL_NVIC_EnableIRQ>
}
 8002320:	e79d      	b.n	800225e <HAL_UART_MspInit+0x16>
      Error_Handler();
 8002322:	f7fe fde9 	bl	8000ef8 <Error_Handler>
 8002326:	e7dc      	b.n	80022e2 <HAL_UART_MspInit+0x9a>
      Error_Handler();
 8002328:	f7fe fde6 	bl	8000ef8 <Error_Handler>
 800232c:	e7ed      	b.n	800230a <HAL_UART_MspInit+0xc2>
 800232e:	bf00      	nop
 8002330:	40013800 	.word	0x40013800
 8002334:	40010c00 	.word	0x40010c00
 8002338:	40010000 	.word	0x40010000
 800233c:	20000668 	.word	0x20000668
 8002340:	40020044 	.word	0x40020044
 8002344:	20000624 	.word	0x20000624
 8002348:	40020058 	.word	0x40020058

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b510      	push	{r4, lr}
 800234e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <HAL_InitTick+0x40>)
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002358:	fbb3 f3f2 	udiv	r3, r3, r2
 800235c:	4a0c      	ldr	r2, [pc, #48]	@ (8002390 <HAL_InitTick+0x44>)
 800235e:	6810      	ldr	r0, [r2, #0]
 8002360:	fbb0 f0f3 	udiv	r0, r0, r3
 8002364:	f000 fb9e 	bl	8002aa4 <HAL_SYSTICK_Config>
 8002368:	b968      	cbnz	r0, 8002386 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236a:	2c0f      	cmp	r4, #15
 800236c:	d901      	bls.n	8002372 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800236e:	2001      	movs	r0, #1
 8002370:	e00a      	b.n	8002388 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002372:	2200      	movs	r2, #0
 8002374:	4621      	mov	r1, r4
 8002376:	f04f 30ff 	mov.w	r0, #4294967295
 800237a:	f000 fb75 	bl	8002a68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800237e:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <HAL_InitTick+0x48>)
 8002380:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002382:	2000      	movs	r0, #0
 8002384:	e000      	b.n	8002388 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002386:	2001      	movs	r0, #1
}
 8002388:	bd10      	pop	{r4, pc}
 800238a:	bf00      	nop
 800238c:	200000a4 	.word	0x200000a4
 8002390:	200000a0 	.word	0x200000a0
 8002394:	200000a8 	.word	0x200000a8

08002398 <HAL_Init>:
{
 8002398:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800239a:	4a07      	ldr	r2, [pc, #28]	@ (80023b8 <HAL_Init+0x20>)
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f000 fb4d 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80023aa:	200f      	movs	r0, #15
 80023ac:	f7ff ffce 	bl	800234c <HAL_InitTick>
  HAL_MspInit();
 80023b0:	f7ff fcd8 	bl	8001d64 <HAL_MspInit>
}
 80023b4:	2000      	movs	r0, #0
 80023b6:	bd08      	pop	{r3, pc}
 80023b8:	40022000 	.word	0x40022000

080023bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023bc:	4a03      	ldr	r2, [pc, #12]	@ (80023cc <HAL_IncTick+0x10>)
 80023be:	6811      	ldr	r1, [r2, #0]
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_IncTick+0x14>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	440b      	add	r3, r1
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	200006f4 	.word	0x200006f4
 80023d0:	200000a4 	.word	0x200000a4

080023d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023d4:	4b01      	ldr	r3, [pc, #4]	@ (80023dc <HAL_GetTick+0x8>)
 80023d6:	6818      	ldr	r0, [r3, #0]
}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	200006f4 	.word	0x200006f4

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff fff6 	bl	80023d4 <HAL_GetTick>
 80023e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ea:	f1b4 3fff 	cmp.w	r4, #4294967295
 80023ee:	d002      	beq.n	80023f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <HAL_Delay+0x24>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023f6:	f7ff ffed 	bl	80023d4 <HAL_GetTick>
 80023fa:	1b40      	subs	r0, r0, r5
 80023fc:	42a0      	cmp	r0, r4
 80023fe:	d3fa      	bcc.n	80023f6 <HAL_Delay+0x16>
  {
  }
}
 8002400:	bd38      	pop	{r3, r4, r5, pc}
 8002402:	bf00      	nop
 8002404:	200000a4 	.word	0x200000a4

08002408 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002408:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800240a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800240c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800240e:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8002412:	d11e      	bne.n	8002452 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	6892      	ldr	r2, [r2, #8]
 8002420:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002424:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002428:	d003      	beq.n	8002432 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f8fc 	bl	8000628 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002430:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002432:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002434:	2a00      	cmp	r2, #0
 8002436:	d1f8      	bne.n	800242a <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800243a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002440:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002442:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8002446:	d1f0      	bne.n	800242a <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002450:	e7eb      	b.n	800242a <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4798      	blx	r3
}
 8002458:	e7ea      	b.n	8002430 <ADC_DMAConvCplt+0x28>

0800245a <HAL_ADC_ConvHalfCpltCallback>:
}
 800245a:	4770      	bx	lr

0800245c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800245c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800245e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002460:	f7ff fffb 	bl	800245a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002464:	bd08      	pop	{r3, pc}

08002466 <HAL_ADC_ErrorCallback>:
}
 8002466:	4770      	bx	lr

08002468 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002468:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800246a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800246c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800246e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002472:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002474:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800247c:	f7ff fff3 	bl	8002466 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002480:	bd08      	pop	{r3, pc}
	...

08002484 <HAL_ADC_ConfigChannel>:
{ 
 8002484:	b430      	push	{r4, r5}
 8002486:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002488:	2200      	movs	r2, #0
 800248a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800248c:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002490:	2a01      	cmp	r2, #1
 8002492:	f000 808f 	beq.w	80025b4 <HAL_ADC_ConfigChannel+0x130>
 8002496:	4603      	mov	r3, r0
 8002498:	2201      	movs	r2, #1
 800249a:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 800249e:	684a      	ldr	r2, [r1, #4]
 80024a0:	2a06      	cmp	r2, #6
 80024a2:	d82d      	bhi.n	8002500 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024a4:	6804      	ldr	r4, [r0, #0]
 80024a6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80024a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80024ac:	3a05      	subs	r2, #5
 80024ae:	f04f 0c1f 	mov.w	ip, #31
 80024b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80024b6:	ea20 000c 	bic.w	r0, r0, ip
 80024ba:	680d      	ldr	r5, [r1, #0]
 80024bc:	fa05 f202 	lsl.w	r2, r5, r2
 80024c0:	4302      	orrs	r2, r0
 80024c2:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024c4:	680a      	ldr	r2, [r1, #0]
 80024c6:	2a09      	cmp	r2, #9
 80024c8:	d938      	bls.n	800253c <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024ca:	681c      	ldr	r4, [r3, #0]
 80024cc:	68e0      	ldr	r0, [r4, #12]
 80024ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80024d2:	3a1e      	subs	r2, #30
 80024d4:	f04f 0c07 	mov.w	ip, #7
 80024d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80024dc:	ea20 000c 	bic.w	r0, r0, ip
 80024e0:	688d      	ldr	r5, [r1, #8]
 80024e2:	fa05 f202 	lsl.w	r2, r5, r2
 80024e6:	4302      	orrs	r2, r0
 80024e8:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ea:	680a      	ldr	r2, [r1, #0]
 80024ec:	3a10      	subs	r2, #16
 80024ee:	2a01      	cmp	r2, #1
 80024f0:	d934      	bls.n	800255c <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80024fa:	b002      	add	sp, #8
 80024fc:	bc30      	pop	{r4, r5}
 80024fe:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002500:	2a0c      	cmp	r2, #12
 8002502:	d80d      	bhi.n	8002520 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002504:	6805      	ldr	r5, [r0, #0]
 8002506:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002508:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800250c:	3a23      	subs	r2, #35	@ 0x23
 800250e:	241f      	movs	r4, #31
 8002510:	4094      	lsls	r4, r2
 8002512:	ea20 0004 	bic.w	r0, r0, r4
 8002516:	680c      	ldr	r4, [r1, #0]
 8002518:	4094      	lsls	r4, r2
 800251a:	4320      	orrs	r0, r4
 800251c:	6328      	str	r0, [r5, #48]	@ 0x30
 800251e:	e7d1      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002520:	6805      	ldr	r5, [r0, #0]
 8002522:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002524:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002528:	3a41      	subs	r2, #65	@ 0x41
 800252a:	241f      	movs	r4, #31
 800252c:	4094      	lsls	r4, r2
 800252e:	ea20 0004 	bic.w	r0, r0, r4
 8002532:	680c      	ldr	r4, [r1, #0]
 8002534:	4094      	lsls	r4, r2
 8002536:	4320      	orrs	r0, r4
 8002538:	62e8      	str	r0, [r5, #44]	@ 0x2c
 800253a:	e7c3      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800253c:	681c      	ldr	r4, [r3, #0]
 800253e:	6920      	ldr	r0, [r4, #16]
 8002540:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002544:	f04f 0c07 	mov.w	ip, #7
 8002548:	fa0c fc02 	lsl.w	ip, ip, r2
 800254c:	ea20 000c 	bic.w	r0, r0, ip
 8002550:	688d      	ldr	r5, [r1, #8]
 8002552:	fa05 f202 	lsl.w	r2, r5, r2
 8002556:	4302      	orrs	r2, r0
 8002558:	6122      	str	r2, [r4, #16]
 800255a:	e7c6      	b.n	80024ea <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4816      	ldr	r0, [pc, #88]	@ (80025b8 <HAL_ADC_ConfigChannel+0x134>)
 8002560:	4282      	cmp	r2, r0
 8002562:	d005      	beq.n	8002570 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002566:	f042 0220 	orr.w	r2, r2, #32
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 800256c:	2001      	movs	r0, #1
 800256e:	e7c1      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002570:	6890      	ldr	r0, [r2, #8]
 8002572:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8002576:	d11b      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002578:	6890      	ldr	r0, [r2, #8]
 800257a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800257e:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002580:	680a      	ldr	r2, [r1, #0]
 8002582:	2a10      	cmp	r2, #16
 8002584:	d001      	beq.n	800258a <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002586:	2000      	movs	r0, #0
 8002588:	e7b4      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800258a:	4a0c      	ldr	r2, [pc, #48]	@ (80025bc <HAL_ADC_ConfigChannel+0x138>)
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	490c      	ldr	r1, [pc, #48]	@ (80025c0 <HAL_ADC_ConfigChannel+0x13c>)
 8002590:	fba1 1202 	umull	r1, r2, r1, r2
 8002594:	0c92      	lsrs	r2, r2, #18
 8002596:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800259a:	0052      	lsls	r2, r2, #1
 800259c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800259e:	e002      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 80025a0:	9a01      	ldr	r2, [sp, #4]
 80025a2:	3a01      	subs	r2, #1
 80025a4:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80025a6:	9a01      	ldr	r2, [sp, #4]
 80025a8:	2a00      	cmp	r2, #0
 80025aa:	d1f9      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2000      	movs	r0, #0
 80025ae:	e7a1      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x70>
 80025b0:	2000      	movs	r0, #0
 80025b2:	e79f      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80025b4:	2002      	movs	r0, #2
 80025b6:	e7a0      	b.n	80024fa <HAL_ADC_ConfigChannel+0x76>
 80025b8:	40012400 	.word	0x40012400
 80025bc:	200000a0 	.word	0x200000a0
 80025c0:	431bde83 	.word	0x431bde83

080025c4 <ADC_Enable>:
{
 80025c4:	b530      	push	{r4, r5, lr}
 80025c6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025cc:	6803      	ldr	r3, [r0, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	f012 0f01 	tst.w	r2, #1
 80025d4:	d133      	bne.n	800263e <ADC_Enable+0x7a>
 80025d6:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025e0:	4b18      	ldr	r3, [pc, #96]	@ (8002644 <ADC_Enable+0x80>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a18      	ldr	r2, [pc, #96]	@ (8002648 <ADC_Enable+0x84>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0c9b      	lsrs	r3, r3, #18
 80025ec:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80025ee:	e002      	b.n	80025f6 <ADC_Enable+0x32>
      wait_loop_index--;
 80025f0:	9b01      	ldr	r3, [sp, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80025f6:	9b01      	ldr	r3, [sp, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f9      	bne.n	80025f0 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 80025fc:	f7ff feea 	bl	80023d4 <HAL_GetTick>
 8002600:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f013 0f01 	tst.w	r3, #1
 800260a:	d116      	bne.n	800263a <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800260c:	f7ff fee2 	bl	80023d4 <HAL_GetTick>
 8002610:	1b43      	subs	r3, r0, r5
 8002612:	2b02      	cmp	r3, #2
 8002614:	d9f5      	bls.n	8002602 <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f013 0f01 	tst.w	r3, #1
 800261e:	d1f0      	bne.n	8002602 <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002620:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002628:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8002630:	2300      	movs	r3, #0
 8002632:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8002636:	2001      	movs	r0, #1
 8002638:	e002      	b.n	8002640 <ADC_Enable+0x7c>
  return HAL_OK;
 800263a:	2000      	movs	r0, #0
 800263c:	e000      	b.n	8002640 <ADC_Enable+0x7c>
 800263e:	2000      	movs	r0, #0
}
 8002640:	b003      	add	sp, #12
 8002642:	bd30      	pop	{r4, r5, pc}
 8002644:	200000a0 	.word	0x200000a0
 8002648:	431bde83 	.word	0x431bde83

0800264c <HAL_ADC_Start_DMA>:
{
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	4604      	mov	r4, r0
 8002650:	460d      	mov	r5, r1
 8002652:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002654:	6801      	ldr	r1, [r0, #0]
 8002656:	4844      	ldr	r0, [pc, #272]	@ (8002768 <HAL_ADC_Start_DMA+0x11c>)
 8002658:	4281      	cmp	r1, r0
 800265a:	d059      	beq.n	8002710 <HAL_ADC_Start_DMA+0xc4>
 800265c:	4b43      	ldr	r3, [pc, #268]	@ (800276c <HAL_ADC_Start_DMA+0x120>)
 800265e:	4299      	cmp	r1, r3
 8002660:	d056      	beq.n	8002710 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8002662:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002666:	2b01      	cmp	r3, #1
 8002668:	d07c      	beq.n	8002764 <HAL_ADC_Start_DMA+0x118>
 800266a:	2301      	movs	r3, #1
 800266c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002670:	4620      	mov	r0, r4
 8002672:	f7ff ffa7 	bl	80025c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002676:	4607      	mov	r7, r0
 8002678:	2800      	cmp	r0, #0
 800267a:	d16e      	bne.n	800275a <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 800267c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800267e:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8002682:	f021 0101 	bic.w	r1, r1, #1
 8002686:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800268a:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800268c:	6822      	ldr	r2, [r4, #0]
 800268e:	4b37      	ldr	r3, [pc, #220]	@ (800276c <HAL_ADC_Start_DMA+0x120>)
 8002690:	429a      	cmp	r2, r3
 8002692:	d044      	beq.n	800271e <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002694:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002696:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800269a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800269c:	6853      	ldr	r3, [r2, #4]
 800269e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80026a2:	d005      	beq.n	80026b0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80026a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026ae:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80026b2:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80026b6:	d048      	beq.n	800274a <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80026ba:	f023 0306 	bic.w	r3, r3, #6
 80026be:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 80026c0:	2300      	movs	r3, #0
 80026c2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026c6:	6a23      	ldr	r3, [r4, #32]
 80026c8:	4a29      	ldr	r2, [pc, #164]	@ (8002770 <HAL_ADC_Start_DMA+0x124>)
 80026ca:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026cc:	6a23      	ldr	r3, [r4, #32]
 80026ce:	4a29      	ldr	r2, [pc, #164]	@ (8002774 <HAL_ADC_Start_DMA+0x128>)
 80026d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026d2:	6a23      	ldr	r3, [r4, #32]
 80026d4:	4a28      	ldr	r2, [pc, #160]	@ (8002778 <HAL_ADC_Start_DMA+0x12c>)
 80026d6:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	f06f 0202 	mvn.w	r2, #2
 80026de:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	6893      	ldr	r3, [r2, #8]
 80026e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e8:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026ea:	6821      	ldr	r1, [r4, #0]
 80026ec:	4633      	mov	r3, r6
 80026ee:	462a      	mov	r2, r5
 80026f0:	314c      	adds	r1, #76	@ 0x4c
 80026f2:	6a20      	ldr	r0, [r4, #32]
 80026f4:	f000 fa34 	bl	8002b60 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002700:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002704:	d024      	beq.n	8002750 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	e027      	b.n	8002760 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002710:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_ADC_Start_DMA+0x11c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002718:	d0a3      	beq.n	8002662 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800271a:	2701      	movs	r7, #1
 800271c:	e020      	b.n	8002760 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800271e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002728:	d0b4      	beq.n	8002694 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800272a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800272c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002730:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002732:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <HAL_ADC_Start_DMA+0x11c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800273a:	d0b9      	beq.n	80026b0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800273c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800273e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002742:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002746:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002748:	e7b2      	b.n	80026b0 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 800274a:	2300      	movs	r3, #0
 800274c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800274e:	e7b7      	b.n	80026c0 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	e002      	b.n	8002760 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 800275a:	2300      	movs	r3, #0
 800275c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002760:	4638      	mov	r0, r7
 8002762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002764:	2702      	movs	r7, #2
 8002766:	e7fb      	b.n	8002760 <HAL_ADC_Start_DMA+0x114>
 8002768:	40012400 	.word	0x40012400
 800276c:	40012800 	.word	0x40012800
 8002770:	08002409 	.word	0x08002409
 8002774:	0800245d 	.word	0x0800245d
 8002778:	08002469 	.word	0x08002469

0800277c <ADC_ConversionStop_Disable>:
{
 800277c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800277e:	6803      	ldr	r3, [r0, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	f012 0f01 	tst.w	r2, #1
 8002786:	d101      	bne.n	800278c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002788:	2000      	movs	r0, #0
}
 800278a:	bd38      	pop	{r3, r4, r5, pc}
 800278c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002796:	f7ff fe1d 	bl	80023d4 <HAL_GetTick>
 800279a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f013 0f01 	tst.w	r3, #1
 80027a4:	d013      	beq.n	80027ce <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027a6:	f7ff fe15 	bl	80023d4 <HAL_GetTick>
 80027aa:	1b43      	subs	r3, r0, r5
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d9f5      	bls.n	800279c <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f013 0f01 	tst.w	r3, #1
 80027b8:	d0f0      	beq.n	800279c <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80027ca:	2001      	movs	r0, #1
 80027cc:	e7dd      	b.n	800278a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80027ce:	2000      	movs	r0, #0
 80027d0:	e7db      	b.n	800278a <ADC_ConversionStop_Disable+0xe>
	...

080027d4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d07b      	beq.n	80028d0 <HAL_ADC_Init+0xfc>
{
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04d      	beq.n	800287e <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff ffca 	bl	800277c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80027ea:	f013 0310 	ands.w	r3, r3, #16
 80027ee:	d169      	bne.n	80028c4 <HAL_ADC_Init+0xf0>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d167      	bne.n	80028c4 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 80027f4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80027f6:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80027fa:	f022 0202 	bic.w	r2, r2, #2
 80027fe:	f042 0202 	orr.w	r2, r2, #2
 8002802:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002804:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002806:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002808:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800280a:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800280c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002810:	68a5      	ldr	r5, [r4, #8]
 8002812:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8002816:	d002      	beq.n	800281e <HAL_ADC_Init+0x4a>
 8002818:	2d01      	cmp	r5, #1
 800281a:	d036      	beq.n	800288a <HAL_ADC_Init+0xb6>
 800281c:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800281e:	7d26      	ldrb	r6, [r4, #20]
 8002820:	2e01      	cmp	r6, #1
 8002822:	d035      	beq.n	8002890 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8002824:	6826      	ldr	r6, [r4, #0]
 8002826:	6871      	ldr	r1, [r6, #4]
 8002828:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 800282c:	4329      	orrs	r1, r5
 800282e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002830:	6825      	ldr	r5, [r4, #0]
 8002832:	68ae      	ldr	r6, [r5, #8]
 8002834:	4927      	ldr	r1, [pc, #156]	@ (80028d4 <HAL_ADC_Init+0x100>)
 8002836:	4031      	ands	r1, r6
 8002838:	4311      	orrs	r1, r2
 800283a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800283c:	68a1      	ldr	r1, [r4, #8]
 800283e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8002842:	d001      	beq.n	8002848 <HAL_ADC_Init+0x74>
 8002844:	2901      	cmp	r1, #1
 8002846:	d102      	bne.n	800284e <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002848:	6923      	ldr	r3, [r4, #16]
 800284a:	3b01      	subs	r3, #1
 800284c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800284e:	6825      	ldr	r5, [r4, #0]
 8002850:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8002852:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8002856:	430b      	orrs	r3, r1
 8002858:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	6899      	ldr	r1, [r3, #8]
 800285e:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <HAL_ADC_Init+0x104>)
 8002860:	400b      	ands	r3, r1
 8002862:	429a      	cmp	r2, r3
 8002864:	d025      	beq.n	80028b2 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8002866:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002868:	f023 0312 	bic.w	r3, r3, #18
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002872:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 800287a:	2001      	movs	r0, #1
 800287c:	e027      	b.n	80028ce <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 800287e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002880:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8002884:	f7fd fe12 	bl	80004ac <HAL_ADC_MspInit>
 8002888:	e7ab      	b.n	80027e2 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800288a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800288e:	e7c6      	b.n	800281e <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002890:	b931      	cbnz	r1, 80028a0 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002892:	69a1      	ldr	r1, [r4, #24]
 8002894:	3901      	subs	r1, #1
 8002896:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 800289a:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 800289e:	e7c1      	b.n	8002824 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80028a2:	f041 0120 	orr.w	r1, r1, #32
 80028a6:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80028aa:	f041 0101 	orr.w	r1, r1, #1
 80028ae:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80028b0:	e7b8      	b.n	8002824 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 80028b2:	2300      	movs	r3, #0
 80028b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80028b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80028b8:	f023 0303 	bic.w	r3, r3, #3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80028c2:	e004      	b.n	80028ce <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80028c6:	f043 0310 	orr.w	r3, r3, #16
 80028ca:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80028cc:	2001      	movs	r0, #1
}
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80028d0:	2001      	movs	r0, #1
}
 80028d2:	4770      	bx	lr
 80028d4:	ffe1f7fd 	.word	0xffe1f7fd
 80028d8:	ff1f0efe 	.word	0xff1f0efe

080028dc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d072      	beq.n	80029d2 <HAL_ADCEx_Calibration_Start+0xf6>
 80028ec:	4604      	mov	r4, r0
 80028ee:	2301      	movs	r3, #1
 80028f0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028f4:	f7ff ff42 	bl	800277c <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff fe63 	bl	80025c4 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80028fe:	4605      	mov	r5, r0
 8002900:	b128      	cbz	r0, 800290e <HAL_ADCEx_Calibration_Start+0x32>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002902:	2300      	movs	r3, #0
 8002904:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002908:	4628      	mov	r0, r5
 800290a:	b002      	add	sp, #8
 800290c:	bd70      	pop	{r4, r5, r6, pc}
     ADC_STATE_CLR_SET(hadc->State,
 800290e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002910:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002914:	f023 0302 	bic.w	r3, r3, #2
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	62a3      	str	r3, [r4, #40]	@ 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800291e:	4b2e      	ldr	r3, [pc, #184]	@ (80029d8 <HAL_ADCEx_Calibration_Start+0xfc>)
 8002920:	681e      	ldr	r6, [r3, #0]
 8002922:	2002      	movs	r0, #2
 8002924:	f000 ff34 	bl	8003790 <HAL_RCCEx_GetPeriphCLKFreq>
 8002928:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800292c:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 800292e:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8002930:	e002      	b.n	8002938 <HAL_ADCEx_Calibration_Start+0x5c>
      wait_loop_index--;
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	3b01      	subs	r3, #1
 8002936:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002938:	9b01      	ldr	r3, [sp, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f9      	bne.n	8002932 <HAL_ADCEx_Calibration_Start+0x56>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800293e:	6822      	ldr	r2, [r4, #0]
 8002940:	6893      	ldr	r3, [r2, #8]
 8002942:	f043 0308 	orr.w	r3, r3, #8
 8002946:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002948:	f7ff fd44 	bl	80023d4 <HAL_GetTick>
 800294c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	f012 0f08 	tst.w	r2, #8
 8002956:	d014      	beq.n	8002982 <HAL_ADCEx_Calibration_Start+0xa6>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002958:	f7ff fd3c 	bl	80023d4 <HAL_GetTick>
 800295c:	1b80      	subs	r0, r0, r6
 800295e:	280a      	cmp	r0, #10
 8002960:	d9f5      	bls.n	800294e <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f013 0f08 	tst.w	r3, #8
 800296a:	d0f0      	beq.n	800294e <HAL_ADCEx_Calibration_Start+0x72>
          ADC_STATE_CLR_SET(hadc->State,
 800296c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800296e:	f023 0312 	bic.w	r3, r3, #18
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 8002978:	2300      	movs	r3, #0
 800297a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 800297e:	2501      	movs	r5, #1
 8002980:	e7c2      	b.n	8002908 <HAL_ADCEx_Calibration_Start+0x2c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	f042 0204 	orr.w	r2, r2, #4
 8002988:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800298a:	f7ff fd23 	bl	80023d4 <HAL_GetTick>
 800298e:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f013 0f04 	tst.w	r3, #4
 8002998:	d014      	beq.n	80029c4 <HAL_ADCEx_Calibration_Start+0xe8>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800299a:	f7ff fd1b 	bl	80023d4 <HAL_GetTick>
 800299e:	1b80      	subs	r0, r0, r6
 80029a0:	280a      	cmp	r0, #10
 80029a2:	d9f5      	bls.n	8002990 <HAL_ADCEx_Calibration_Start+0xb4>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f013 0f04 	tst.w	r3, #4
 80029ac:	d0f0      	beq.n	8002990 <HAL_ADCEx_Calibration_Start+0xb4>
          ADC_STATE_CLR_SET(hadc->State,
 80029ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80029b0:	f023 0312 	bic.w	r3, r3, #18
 80029b4:	f043 0310 	orr.w	r3, r3, #16
 80029b8:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 80029ba:	2300      	movs	r3, #0
 80029bc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 80029c0:	2501      	movs	r5, #1
 80029c2:	e7a1      	b.n	8002908 <HAL_ADCEx_Calibration_Start+0x2c>
    ADC_STATE_CLR_SET(hadc->State,
 80029c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80029d0:	e797      	b.n	8002902 <HAL_ADCEx_Calibration_Start+0x26>
  __HAL_LOCK(hadc);
 80029d2:	2502      	movs	r5, #2
 80029d4:	e798      	b.n	8002908 <HAL_ADCEx_Calibration_Start+0x2c>
 80029d6:	bf00      	nop
 80029d8:	200000a0 	.word	0x200000a0

080029dc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80029dc:	2800      	cmp	r0, #0
 80029de:	db08      	blt.n	80029f2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	0109      	lsls	r1, r1, #4
 80029e2:	b2c9      	uxtb	r1, r1
 80029e4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80029e8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80029ec:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80029f0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	f000 000f 	and.w	r0, r0, #15
 80029f6:	0109      	lsls	r1, r1, #4
 80029f8:	b2c9      	uxtb	r1, r1
 80029fa:	4b01      	ldr	r3, [pc, #4]	@ (8002a00 <__NVIC_SetPriority+0x24>)
 80029fc:	5419      	strb	r1, [r3, r0]
  }
}
 80029fe:	4770      	bx	lr
 8002a00:	e000ed14 	.word	0xe000ed14

08002a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a04:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a06:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0a:	f1c0 0c07 	rsb	ip, r0, #7
 8002a0e:	f1bc 0f04 	cmp.w	ip, #4
 8002a12:	bf28      	it	cs
 8002a14:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a18:	1d03      	adds	r3, r0, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d90f      	bls.n	8002a3e <NVIC_EncodePriority+0x3a>
 8002a1e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	f04f 3eff 	mov.w	lr, #4294967295
 8002a24:	fa0e f00c 	lsl.w	r0, lr, ip
 8002a28:	ea21 0100 	bic.w	r1, r1, r0
 8002a2c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a2e:	fa0e fe03 	lsl.w	lr, lr, r3
 8002a32:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002a36:	ea41 0002 	orr.w	r0, r1, r2
 8002a3a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e7ee      	b.n	8002a20 <NVIC_EncodePriority+0x1c>
	...

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4a07      	ldr	r2, [pc, #28]	@ (8002a64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a48:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a50:	0200      	lsls	r0, r0, #8
 8002a52:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a56:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002a60:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <HAL_NVIC_SetPriority+0x1c>)
 8002a6e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a70:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002a74:	f7ff ffc6 	bl	8002a04 <NVIC_EncodePriority>
 8002a78:	4601      	mov	r1, r0
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7ff ffae 	bl	80029dc <__NVIC_SetPriority>
}
 8002a80:	bd10      	pop	{r4, pc}
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	db07      	blt.n	8002a9c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8c:	f000 021f 	and.w	r2, r0, #31
 8002a90:	0940      	lsrs	r0, r0, #5
 8002a92:	2301      	movs	r3, #1
 8002a94:	4093      	lsls	r3, r2
 8002a96:	4a02      	ldr	r2, [pc, #8]	@ (8002aa0 <HAL_NVIC_EnableIRQ+0x18>)
 8002a98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000e100 	.word	0xe000e100

08002aa4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa4:	3801      	subs	r0, #1
 8002aa6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002aaa:	d20b      	bcs.n	8002ac4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002ab0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	4a05      	ldr	r2, [pc, #20]	@ (8002ac8 <HAL_SYSTICK_Config+0x24>)
 8002ab4:	21f0      	movs	r1, #240	@ 0xf0
 8002ab6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aba:	2000      	movs	r0, #0
 8002abc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	2207      	movs	r2, #7
 8002ac0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002ac4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002acc:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ace:	2401      	movs	r4, #1
 8002ad0:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002ad2:	40ac      	lsls	r4, r5
 8002ad4:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8002ad6:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ad8:	6804      	ldr	r4, [r0, #0]
 8002ada:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002adc:	6843      	ldr	r3, [r0, #4]
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d005      	beq.n	8002aee <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002ae2:	6803      	ldr	r3, [r0, #0]
 8002ae4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002ae6:	6803      	ldr	r3, [r0, #0]
 8002ae8:	60da      	str	r2, [r3, #12]
  }
}
 8002aea:	bc30      	pop	{r4, r5}
 8002aec:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002aee:	6803      	ldr	r3, [r0, #0]
 8002af0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002af2:	6803      	ldr	r3, [r0, #0]
 8002af4:	60d9      	str	r1, [r3, #12]
 8002af6:	e7f8      	b.n	8002aea <DMA_SetConfig+0x1e>

08002af8 <HAL_DMA_Init>:
  if(hdma == NULL)
 8002af8:	b350      	cbz	r0, 8002b50 <HAL_DMA_Init+0x58>
{
 8002afa:	b410      	push	{r4}
 8002afc:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002afe:	6801      	ldr	r1, [r0, #0]
 8002b00:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <HAL_DMA_Init+0x5c>)
 8002b02:	440b      	add	r3, r1
 8002b04:	4814      	ldr	r0, [pc, #80]	@ (8002b58 <HAL_DMA_Init+0x60>)
 8002b06:	fba0 0303 	umull	r0, r3, r0, r3
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_DMA_Init+0x64>)
 8002b12:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b14:	2302      	movs	r3, #2
 8002b16:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8002b1a:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b1c:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 8002b20:	6853      	ldr	r3, [r2, #4]
 8002b22:	6894      	ldr	r4, [r2, #8]
 8002b24:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b26:	68d4      	ldr	r4, [r2, #12]
 8002b28:	4323      	orrs	r3, r4
 8002b2a:	6914      	ldr	r4, [r2, #16]
 8002b2c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2e:	6954      	ldr	r4, [r2, #20]
 8002b30:	4323      	orrs	r3, r4
 8002b32:	6994      	ldr	r4, [r2, #24]
 8002b34:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b36:	69d4      	ldr	r4, [r2, #28]
 8002b38:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002b3a:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8002b3c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3e:	2000      	movs	r0, #0
 8002b40:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002b48:	f882 0020 	strb.w	r0, [r2, #32]
}
 8002b4c:	bc10      	pop	{r4}
 8002b4e:	4770      	bx	lr
    return HAL_ERROR;
 8002b50:	2001      	movs	r0, #1
}
 8002b52:	4770      	bx	lr
 8002b54:	bffdfff8 	.word	0xbffdfff8
 8002b58:	cccccccd 	.word	0xcccccccd
 8002b5c:	40020000 	.word	0x40020000

08002b60 <HAL_DMA_Start_IT>:
{
 8002b60:	b538      	push	{r3, r4, r5, lr}
 8002b62:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002b64:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002b68:	2801      	cmp	r0, #1
 8002b6a:	d032      	beq.n	8002bd2 <HAL_DMA_Start_IT+0x72>
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b72:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8002b76:	b2c0      	uxtb	r0, r0
 8002b78:	2801      	cmp	r0, #1
 8002b7a:	d004      	beq.n	8002b86 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8002b82:	2002      	movs	r0, #2
}
 8002b84:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b86:	2002      	movs	r0, #2
 8002b88:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8002b90:	6825      	ldr	r5, [r4, #0]
 8002b92:	6828      	ldr	r0, [r5, #0]
 8002b94:	f020 0001 	bic.w	r0, r0, #1
 8002b98:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff ff96 	bl	8002acc <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8002ba0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002ba2:	b15b      	cbz	r3, 8002bbc <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba4:	6822      	ldr	r2, [r4, #0]
 8002ba6:	6813      	ldr	r3, [r2, #0]
 8002ba8:	f043 030e 	orr.w	r3, r3, #14
 8002bac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002bae:	6822      	ldr	r2, [r4, #0]
 8002bb0:	6813      	ldr	r3, [r2, #0]
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2000      	movs	r0, #0
 8002bba:	e7e3      	b.n	8002b84 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	6813      	ldr	r3, [r2, #0]
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	f043 030a 	orr.w	r3, r3, #10
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e7ed      	b.n	8002bae <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002bd2:	2002      	movs	r0, #2
 8002bd4:	e7d6      	b.n	8002b84 <HAL_DMA_Start_IT+0x24>

08002bd6 <HAL_DMA_Abort>:
{
 8002bd6:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd8:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	2a02      	cmp	r2, #2
 8002be0:	d006      	beq.n	8002bf0 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be2:	2204      	movs	r2, #4
 8002be4:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8002be6:	2200      	movs	r2, #0
 8002be8:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8002bec:	2001      	movs	r0, #1
 8002bee:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bf0:	6801      	ldr	r1, [r0, #0]
 8002bf2:	680a      	ldr	r2, [r1, #0]
 8002bf4:	f022 020e 	bic.w	r2, r2, #14
 8002bf8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002bfa:	6801      	ldr	r1, [r0, #0]
 8002bfc:	680a      	ldr	r2, [r1, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c04:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002c06:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8002c08:	2101      	movs	r1, #1
 8002c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0e:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8002c10:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 8002c14:	2000      	movs	r0, #0
 8002c16:	f883 0020 	strb.w	r0, [r3, #32]
}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_DMA_Abort_IT>:
{  
 8002c1c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c1e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d003      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c28:	2304      	movs	r3, #4
 8002c2a:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8002c2c:	2001      	movs	r0, #1
}
 8002c2e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c30:	6802      	ldr	r2, [r0, #0]
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	f023 030e 	bic.w	r3, r3, #14
 8002c38:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002c3a:	6802      	ldr	r2, [r0, #0]
 8002c3c:	6813      	ldr	r3, [r2, #0]
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c44:	6803      	ldr	r3, [r0, #0]
 8002c46:	4a19      	ldr	r2, [pc, #100]	@ (8002cac <HAL_DMA_Abort_IT+0x90>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d014      	beq.n	8002c76 <HAL_DMA_Abort_IT+0x5a>
 8002c4c:	3214      	adds	r2, #20
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x76>
 8002c52:	3214      	adds	r2, #20
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d01e      	beq.n	8002c96 <HAL_DMA_Abort_IT+0x7a>
 8002c58:	3214      	adds	r2, #20
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01e      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x80>
 8002c5e:	3214      	adds	r2, #20
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d01e      	beq.n	8002ca2 <HAL_DMA_Abort_IT+0x86>
 8002c64:	3214      	adds	r2, #20
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d002      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x54>
 8002c6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c6e:	e003      	b.n	8002c78 <HAL_DMA_Abort_IT+0x5c>
 8002c70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c74:	e000      	b.n	8002c78 <HAL_DMA_Abort_IT+0x5c>
 8002c76:	2201      	movs	r2, #1
 8002c78:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <HAL_DMA_Abort_IT+0x94>)
 8002c7a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002c82:	2300      	movs	r3, #0
 8002c84:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002c88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002c8a:	b16b      	cbz	r3, 8002ca8 <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 8002c8c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002c8e:	2000      	movs	r0, #0
 8002c90:	e7cd      	b.n	8002c2e <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c92:	2210      	movs	r2, #16
 8002c94:	e7f0      	b.n	8002c78 <HAL_DMA_Abort_IT+0x5c>
 8002c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c9a:	e7ed      	b.n	8002c78 <HAL_DMA_Abort_IT+0x5c>
 8002c9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ca0:	e7ea      	b.n	8002c78 <HAL_DMA_Abort_IT+0x5c>
 8002ca2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ca6:	e7e7      	b.n	8002c78 <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8002ca8:	2000      	movs	r0, #0
 8002caa:	e7c0      	b.n	8002c2e <HAL_DMA_Abort_IT+0x12>
 8002cac:	40020008 	.word	0x40020008
 8002cb0:	40020000 	.word	0x40020000

08002cb4 <HAL_DMA_IRQHandler>:
{
 8002cb4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cb6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002cb8:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002cba:	6804      	ldr	r4, [r0, #0]
 8002cbc:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cbe:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	408b      	lsls	r3, r1
 8002cc4:	4213      	tst	r3, r2
 8002cc6:	d035      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x80>
 8002cc8:	f015 0f04 	tst.w	r5, #4
 8002ccc:	d032      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	f013 0f20 	tst.w	r3, #32
 8002cd4:	d103      	bne.n	8002cde <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cde:	6803      	ldr	r3, [r0, #0]
 8002ce0:	4a43      	ldr	r2, [pc, #268]	@ (8002df0 <HAL_DMA_IRQHandler+0x13c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d014      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x5c>
 8002ce6:	3214      	adds	r2, #20
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d018      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x6a>
 8002cec:	3214      	adds	r2, #20
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d017      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x6e>
 8002cf2:	3214      	adds	r2, #20
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d017      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x74>
 8002cf8:	3214      	adds	r2, #20
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d017      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x7a>
 8002cfe:	3214      	adds	r2, #20
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d002      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x56>
 8002d04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d08:	e003      	b.n	8002d12 <HAL_DMA_IRQHandler+0x5e>
 8002d0a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_IRQHandler+0x5e>
 8002d10:	2204      	movs	r2, #4
 8002d12:	4b38      	ldr	r3, [pc, #224]	@ (8002df4 <HAL_DMA_IRQHandler+0x140>)
 8002d14:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002d16:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002d18:	b103      	cbz	r3, 8002d1c <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8002d1a:	4798      	blx	r3
}
 8002d1c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d1e:	2240      	movs	r2, #64	@ 0x40
 8002d20:	e7f7      	b.n	8002d12 <HAL_DMA_IRQHandler+0x5e>
 8002d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d26:	e7f4      	b.n	8002d12 <HAL_DMA_IRQHandler+0x5e>
 8002d28:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d2c:	e7f1      	b.n	8002d12 <HAL_DMA_IRQHandler+0x5e>
 8002d2e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002d32:	e7ee      	b.n	8002d12 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d34:	2302      	movs	r3, #2
 8002d36:	408b      	lsls	r3, r1
 8002d38:	4213      	tst	r3, r2
 8002d3a:	d03c      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x102>
 8002d3c:	f015 0f02 	tst.w	r5, #2
 8002d40:	d039      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f013 0f20 	tst.w	r3, #32
 8002d48:	d106      	bne.n	8002d58 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f023 030a 	bic.w	r3, r3, #10
 8002d50:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d58:	6803      	ldr	r3, [r0, #0]
 8002d5a:	4a25      	ldr	r2, [pc, #148]	@ (8002df0 <HAL_DMA_IRQHandler+0x13c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d014      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xd6>
 8002d60:	3214      	adds	r2, #20
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01c      	beq.n	8002da0 <HAL_DMA_IRQHandler+0xec>
 8002d66:	3214      	adds	r2, #20
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d01b      	beq.n	8002da4 <HAL_DMA_IRQHandler+0xf0>
 8002d6c:	3214      	adds	r2, #20
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01b      	beq.n	8002daa <HAL_DMA_IRQHandler+0xf6>
 8002d72:	3214      	adds	r2, #20
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d01b      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xfc>
 8002d78:	3214      	adds	r2, #20
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d002      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xd0>
 8002d7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d82:	e003      	b.n	8002d8c <HAL_DMA_IRQHandler+0xd8>
 8002d84:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002d88:	e000      	b.n	8002d8c <HAL_DMA_IRQHandler+0xd8>
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_DMA_IRQHandler+0x140>)
 8002d8e:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002d90:	2300      	movs	r3, #0
 8002d92:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002d96:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0bf      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8002d9c:	4798      	blx	r3
 8002d9e:	e7bd      	b.n	8002d1c <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002da0:	2220      	movs	r2, #32
 8002da2:	e7f3      	b.n	8002d8c <HAL_DMA_IRQHandler+0xd8>
 8002da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da8:	e7f0      	b.n	8002d8c <HAL_DMA_IRQHandler+0xd8>
 8002daa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dae:	e7ed      	b.n	8002d8c <HAL_DMA_IRQHandler+0xd8>
 8002db0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002db4:	e7ea      	b.n	8002d8c <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002db6:	2308      	movs	r3, #8
 8002db8:	408b      	lsls	r3, r1
 8002dba:	4213      	tst	r3, r2
 8002dbc:	d0ae      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x68>
 8002dbe:	f015 0f08 	tst.w	r5, #8
 8002dc2:	d0ab      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	f023 030e 	bic.w	r3, r3, #14
 8002dca:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dcc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002dce:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	fa03 f202 	lsl.w	r2, r3, r2
 8002dd6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dd8:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002dda:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002dde:	2300      	movs	r3, #0
 8002de0:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002de4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d098      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8002dea:	4798      	blx	r3
  return;
 8002dec:	e796      	b.n	8002d1c <HAL_DMA_IRQHandler+0x68>
 8002dee:	bf00      	nop
 8002df0:	40020008 	.word	0x40020008
 8002df4:	40020000 	.word	0x40020000

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dfc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002dfe:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e00:	e0a1      	b.n	8002f46 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e02:	4d7e      	ldr	r5, [pc, #504]	@ (8002ffc <HAL_GPIO_Init+0x204>)
 8002e04:	42ab      	cmp	r3, r5
 8002e06:	d014      	beq.n	8002e32 <HAL_GPIO_Init+0x3a>
 8002e08:	d80c      	bhi.n	8002e24 <HAL_GPIO_Init+0x2c>
 8002e0a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002e0e:	42ab      	cmp	r3, r5
 8002e10:	d00f      	beq.n	8002e32 <HAL_GPIO_Init+0x3a>
 8002e12:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8002e16:	42ab      	cmp	r3, r5
 8002e18:	d00b      	beq.n	8002e32 <HAL_GPIO_Init+0x3a>
 8002e1a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002e1e:	42ab      	cmp	r3, r5
 8002e20:	d110      	bne.n	8002e44 <HAL_GPIO_Init+0x4c>
 8002e22:	e006      	b.n	8002e32 <HAL_GPIO_Init+0x3a>
 8002e24:	4d76      	ldr	r5, [pc, #472]	@ (8003000 <HAL_GPIO_Init+0x208>)
 8002e26:	42ab      	cmp	r3, r5
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x3a>
 8002e2a:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8002e2e:	42ab      	cmp	r3, r5
 8002e30:	d108      	bne.n	8002e44 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e32:	688b      	ldr	r3, [r1, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d050      	beq.n	8002eda <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d049      	beq.n	8002ed0 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002e3c:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e3e:	2408      	movs	r4, #8
 8002e40:	e000      	b.n	8002e44 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e42:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e44:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8002e48:	d849      	bhi.n	8002ede <HAL_GPIO_Init+0xe6>
 8002e4a:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e4c:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e50:	6833      	ldr	r3, [r6, #0]
 8002e52:	250f      	movs	r5, #15
 8002e54:	4095      	lsls	r5, r2
 8002e56:	ea23 0305 	bic.w	r3, r3, r5
 8002e5a:	fa04 f202 	lsl.w	r2, r4, r2
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e62:	684b      	ldr	r3, [r1, #4]
 8002e64:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002e68:	d06b      	beq.n	8002f42 <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e6a:	4b66      	ldr	r3, [pc, #408]	@ (8003004 <HAL_GPIO_Init+0x20c>)
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	619a      	str	r2, [r3, #24]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002e7e:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8002e82:	1c95      	adds	r5, r2, #2
 8002e84:	4b60      	ldr	r3, [pc, #384]	@ (8003008 <HAL_GPIO_Init+0x210>)
 8002e86:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e8a:	f00c 0503 	and.w	r5, ip, #3
 8002e8e:	00ad      	lsls	r5, r5, #2
 8002e90:	230f      	movs	r3, #15
 8002e92:	40ab      	lsls	r3, r5
 8002e94:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e98:	4b5c      	ldr	r3, [pc, #368]	@ (800300c <HAL_GPIO_Init+0x214>)
 8002e9a:	4298      	cmp	r0, r3
 8002e9c:	d026      	beq.n	8002eec <HAL_GPIO_Init+0xf4>
 8002e9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	f000 808c 	beq.w	8002fc0 <HAL_GPIO_Init+0x1c8>
 8002ea8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002eac:	4298      	cmp	r0, r3
 8002eae:	f000 8089 	beq.w	8002fc4 <HAL_GPIO_Init+0x1cc>
 8002eb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002eb6:	4298      	cmp	r0, r3
 8002eb8:	d016      	beq.n	8002ee8 <HAL_GPIO_Init+0xf0>
 8002eba:	2304      	movs	r3, #4
 8002ebc:	e017      	b.n	8002eee <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ebe:	68cc      	ldr	r4, [r1, #12]
 8002ec0:	3404      	adds	r4, #4
          break;
 8002ec2:	e7bf      	b.n	8002e44 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ec4:	68cc      	ldr	r4, [r1, #12]
 8002ec6:	3408      	adds	r4, #8
          break;
 8002ec8:	e7bc      	b.n	8002e44 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002eca:	68cc      	ldr	r4, [r1, #12]
 8002ecc:	340c      	adds	r4, #12
          break;
 8002ece:	e7b9      	b.n	8002e44 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8002ed0:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed2:	2408      	movs	r4, #8
 8002ed4:	e7b6      	b.n	8002e44 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ed6:	2400      	movs	r4, #0
 8002ed8:	e7b4      	b.n	8002e44 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eda:	2404      	movs	r4, #4
 8002edc:	e7b2      	b.n	8002e44 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ede:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ee0:	f1ac 0208 	sub.w	r2, ip, #8
 8002ee4:	0092      	lsls	r2, r2, #2
 8002ee6:	e7b3      	b.n	8002e50 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e000      	b.n	8002eee <HAL_GPIO_Init+0xf6>
 8002eec:	2300      	movs	r3, #0
 8002eee:	40ab      	lsls	r3, r5
 8002ef0:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8002ef2:	3202      	adds	r2, #2
 8002ef4:	4d44      	ldr	r5, [pc, #272]	@ (8003008 <HAL_GPIO_Init+0x210>)
 8002ef6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002efa:	684b      	ldr	r3, [r1, #4]
 8002efc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002f00:	d062      	beq.n	8002fc8 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f02:	4a43      	ldr	r2, [pc, #268]	@ (8003010 <HAL_GPIO_Init+0x218>)
 8002f04:	6893      	ldr	r3, [r2, #8]
 8002f06:	ea43 030e 	orr.w	r3, r3, lr
 8002f0a:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f0c:	684b      	ldr	r3, [r1, #4]
 8002f0e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002f12:	d05f      	beq.n	8002fd4 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f14:	4a3e      	ldr	r2, [pc, #248]	@ (8003010 <HAL_GPIO_Init+0x218>)
 8002f16:	68d3      	ldr	r3, [r2, #12]
 8002f18:	ea43 030e 	orr.w	r3, r3, lr
 8002f1c:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f1e:	684b      	ldr	r3, [r1, #4]
 8002f20:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002f24:	d05c      	beq.n	8002fe0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f26:	4a3a      	ldr	r2, [pc, #232]	@ (8003010 <HAL_GPIO_Init+0x218>)
 8002f28:	6853      	ldr	r3, [r2, #4]
 8002f2a:	ea43 030e 	orr.w	r3, r3, lr
 8002f2e:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f30:	684b      	ldr	r3, [r1, #4]
 8002f32:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002f36:	d059      	beq.n	8002fec <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f38:	4a35      	ldr	r2, [pc, #212]	@ (8003010 <HAL_GPIO_Init+0x218>)
 8002f3a:	6813      	ldr	r3, [r2, #0]
 8002f3c:	ea43 030e 	orr.w	r3, r3, lr
 8002f40:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8002f42:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f46:	680b      	ldr	r3, [r1, #0]
 8002f48:	fa33 f20c 	lsrs.w	r2, r3, ip
 8002f4c:	d054      	beq.n	8002ff8 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8002f4e:	2201      	movs	r2, #1
 8002f50:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f54:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8002f58:	ea32 0303 	bics.w	r3, r2, r3
 8002f5c:	d1f1      	bne.n	8002f42 <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8002f5e:	684b      	ldr	r3, [r1, #4]
 8002f60:	2b12      	cmp	r3, #18
 8002f62:	f63f af4e 	bhi.w	8002e02 <HAL_GPIO_Init+0xa>
 8002f66:	2b12      	cmp	r3, #18
 8002f68:	f63f af6c 	bhi.w	8002e44 <HAL_GPIO_Init+0x4c>
 8002f6c:	a501      	add	r5, pc, #4	@ (adr r5, 8002f74 <HAL_GPIO_Init+0x17c>)
 8002f6e:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002e33 	.word	0x08002e33
 8002f78:	08002e43 	.word	0x08002e43
 8002f7c:	08002ec5 	.word	0x08002ec5
 8002f80:	08002ed7 	.word	0x08002ed7
 8002f84:	08002e45 	.word	0x08002e45
 8002f88:	08002e45 	.word	0x08002e45
 8002f8c:	08002e45 	.word	0x08002e45
 8002f90:	08002e45 	.word	0x08002e45
 8002f94:	08002e45 	.word	0x08002e45
 8002f98:	08002e45 	.word	0x08002e45
 8002f9c:	08002e45 	.word	0x08002e45
 8002fa0:	08002e45 	.word	0x08002e45
 8002fa4:	08002e45 	.word	0x08002e45
 8002fa8:	08002e45 	.word	0x08002e45
 8002fac:	08002e45 	.word	0x08002e45
 8002fb0:	08002e45 	.word	0x08002e45
 8002fb4:	08002e45 	.word	0x08002e45
 8002fb8:	08002ebf 	.word	0x08002ebf
 8002fbc:	08002ecb 	.word	0x08002ecb
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e794      	b.n	8002eee <HAL_GPIO_Init+0xf6>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e792      	b.n	8002eee <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fc8:	4a11      	ldr	r2, [pc, #68]	@ (8003010 <HAL_GPIO_Init+0x218>)
 8002fca:	6893      	ldr	r3, [r2, #8]
 8002fcc:	ea23 030e 	bic.w	r3, r3, lr
 8002fd0:	6093      	str	r3, [r2, #8]
 8002fd2:	e79b      	b.n	8002f0c <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003010 <HAL_GPIO_Init+0x218>)
 8002fd6:	68d3      	ldr	r3, [r2, #12]
 8002fd8:	ea23 030e 	bic.w	r3, r3, lr
 8002fdc:	60d3      	str	r3, [r2, #12]
 8002fde:	e79e      	b.n	8002f1e <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8003010 <HAL_GPIO_Init+0x218>)
 8002fe2:	6853      	ldr	r3, [r2, #4]
 8002fe4:	ea23 030e 	bic.w	r3, r3, lr
 8002fe8:	6053      	str	r3, [r2, #4]
 8002fea:	e7a1      	b.n	8002f30 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fec:	4a08      	ldr	r2, [pc, #32]	@ (8003010 <HAL_GPIO_Init+0x218>)
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	ea23 030e 	bic.w	r3, r3, lr
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e7a4      	b.n	8002f42 <HAL_GPIO_Init+0x14a>
  }
}
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	10220000 	.word	0x10220000
 8003000:	10310000 	.word	0x10310000
 8003004:	40021000 	.word	0x40021000
 8003008:	40010000 	.word	0x40010000
 800300c:	40010800 	.word	0x40010800
 8003010:	40010400 	.word	0x40010400

08003014 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003014:	6883      	ldr	r3, [r0, #8]
 8003016:	4219      	tst	r1, r3
 8003018:	d001      	beq.n	800301e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800301a:	2001      	movs	r0, #1
 800301c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800301e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003020:	4770      	bx	lr

08003022 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003022:	b10a      	cbz	r2, 8003028 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003024:	6101      	str	r1, [r0, #16]
 8003026:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003028:	0409      	lsls	r1, r1, #16
 800302a:	6101      	str	r1, [r0, #16]
  }
}
 800302c:	4770      	bx	lr
	...

08003030 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003030:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003032:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <RCC_Delay+0x24>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a08      	ldr	r2, [pc, #32]	@ (8003058 <RCC_Delay+0x28>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	0a5b      	lsrs	r3, r3, #9
 800303e:	fb00 f303 	mul.w	r3, r0, r3
 8003042:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003044:	bf00      	nop
  }
  while (Delay --);
 8003046:	9b01      	ldr	r3, [sp, #4]
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	9201      	str	r2, [sp, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f9      	bne.n	8003044 <RCC_Delay+0x14>
}
 8003050:	b002      	add	sp, #8
 8003052:	4770      	bx	lr
 8003054:	200000a0 	.word	0x200000a0
 8003058:	10624dd3 	.word	0x10624dd3

0800305c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800305c:	2800      	cmp	r0, #0
 800305e:	f000 81f1 	beq.w	8003444 <HAL_RCC_OscConfig+0x3e8>
{
 8003062:	b570      	push	{r4, r5, r6, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003068:	6803      	ldr	r3, [r0, #0]
 800306a:	f013 0f01 	tst.w	r3, #1
 800306e:	d02c      	beq.n	80030ca <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003070:	4b99      	ldr	r3, [pc, #612]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b04      	cmp	r3, #4
 800307a:	d01d      	beq.n	80030b8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800307c:	4b96      	ldr	r3, [pc, #600]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d012      	beq.n	80030ae <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308e:	d041      	beq.n	8003114 <HAL_RCC_OscConfig+0xb8>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d155      	bne.n	8003140 <HAL_RCC_OscConfig+0xe4>
 8003094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003098:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e037      	b.n	800311e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ae:	4b8a      	ldr	r3, [pc, #552]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80030b6:	d0e7      	beq.n	8003088 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b8:	4b87      	ldr	r3, [pc, #540]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_OscConfig+0x6e>
 80030c2:	6863      	ldr	r3, [r4, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 81bf 	beq.w	8003448 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	f013 0f02 	tst.w	r3, #2
 80030d0:	d075      	beq.n	80031be <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d2:	4b81      	ldr	r3, [pc, #516]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f013 0f0c 	tst.w	r3, #12
 80030da:	d05f      	beq.n	800319c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030dc:	4b7e      	ldr	r3, [pc, #504]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d054      	beq.n	8003192 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e8:	6923      	ldr	r3, [r4, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 808a 	beq.w	8003204 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80030f0:	4b7a      	ldr	r3, [pc, #488]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030f6:	f7ff f96d 	bl	80023d4 <HAL_GetTick>
 80030fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	4b76      	ldr	r3, [pc, #472]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f013 0f02 	tst.w	r3, #2
 8003104:	d175      	bne.n	80031f2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003106:	f7ff f965 	bl	80023d4 <HAL_GetTick>
 800310a:	1b40      	subs	r0, r0, r5
 800310c:	2802      	cmp	r0, #2
 800310e:	d9f5      	bls.n	80030fc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003110:	2003      	movs	r0, #3
 8003112:	e19e      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003114:	4a70      	ldr	r2, [pc, #448]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800311e:	6863      	ldr	r3, [r4, #4]
 8003120:	b343      	cbz	r3, 8003174 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003122:	f7ff f957 	bl	80023d4 <HAL_GetTick>
 8003126:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003128:	4b6b      	ldr	r3, [pc, #428]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003130:	d1cb      	bne.n	80030ca <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003132:	f7ff f94f 	bl	80023d4 <HAL_GetTick>
 8003136:	1b40      	subs	r0, r0, r5
 8003138:	2864      	cmp	r0, #100	@ 0x64
 800313a:	d9f5      	bls.n	8003128 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800313c:	2003      	movs	r0, #3
 800313e:	e188      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003144:	d009      	beq.n	800315a <HAL_RCC_OscConfig+0xfe>
 8003146:	4b64      	ldr	r3, [pc, #400]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e7e1      	b.n	800311e <HAL_RCC_OscConfig+0xc2>
 800315a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800315e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e7d4      	b.n	800311e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003174:	f7ff f92e 	bl	80023d4 <HAL_GetTick>
 8003178:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b57      	ldr	r3, [pc, #348]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003182:	d0a2      	beq.n	80030ca <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003184:	f7ff f926 	bl	80023d4 <HAL_GetTick>
 8003188:	1b40      	subs	r0, r0, r5
 800318a:	2864      	cmp	r0, #100	@ 0x64
 800318c:	d9f5      	bls.n	800317a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800318e:	2003      	movs	r0, #3
 8003190:	e15f      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003192:	4b51      	ldr	r3, [pc, #324]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800319a:	d1a5      	bne.n	80030e8 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319c:	4b4e      	ldr	r3, [pc, #312]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f013 0f02 	tst.w	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_OscConfig+0x152>
 80031a6:	6923      	ldr	r3, [r4, #16]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 814f 	bne.w	800344c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4a4a      	ldr	r2, [pc, #296]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 80031b0:	6813      	ldr	r3, [r2, #0]
 80031b2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031b6:	6961      	ldr	r1, [r4, #20]
 80031b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031bc:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	f013 0f08 	tst.w	r3, #8
 80031c4:	d033      	beq.n	800322e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c6:	69a3      	ldr	r3, [r4, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05c      	beq.n	8003286 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80031cc:	4b43      	ldr	r3, [pc, #268]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80031d4:	f7ff f8fe 	bl	80023d4 <HAL_GetTick>
 80031d8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	4b3f      	ldr	r3, [pc, #252]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	f013 0f02 	tst.w	r3, #2
 80031e2:	d121      	bne.n	8003228 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e4:	f7ff f8f6 	bl	80023d4 <HAL_GetTick>
 80031e8:	1b40      	subs	r0, r0, r5
 80031ea:	2802      	cmp	r0, #2
 80031ec:	d9f5      	bls.n	80031da <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80031ee:	2003      	movs	r0, #3
 80031f0:	e12f      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4a39      	ldr	r2, [pc, #228]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 80031f4:	6813      	ldr	r3, [r2, #0]
 80031f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031fa:	6961      	ldr	r1, [r4, #20]
 80031fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e7dc      	b.n	80031be <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003204:	4b35      	ldr	r3, [pc, #212]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800320a:	f7ff f8e3 	bl	80023d4 <HAL_GetTick>
 800320e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003210:	4b31      	ldr	r3, [pc, #196]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f013 0f02 	tst.w	r3, #2
 8003218:	d0d1      	beq.n	80031be <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321a:	f7ff f8db 	bl	80023d4 <HAL_GetTick>
 800321e:	1b40      	subs	r0, r0, r5
 8003220:	2802      	cmp	r0, #2
 8003222:	d9f5      	bls.n	8003210 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003224:	2003      	movs	r0, #3
 8003226:	e114      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003228:	2001      	movs	r0, #1
 800322a:	f7ff ff01 	bl	8003030 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	f013 0f04 	tst.w	r3, #4
 8003234:	f000 8096 	beq.w	8003364 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003238:	4b27      	ldr	r3, [pc, #156]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003240:	d134      	bne.n	80032ac <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b25      	ldr	r3, [pc, #148]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800324a:	61da      	str	r2, [r3, #28]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003256:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b21      	ldr	r3, [pc, #132]	@ (80032e0 <HAL_RCC_OscConfig+0x284>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003260:	d026      	beq.n	80032b0 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003262:	68e3      	ldr	r3, [r4, #12]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d03d      	beq.n	80032e4 <HAL_RCC_OscConfig+0x288>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d153      	bne.n	8003314 <HAL_RCC_OscConfig+0x2b8>
 800326c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003270:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	621a      	str	r2, [r3, #32]
 800327c:	6a1a      	ldr	r2, [r3, #32]
 800327e:	f022 0204 	bic.w	r2, r2, #4
 8003282:	621a      	str	r2, [r3, #32]
 8003284:	e033      	b.n	80032ee <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8003286:	4b15      	ldr	r3, [pc, #84]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003288:	2200      	movs	r2, #0
 800328a:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800328e:	f7ff f8a1 	bl	80023d4 <HAL_GetTick>
 8003292:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <HAL_RCC_OscConfig+0x27c>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	f013 0f02 	tst.w	r3, #2
 800329c:	d0c7      	beq.n	800322e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329e:	f7ff f899 	bl	80023d4 <HAL_GetTick>
 80032a2:	1b40      	subs	r0, r0, r5
 80032a4:	2802      	cmp	r0, #2
 80032a6:	d9f5      	bls.n	8003294 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80032a8:	2003      	movs	r0, #3
 80032aa:	e0d2      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80032ac:	2500      	movs	r5, #0
 80032ae:	e7d3      	b.n	8003258 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b0:	4a0b      	ldr	r2, [pc, #44]	@ (80032e0 <HAL_RCC_OscConfig+0x284>)
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032ba:	f7ff f88b 	bl	80023d4 <HAL_GetTick>
 80032be:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <HAL_RCC_OscConfig+0x284>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80032c8:	d1cb      	bne.n	8003262 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ca:	f7ff f883 	bl	80023d4 <HAL_GetTick>
 80032ce:	1b80      	subs	r0, r0, r6
 80032d0:	2864      	cmp	r0, #100	@ 0x64
 80032d2:	d9f5      	bls.n	80032c0 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80032d4:	2003      	movs	r0, #3
 80032d6:	e0bc      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
 80032d8:	40021000 	.word	0x40021000
 80032dc:	42420000 	.word	0x42420000
 80032e0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e4:	4a5f      	ldr	r2, [pc, #380]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 80032e6:	6a13      	ldr	r3, [r2, #32]
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ee:	68e3      	ldr	r3, [r4, #12]
 80032f0:	b333      	cbz	r3, 8003340 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80032f2:	f7ff f86f 	bl	80023d4 <HAL_GetTick>
 80032f6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f013 0f02 	tst.w	r3, #2
 8003300:	d12f      	bne.n	8003362 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7ff f867 	bl	80023d4 <HAL_GetTick>
 8003306:	1b80      	subs	r0, r0, r6
 8003308:	f241 3388 	movw	r3, #5000	@ 0x1388
 800330c:	4298      	cmp	r0, r3
 800330e:	d9f3      	bls.n	80032f8 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8003310:	2003      	movs	r0, #3
 8003312:	e09e      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	2b05      	cmp	r3, #5
 8003316:	d009      	beq.n	800332c <HAL_RCC_OscConfig+0x2d0>
 8003318:	4b52      	ldr	r3, [pc, #328]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	621a      	str	r2, [r3, #32]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	f022 0204 	bic.w	r2, r2, #4
 8003328:	621a      	str	r2, [r3, #32]
 800332a:	e7e0      	b.n	80032ee <HAL_RCC_OscConfig+0x292>
 800332c:	4b4d      	ldr	r3, [pc, #308]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	f042 0204 	orr.w	r2, r2, #4
 8003334:	621a      	str	r2, [r3, #32]
 8003336:	6a1a      	ldr	r2, [r3, #32]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	621a      	str	r2, [r3, #32]
 800333e:	e7d6      	b.n	80032ee <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8003340:	f7ff f848 	bl	80023d4 <HAL_GetTick>
 8003344:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003346:	4b47      	ldr	r3, [pc, #284]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f013 0f02 	tst.w	r3, #2
 800334e:	d008      	beq.n	8003362 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7ff f840 	bl	80023d4 <HAL_GetTick>
 8003354:	1b80      	subs	r0, r0, r6
 8003356:	f241 3388 	movw	r3, #5000	@ 0x1388
 800335a:	4298      	cmp	r0, r3
 800335c:	d9f3      	bls.n	8003346 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800335e:	2003      	movs	r0, #3
 8003360:	e077      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8003362:	b9e5      	cbnz	r5, 800339e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003364:	69e3      	ldr	r3, [r4, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d072      	beq.n	8003450 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336a:	4a3e      	ldr	r2, [pc, #248]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 800336c:	6852      	ldr	r2, [r2, #4]
 800336e:	f002 020c 	and.w	r2, r2, #12
 8003372:	2a08      	cmp	r2, #8
 8003374:	d056      	beq.n	8003424 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003376:	2b02      	cmp	r3, #2
 8003378:	d017      	beq.n	80033aa <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b3b      	ldr	r3, [pc, #236]	@ (8003468 <HAL_RCC_OscConfig+0x40c>)
 800337c:	2200      	movs	r2, #0
 800337e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003380:	f7ff f828 	bl	80023d4 <HAL_GetTick>
 8003384:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003386:	4b37      	ldr	r3, [pc, #220]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800338e:	d047      	beq.n	8003420 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003390:	f7ff f820 	bl	80023d4 <HAL_GetTick>
 8003394:	1b00      	subs	r0, r0, r4
 8003396:	2802      	cmp	r0, #2
 8003398:	d9f5      	bls.n	8003386 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800339a:	2003      	movs	r0, #3
 800339c:	e059      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4a31      	ldr	r2, [pc, #196]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 80033a0:	69d3      	ldr	r3, [r2, #28]
 80033a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	61d3      	str	r3, [r2, #28]
 80033a8:	e7dc      	b.n	8003364 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003468 <HAL_RCC_OscConfig+0x40c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80033b0:	f7ff f810 	bl	80023d4 <HAL_GetTick>
 80033b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80033be:	d006      	beq.n	80033ce <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7ff f808 	bl	80023d4 <HAL_GetTick>
 80033c4:	1b40      	subs	r0, r0, r5
 80033c6:	2802      	cmp	r0, #2
 80033c8:	d9f5      	bls.n	80033b6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80033ca:	2003      	movs	r0, #3
 80033cc:	e041      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033ce:	6a23      	ldr	r3, [r4, #32]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d4:	d01a      	beq.n	800340c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d6:	4923      	ldr	r1, [pc, #140]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 80033d8:	684b      	ldr	r3, [r1, #4]
 80033da:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80033de:	6a22      	ldr	r2, [r4, #32]
 80033e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80033e2:	4302      	orrs	r2, r0
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80033e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003468 <HAL_RCC_OscConfig+0x40c>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80033ee:	f7fe fff1 	bl	80023d4 <HAL_GetTick>
 80033f2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80033fc:	d10e      	bne.n	800341c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fe ffe9 	bl	80023d4 <HAL_GetTick>
 8003402:	1b00      	subs	r0, r0, r4
 8003404:	2802      	cmp	r0, #2
 8003406:	d9f5      	bls.n	80033f4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003408:	2003      	movs	r0, #3
 800340a:	e022      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800340c:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 800340e:	6853      	ldr	r3, [r2, #4]
 8003410:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003414:	68a1      	ldr	r1, [r4, #8]
 8003416:	430b      	orrs	r3, r1
 8003418:	6053      	str	r3, [r2, #4]
 800341a:	e7dc      	b.n	80033d6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800341c:	2000      	movs	r0, #0
 800341e:	e018      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
 8003420:	2000      	movs	r0, #0
 8003422:	e016      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003424:	2b01      	cmp	r3, #1
 8003426:	d016      	beq.n	8003456 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003428:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <HAL_RCC_OscConfig+0x408>)
 800342a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342c:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8003430:	6a22      	ldr	r2, [r4, #32]
 8003432:	4291      	cmp	r1, r2
 8003434:	d111      	bne.n	800345a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003436:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800343a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343c:	4293      	cmp	r3, r2
 800343e:	d10e      	bne.n	800345e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8003440:	2000      	movs	r0, #0
 8003442:	e006      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8003444:	2001      	movs	r0, #1
}
 8003446:	4770      	bx	lr
        return HAL_ERROR;
 8003448:	2001      	movs	r0, #1
 800344a:	e002      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800344c:	2001      	movs	r0, #1
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8003450:	2000      	movs	r0, #0
}
 8003452:	b002      	add	sp, #8
 8003454:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003456:	2001      	movs	r0, #1
 8003458:	e7fb      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800345a:	2001      	movs	r0, #1
 800345c:	e7f9      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
 800345e:	2001      	movs	r0, #1
 8003460:	e7f7      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	42420000 	.word	0x42420000

0800346c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800346c:	4b0f      	ldr	r3, [pc, #60]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x40>)
 800346e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003470:	f003 020c 	and.w	r2, r3, #12
 8003474:	2a08      	cmp	r2, #8
 8003476:	d001      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003478:	480d      	ldr	r0, [pc, #52]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800347a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800347c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003480:	490c      	ldr	r1, [pc, #48]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x48>)
 8003482:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003484:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003488:	d00b      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x40>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003496:	4a06      	ldr	r2, [pc, #24]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x44>)
 8003498:	fb02 f000 	mul.w	r0, r2, r0
 800349c:	fbb0 f0f3 	udiv	r0, r0, r3
 80034a0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034a2:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x50>)
 80034a4:	fb03 f000 	mul.w	r0, r3, r0
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	007a1200 	.word	0x007a1200
 80034b4:	08005290 	.word	0x08005290
 80034b8:	0800528c 	.word	0x0800528c
 80034bc:	003d0900 	.word	0x003d0900

080034c0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80034c0:	2800      	cmp	r0, #0
 80034c2:	f000 80a0 	beq.w	8003606 <HAL_RCC_ClockConfig+0x146>
{
 80034c6:	b570      	push	{r4, r5, r6, lr}
 80034c8:	460d      	mov	r5, r1
 80034ca:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b52      	ldr	r3, [pc, #328]	@ (8003618 <HAL_RCC_ClockConfig+0x158>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	428b      	cmp	r3, r1
 80034d6:	d20b      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003618 <HAL_RCC_ClockConfig+0x158>)
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	f023 0307 	bic.w	r3, r3, #7
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e4:	6813      	ldr	r3, [r2, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	428b      	cmp	r3, r1
 80034ec:	f040 808d 	bne.w	800360a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	f013 0f02 	tst.w	r3, #2
 80034f6:	d017      	beq.n	8003528 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	f013 0f04 	tst.w	r3, #4
 80034fc:	d004      	beq.n	8003508 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034fe:	4a47      	ldr	r2, [pc, #284]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 8003500:	6853      	ldr	r3, [r2, #4]
 8003502:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003506:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	f013 0f08 	tst.w	r3, #8
 800350e:	d004      	beq.n	800351a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003510:	4a42      	ldr	r2, [pc, #264]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 8003512:	6853      	ldr	r3, [r2, #4]
 8003514:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003518:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351a:	4a40      	ldr	r2, [pc, #256]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 800351c:	6853      	ldr	r3, [r2, #4]
 800351e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003522:	68a1      	ldr	r1, [r4, #8]
 8003524:	430b      	orrs	r3, r1
 8003526:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	f013 0f01 	tst.w	r3, #1
 800352e:	d031      	beq.n	8003594 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003530:	6863      	ldr	r3, [r4, #4]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d020      	beq.n	8003578 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003536:	2b02      	cmp	r3, #2
 8003538:	d025      	beq.n	8003586 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4a38      	ldr	r2, [pc, #224]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	f012 0f02 	tst.w	r2, #2
 8003542:	d064      	beq.n	800360e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003544:	4935      	ldr	r1, [pc, #212]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 8003546:	684a      	ldr	r2, [r1, #4]
 8003548:	f022 0203 	bic.w	r2, r2, #3
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003550:	f7fe ff40 	bl	80023d4 <HAL_GetTick>
 8003554:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b31      	ldr	r3, [pc, #196]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	6862      	ldr	r2, [r4, #4]
 8003560:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003564:	d016      	beq.n	8003594 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003566:	f7fe ff35 	bl	80023d4 <HAL_GetTick>
 800356a:	1b80      	subs	r0, r0, r6
 800356c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003570:	4298      	cmp	r0, r3
 8003572:	d9f0      	bls.n	8003556 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003574:	2003      	movs	r0, #3
 8003576:	e045      	b.n	8003604 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003578:	4a28      	ldr	r2, [pc, #160]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003580:	d1e0      	bne.n	8003544 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003582:	2001      	movs	r0, #1
 8003584:	e03e      	b.n	8003604 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003586:	4a25      	ldr	r2, [pc, #148]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800358e:	d1d9      	bne.n	8003544 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003590:	2001      	movs	r0, #1
 8003592:	e037      	b.n	8003604 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <HAL_RCC_ClockConfig+0x158>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	42ab      	cmp	r3, r5
 800359e:	d90a      	bls.n	80035b6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <HAL_RCC_ClockConfig+0x158>)
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	f023 0307 	bic.w	r3, r3, #7
 80035a8:	432b      	orrs	r3, r5
 80035aa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ac:	6813      	ldr	r3, [r2, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	42ab      	cmp	r3, r5
 80035b4:	d12d      	bne.n	8003612 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	f013 0f04 	tst.w	r3, #4
 80035bc:	d006      	beq.n	80035cc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035be:	4a17      	ldr	r2, [pc, #92]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 80035c0:	6853      	ldr	r3, [r2, #4]
 80035c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80035c6:	68e1      	ldr	r1, [r4, #12]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f013 0f08 	tst.w	r3, #8
 80035d2:	d007      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d4:	4a11      	ldr	r2, [pc, #68]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 80035d6:	6853      	ldr	r3, [r2, #4]
 80035d8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80035dc:	6921      	ldr	r1, [r4, #16]
 80035de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035e2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e4:	f7ff ff42 	bl	800346c <HAL_RCC_GetSysClockFreq>
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <HAL_RCC_ClockConfig+0x15c>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80035f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003620 <HAL_RCC_ClockConfig+0x160>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	40d8      	lsrs	r0, r3
 80035f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <HAL_RCC_ClockConfig+0x164>)
 80035f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <HAL_RCC_ClockConfig+0x168>)
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	f7fe fea5 	bl	800234c <HAL_InitTick>
  return HAL_OK;
 8003602:	2000      	movs	r0, #0
}
 8003604:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003606:	2001      	movs	r0, #1
}
 8003608:	4770      	bx	lr
    return HAL_ERROR;
 800360a:	2001      	movs	r0, #1
 800360c:	e7fa      	b.n	8003604 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800360e:	2001      	movs	r0, #1
 8003610:	e7f8      	b.n	8003604 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8003612:	2001      	movs	r0, #1
 8003614:	e7f6      	b.n	8003604 <HAL_RCC_ClockConfig+0x144>
 8003616:	bf00      	nop
 8003618:	40022000 	.word	0x40022000
 800361c:	40021000 	.word	0x40021000
 8003620:	0800527c 	.word	0x0800527c
 8003624:	200000a0 	.word	0x200000a0
 8003628:	200000a8 	.word	0x200000a8

0800362c <HAL_RCC_GetHCLKFreq>:
}
 800362c:	4b01      	ldr	r3, [pc, #4]	@ (8003634 <HAL_RCC_GetHCLKFreq+0x8>)
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	200000a0 	.word	0x200000a0

08003638 <HAL_RCC_GetPCLK1Freq>:
{
 8003638:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800363a:	f7ff fff7 	bl	800362c <HAL_RCC_GetHCLKFreq>
 800363e:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003646:	4a03      	ldr	r2, [pc, #12]	@ (8003654 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003648:	5cd3      	ldrb	r3, [r2, r3]
}
 800364a:	40d8      	lsrs	r0, r3
 800364c:	bd08      	pop	{r3, pc}
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	08005274 	.word	0x08005274

08003658 <HAL_RCC_GetPCLK2Freq>:
{
 8003658:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800365a:	f7ff ffe7 	bl	800362c <HAL_RCC_GetHCLKFreq>
 800365e:	4b04      	ldr	r3, [pc, #16]	@ (8003670 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003666:	4a03      	ldr	r2, [pc, #12]	@ (8003674 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003668:	5cd3      	ldrb	r3, [r2, r3]
}
 800366a:	40d8      	lsrs	r0, r3
 800366c:	bd08      	pop	{r3, pc}
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	08005274 	.word	0x08005274

08003678 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800367e:	6803      	ldr	r3, [r0, #0]
 8003680:	f013 0f01 	tst.w	r3, #1
 8003684:	d036      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b3f      	ldr	r3, [pc, #252]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800368e:	d149      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	4b3c      	ldr	r3, [pc, #240]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003698:	61da      	str	r2, [r3, #28]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036a4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	4b38      	ldr	r3, [pc, #224]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80036ae:	d03b      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b0:	4b34      	ldr	r3, [pc, #208]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80036b8:	d013      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80036ba:	6862      	ldr	r2, [r4, #4]
 80036bc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d00e      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80036c6:	6a13      	ldr	r3, [r2, #32]
 80036c8:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036cc:	492f      	ldr	r1, [pc, #188]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80036ce:	2601      	movs	r6, #1
 80036d0:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d4:	2600      	movs	r6, #0
 80036d6:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036da:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036dc:	f013 0f01 	tst.w	r3, #1
 80036e0:	d136      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e2:	4a28      	ldr	r2, [pc, #160]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80036e4:	6a13      	ldr	r3, [r2, #32]
 80036e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ea:	6861      	ldr	r1, [r4, #4]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	d13e      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	f013 0f02 	tst.w	r3, #2
 80036fa:	d006      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036fc:	4a21      	ldr	r2, [pc, #132]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80036fe:	6853      	ldr	r3, [r2, #4]
 8003700:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003704:	68a1      	ldr	r1, [r4, #8]
 8003706:	430b      	orrs	r3, r1
 8003708:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	f013 0f10 	tst.w	r3, #16
 8003710:	d034      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003712:	4a1c      	ldr	r2, [pc, #112]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003714:	6853      	ldr	r3, [r2, #4]
 8003716:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800371a:	68e1      	ldr	r1, [r4, #12]
 800371c:	430b      	orrs	r3, r1
 800371e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003720:	2000      	movs	r0, #0
 8003722:	e02c      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8003724:	2500      	movs	r5, #0
 8003726:	e7be      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003728:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003730:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003732:	f7fe fe4f 	bl	80023d4 <HAL_GetTick>
 8003736:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4b13      	ldr	r3, [pc, #76]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003740:	d1b6      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003742:	f7fe fe47 	bl	80023d4 <HAL_GetTick>
 8003746:	1b80      	subs	r0, r0, r6
 8003748:	2864      	cmp	r0, #100	@ 0x64
 800374a:	d9f5      	bls.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 800374c:	2003      	movs	r0, #3
 800374e:	e016      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8003750:	f7fe fe40 	bl	80023d4 <HAL_GetTick>
 8003754:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003756:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f013 0f02 	tst.w	r3, #2
 800375e:	d1c0      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fe fe38 	bl	80023d4 <HAL_GetTick>
 8003764:	1b80      	subs	r0, r0, r6
 8003766:	f241 3388 	movw	r3, #5000	@ 0x1388
 800376a:	4298      	cmp	r0, r3
 800376c:	d9f3      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 800376e:	2003      	movs	r0, #3
 8003770:	e005      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003772:	69d3      	ldr	r3, [r2, #28]
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003778:	61d3      	str	r3, [r2, #28]
 800377a:	e7bb      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 800377c:	2000      	movs	r0, #0
}
 800377e:	b002      	add	sp, #8
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000
 8003788:	40007000 	.word	0x40007000
 800378c:	42420000 	.word	0x42420000

08003790 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003790:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003792:	2802      	cmp	r0, #2
 8003794:	d04e      	beq.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8003796:	2810      	cmp	r0, #16
 8003798:	d003      	beq.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800379a:	2801      	cmp	r0, #1
 800379c:	d028      	beq.n	80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800379e:	2000      	movs	r0, #0
 80037a0:	e052      	b.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80037a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80037a4:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 80037ac:	d04c      	beq.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ae:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80037b2:	4928      	ldr	r1, [pc, #160]	@ (8003854 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80037b4:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037b6:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80037ba:	d015      	beq.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037bc:	4b24      	ldr	r3, [pc, #144]	@ (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80037c4:	4a24      	ldr	r2, [pc, #144]	@ (8003858 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80037c6:	5cd2      	ldrb	r2, [r2, r3]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037c8:	4b24      	ldr	r3, [pc, #144]	@ (800385c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 80037ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ce:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80037d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80037da:	d135      	bne.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80037dc:	0040      	lsls	r0, r0, #1
 80037de:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 80037e0:	fba3 3000 	umull	r3, r0, r3, r0
 80037e4:	0840      	lsrs	r0, r0, #1
 80037e6:	e02f      	b.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003864 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 80037ea:	fb03 f000 	mul.w	r0, r3, r0
 80037ee:	e7f0      	b.n	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80037f0:	4b17      	ldr	r3, [pc, #92]	@ (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037f4:	f240 3202 	movw	r2, #770	@ 0x302
 80037f8:	401a      	ands	r2, r3
 80037fa:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 80037fe:	d024      	beq.n	800384a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003808:	d004      	beq.n	8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800380a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003810:	2000      	movs	r0, #0
 8003812:	e019      	b.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003814:	4a0e      	ldr	r2, [pc, #56]	@ (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003816:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003818:	f012 0f02 	tst.w	r2, #2
 800381c:	d0f5      	beq.n	800380a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 800381e:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8003822:	e011      	b.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003824:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800382c:	d00c      	beq.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        frequency = HSE_VALUE / 128U;
 800382e:	f24f 4024 	movw	r0, #62500	@ 0xf424
    default:
    {
      break;
    }
  }
  return (frequency);
 8003832:	e009      	b.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003834:	f7ff ff10 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003840:	3301      	adds	r3, #1
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003848:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 800384a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800384e:	e7fb      	b.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8003850:	40021000 	.word	0x40021000
 8003854:	080052a4 	.word	0x080052a4
 8003858:	080052a0 	.word	0x080052a0
 800385c:	007a1200 	.word	0x007a1200
 8003860:	aaaaaaab 	.word	0xaaaaaaab
 8003864:	003d0900 	.word	0x003d0900

08003868 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	4605      	mov	r5, r0
 8003870:	4688      	mov	r8, r1
 8003872:	4617      	mov	r7, r2
 8003874:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003876:	f7fe fdad 	bl	80023d4 <HAL_GetTick>
 800387a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800387c:	1a1b      	subs	r3, r3, r0
 800387e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003882:	f7fe fda7 	bl	80023d4 <HAL_GetTick>
 8003886:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003888:	4b28      	ldr	r3, [pc, #160]	@ (800392c <SPI_WaitFlagStateUntilTimeout+0xc4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003890:	fb09 f303 	mul.w	r3, r9, r3
 8003894:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	689c      	ldr	r4, [r3, #8]
 800389a:	ea38 0404 	bics.w	r4, r8, r4
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	42bb      	cmp	r3, r7
 80038a6:	d03d      	beq.n	8003924 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038a8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80038ac:	d0f3      	beq.n	8003896 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ae:	f7fe fd91 	bl	80023d4 <HAL_GetTick>
 80038b2:	eba0 000a 	sub.w	r0, r0, sl
 80038b6:	4548      	cmp	r0, r9
 80038b8:	d207      	bcs.n	80038ca <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038ba:	9a01      	ldr	r2, [sp, #4]
 80038bc:	b102      	cbz	r2, 80038c0 <SPI_WaitFlagStateUntilTimeout+0x58>
 80038be:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80038c0:	9b01      	ldr	r3, [sp, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	4691      	mov	r9, r2
 80038c8:	e7e5      	b.n	8003896 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ca:	682a      	ldr	r2, [r5, #0]
 80038cc:	6853      	ldr	r3, [r2, #4]
 80038ce:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80038d2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	686b      	ldr	r3, [r5, #4]
 80038d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038da:	d00b      	beq.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038dc:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e2:	d014      	beq.n	800390e <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80038ea:	2300      	movs	r3, #0
 80038ec:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 80038f0:	2003      	movs	r0, #3
 80038f2:	e018      	b.n	8003926 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f4:	68ab      	ldr	r3, [r5, #8]
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038fa:	d002      	beq.n	8003902 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003900:	d1ec      	bne.n	80038dc <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8003902:	682a      	ldr	r2, [r5, #0]
 8003904:	6813      	ldr	r3, [r2, #0]
 8003906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e7e6      	b.n	80038dc <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 800390e:	682a      	ldr	r2, [r5, #0]
 8003910:	6813      	ldr	r3, [r2, #0]
 8003912:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	682a      	ldr	r2, [r5, #0]
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e7df      	b.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8003924:	2000      	movs	r0, #0
}
 8003926:	b002      	add	sp, #8
 8003928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392c:	200000a0 	.word	0x200000a0

08003930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	4606      	mov	r6, r0
 8003936:	460c      	mov	r4, r1
 8003938:	4615      	mov	r5, r2
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800393a:	9200      	str	r2, [sp, #0]
 800393c:	460b      	mov	r3, r1
 800393e:	2201      	movs	r2, #1
 8003940:	2102      	movs	r1, #2
 8003942:	f7ff ff91 	bl	8003868 <SPI_WaitFlagStateUntilTimeout>
 8003946:	b948      	cbnz	r0, 800395c <SPI_EndRxTxTransaction+0x2c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003948:	9500      	str	r5, [sp, #0]
 800394a:	4623      	mov	r3, r4
 800394c:	2200      	movs	r2, #0
 800394e:	2180      	movs	r1, #128	@ 0x80
 8003950:	4630      	mov	r0, r6
 8003952:	f7ff ff89 	bl	8003868 <SPI_WaitFlagStateUntilTimeout>
 8003956:	b938      	cbnz	r0, 8003968 <SPI_EndRxTxTransaction+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8003958:	b002      	add	sp, #8
 800395a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800395e:	f043 0320 	orr.w	r3, r3, #32
 8003962:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003964:	2003      	movs	r0, #3
 8003966:	e7f7      	b.n	8003958 <SPI_EndRxTxTransaction+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003968:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800396a:	f043 0320 	orr.w	r3, r3, #32
 800396e:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003970:	2003      	movs	r0, #3
 8003972:	e7f1      	b.n	8003958 <SPI_EndRxTxTransaction+0x28>

08003974 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003974:	2800      	cmp	r0, #0
 8003976:	d056      	beq.n	8003a26 <HAL_SPI_Init+0xb2>
{
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800397c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800397e:	b933      	cbnz	r3, 800398e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003980:	6843      	ldr	r3, [r0, #4]
 8003982:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003986:	d005      	beq.n	8003994 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003988:	2300      	movs	r3, #0
 800398a:	61c3      	str	r3, [r0, #28]
 800398c:	e002      	b.n	8003994 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003992:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003994:	2300      	movs	r3, #0
 8003996:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003998:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800399c:	2b00      	cmp	r3, #0
 800399e:	d03c      	beq.n	8003a1a <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80039a0:	2302      	movs	r3, #2
 80039a2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	6813      	ldr	r3, [r2, #0]
 80039aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ae:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80039b6:	68a2      	ldr	r2, [r4, #8]
 80039b8:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80039bc:	4313      	orrs	r3, r2
 80039be:	68e2      	ldr	r2, [r4, #12]
 80039c0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80039c4:	4313      	orrs	r3, r2
 80039c6:	6922      	ldr	r2, [r4, #16]
 80039c8:	f002 0202 	and.w	r2, r2, #2
 80039cc:	4313      	orrs	r3, r2
 80039ce:	6962      	ldr	r2, [r4, #20]
 80039d0:	f002 0201 	and.w	r2, r2, #1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	69a2      	ldr	r2, [r4, #24]
 80039d8:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80039dc:	4313      	orrs	r3, r2
 80039de:	69e2      	ldr	r2, [r4, #28]
 80039e0:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80039e4:	4313      	orrs	r3, r2
 80039e6:	6a22      	ldr	r2, [r4, #32]
 80039e8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80039ec:	4313      	orrs	r3, r2
 80039ee:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80039f0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80039f4:	6821      	ldr	r1, [r4, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80039fa:	8b63      	ldrh	r3, [r4, #26]
 80039fc:	6822      	ldr	r2, [r4, #0]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a04:	6822      	ldr	r2, [r4, #0]
 8003a06:	69d3      	ldr	r3, [r2, #28]
 8003a08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a0c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a0e:	2000      	movs	r0, #0
 8003a10:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8003a18:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003a1a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7fe f91e 	bl	8001c60 <HAL_SPI_MspInit>
 8003a24:	e7bc      	b.n	80039a0 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003a26:	2001      	movs	r0, #1
}
 8003a28:	4770      	bx	lr

08003a2a <HAL_SPI_TransmitReceive>:
{
 8003a2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	4604      	mov	r4, r0
 8003a32:	4688      	mov	r8, r1
 8003a34:	4691      	mov	r9, r2
 8003a36:	461f      	mov	r7, r3
 8003a38:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8003a3a:	f7fe fccb 	bl	80023d4 <HAL_GetTick>
 8003a3e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003a40:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003a44:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003a46:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d00a      	beq.n	8003a62 <HAL_SPI_TransmitReceive+0x38>
 8003a4c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003a50:	f040 8105 	bne.w	8003c5e <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a54:	68a2      	ldr	r2, [r4, #8]
 8003a56:	2a00      	cmp	r2, #0
 8003a58:	f040 8105 	bne.w	8003c66 <HAL_SPI_TransmitReceive+0x23c>
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	f040 8104 	bne.w	8003c6a <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a62:	f1b8 0f00 	cmp.w	r8, #0
 8003a66:	f000 8102 	beq.w	8003c6e <HAL_SPI_TransmitReceive+0x244>
 8003a6a:	f1b9 0f00 	cmp.w	r9, #0
 8003a6e:	f000 8100 	beq.w	8003c72 <HAL_SPI_TransmitReceive+0x248>
 8003a72:	2f00      	cmp	r7, #0
 8003a74:	f000 80ff 	beq.w	8003c76 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8003a78:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	f000 80fc 	beq.w	8003c7a <HAL_SPI_TransmitReceive+0x250>
 8003a82:	2301      	movs	r3, #1
 8003a84:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a88:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a92:	2305      	movs	r3, #5
 8003a94:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a9c:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003aa0:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003aa2:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003aa4:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003aa8:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003aaa:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8003aac:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003aae:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003ab8:	d103      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ac0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ac2:	68e3      	ldr	r3, [r4, #12]
 8003ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ac8:	d011      	beq.n	8003aee <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aca:	6863      	ldr	r3, [r4, #4]
 8003acc:	b10b      	cbz	r3, 8003ad2 <HAL_SPI_TransmitReceive+0xa8>
 8003ace:	2f01      	cmp	r7, #1
 8003ad0:	d10b      	bne.n	8003aea <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ad2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ada:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003adc:	3301      	adds	r3, #1
 8003ade:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ae0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003aea:	2701      	movs	r7, #1
 8003aec:	e071      	b.n	8003bd2 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aee:	6863      	ldr	r3, [r4, #4]
 8003af0:	b10b      	cbz	r3, 8003af6 <HAL_SPI_TransmitReceive+0xcc>
 8003af2:	2f01      	cmp	r7, #1
 8003af4:	d10b      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003af6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b00:	3302      	adds	r3, #2
 8003b02:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b04:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003b0e:	2701      	movs	r7, #1
 8003b10:	e01b      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	f012 0f01 	tst.w	r2, #1
 8003b1a:	d00e      	beq.n	8003b3a <HAL_SPI_TransmitReceive+0x110>
 8003b1c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	b15a      	cbz	r2, 8003b3a <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003b26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b2e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003b38:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b3a:	f7fe fc4b 	bl	80023d4 <HAL_GetTick>
 8003b3e:	1b80      	subs	r0, r0, r6
 8003b40:	42a8      	cmp	r0, r5
 8003b42:	d302      	bcc.n	8003b4a <HAL_SPI_TransmitReceive+0x120>
 8003b44:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b48:	d11e      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	b91b      	cbnz	r3, 8003b58 <HAL_SPI_TransmitReceive+0x12e>
 8003b50:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d062      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	f012 0f02 	tst.w	r2, #2
 8003b60:	d0d7      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0xe8>
 8003b62:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003b64:	b292      	uxth	r2, r2
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d0d3      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0xe8>
 8003b6a:	2f00      	cmp	r7, #0
 8003b6c:	d0d1      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003b70:	8812      	ldrh	r2, [r2, #0]
 8003b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b76:	3302      	adds	r3, #2
 8003b78:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b7a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003b84:	2700      	movs	r7, #0
 8003b86:	e7c4      	b.n	8003b12 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b94:	2003      	movs	r0, #3
 8003b96:	e063      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	f012 0f01 	tst.w	r2, #1
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x196>
 8003ba2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003ba4:	b292      	uxth	r2, r2
 8003ba6:	b15a      	cbz	r2, 8003bc0 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003bac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bb4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003bbe:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bc0:	f7fe fc08 	bl	80023d4 <HAL_GetTick>
 8003bc4:	1b83      	subs	r3, r0, r6
 8003bc6:	42ab      	cmp	r3, r5
 8003bc8:	d302      	bcc.n	8003bd0 <HAL_SPI_TransmitReceive+0x1a6>
 8003bca:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003bce:	d11e      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x1e4>
 8003bd0:	b1ed      	cbz	r5, 8003c0e <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	b913      	cbnz	r3, 8003bde <HAL_SPI_TransmitReceive+0x1b4>
 8003bd8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	b1fb      	cbz	r3, 8003c1e <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	f012 0f02 	tst.w	r2, #2
 8003be6:	d0d7      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x16e>
 8003be8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003bea:	b292      	uxth	r2, r2
 8003bec:	2a00      	cmp	r2, #0
 8003bee:	d0d3      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x16e>
 8003bf0:	2f00      	cmp	r7, #0
 8003bf2:	d0d1      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bf4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003bf6:	7812      	ldrb	r2, [r2, #0]
 8003bf8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003bfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c00:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003c0a:	2700      	movs	r7, #0
 8003c0c:	e7c4      	b.n	8003b98 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c14:	2300      	movs	r3, #0
 8003c16:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	e020      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c1e:	4632      	mov	r2, r6
 8003c20:	4629      	mov	r1, r5
 8003c22:	4620      	mov	r0, r4
 8003c24:	f7ff fe84 	bl	8003930 <SPI_EndRxTxTransaction>
 8003c28:	b990      	cbnz	r0, 8003c50 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	b933      	cbnz	r3, 8003c3c <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	9201      	str	r2, [sp, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003c42:	2300      	movs	r3, #0
 8003c44:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c48:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c4a:	b14b      	cbz	r3, 8003c60 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	e007      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c50:	2320      	movs	r3, #32
 8003c52:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003c54:	2300      	movs	r3, #0
 8003c56:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8003c5e:	2002      	movs	r0, #2
}
 8003c60:	b003      	add	sp, #12
 8003c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8003c66:	2002      	movs	r0, #2
 8003c68:	e7fa      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	e7f8      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8003c6e:	2001      	movs	r0, #1
 8003c70:	e7f6      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>
 8003c72:	2001      	movs	r0, #1
 8003c74:	e7f4      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>
 8003c76:	2001      	movs	r0, #1
 8003c78:	e7f2      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8003c7a:	2002      	movs	r0, #2
 8003c7c:	e7f0      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x236>

08003c7e <HAL_SPI_ErrorCallback>:
}
 8003c7e:	4770      	bx	lr

08003c80 <HAL_SPI_IRQHandler>:
{
 8003c80:	b530      	push	{r4, r5, lr}
 8003c82:	b085      	sub	sp, #20
 8003c84:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003c86:	6802      	ldr	r2, [r0, #0]
 8003c88:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003c8a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c8c:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8003c90:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003c94:	d105      	bne.n	8003ca2 <HAL_SPI_IRQHandler+0x22>
 8003c96:	f013 0f01 	tst.w	r3, #1
 8003c9a:	d002      	beq.n	8003ca2 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c9c:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8003ca0:	d15a      	bne.n	8003d58 <HAL_SPI_IRQHandler+0xd8>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ca2:	f013 0f02 	tst.w	r3, #2
 8003ca6:	d002      	beq.n	8003cae <HAL_SPI_IRQHandler+0x2e>
 8003ca8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003cac:	d158      	bne.n	8003d60 <HAL_SPI_IRQHandler+0xe0>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003cae:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8003cb2:	f013 0f20 	tst.w	r3, #32
 8003cb6:	d101      	bne.n	8003cbc <HAL_SPI_IRQHandler+0x3c>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d054      	beq.n	8003d66 <HAL_SPI_IRQHandler+0xe6>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cbc:	f011 0f20 	tst.w	r1, #32
 8003cc0:	d051      	beq.n	8003d66 <HAL_SPI_IRQHandler+0xe6>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cc2:	b178      	cbz	r0, 8003ce4 <HAL_SPI_IRQHandler+0x64>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cc4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d04d      	beq.n	8003d6a <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	68d3      	ldr	r3, [r2, #12]
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	6893      	ldr	r3, [r2, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	9b01      	ldr	r3, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ce4:	b165      	cbz	r5, 8003d00 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ce6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6563      	str	r3, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9303      	str	r3, [sp, #12]
 8003cf2:	6893      	ldr	r3, [r2, #8]
 8003cf4:	9303      	str	r3, [sp, #12]
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02f      	beq.n	8003d66 <HAL_SPI_IRQHandler+0xe6>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d06:	6822      	ldr	r2, [r4, #0]
 8003d08:	6853      	ldr	r3, [r2, #4]
 8003d0a:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003d0e:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d16:	f011 0f03 	tst.w	r1, #3
 8003d1a:	d02e      	beq.n	8003d7a <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	6853      	ldr	r3, [r2, #4]
 8003d20:	f023 0303 	bic.w	r3, r3, #3
 8003d24:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003d26:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003d28:	b14b      	cbz	r3, 8003d3e <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d2a:	4a16      	ldr	r2, [pc, #88]	@ (8003d84 <HAL_SPI_IRQHandler+0x104>)
 8003d2c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d2e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003d30:	f7fe ff74 	bl	8002c1c <HAL_DMA_Abort_IT>
 8003d34:	b118      	cbz	r0, 8003d3e <HAL_SPI_IRQHandler+0xbe>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d3c:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003d3e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003d40:	b18b      	cbz	r3, 8003d66 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d42:	4a10      	ldr	r2, [pc, #64]	@ (8003d84 <HAL_SPI_IRQHandler+0x104>)
 8003d44:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d46:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003d48:	f7fe ff68 	bl	8002c1c <HAL_DMA_Abort_IT>
 8003d4c:	b158      	cbz	r0, 8003d66 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d4e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d54:	6563      	str	r3, [r4, #84]	@ 0x54
 8003d56:	e006      	b.n	8003d66 <HAL_SPI_IRQHandler+0xe6>
    hspi->RxISR(hspi);
 8003d58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	4798      	blx	r3
    return;
 8003d5e:	e002      	b.n	8003d66 <HAL_SPI_IRQHandler+0xe6>
    hspi->TxISR(hspi);
 8003d60:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003d62:	4620      	mov	r0, r4
 8003d64:	4798      	blx	r3
}
 8003d66:	b005      	add	sp, #20
 8003d68:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9302      	str	r3, [sp, #8]
 8003d6e:	68d3      	ldr	r3, [r2, #12]
 8003d70:	9302      	str	r3, [sp, #8]
 8003d72:	6893      	ldr	r3, [r2, #8]
 8003d74:	9302      	str	r3, [sp, #8]
 8003d76:	9b02      	ldr	r3, [sp, #8]
        return;
 8003d78:	e7f5      	b.n	8003d66 <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f7ff ff7f 	bl	8003c7e <HAL_SPI_ErrorCallback>
    return;
 8003d80:	e7f1      	b.n	8003d66 <HAL_SPI_IRQHandler+0xe6>
 8003d82:	bf00      	nop
 8003d84:	08003d89 	.word	0x08003d89

08003d88 <SPI_DMAAbortOnError>:
{
 8003d88:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d8a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003d90:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 8003d92:	f7ff ff74 	bl	8003c7e <HAL_SPI_ErrorCallback>
}
 8003d96:	bd08      	pop	{r3, pc}

08003d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9c:	6a03      	ldr	r3, [r0, #32]
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003da6:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003da8:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dac:	680c      	ldr	r4, [r1, #0]
 8003dae:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003db0:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003db4:	688b      	ldr	r3, [r1, #8]
 8003db6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db8:	4a0b      	ldr	r2, [pc, #44]	@ (8003de8 <TIM_OC1_SetConfig+0x50>)
 8003dba:	4290      	cmp	r0, r2
 8003dbc:	d006      	beq.n	8003dcc <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbe:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dc2:	684a      	ldr	r2, [r1, #4]
 8003dc4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc6:	6203      	str	r3, [r0, #32]
}
 8003dc8:	bc30      	pop	{r4, r5}
 8003dca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dcc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003dd0:	68ca      	ldr	r2, [r1, #12]
 8003dd2:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dd4:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dd8:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003ddc:	694a      	ldr	r2, [r1, #20]
 8003dde:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003de0:	698d      	ldr	r5, [r1, #24]
 8003de2:	4315      	orrs	r5, r2
 8003de4:	e7eb      	b.n	8003dbe <TIM_OC1_SetConfig+0x26>
 8003de6:	bf00      	nop
 8003de8:	40012c00 	.word	0x40012c00

08003dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df0:	6a02      	ldr	r2, [r0, #32]
 8003df2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003df6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dfa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dfc:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e00:	680d      	ldr	r5, [r1, #0]
 8003e02:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e08:	688a      	ldr	r2, [r1, #8]
 8003e0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e44 <TIM_OC3_SetConfig+0x58>)
 8003e10:	4290      	cmp	r0, r2
 8003e12:	d006      	beq.n	8003e22 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e14:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e16:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e18:	684a      	ldr	r2, [r1, #4]
 8003e1a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1c:	6203      	str	r3, [r0, #32]
}
 8003e1e:	bc30      	pop	{r4, r5}
 8003e20:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e26:	68ca      	ldr	r2, [r1, #12]
 8003e28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e30:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e34:	694a      	ldr	r2, [r1, #20]
 8003e36:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e3a:	698a      	ldr	r2, [r1, #24]
 8003e3c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003e40:	e7e8      	b.n	8003e14 <TIM_OC3_SetConfig+0x28>
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00

08003e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e4c:	6a02      	ldr	r2, [r0, #32]
 8003e4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e52:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e56:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e58:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e5c:	680d      	ldr	r5, [r1, #0]
 8003e5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e66:	688d      	ldr	r5, [r1, #8]
 8003e68:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6c:	4d07      	ldr	r5, [pc, #28]	@ (8003e8c <TIM_OC4_SetConfig+0x44>)
 8003e6e:	42a8      	cmp	r0, r5
 8003e70:	d006      	beq.n	8003e80 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e74:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e76:	684a      	ldr	r2, [r1, #4]
 8003e78:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7a:	6203      	str	r3, [r0, #32]
}
 8003e7c:	bc30      	pop	{r4, r5}
 8003e7e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e80:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e84:	694d      	ldr	r5, [r1, #20]
 8003e86:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003e8a:	e7f2      	b.n	8003e72 <TIM_OC4_SetConfig+0x2a>
 8003e8c:	40012c00 	.word	0x40012c00

08003e90 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e90:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e92:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e94:	6a04      	ldr	r4, [r0, #32]
 8003e96:	f024 0410 	bic.w	r4, r4, #16
 8003e9a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e9c:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e9e:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ea2:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ea6:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003eaa:	031b      	lsls	r3, r3, #12
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb2:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003eb6:	0109      	lsls	r1, r1, #4
 8003eb8:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 8003ebc:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ebe:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ec0:	6201      	str	r1, [r0, #32]
}
 8003ec2:	bc30      	pop	{r4, r5}
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ec6:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003ec8:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eca:	6a04      	ldr	r4, [r0, #32]
 8003ecc:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8003ed0:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ed2:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ed4:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003ed8:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003edc:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003ee8:	f425 7500 	bic.w	r5, r5, #512	@ 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003eec:	0209      	lsls	r1, r1, #8
 8003eee:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8003ef2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ef4:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003ef6:	6201      	str	r1, [r0, #32]
}
 8003ef8:	bc30      	pop	{r4, r5}
 8003efa:	4770      	bx	lr

08003efc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003efc:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003efe:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f00:	6a04      	ldr	r4, [r0, #32]
 8003f02:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8003f06:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f08:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f0a:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f0e:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f12:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f16:	031b      	lsls	r3, r3, #12
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003f1e:	f425 5500 	bic.w	r5, r5, #8192	@ 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003f22:	0309      	lsls	r1, r1, #12
 8003f24:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8003f28:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f2a:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003f2c:	6201      	str	r1, [r0, #32]
}
 8003f2e:	bc30      	pop	{r4, r5}
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003f34:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d127      	bne.n	8003f8e <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f44:	6802      	ldr	r2, [r0, #0]
 8003f46:	68d3      	ldr	r3, [r2, #12]
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4e:	6803      	ldr	r3, [r0, #0]
 8003f50:	4a11      	ldr	r2, [pc, #68]	@ (8003f98 <HAL_TIM_Base_Start_IT+0x64>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d010      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x44>
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5a:	d00d      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x44>
 8003f5c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x44>
 8003f64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d005      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f74:	2000      	movs	r0, #0
 8003f76:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	2a06      	cmp	r2, #6
 8003f80:	d007      	beq.n	8003f92 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	4770      	bx	lr
    return HAL_ERROR;
 8003f8e:	2001      	movs	r0, #1
 8003f90:	4770      	bx	lr
  return HAL_OK;
 8003f92:	2000      	movs	r0, #0
}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40012c00 	.word	0x40012c00

08003f9c <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_IC_CaptureCallback>:
}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_TriggerCallback>:
}
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_IRQHandler>:
{
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003fa8:	6803      	ldr	r3, [r0, #0]
 8003faa:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fac:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fae:	f015 0f02 	tst.w	r5, #2
 8003fb2:	d010      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fb4:	f016 0f02 	tst.w	r6, #2
 8003fb8:	d00d      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fba:	f06f 0202 	mvn.w	r2, #2
 8003fbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc4:	6803      	ldr	r3, [r0, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f013 0f03 	tst.w	r3, #3
 8003fcc:	d05e      	beq.n	800408c <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	f7ff ffe6 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fd6:	f015 0f04 	tst.w	r5, #4
 8003fda:	d012      	beq.n	8004002 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fdc:	f016 0f04 	tst.w	r6, #4
 8003fe0:	d00f      	beq.n	8004002 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	f06f 0204 	mvn.w	r2, #4
 8003fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fea:	2302      	movs	r3, #2
 8003fec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003ff6:	d04f      	beq.n	8004098 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f7ff ffd0 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	2300      	movs	r3, #0
 8004000:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004002:	f015 0f08 	tst.w	r5, #8
 8004006:	d012      	beq.n	800402e <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004008:	f016 0f08 	tst.w	r6, #8
 800400c:	d00f      	beq.n	800402e <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	f06f 0208 	mvn.w	r2, #8
 8004014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004016:	2304      	movs	r3, #4
 8004018:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f013 0f03 	tst.w	r3, #3
 8004022:	d040      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004024:	4620      	mov	r0, r4
 8004026:	f7ff ffba 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	2300      	movs	r3, #0
 800402c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800402e:	f015 0f10 	tst.w	r5, #16
 8004032:	d012      	beq.n	800405a <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004034:	f016 0f10 	tst.w	r6, #16
 8004038:	d00f      	beq.n	800405a <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	f06f 0210 	mvn.w	r2, #16
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004042:	2308      	movs	r3, #8
 8004044:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800404e:	d031      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8004050:	4620      	mov	r0, r4
 8004052:	f7ff ffa4 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	2300      	movs	r3, #0
 8004058:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800405a:	f015 0f01 	tst.w	r5, #1
 800405e:	d002      	beq.n	8004066 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004060:	f016 0f01 	tst.w	r6, #1
 8004064:	d12d      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004066:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800406a:	d002      	beq.n	8004072 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800406c:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004070:	d12f      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004072:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004076:	d002      	beq.n	800407e <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004078:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800407c:	d131      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800407e:	f015 0f20 	tst.w	r5, #32
 8004082:	d002      	beq.n	800408a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004084:	f016 0f20 	tst.w	r6, #32
 8004088:	d133      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x14e>
}
 800408a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800408c:	f7ff ff86 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	4620      	mov	r0, r4
 8004092:	f7ff ff85 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004096:	e79c      	b.n	8003fd2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004098:	4620      	mov	r0, r4
 800409a:	f7ff ff7f 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409e:	4620      	mov	r0, r4
 80040a0:	f7ff ff7e 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
 80040a4:	e7ab      	b.n	8003ffe <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7ff ff78 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7ff ff77 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
 80040b2:	e7ba      	b.n	800402a <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7ff ff71 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ba:	4620      	mov	r0, r4
 80040bc:	f7ff ff70 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
 80040c0:	e7c9      	b.n	8004056 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	f06f 0201 	mvn.w	r2, #1
 80040c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ca:	4620      	mov	r0, r4
 80040cc:	f7fc fd98 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
 80040d0:	e7c9      	b.n	8004066 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80040da:	4620      	mov	r0, r4
 80040dc:	f000 fbf5 	bl	80048ca <HAL_TIMEx_BreakCallback>
 80040e0:	e7c7      	b.n	8004072 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff ff59 	bl	8003fa2 <HAL_TIM_TriggerCallback>
 80040f0:	e7c5      	b.n	800407e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	f06f 0220 	mvn.w	r2, #32
 80040f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80040fa:	4620      	mov	r0, r4
 80040fc:	f000 fbe4 	bl	80048c8 <HAL_TIMEx_CommutCallback>
}
 8004100:	e7c3      	b.n	800408a <HAL_TIM_IRQHandler+0xe6>
	...

08004104 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004104:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004106:	4a1f      	ldr	r2, [pc, #124]	@ (8004184 <TIM_Base_SetConfig+0x80>)
 8004108:	4290      	cmp	r0, r2
 800410a:	d00a      	beq.n	8004122 <TIM_Base_SetConfig+0x1e>
 800410c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004110:	d007      	beq.n	8004122 <TIM_Base_SetConfig+0x1e>
 8004112:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004116:	4290      	cmp	r0, r2
 8004118:	d003      	beq.n	8004122 <TIM_Base_SetConfig+0x1e>
 800411a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800411e:	4290      	cmp	r0, r2
 8004120:	d103      	bne.n	800412a <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004126:	684a      	ldr	r2, [r1, #4]
 8004128:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412a:	4a16      	ldr	r2, [pc, #88]	@ (8004184 <TIM_Base_SetConfig+0x80>)
 800412c:	4290      	cmp	r0, r2
 800412e:	d00a      	beq.n	8004146 <TIM_Base_SetConfig+0x42>
 8004130:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004134:	d007      	beq.n	8004146 <TIM_Base_SetConfig+0x42>
 8004136:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800413a:	4290      	cmp	r0, r2
 800413c:	d003      	beq.n	8004146 <TIM_Base_SetConfig+0x42>
 800413e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004142:	4290      	cmp	r0, r2
 8004144:	d103      	bne.n	800414e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800414a:	68ca      	ldr	r2, [r1, #12]
 800414c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800414e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004152:	694a      	ldr	r2, [r1, #20]
 8004154:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004156:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004158:	688b      	ldr	r3, [r1, #8]
 800415a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800415c:	680b      	ldr	r3, [r1, #0]
 800415e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004160:	4b08      	ldr	r3, [pc, #32]	@ (8004184 <TIM_Base_SetConfig+0x80>)
 8004162:	4298      	cmp	r0, r3
 8004164:	d00a      	beq.n	800417c <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8004166:	2301      	movs	r3, #1
 8004168:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800416a:	6903      	ldr	r3, [r0, #16]
 800416c:	f013 0f01 	tst.w	r3, #1
 8004170:	d003      	beq.n	800417a <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004172:	6903      	ldr	r3, [r0, #16]
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	6103      	str	r3, [r0, #16]
}
 800417a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800417c:	690b      	ldr	r3, [r1, #16]
 800417e:	6303      	str	r3, [r0, #48]	@ 0x30
 8004180:	e7f1      	b.n	8004166 <TIM_Base_SetConfig+0x62>
 8004182:	bf00      	nop
 8004184:	40012c00 	.word	0x40012c00

08004188 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004188:	b340      	cbz	r0, 80041dc <HAL_TIM_PWM_Init+0x54>
{
 800418a:	b510      	push	{r4, lr}
 800418c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004192:	b1f3      	cbz	r3, 80041d2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	2302      	movs	r3, #2
 8004196:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419a:	4621      	mov	r1, r4
 800419c:	f851 0b04 	ldr.w	r0, [r1], #4
 80041a0:	f7ff ffb0 	bl	8004104 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80041ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80041b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80041b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041c2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80041c6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80041ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80041ce:	2000      	movs	r0, #0
}
 80041d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80041d2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80041d6:	f7fd ff51 	bl	800207c <HAL_TIM_PWM_MspInit>
 80041da:	e7db      	b.n	8004194 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
}
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80041e0:	b340      	cbz	r0, 8004234 <HAL_TIM_IC_Init+0x54>
{
 80041e2:	b510      	push	{r4, lr}
 80041e4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80041ea:	b1f3      	cbz	r3, 800422a <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f2:	4621      	mov	r1, r4
 80041f4:	f851 0b04 	ldr.w	r0, [r1], #4
 80041f8:	f7ff ff84 	bl	8004104 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041fc:	2301      	movs	r3, #1
 80041fe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004202:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004206:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800420a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800420e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004212:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004216:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800421a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800421e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004222:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004226:	2000      	movs	r0, #0
}
 8004228:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800422a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 800422e:	f7fd ff45 	bl	80020bc <HAL_TIM_IC_MspInit>
 8004232:	e7db      	b.n	80041ec <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8004234:	2001      	movs	r0, #1
}
 8004236:	4770      	bx	lr

08004238 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8004238:	2800      	cmp	r0, #0
 800423a:	d056      	beq.n	80042ea <HAL_TIM_Encoder_Init+0xb2>
{
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	460d      	mov	r5, r1
 8004240:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04a      	beq.n	80042e0 <HAL_TIM_Encoder_Init+0xa8>
  htim->State = HAL_TIM_STATE_BUSY;
 800424a:	2302      	movs	r3, #2
 800424c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004250:	6822      	ldr	r2, [r4, #0]
 8004252:	6893      	ldr	r3, [r2, #8]
 8004254:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004258:	f023 0307 	bic.w	r3, r3, #7
 800425c:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800425e:	4621      	mov	r1, r4
 8004260:	f851 0b04 	ldr.w	r0, [r1], #4
 8004264:	f7ff ff4e 	bl	8004104 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004268:	6821      	ldr	r1, [r4, #0]
 800426a:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800426c:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 800426e:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8004270:	6828      	ldr	r0, [r5, #0]
 8004272:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004274:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004278:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800427c:	68ab      	ldr	r3, [r5, #8]
 800427e:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8004282:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8004286:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004288:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800428c:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004290:	68ea      	ldr	r2, [r5, #12]
 8004292:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 8004296:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800429a:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800429c:	6a2b      	ldr	r3, [r5, #32]
 800429e:	031b      	lsls	r3, r3, #12
 80042a0:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80042a4:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80042a8:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042aa:	f026 0622 	bic.w	r6, r6, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042ae:	686a      	ldr	r2, [r5, #4]
 80042b0:	696d      	ldr	r5, [r5, #20]
 80042b2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80042b6:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 80042b8:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80042ba:	6821      	ldr	r1, [r4, #0]
 80042bc:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80042dc:	2000      	movs	r0, #0
}
 80042de:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80042e0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80042e4:	f7fd fe5c 	bl	8001fa0 <HAL_TIM_Encoder_MspInit>
 80042e8:	e7af      	b.n	800424a <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 80042ea:	2001      	movs	r0, #1
}
 80042ec:	4770      	bx	lr
	...

080042f0 <TIM_OC2_SetConfig>:
{
 80042f0:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80042f2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f4:	6a02      	ldr	r2, [r0, #32]
 80042f6:	f022 0210 	bic.w	r2, r2, #16
 80042fa:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80042fc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80042fe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004300:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004304:	680d      	ldr	r5, [r1, #0]
 8004306:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800430a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800430e:	688d      	ldr	r5, [r1, #8]
 8004310:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004314:	4d0c      	ldr	r5, [pc, #48]	@ (8004348 <TIM_OC2_SetConfig+0x58>)
 8004316:	42a8      	cmp	r0, r5
 8004318:	d006      	beq.n	8004328 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800431a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800431c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800431e:	684a      	ldr	r2, [r1, #4]
 8004320:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004322:	6203      	str	r3, [r0, #32]
}
 8004324:	bc30      	pop	{r4, r5}
 8004326:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800432c:	68cd      	ldr	r5, [r1, #12]
 800432e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004336:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800433a:	694d      	ldr	r5, [r1, #20]
 800433c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004340:	698d      	ldr	r5, [r1, #24]
 8004342:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004346:	e7e8      	b.n	800431a <TIM_OC2_SetConfig+0x2a>
 8004348:	40012c00 	.word	0x40012c00

0800434c <HAL_TIM_PWM_ConfigChannel>:
{
 800434c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800434e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d066      	beq.n	8004424 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004356:	4604      	mov	r4, r0
 8004358:	460d      	mov	r5, r1
 800435a:	2301      	movs	r3, #1
 800435c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004360:	2a0c      	cmp	r2, #12
 8004362:	d85a      	bhi.n	800441a <HAL_TIM_PWM_ConfigChannel+0xce>
 8004364:	e8df f002 	tbb	[pc, r2]
 8004368:	59595907 	.word	0x59595907
 800436c:	5959591b 	.word	0x5959591b
 8004370:	59595930 	.word	0x59595930
 8004374:	44          	.byte	0x44
 8004375:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004376:	6800      	ldr	r0, [r0, #0]
 8004378:	f7ff fd0e 	bl	8003d98 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	6993      	ldr	r3, [r2, #24]
 8004380:	f043 0308 	orr.w	r3, r3, #8
 8004384:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004386:	6822      	ldr	r2, [r4, #0]
 8004388:	6993      	ldr	r3, [r2, #24]
 800438a:	f023 0304 	bic.w	r3, r3, #4
 800438e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	6993      	ldr	r3, [r2, #24]
 8004394:	6929      	ldr	r1, [r5, #16]
 8004396:	430b      	orrs	r3, r1
 8004398:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800439a:	2000      	movs	r0, #0
      break;
 800439c:	e03e      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800439e:	6800      	ldr	r0, [r0, #0]
 80043a0:	f7ff ffa6 	bl	80042f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	6993      	ldr	r3, [r2, #24]
 80043a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80043ac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043ae:	6822      	ldr	r2, [r4, #0]
 80043b0:	6993      	ldr	r3, [r2, #24]
 80043b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043b8:	6822      	ldr	r2, [r4, #0]
 80043ba:	6993      	ldr	r3, [r2, #24]
 80043bc:	6929      	ldr	r1, [r5, #16]
 80043be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80043c2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2000      	movs	r0, #0
      break;
 80043c6:	e029      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043c8:	6800      	ldr	r0, [r0, #0]
 80043ca:	f7ff fd0f 	bl	8003dec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	69d3      	ldr	r3, [r2, #28]
 80043d2:	f043 0308 	orr.w	r3, r3, #8
 80043d6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043d8:	6822      	ldr	r2, [r4, #0]
 80043da:	69d3      	ldr	r3, [r2, #28]
 80043dc:	f023 0304 	bic.w	r3, r3, #4
 80043e0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043e2:	6822      	ldr	r2, [r4, #0]
 80043e4:	69d3      	ldr	r3, [r2, #28]
 80043e6:	6929      	ldr	r1, [r5, #16]
 80043e8:	430b      	orrs	r3, r1
 80043ea:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80043ec:	2000      	movs	r0, #0
      break;
 80043ee:	e015      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043f0:	6800      	ldr	r0, [r0, #0]
 80043f2:	f7ff fd29 	bl	8003e48 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	69d3      	ldr	r3, [r2, #28]
 80043fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80043fe:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	69d3      	ldr	r3, [r2, #28]
 8004404:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004408:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	69d3      	ldr	r3, [r2, #28]
 800440e:	6929      	ldr	r1, [r5, #16]
 8004410:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004414:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2000      	movs	r0, #0
      break;
 8004418:	e000      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800441a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800441c:	2300      	movs	r3, #0
 800441e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004422:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004424:	2002      	movs	r0, #2
 8004426:	e7fc      	b.n	8004422 <HAL_TIM_PWM_ConfigChannel+0xd6>

08004428 <TIM_TI1_SetConfig>:
{
 8004428:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 800442a:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800442c:	6a04      	ldr	r4, [r0, #32]
 800442e:	f024 0401 	bic.w	r4, r4, #1
 8004432:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004434:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004436:	4e11      	ldr	r6, [pc, #68]	@ (800447c <TIM_TI1_SetConfig+0x54>)
 8004438:	42b0      	cmp	r0, r6
 800443a:	d00d      	beq.n	8004458 <TIM_TI1_SetConfig+0x30>
 800443c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004440:	d00a      	beq.n	8004458 <TIM_TI1_SetConfig+0x30>
 8004442:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8004446:	42b0      	cmp	r0, r6
 8004448:	d006      	beq.n	8004458 <TIM_TI1_SetConfig+0x30>
 800444a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800444e:	42b0      	cmp	r0, r6
 8004450:	d002      	beq.n	8004458 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004452:	f044 0201 	orr.w	r2, r4, #1
 8004456:	e002      	b.n	800445e <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004458:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800445c:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800445e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004468:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800446c:	f001 010a 	and.w	r1, r1, #10
 8004470:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8004472:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004474:	6201      	str	r1, [r0, #32]
}
 8004476:	bc70      	pop	{r4, r5, r6}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00

08004480 <HAL_TIM_IC_ConfigChannel>:
{
 8004480:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004482:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d05e      	beq.n	8004548 <HAL_TIM_IC_ConfigChannel+0xc8>
 800448a:	4604      	mov	r4, r0
 800448c:	460d      	mov	r5, r1
 800448e:	2301      	movs	r3, #1
 8004490:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8004494:	2a0c      	cmp	r2, #12
 8004496:	d852      	bhi.n	800453e <HAL_TIM_IC_ConfigChannel+0xbe>
 8004498:	e8df f002 	tbb	[pc, r2]
 800449c:	51515107 	.word	0x51515107
 80044a0:	51515119 	.word	0x51515119
 80044a4:	5151512c 	.word	0x5151512c
 80044a8:	3e          	.byte	0x3e
 80044a9:	00          	.byte	0x00
    TIM_TI1_SetConfig(htim->Instance,
 80044aa:	68cb      	ldr	r3, [r1, #12]
 80044ac:	684a      	ldr	r2, [r1, #4]
 80044ae:	6809      	ldr	r1, [r1, #0]
 80044b0:	6800      	ldr	r0, [r0, #0]
 80044b2:	f7ff ffb9 	bl	8004428 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044b6:	6822      	ldr	r2, [r4, #0]
 80044b8:	6993      	ldr	r3, [r2, #24]
 80044ba:	f023 030c 	bic.w	r3, r3, #12
 80044be:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044c0:	6822      	ldr	r2, [r4, #0]
 80044c2:	6993      	ldr	r3, [r2, #24]
 80044c4:	68a9      	ldr	r1, [r5, #8]
 80044c6:	430b      	orrs	r3, r1
 80044c8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2000      	movs	r0, #0
 80044cc:	e038      	b.n	8004540 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI2_SetConfig(htim->Instance,
 80044ce:	68cb      	ldr	r3, [r1, #12]
 80044d0:	684a      	ldr	r2, [r1, #4]
 80044d2:	6809      	ldr	r1, [r1, #0]
 80044d4:	6800      	ldr	r0, [r0, #0]
 80044d6:	f7ff fcdb 	bl	8003e90 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	6993      	ldr	r3, [r2, #24]
 80044de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80044e2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	6993      	ldr	r3, [r2, #24]
 80044e8:	68a9      	ldr	r1, [r5, #8]
 80044ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044ee:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2000      	movs	r0, #0
 80044f2:	e025      	b.n	8004540 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI3_SetConfig(htim->Instance,
 80044f4:	68cb      	ldr	r3, [r1, #12]
 80044f6:	684a      	ldr	r2, [r1, #4]
 80044f8:	6809      	ldr	r1, [r1, #0]
 80044fa:	6800      	ldr	r0, [r0, #0]
 80044fc:	f7ff fce3 	bl	8003ec6 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	69d3      	ldr	r3, [r2, #28]
 8004504:	f023 030c 	bic.w	r3, r3, #12
 8004508:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	69d3      	ldr	r3, [r2, #28]
 800450e:	68a9      	ldr	r1, [r5, #8]
 8004510:	430b      	orrs	r3, r1
 8004512:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2000      	movs	r0, #0
 8004516:	e013      	b.n	8004540 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI4_SetConfig(htim->Instance,
 8004518:	68cb      	ldr	r3, [r1, #12]
 800451a:	684a      	ldr	r2, [r1, #4]
 800451c:	6809      	ldr	r1, [r1, #0]
 800451e:	6800      	ldr	r0, [r0, #0]
 8004520:	f7ff fcec 	bl	8003efc <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004524:	6822      	ldr	r2, [r4, #0]
 8004526:	69d3      	ldr	r3, [r2, #28]
 8004528:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800452c:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	69d3      	ldr	r3, [r2, #28]
 8004532:	68a9      	ldr	r1, [r5, #8]
 8004534:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004538:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800453a:	2000      	movs	r0, #0
 800453c:	e000      	b.n	8004540 <HAL_TIM_IC_ConfigChannel+0xc0>
  __HAL_LOCK(htim);
 800453e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004540:	2300      	movs	r3, #0
 8004542:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004546:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004548:	2002      	movs	r0, #2
 800454a:	e7fc      	b.n	8004546 <HAL_TIM_IC_ConfigChannel+0xc6>

0800454c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800454c:	f001 011f 	and.w	r1, r1, #31
 8004550:	f04f 0c01 	mov.w	ip, #1
 8004554:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004558:	6a03      	ldr	r3, [r0, #32]
 800455a:	ea23 030c 	bic.w	r3, r3, ip
 800455e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004560:	6a03      	ldr	r3, [r0, #32]
 8004562:	408a      	lsls	r2, r1
 8004564:	4313      	orrs	r3, r2
 8004566:	6203      	str	r3, [r0, #32]
}
 8004568:	4770      	bx	lr
	...

0800456c <HAL_TIM_PWM_Start>:
{
 800456c:	b510      	push	{r4, lr}
 800456e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004570:	4608      	mov	r0, r1
 8004572:	bb51      	cbnz	r1, 80045ca <HAL_TIM_PWM_Start+0x5e>
 8004574:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004578:	b2db      	uxtb	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	bf18      	it	ne
 800457e:	2301      	movne	r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d15b      	bne.n	800463c <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004584:	2800      	cmp	r0, #0
 8004586:	d139      	bne.n	80045fc <HAL_TIM_PWM_Start+0x90>
 8004588:	2302      	movs	r3, #2
 800458a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800458e:	2201      	movs	r2, #1
 8004590:	4601      	mov	r1, r0
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	f7ff ffda 	bl	800454c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	4a2a      	ldr	r2, [pc, #168]	@ (8004644 <HAL_TIM_PWM_Start+0xd8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d03d      	beq.n	800461c <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	4a28      	ldr	r2, [pc, #160]	@ (8004644 <HAL_TIM_PWM_Start+0xd8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d03e      	beq.n	8004626 <HAL_TIM_PWM_Start+0xba>
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ac:	d03b      	beq.n	8004626 <HAL_TIM_PWM_Start+0xba>
 80045ae:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d037      	beq.n	8004626 <HAL_TIM_PWM_Start+0xba>
 80045b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d033      	beq.n	8004626 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80045c6:	2000      	movs	r0, #0
 80045c8:	e039      	b.n	800463e <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ca:	2904      	cmp	r1, #4
 80045cc:	d008      	beq.n	80045e0 <HAL_TIM_PWM_Start+0x74>
 80045ce:	2908      	cmp	r1, #8
 80045d0:	d00d      	beq.n	80045ee <HAL_TIM_PWM_Start+0x82>
 80045d2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	bf18      	it	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	e7cf      	b.n	8004580 <HAL_TIM_PWM_Start+0x14>
 80045e0:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	bf18      	it	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	e7c8      	b.n	8004580 <HAL_TIM_PWM_Start+0x14>
 80045ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	bf18      	it	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	e7c1      	b.n	8004580 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fc:	2804      	cmp	r0, #4
 80045fe:	d005      	beq.n	800460c <HAL_TIM_PWM_Start+0xa0>
 8004600:	2808      	cmp	r0, #8
 8004602:	d007      	beq.n	8004614 <HAL_TIM_PWM_Start+0xa8>
 8004604:	2302      	movs	r3, #2
 8004606:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800460a:	e7c0      	b.n	800458e <HAL_TIM_PWM_Start+0x22>
 800460c:	2302      	movs	r3, #2
 800460e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004612:	e7bc      	b.n	800458e <HAL_TIM_PWM_Start+0x22>
 8004614:	2302      	movs	r3, #2
 8004616:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800461a:	e7b8      	b.n	800458e <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 800461c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800461e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004622:	645a      	str	r2, [r3, #68]	@ 0x44
 8004624:	e7bc      	b.n	80045a0 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	2a06      	cmp	r2, #6
 800462e:	d007      	beq.n	8004640 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004638:	2000      	movs	r0, #0
 800463a:	e000      	b.n	800463e <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 800463c:	2001      	movs	r0, #1
}
 800463e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004640:	2000      	movs	r0, #0
 8004642:	e7fc      	b.n	800463e <HAL_TIM_PWM_Start+0xd2>
 8004644:	40012c00 	.word	0x40012c00

08004648 <HAL_TIM_IC_Start_IT>:
{
 8004648:	b510      	push	{r4, lr}
 800464a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800464c:	460b      	mov	r3, r1
 800464e:	b9f1      	cbnz	r1, 800468e <HAL_TIM_IC_Start_IT+0x46>
 8004650:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8004654:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004656:	bb53      	cbnz	r3, 80046ae <HAL_TIM_IC_Start_IT+0x66>
 8004658:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800465c:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800465e:	2801      	cmp	r0, #1
 8004660:	f040 808e 	bne.w	8004780 <HAL_TIM_IC_Start_IT+0x138>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004664:	2a01      	cmp	r2, #1
 8004666:	f040 808c 	bne.w	8004782 <HAL_TIM_IC_Start_IT+0x13a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466a:	bb83      	cbnz	r3, 80046ce <HAL_TIM_IC_Start_IT+0x86>
 800466c:	2102      	movs	r1, #2
 800466e:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004672:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  switch (Channel)
 8004676:	2b0c      	cmp	r3, #12
 8004678:	f200 8084 	bhi.w	8004784 <HAL_TIM_IC_Start_IT+0x13c>
 800467c:	e8df f003 	tbb	[pc, r3]
 8004680:	82828269 	.word	0x82828269
 8004684:	82828241 	.word	0x82828241
 8004688:	82828263 	.word	0x82828263
 800468c:	6f          	.byte	0x6f
 800468d:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800468e:	2904      	cmp	r1, #4
 8004690:	d005      	beq.n	800469e <HAL_TIM_IC_Start_IT+0x56>
 8004692:	2908      	cmp	r1, #8
 8004694:	d007      	beq.n	80046a6 <HAL_TIM_IC_Start_IT+0x5e>
 8004696:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800469a:	b2c0      	uxtb	r0, r0
 800469c:	e7db      	b.n	8004656 <HAL_TIM_IC_Start_IT+0xe>
 800469e:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 80046a2:	b2c0      	uxtb	r0, r0
 80046a4:	e7d7      	b.n	8004656 <HAL_TIM_IC_Start_IT+0xe>
 80046a6:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80046aa:	b2c0      	uxtb	r0, r0
 80046ac:	e7d3      	b.n	8004656 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d005      	beq.n	80046be <HAL_TIM_IC_Start_IT+0x76>
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d007      	beq.n	80046c6 <HAL_TIM_IC_Start_IT+0x7e>
 80046b6:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	e7cf      	b.n	800465e <HAL_TIM_IC_Start_IT+0x16>
 80046be:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	e7cb      	b.n	800465e <HAL_TIM_IC_Start_IT+0x16>
 80046c6:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	e7c7      	b.n	800465e <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d00c      	beq.n	80046ec <HAL_TIM_IC_Start_IT+0xa4>
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d00e      	beq.n	80046f4 <HAL_TIM_IC_Start_IT+0xac>
 80046d6:	2102      	movs	r1, #2
 80046d8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d00d      	beq.n	80046fc <HAL_TIM_IC_Start_IT+0xb4>
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d02d      	beq.n	8004740 <HAL_TIM_IC_Start_IT+0xf8>
 80046e4:	2102      	movs	r1, #2
 80046e6:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
 80046ea:	e7c4      	b.n	8004676 <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ec:	2102      	movs	r1, #2
 80046ee:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	e7f3      	b.n	80046dc <HAL_TIM_IC_Start_IT+0x94>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f4:	2102      	movs	r1, #2
 80046f6:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fa:	e7ef      	b.n	80046dc <HAL_TIM_IC_Start_IT+0x94>
 80046fc:	2202      	movs	r2, #2
 80046fe:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004702:	6821      	ldr	r1, [r4, #0]
 8004704:	68ca      	ldr	r2, [r1, #12]
 8004706:	f042 0204 	orr.w	r2, r2, #4
 800470a:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800470c:	2201      	movs	r2, #1
 800470e:	4619      	mov	r1, r3
 8004710:	6820      	ldr	r0, [r4, #0]
 8004712:	f7ff ff1b 	bl	800454c <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	4a1c      	ldr	r2, [pc, #112]	@ (800478c <HAL_TIM_IC_Start_IT+0x144>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d025      	beq.n	800476a <HAL_TIM_IC_Start_IT+0x122>
 800471e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004722:	d022      	beq.n	800476a <HAL_TIM_IC_Start_IT+0x122>
 8004724:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004728:	4293      	cmp	r3, r2
 800472a:	d01e      	beq.n	800476a <HAL_TIM_IC_Start_IT+0x122>
 800472c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004730:	4293      	cmp	r3, r2
 8004732:	d01a      	beq.n	800476a <HAL_TIM_IC_Start_IT+0x122>
      __HAL_TIM_ENABLE(htim);
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	2000      	movs	r0, #0
 800473e:	e020      	b.n	8004782 <HAL_TIM_IC_Start_IT+0x13a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004740:	2202      	movs	r2, #2
 8004742:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004746:	6821      	ldr	r1, [r4, #0]
 8004748:	68ca      	ldr	r2, [r1, #12]
 800474a:	f042 0208 	orr.w	r2, r2, #8
 800474e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004750:	e7dc      	b.n	800470c <HAL_TIM_IC_Start_IT+0xc4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004752:	6821      	ldr	r1, [r4, #0]
 8004754:	68ca      	ldr	r2, [r1, #12]
 8004756:	f042 0202 	orr.w	r2, r2, #2
 800475a:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800475c:	e7d6      	b.n	800470c <HAL_TIM_IC_Start_IT+0xc4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800475e:	6821      	ldr	r1, [r4, #0]
 8004760:	68ca      	ldr	r2, [r1, #12]
 8004762:	f042 0210 	orr.w	r2, r2, #16
 8004766:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004768:	e7d0      	b.n	800470c <HAL_TIM_IC_Start_IT+0xc4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	2a06      	cmp	r2, #6
 8004772:	d009      	beq.n	8004788 <HAL_TIM_IC_Start_IT+0x140>
        __HAL_TIM_ENABLE(htim);
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	2000      	movs	r0, #0
 800477e:	e000      	b.n	8004782 <HAL_TIM_IC_Start_IT+0x13a>
    return HAL_ERROR;
 8004780:	2001      	movs	r0, #1
}
 8004782:	bd10      	pop	{r4, pc}
  switch (Channel)
 8004784:	4610      	mov	r0, r2
 8004786:	e7fc      	b.n	8004782 <HAL_TIM_IC_Start_IT+0x13a>
 8004788:	2000      	movs	r0, #0
 800478a:	e7fa      	b.n	8004782 <HAL_TIM_IC_Start_IT+0x13a>
 800478c:	40012c00 	.word	0x40012c00

08004790 <HAL_TIM_Encoder_Start>:
{
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004794:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8004798:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800479a:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800479e:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80047a2:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047a4:	f894 c043 	ldrb.w	ip, [r4, #67]	@ 0x43
  if (Channel == TIM_CHANNEL_1)
 80047a8:	460d      	mov	r5, r1
 80047aa:	b9b1      	cbnz	r1, 80047da <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ac:	2801      	cmp	r0, #1
 80047ae:	d149      	bne.n	8004844 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80047b0:	2a01      	cmp	r2, #1
 80047b2:	d148      	bne.n	8004846 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b4:	2302      	movs	r3, #2
 80047b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  switch (Channel)
 80047be:	b37d      	cbz	r5, 8004820 <HAL_TIM_Encoder_Start+0x90>
 80047c0:	2d04      	cmp	r5, #4
 80047c2:	d039      	beq.n	8004838 <HAL_TIM_Encoder_Start+0xa8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047c4:	2201      	movs	r2, #1
 80047c6:	2100      	movs	r1, #0
 80047c8:	6820      	ldr	r0, [r4, #0]
 80047ca:	f7ff febf 	bl	800454c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ce:	2201      	movs	r2, #1
 80047d0:	2104      	movs	r1, #4
 80047d2:	6820      	ldr	r0, [r4, #0]
 80047d4:	f7ff feba 	bl	800454c <TIM_CCxChannelCmd>
      break;
 80047d8:	e027      	b.n	800482a <HAL_TIM_Encoder_Start+0x9a>
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 80047e0:	2904      	cmp	r1, #4
 80047e2:	d012      	beq.n	800480a <HAL_TIM_Encoder_Start+0x7a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047e4:	2801      	cmp	r0, #1
 80047e6:	d133      	bne.n	8004850 <HAL_TIM_Encoder_Start+0xc0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d12c      	bne.n	8004846 <HAL_TIM_Encoder_Start+0xb6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ec:	2a01      	cmp	r2, #1
 80047ee:	d131      	bne.n	8004854 <HAL_TIM_Encoder_Start+0xc4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047f0:	f1bc 0f01 	cmp.w	ip, #1
 80047f4:	d130      	bne.n	8004858 <HAL_TIM_Encoder_Start+0xc8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f6:	2302      	movs	r3, #2
 80047f8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004800:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004808:	e7d9      	b.n	80047be <HAL_TIM_Encoder_Start+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800480a:	2b01      	cmp	r3, #1
 800480c:	d11c      	bne.n	8004848 <HAL_TIM_Encoder_Start+0xb8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800480e:	f1bc 0f01 	cmp.w	ip, #1
 8004812:	d11b      	bne.n	800484c <HAL_TIM_Encoder_Start+0xbc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004814:	2302      	movs	r3, #2
 8004816:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800481a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800481e:	e7ce      	b.n	80047be <HAL_TIM_Encoder_Start+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004820:	2201      	movs	r2, #1
 8004822:	2100      	movs	r1, #0
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	f7ff fe91 	bl	800454c <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800482a:	6822      	ldr	r2, [r4, #0]
 800482c:	6813      	ldr	r3, [r2, #0]
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004834:	2000      	movs	r0, #0
 8004836:	e006      	b.n	8004846 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004838:	2201      	movs	r2, #1
 800483a:	2104      	movs	r1, #4
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	f7ff fe85 	bl	800454c <TIM_CCxChannelCmd>
      break;
 8004842:	e7f2      	b.n	800482a <HAL_TIM_Encoder_Start+0x9a>
      return HAL_ERROR;
 8004844:	2001      	movs	r0, #1
}
 8004846:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004848:	2001      	movs	r0, #1
 800484a:	e7fc      	b.n	8004846 <HAL_TIM_Encoder_Start+0xb6>
 800484c:	4618      	mov	r0, r3
 800484e:	e7fa      	b.n	8004846 <HAL_TIM_Encoder_Start+0xb6>
      return HAL_ERROR;
 8004850:	2001      	movs	r0, #1
 8004852:	e7f8      	b.n	8004846 <HAL_TIM_Encoder_Start+0xb6>
 8004854:	4618      	mov	r0, r3
 8004856:	e7f6      	b.n	8004846 <HAL_TIM_Encoder_Start+0xb6>
 8004858:	4610      	mov	r0, r2
 800485a:	e7f4      	b.n	8004846 <HAL_TIM_Encoder_Start+0xb6>

0800485c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004860:	2a01      	cmp	r2, #1
 8004862:	d02c      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8004864:	b410      	push	{r4}
 8004866:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004868:	2201      	movs	r2, #1
 800486a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486e:	2202      	movs	r2, #2
 8004870:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004874:	6802      	ldr	r2, [r0, #0]
 8004876:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004878:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800487a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800487e:	6808      	ldr	r0, [r1, #0]
 8004880:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004884:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	480e      	ldr	r0, [pc, #56]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800488a:	4282      	cmp	r2, r0
 800488c:	d00a      	beq.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800488e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004892:	d007      	beq.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004894:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004898:	4282      	cmp	r2, r0
 800489a:	d003      	beq.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800489c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80048a0:	4282      	cmp	r2, r0
 80048a2:	d104      	bne.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a8:	6849      	ldr	r1, [r1, #4]
 80048aa:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048ac:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b4:	2000      	movs	r0, #0
 80048b6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80048ba:	bc10      	pop	{r4}
 80048bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80048be:	2002      	movs	r0, #2
}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40012c00 	.word	0x40012c00

080048c8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c8:	4770      	bx	lr

080048ca <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048ca:	4770      	bx	lr

080048cc <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048cc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	f102 030c 	add.w	r3, r2, #12
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	320c      	adds	r2, #12
 80048dc:	e842 3100 	strex	r1, r3, [r2]
 80048e0:	2900      	cmp	r1, #0
 80048e2:	d1f3      	bne.n	80048cc <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048e4:	2320      	movs	r3, #32
 80048e6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 80048ea:	4770      	bx	lr

080048ec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	f102 030c 	add.w	r3, r2, #12
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	320c      	adds	r2, #12
 80048fc:	e842 3100 	strex	r1, r3, [r2]
 8004900:	2900      	cmp	r1, #0
 8004902:	d1f3      	bne.n	80048ec <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004904:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	f102 0314 	add.w	r3, r2, #20
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	3214      	adds	r2, #20
 8004914:	e842 3100 	strex	r1, r3, [r2]
 8004918:	2900      	cmp	r1, #0
 800491a:	d1f3      	bne.n	8004904 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800491e:	2b01      	cmp	r3, #1
 8004920:	d005      	beq.n	800492e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004922:	2320      	movs	r3, #32
 8004924:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	2300      	movs	r3, #0
 800492a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800492c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	f102 030c 	add.w	r3, r2, #12
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	320c      	adds	r2, #12
 800493e:	e842 3100 	strex	r1, r3, [r2]
 8004942:	2900      	cmp	r1, #0
 8004944:	d1f3      	bne.n	800492e <UART_EndRxTransfer+0x42>
 8004946:	e7ec      	b.n	8004922 <UART_EndRxTransfer+0x36>

08004948 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004948:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b21      	cmp	r3, #33	@ 0x21
 8004950:	d001      	beq.n	8004956 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004952:	2002      	movs	r0, #2
  }
}
 8004954:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004956:	6883      	ldr	r3, [r0, #8]
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495c:	d017      	beq.n	800498e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800495e:	6a03      	ldr	r3, [r0, #32]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	6202      	str	r2, [r0, #32]
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	6803      	ldr	r3, [r0, #0]
 8004968:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800496a:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8004974:	b94b      	cbnz	r3, 800498a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004976:	6802      	ldr	r2, [r0, #0]
 8004978:	68d3      	ldr	r3, [r2, #12]
 800497a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800497e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004980:	6802      	ldr	r2, [r0, #0]
 8004982:	68d3      	ldr	r3, [r2, #12]
 8004984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004988:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800498a:	2000      	movs	r0, #0
 800498c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498e:	6903      	ldr	r3, [r0, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e4      	bne.n	800495e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004994:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	6802      	ldr	r2, [r0, #0]
 800499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80049a0:	6a03      	ldr	r3, [r0, #32]
 80049a2:	3302      	adds	r3, #2
 80049a4:	6203      	str	r3, [r0, #32]
 80049a6:	e7e0      	b.n	800496a <UART_Transmit_IT+0x22>

080049a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a8:	b510      	push	{r4, lr}
 80049aa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ac:	6802      	ldr	r2, [r0, #0]
 80049ae:	6913      	ldr	r3, [r2, #16]
 80049b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049b4:	68c1      	ldr	r1, [r0, #12]
 80049b6:	430b      	orrs	r3, r1
 80049b8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049ba:	6883      	ldr	r3, [r0, #8]
 80049bc:	6902      	ldr	r2, [r0, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	6942      	ldr	r2, [r0, #20]
 80049c2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80049c4:	6801      	ldr	r1, [r0, #0]
 80049c6:	68cb      	ldr	r3, [r1, #12]
 80049c8:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80049cc:	f023 030c 	bic.w	r3, r3, #12
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049d4:	6802      	ldr	r2, [r0, #0]
 80049d6:	6953      	ldr	r3, [r2, #20]
 80049d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049dc:	6981      	ldr	r1, [r0, #24]
 80049de:	430b      	orrs	r3, r1
 80049e0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80049e2:	6802      	ldr	r2, [r0, #0]
 80049e4:	4b13      	ldr	r3, [pc, #76]	@ (8004a34 <UART_SetConfig+0x8c>)
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d020      	beq.n	8004a2c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049ea:	f7fe fe25 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 80049ee:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80049f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a00:	480d      	ldr	r0, [pc, #52]	@ (8004a38 <UART_SetConfig+0x90>)
 8004a02:	fba0 3102 	umull	r3, r1, r0, r2
 8004a06:	0949      	lsrs	r1, r1, #5
 8004a08:	2364      	movs	r3, #100	@ 0x64
 8004a0a:	fb03 2311 	mls	r3, r3, r1, r2
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	3332      	adds	r3, #50	@ 0x32
 8004a12:	fba0 0303 	umull	r0, r3, r0, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a1c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	6821      	ldr	r1, [r4, #0]
 8004a26:	4413      	add	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a2a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a2c:	f7fe fe14 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	e7dd      	b.n	80049f0 <UART_SetConfig+0x48>
 8004a34:	40013800 	.word	0x40013800
 8004a38:	51eb851f 	.word	0x51eb851f

08004a3c <HAL_UART_Init>:
  if (huart == NULL)
 8004a3c:	b360      	cbz	r0, 8004a98 <HAL_UART_Init+0x5c>
{
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004a42:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004a46:	b313      	cbz	r3, 8004a8e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004a48:	2324      	movs	r3, #36	@ 0x24
 8004a4a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	68d3      	ldr	r3, [r2, #12]
 8004a52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a56:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7ff ffa5 	bl	80049a8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	6913      	ldr	r3, [r2, #16]
 8004a62:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004a66:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	6953      	ldr	r3, [r2, #20]
 8004a6c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004a70:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004a72:	6822      	ldr	r2, [r4, #0]
 8004a74:	68d3      	ldr	r3, [r2, #12]
 8004a76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a7a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a80:	2320      	movs	r3, #32
 8004a82:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a86:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a8a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004a8c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004a8e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004a92:	f7fd fbd9 	bl	8002248 <HAL_UART_MspInit>
 8004a96:	e7d7      	b.n	8004a48 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_UART_Transmit_DMA>:
{
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	2a20      	cmp	r2, #32
 8004aa8:	d12f      	bne.n	8004b0a <HAL_UART_Transmit_DMA+0x6e>
 8004aaa:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004aac:	2900      	cmp	r1, #0
 8004aae:	d02e      	beq.n	8004b0e <HAL_UART_Transmit_DMA+0x72>
 8004ab0:	b90b      	cbnz	r3, 8004ab6 <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 8004ab2:	2001      	movs	r0, #1
}
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
    huart->pTxBuffPtr = pData;
 8004ab6:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004ab8:	8483      	strh	r3, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004aba:	84c3      	strh	r3, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abc:	2200      	movs	r2, #0
 8004abe:	6442      	str	r2, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ac0:	2021      	movs	r0, #33	@ 0x21
 8004ac2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ac6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ac8:	4d12      	ldr	r5, [pc, #72]	@ (8004b14 <HAL_UART_Transmit_DMA+0x78>)
 8004aca:	6285      	str	r5, [r0, #40]	@ 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004acc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ace:	4d12      	ldr	r5, [pc, #72]	@ (8004b18 <HAL_UART_Transmit_DMA+0x7c>)
 8004ad0:	62c5      	str	r5, [r0, #44]	@ 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ad2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ad4:	4d11      	ldr	r5, [pc, #68]	@ (8004b1c <HAL_UART_Transmit_DMA+0x80>)
 8004ad6:	6305      	str	r5, [r0, #48]	@ 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8004ad8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ada:	6342      	str	r2, [r0, #52]	@ 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	3204      	adds	r2, #4
 8004ae0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ae2:	f7fe f83d 	bl	8002b60 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aec:	601a      	str	r2, [r3, #0]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004aee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	f102 0314 	add.w	r3, r2, #20
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	3214      	adds	r2, #20
 8004afe:	e842 3100 	strex	r1, r3, [r2]
 8004b02:	2900      	cmp	r1, #0
 8004b04:	d1f3      	bne.n	8004aee <HAL_UART_Transmit_DMA+0x52>
    return HAL_OK;
 8004b06:	2000      	movs	r0, #0
 8004b08:	e7d4      	b.n	8004ab4 <HAL_UART_Transmit_DMA+0x18>
    return HAL_BUSY;
 8004b0a:	2002      	movs	r0, #2
 8004b0c:	e7d2      	b.n	8004ab4 <HAL_UART_Transmit_DMA+0x18>
      return HAL_ERROR;
 8004b0e:	2001      	movs	r0, #1
 8004b10:	e7d0      	b.n	8004ab4 <HAL_UART_Transmit_DMA+0x18>
 8004b12:	bf00      	nop
 8004b14:	08004b21 	.word	0x08004b21
 8004b18:	08004b89 	.word	0x08004b89
 8004b1c:	08004b97 	.word	0x08004b97

08004b20 <UART_DMATransmitCplt>:
{
 8004b20:	b508      	push	{r3, lr}
 8004b22:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b24:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f013 0f20 	tst.w	r3, #32
 8004b2e:	d11a      	bne.n	8004b66 <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	84c3      	strh	r3, [r0, #38]	@ 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	f102 0314 	add.w	r3, r2, #20
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	3214      	adds	r2, #20
 8004b44:	e842 3100 	strex	r1, r3, [r2]
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	d1f3      	bne.n	8004b34 <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	f102 030c 	add.w	r3, r2, #12
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	320c      	adds	r2, #12
 8004b5c:	e842 3100 	strex	r1, r3, [r2]
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d1f3      	bne.n	8004b4c <UART_DMATransmitCplt+0x2c>
}
 8004b64:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004b66:	f7fc fd35 	bl	80015d4 <HAL_UART_TxCpltCallback>
}
 8004b6a:	e7fb      	b.n	8004b64 <UART_DMATransmitCplt+0x44>

08004b6c <UART_EndTransmit_IT>:
{
 8004b6c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b6e:	6801      	ldr	r1, [r0, #0]
 8004b70:	68ca      	ldr	r2, [r1, #12]
 8004b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b76:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004b7e:	f7fc fd29 	bl	80015d4 <HAL_UART_TxCpltCallback>
}
 8004b82:	2000      	movs	r0, #0
 8004b84:	bd08      	pop	{r3, pc}

08004b86 <HAL_UART_TxHalfCpltCallback>:
}
 8004b86:	4770      	bx	lr

08004b88 <UART_DMATxHalfCplt>:
{
 8004b88:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004b8a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8004b8c:	f7ff fffb 	bl	8004b86 <HAL_UART_TxHalfCpltCallback>
}
 8004b90:	bd08      	pop	{r3, pc}

08004b92 <HAL_UART_RxHalfCpltCallback>:
}
 8004b92:	4770      	bx	lr

08004b94 <HAL_UART_ErrorCallback>:
}
 8004b94:	4770      	bx	lr

08004b96 <UART_DMAError>:
{
 8004b96:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b98:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b9e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b21      	cmp	r3, #33	@ 0x21
 8004ba6:	d010      	beq.n	8004bca <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004bb0:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b22      	cmp	r3, #34	@ 0x22
 8004bb8:	d011      	beq.n	8004bde <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004bbc:	f043 0310 	orr.w	r3, r3, #16
 8004bc0:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f7ff ffe6 	bl	8004b94 <HAL_UART_ErrorCallback>
}
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004bce:	2a00      	cmp	r2, #0
 8004bd0:	d0ea      	beq.n	8004ba8 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f7ff fe78 	bl	80048cc <UART_EndTxTransfer>
 8004bdc:	e7e4      	b.n	8004ba8 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d0eb      	beq.n	8004bba <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7ff fe80 	bl	80048ec <UART_EndRxTransfer>
 8004bec:	e7e5      	b.n	8004bba <UART_DMAError+0x24>

08004bee <UART_DMAAbortOnError>:
{
 8004bee:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004bf6:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8004bf8:	f7ff ffcc 	bl	8004b94 <HAL_UART_ErrorCallback>
}
 8004bfc:	bd08      	pop	{r3, pc}

08004bfe <HAL_UARTEx_RxEventCallback>:
}
 8004bfe:	4770      	bx	lr

08004c00 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c00:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b22      	cmp	r3, #34	@ 0x22
 8004c08:	d169      	bne.n	8004cde <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c0a:	6883      	ldr	r3, [r0, #8]
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c10:	d04f      	beq.n	8004cb2 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c12:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c18:	d004      	beq.n	8004c24 <UART_Receive_IT+0x24>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d156      	bne.n	8004ccc <UART_Receive_IT+0xcc>
 8004c1e:	6903      	ldr	r3, [r0, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d153      	bne.n	8004ccc <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c24:	6803      	ldr	r3, [r0, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004c2a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8004c30:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d151      	bne.n	8004ce2 <UART_Receive_IT+0xe2>
{
 8004c3e:	b500      	push	{lr}
 8004c40:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c42:	6802      	ldr	r2, [r0, #0]
 8004c44:	68d3      	ldr	r3, [r2, #12]
 8004c46:	f023 0320 	bic.w	r3, r3, #32
 8004c4a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c4c:	6802      	ldr	r2, [r0, #0]
 8004c4e:	68d3      	ldr	r3, [r2, #12]
 8004c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c54:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c56:	6802      	ldr	r2, [r0, #0]
 8004c58:	6953      	ldr	r3, [r2, #20]
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004c60:	2320      	movs	r3, #32
 8004c62:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c66:	2300      	movs	r3, #0
 8004c68:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d133      	bne.n	8004cd8 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c70:	2300      	movs	r3, #0
 8004c72:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c74:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	f102 030c 	add.w	r3, r2, #12
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	320c      	adds	r2, #12
 8004c84:	e842 3100 	strex	r1, r3, [r2]
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	d1f3      	bne.n	8004c74 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c8c:	6803      	ldr	r3, [r0, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	f012 0f10 	tst.w	r2, #16
 8004c94:	d006      	beq.n	8004ca4 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c96:	2200      	movs	r2, #0
 8004c98:	9201      	str	r2, [sp, #4]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	9201      	str	r2, [sp, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca4:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004ca6:	f7ff ffaa 	bl	8004bfe <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004caa:	2000      	movs	r0, #0
}
 8004cac:	b003      	add	sp, #12
 8004cae:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb2:	6902      	ldr	r2, [r0, #16]
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	d1ac      	bne.n	8004c12 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cb8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cba:	6803      	ldr	r3, [r0, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc2:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004cc4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004cc6:	3302      	adds	r3, #2
 8004cc8:	6283      	str	r3, [r0, #40]	@ 0x28
 8004cca:	e7b1      	b.n	8004c30 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ccc:	6803      	ldr	r3, [r0, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd4:	7013      	strb	r3, [r2, #0]
 8004cd6:	e7a8      	b.n	8004c2a <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8004cd8:	f7fc fbe8 	bl	80014ac <HAL_UART_RxCpltCallback>
 8004cdc:	e7e5      	b.n	8004caa <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8004cde:	2002      	movs	r0, #2
 8004ce0:	4770      	bx	lr
    return HAL_OK;
 8004ce2:	2000      	movs	r0, #0
}
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_UART_IRQHandler>:
{
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cee:	6802      	ldr	r2, [r0, #0]
 8004cf0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cf2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cf4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004cf6:	f013 0f0f 	tst.w	r3, #15
 8004cfa:	d109      	bne.n	8004d10 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cfc:	f013 0f20 	tst.w	r3, #32
 8004d00:	d00c      	beq.n	8004d1c <HAL_UART_IRQHandler+0x34>
 8004d02:	f010 0f20 	tst.w	r0, #32
 8004d06:	d009      	beq.n	8004d1c <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f7ff ff79 	bl	8004c00 <UART_Receive_IT>
      return;
 8004d0e:	e016      	b.n	8004d3e <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d10:	f011 0101 	ands.w	r1, r1, #1
 8004d14:	d115      	bne.n	8004d42 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d16:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8004d1a:	d112      	bne.n	8004d42 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004d1e:	2901      	cmp	r1, #1
 8004d20:	d079      	beq.n	8004e16 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d22:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d26:	d003      	beq.n	8004d30 <HAL_UART_IRQHandler+0x48>
 8004d28:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004d2c:	f040 8113 	bne.w	8004f56 <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d30:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004d34:	d003      	beq.n	8004d3e <HAL_UART_IRQHandler+0x56>
 8004d36:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8004d3a:	f040 8110 	bne.w	8004f5e <HAL_UART_IRQHandler+0x276>
}
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d42:	f013 0f01 	tst.w	r3, #1
 8004d46:	d006      	beq.n	8004d56 <HAL_UART_IRQHandler+0x6e>
 8004d48:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8004d4c:	d003      	beq.n	8004d56 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d4e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004d50:	f042 0201 	orr.w	r2, r2, #1
 8004d54:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d56:	f013 0f04 	tst.w	r3, #4
 8004d5a:	d004      	beq.n	8004d66 <HAL_UART_IRQHandler+0x7e>
 8004d5c:	b119      	cbz	r1, 8004d66 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d5e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004d60:	f042 0202 	orr.w	r2, r2, #2
 8004d64:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d66:	f013 0f02 	tst.w	r3, #2
 8004d6a:	d004      	beq.n	8004d76 <HAL_UART_IRQHandler+0x8e>
 8004d6c:	b119      	cbz	r1, 8004d76 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d6e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004d70:	f042 0204 	orr.w	r2, r2, #4
 8004d74:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d76:	f013 0f08 	tst.w	r3, #8
 8004d7a:	d007      	beq.n	8004d8c <HAL_UART_IRQHandler+0xa4>
 8004d7c:	f010 0f20 	tst.w	r0, #32
 8004d80:	d100      	bne.n	8004d84 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d82:	b119      	cbz	r1, 8004d8c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d84:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004d86:	f042 0208 	orr.w	r2, r2, #8
 8004d8a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d8c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	d0d5      	beq.n	8004d3e <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d92:	f013 0f20 	tst.w	r3, #32
 8004d96:	d002      	beq.n	8004d9e <HAL_UART_IRQHandler+0xb6>
 8004d98:	f010 0f20 	tst.w	r0, #32
 8004d9c:	d129      	bne.n	8004df2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004da6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004da8:	f012 0f08 	tst.w	r2, #8
 8004dac:	d100      	bne.n	8004db0 <HAL_UART_IRQHandler+0xc8>
 8004dae:	b363      	cbz	r3, 8004e0a <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8004db0:	4620      	mov	r0, r4
 8004db2:	f7ff fd9b 	bl	80048ec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004dbe:	d020      	beq.n	8004e02 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	f102 0314 	add.w	r3, r2, #20
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	3214      	adds	r2, #20
 8004dd0:	e842 3100 	strex	r1, r3, [r2]
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	d1f3      	bne.n	8004dc0 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8004dd8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004dda:	b173      	cbz	r3, 8004dfa <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ddc:	4a62      	ldr	r2, [pc, #392]	@ (8004f68 <HAL_UART_IRQHandler+0x280>)
 8004dde:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004de0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004de2:	f7fd ff1b 	bl	8002c1c <HAL_DMA_Abort_IT>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d0a9      	beq.n	8004d3e <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004dec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004dee:	4798      	blx	r3
 8004df0:	e7a5      	b.n	8004d3e <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7ff ff04 	bl	8004c00 <UART_Receive_IT>
 8004df8:	e7d1      	b.n	8004d9e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f7ff feca 	bl	8004b94 <HAL_UART_ErrorCallback>
 8004e00:	e79d      	b.n	8004d3e <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8004e02:	4620      	mov	r0, r4
 8004e04:	f7ff fec6 	bl	8004b94 <HAL_UART_ErrorCallback>
 8004e08:	e799      	b.n	8004d3e <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f7ff fec2 	bl	8004b94 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8004e14:	e793      	b.n	8004d3e <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e16:	f013 0f10 	tst.w	r3, #16
 8004e1a:	d082      	beq.n	8004d22 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e1c:	f010 0f10 	tst.w	r0, #16
 8004e20:	f43f af7f 	beq.w	8004d22 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e24:	2300      	movs	r3, #0
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	6813      	ldr	r3, [r2, #0]
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	6853      	ldr	r3, [r2, #4]
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e32:	6953      	ldr	r3, [r2, #20]
 8004e34:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004e38:	d051      	beq.n	8004ede <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e3a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f43f af7b 	beq.w	8004d3e <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e48:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004e4a:	4299      	cmp	r1, r3
 8004e4c:	f67f af77 	bls.w	8004d3e <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8004e50:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e52:	6993      	ldr	r3, [r2, #24]
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d037      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e58:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	f102 030c 	add.w	r3, r2, #12
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	320c      	adds	r2, #12
 8004e68:	e842 3100 	strex	r1, r3, [r2]
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	d1f3      	bne.n	8004e58 <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e70:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	f102 0314 	add.w	r3, r2, #20
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	3214      	adds	r2, #20
 8004e80:	e842 3100 	strex	r1, r3, [r2]
 8004e84:	2900      	cmp	r1, #0
 8004e86:	d1f3      	bne.n	8004e70 <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e88:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	f102 0314 	add.w	r3, r2, #20
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	3214      	adds	r2, #20
 8004e98:	e842 3100 	strex	r1, r3, [r2]
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	d1f3      	bne.n	8004e88 <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eaa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	f102 030c 	add.w	r3, r2, #12
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	320c      	adds	r2, #12
 8004eba:	e842 3100 	strex	r1, r3, [r2]
 8004ebe:	2900      	cmp	r1, #0
 8004ec0:	d1f3      	bne.n	8004eaa <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ec2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ec4:	f7fd fe87 	bl	8002bd6 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ecc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004ece:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	1ac9      	subs	r1, r1, r3
 8004ed4:	b289      	uxth	r1, r1
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f7ff fe91 	bl	8004bfe <HAL_UARTEx_RxEventCallback>
      return;
 8004edc:	e72f      	b.n	8004d3e <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ede:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004ee0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	1ac9      	subs	r1, r1, r3
 8004ee6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004ee8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f43f af26 	beq.w	8004d3e <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	f43f af23 	beq.w	8004d3e <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	f102 030c 	add.w	r3, r2, #12
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	320c      	adds	r2, #12
 8004f08:	e842 3000 	strex	r0, r3, [r2]
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d1f3      	bne.n	8004ef8 <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	f102 0314 	add.w	r3, r2, #20
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	3214      	adds	r2, #20
 8004f20:	e842 3000 	strex	r0, r3, [r2]
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d1f3      	bne.n	8004f10 <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 8004f28:	2320      	movs	r3, #32
 8004f2a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	f102 030c 	add.w	r3, r2, #12
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	320c      	adds	r2, #12
 8004f42:	e842 3000 	strex	r0, r3, [r2]
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d1f3      	bne.n	8004f32 <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f7ff fe55 	bl	8004bfe <HAL_UARTEx_RxEventCallback>
      return;
 8004f54:	e6f3      	b.n	8004d3e <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8004f56:	4620      	mov	r0, r4
 8004f58:	f7ff fcf6 	bl	8004948 <UART_Transmit_IT>
    return;
 8004f5c:	e6ef      	b.n	8004d3e <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f7ff fe04 	bl	8004b6c <UART_EndTransmit_IT>
    return;
 8004f64:	e6eb      	b.n	8004d3e <HAL_UART_IRQHandler+0x56>
 8004f66:	bf00      	nop
 8004f68:	08004bef 	.word	0x08004bef

08004f6c <UART_DMARxHalfCplt>:
{
 8004f6c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f6e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f70:	2301      	movs	r3, #1
 8004f72:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f74:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d002      	beq.n	8004f80 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f7a:	f7ff fe0a 	bl	8004b92 <HAL_UART_RxHalfCpltCallback>
}
 8004f7e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f80:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004f82:	0849      	lsrs	r1, r1, #1
 8004f84:	f7ff fe3b 	bl	8004bfe <HAL_UARTEx_RxEventCallback>
 8004f88:	e7f9      	b.n	8004f7e <UART_DMARxHalfCplt+0x12>

08004f8a <UART_DMAReceiveCplt>:
{
 8004f8a:	b508      	push	{r3, lr}
 8004f8c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f013 0f20 	tst.w	r3, #32
 8004f98:	d12b      	bne.n	8004ff2 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	f102 030c 	add.w	r3, r2, #12
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	320c      	adds	r2, #12
 8004fae:	e842 3100 	strex	r1, r3, [r2]
 8004fb2:	2900      	cmp	r1, #0
 8004fb4:	d1f3      	bne.n	8004f9e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	f102 0314 	add.w	r3, r2, #20
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	3214      	adds	r2, #20
 8004fc6:	e842 3100 	strex	r1, r3, [r2]
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	d1f3      	bne.n	8004fb6 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	f102 0314 	add.w	r3, r2, #20
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	3214      	adds	r2, #20
 8004fde:	e842 3100 	strex	r1, r3, [r2]
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	d1f3      	bne.n	8004fce <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8004fe6:	2320      	movs	r3, #32
 8004fe8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d007      	beq.n	8005002 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d00f      	beq.n	800501c <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8004ffc:	f7fc fa56 	bl	80014ac <HAL_UART_RxCpltCallback>
}
 8005000:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005002:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	f102 030c 	add.w	r3, r2, #12
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	320c      	adds	r2, #12
 8005012:	e842 3100 	strex	r1, r3, [r2]
 8005016:	2900      	cmp	r1, #0
 8005018:	d1f3      	bne.n	8005002 <UART_DMAReceiveCplt+0x78>
 800501a:	e7ea      	b.n	8004ff2 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800501c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800501e:	f7ff fdee 	bl	8004bfe <HAL_UARTEx_RxEventCallback>
 8005022:	e7ed      	b.n	8005000 <UART_DMAReceiveCplt+0x76>

08005024 <UART_Start_Receive_DMA>:
{
 8005024:	b530      	push	{r4, r5, lr}
 8005026:	b083      	sub	sp, #12
 8005028:	4604      	mov	r4, r0
 800502a:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800502c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800502e:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	2500      	movs	r5, #0
 8005032:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005034:	2222      	movs	r2, #34	@ 0x22
 8005036:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800503a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800503c:	481f      	ldr	r0, [pc, #124]	@ (80050bc <UART_Start_Receive_DMA+0x98>)
 800503e:	6290      	str	r0, [r2, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005040:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005042:	481f      	ldr	r0, [pc, #124]	@ (80050c0 <UART_Start_Receive_DMA+0x9c>)
 8005044:	62d0      	str	r0, [r2, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005046:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005048:	481e      	ldr	r0, [pc, #120]	@ (80050c4 <UART_Start_Receive_DMA+0xa0>)
 800504a:	6310      	str	r0, [r2, #48]	@ 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 800504c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800504e:	6355      	str	r5, [r2, #52]	@ 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005050:	6820      	ldr	r0, [r4, #0]
 8005052:	460a      	mov	r2, r1
 8005054:	1d01      	adds	r1, r0, #4
 8005056:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005058:	f7fd fd82 	bl	8002b60 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800505c:	9501      	str	r5, [sp, #4]
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	9201      	str	r2, [sp, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	9301      	str	r3, [sp, #4]
 8005068:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800506a:	6923      	ldr	r3, [r4, #16]
 800506c:	b15b      	cbz	r3, 8005086 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800506e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	f102 030c 	add.w	r3, r2, #12
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	320c      	adds	r2, #12
 800507e:	e842 3100 	strex	r1, r3, [r2]
 8005082:	2900      	cmp	r1, #0
 8005084:	d1f3      	bne.n	800506e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005086:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	f102 0314 	add.w	r3, r2, #20
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	3214      	adds	r2, #20
 8005096:	e842 3100 	strex	r1, r3, [r2]
 800509a:	2900      	cmp	r1, #0
 800509c:	d1f3      	bne.n	8005086 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	f102 0314 	add.w	r3, r2, #20
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	3214      	adds	r2, #20
 80050ae:	e842 3100 	strex	r1, r3, [r2]
 80050b2:	2900      	cmp	r1, #0
 80050b4:	d1f3      	bne.n	800509e <UART_Start_Receive_DMA+0x7a>
}
 80050b6:	2000      	movs	r0, #0
 80050b8:	b003      	add	sp, #12
 80050ba:	bd30      	pop	{r4, r5, pc}
 80050bc:	08004f8b 	.word	0x08004f8b
 80050c0:	08004f6d 	.word	0x08004f6d
 80050c4:	08004b97 	.word	0x08004b97

080050c8 <HAL_UART_Receive_DMA>:
{
 80050c8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ca:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d108      	bne.n	80050e6 <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 80050d4:	b149      	cbz	r1, 80050ea <HAL_UART_Receive_DMA+0x22>
 80050d6:	b90a      	cbnz	r2, 80050dc <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 80050d8:	2001      	movs	r0, #1
}
 80050da:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050dc:	2300      	movs	r3, #0
 80050de:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80050e0:	f7ff ffa0 	bl	8005024 <UART_Start_Receive_DMA>
 80050e4:	e7f9      	b.n	80050da <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 80050e6:	2002      	movs	r0, #2
 80050e8:	e7f7      	b.n	80050da <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 80050ea:	2001      	movs	r0, #1
 80050ec:	e7f5      	b.n	80050da <HAL_UART_Receive_DMA+0x12>
	...

080050f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80050f0:	f7fc fea6 	bl	8001e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050f4:	480b      	ldr	r0, [pc, #44]	@ (8005124 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80050f6:	490c      	ldr	r1, [pc, #48]	@ (8005128 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80050f8:	4a0c      	ldr	r2, [pc, #48]	@ (800512c <LoopFillZerobss+0x16>)
  movs r3, #0
 80050fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050fc:	e002      	b.n	8005104 <LoopCopyDataInit>

080050fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005102:	3304      	adds	r3, #4

08005104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005108:	d3f9      	bcc.n	80050fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800510a:	4a09      	ldr	r2, [pc, #36]	@ (8005130 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800510c:	4c09      	ldr	r4, [pc, #36]	@ (8005134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800510e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005110:	e001      	b.n	8005116 <LoopFillZerobss>

08005112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005114:	3204      	adds	r2, #4

08005116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005118:	d3fb      	bcc.n	8005112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800511a:	f000 f867 	bl	80051ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800511e:	f7fb ff2f 	bl	8000f80 <main>
  bx lr
 8005122:	4770      	bx	lr
  ldr r0, =_sdata
 8005124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005128:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800512c:	080052bc 	.word	0x080052bc
  ldr r2, =_sbss
 8005130:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8005134:	200006f8 	.word	0x200006f8

08005138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005138:	e7fe      	b.n	8005138 <ADC1_2_IRQHandler>
	...

0800513c <_IQ18div>:
 800513c:	f091 0f00 	teq	r1, #0
 8005140:	bf04      	itt	eq
 8005142:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8005146:	4770      	bxeq	lr
 8005148:	b510      	push	{r4, lr}
 800514a:	f04f 0e01 	mov.w	lr, #1
 800514e:	ea90 0f01 	teq	r0, r1
 8005152:	bf48      	it	mi
 8005154:	f04f 0e00 	movmi.w	lr, #0
 8005158:	2800      	cmp	r0, #0
 800515a:	bf48      	it	mi
 800515c:	4240      	negmi	r0, r0
 800515e:	2900      	cmp	r1, #0
 8005160:	bf48      	it	mi
 8005162:	4249      	negmi	r1, r1
 8005164:	fab0 f480 	clz	r4, r0
 8005168:	2c12      	cmp	r4, #18
 800516a:	bfa8      	it	ge
 800516c:	2412      	movge	r4, #18
 800516e:	fa00 f204 	lsl.w	r2, r0, r4
 8005172:	f1c4 0c12 	rsb	ip, r4, #18
 8005176:	fbb2 f0f1 	udiv	r0, r2, r1
 800517a:	fab0 f380 	clz	r3, r0
 800517e:	459c      	cmp	ip, r3
 8005180:	bfa4      	itt	ge
 8005182:	f1ce 4000 	rsbge	r0, lr, #2147483648	@ 0x80000000
 8005186:	bd10      	popge	{r4, pc}
 8005188:	fb01 2210 	mls	r2, r1, r0, r2
 800518c:	fab2 f482 	clz	r4, r2
 8005190:	4564      	cmp	r4, ip
 8005192:	da0e      	bge.n	80051b2 <divfinished18>

08005194 <divmore18>:
 8005194:	ebac 0c04 	sub.w	ip, ip, r4
 8005198:	fa02 f204 	lsl.w	r2, r2, r4
 800519c:	fa00 f004 	lsl.w	r0, r0, r4
 80051a0:	fbb2 f3f1 	udiv	r3, r2, r1
 80051a4:	fb01 2213 	mls	r2, r1, r3, r2
 80051a8:	4418      	add	r0, r3
 80051aa:	fab2 f482 	clz	r4, r2
 80051ae:	4564      	cmp	r4, ip
 80051b0:	ddf0      	ble.n	8005194 <divmore18>

080051b2 <divfinished18>:
 80051b2:	fa02 f20c 	lsl.w	r2, r2, ip
 80051b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80051ba:	fbb2 f3f1 	udiv	r3, r2, r1
 80051be:	4418      	add	r0, r3
 80051c0:	f09e 0f00 	teq	lr, #0
 80051c4:	bf08      	it	eq
 80051c6:	4240      	negeq	r0, r0
 80051c8:	bd10      	pop	{r4, pc}
 80051ca:	bf00      	nop

080051cc <_IQ18mpy>:
 80051cc:	fb80 0101 	smull	r0, r1, r0, r1
 80051d0:	ea4f 4090 	mov.w	r0, r0, lsr #18
 80051d4:	eb00 3081 	add.w	r0, r0, r1, lsl #14
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop

080051dc <memset>:
 80051dc:	4603      	mov	r3, r0
 80051de:	4402      	add	r2, r0
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d100      	bne.n	80051e6 <memset+0xa>
 80051e4:	4770      	bx	lr
 80051e6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ea:	e7f9      	b.n	80051e0 <memset+0x4>

080051ec <__libc_init_array>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	2600      	movs	r6, #0
 80051f0:	4d0c      	ldr	r5, [pc, #48]	@ (8005224 <__libc_init_array+0x38>)
 80051f2:	4c0d      	ldr	r4, [pc, #52]	@ (8005228 <__libc_init_array+0x3c>)
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	42a6      	cmp	r6, r4
 80051fa:	d109      	bne.n	8005210 <__libc_init_array+0x24>
 80051fc:	f000 f82e 	bl	800525c <_init>
 8005200:	2600      	movs	r6, #0
 8005202:	4d0a      	ldr	r5, [pc, #40]	@ (800522c <__libc_init_array+0x40>)
 8005204:	4c0a      	ldr	r4, [pc, #40]	@ (8005230 <__libc_init_array+0x44>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	42a6      	cmp	r6, r4
 800520c:	d105      	bne.n	800521a <__libc_init_array+0x2e>
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	f855 3b04 	ldr.w	r3, [r5], #4
 8005214:	4798      	blx	r3
 8005216:	3601      	adds	r6, #1
 8005218:	e7ee      	b.n	80051f8 <__libc_init_array+0xc>
 800521a:	f855 3b04 	ldr.w	r3, [r5], #4
 800521e:	4798      	blx	r3
 8005220:	3601      	adds	r6, #1
 8005222:	e7f2      	b.n	800520a <__libc_init_array+0x1e>
 8005224:	080052b4 	.word	0x080052b4
 8005228:	080052b4 	.word	0x080052b4
 800522c:	080052b4 	.word	0x080052b4
 8005230:	080052b8 	.word	0x080052b8

08005234 <__popcountsi2>:
 8005234:	0843      	lsrs	r3, r0, #1
 8005236:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800523a:	1ac0      	subs	r0, r0, r3
 800523c:	0883      	lsrs	r3, r0, #2
 800523e:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8005242:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8005246:	4418      	add	r0, r3
 8005248:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 800524c:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8005250:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8005254:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8005258:	0e00      	lsrs	r0, r0, #24
 800525a:	4770      	bx	lr

0800525c <_init>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	bf00      	nop
 8005260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005262:	bc08      	pop	{r3}
 8005264:	469e      	mov	lr, r3
 8005266:	4770      	bx	lr

08005268 <_fini>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr
