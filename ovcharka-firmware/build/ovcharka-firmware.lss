
build/ovcharka-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002288  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002394  08002394  00003394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080023c0  080023c0  000033c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080023c4  080023c4  000033c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080023c8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000214  20000010  080023d8  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000224  080023d8  00004224  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012789  00000000  00000000  00004072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000283b  00000000  00000000  000167fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000a89a  00000000  00000000  00019036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ed8  00000000  00000000  000238d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b61  00000000  00000000  000247a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010f3a  00000000  00000000  00025309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000411d  00000000  00000000  00036243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000027c8  00000000  00000000  0003a360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000040  00000000  00000000  0003cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800237c 	.word	0x0800237c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800237c 	.word	0x0800237c

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b500      	push	{lr}
 800014e:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000150:	2300      	movs	r3, #0
 8000152:	9301      	str	r3, [sp, #4]
 8000154:	9302      	str	r3, [sp, #8]
 8000156:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000158:	4811      	ldr	r0, [pc, #68]	@ (80001a0 <MX_ADC1_Init+0x54>)
 800015a:	4a12      	ldr	r2, [pc, #72]	@ (80001a4 <MX_ADC1_Init+0x58>)
 800015c:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800015e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000160:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000162:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000164:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000168:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800016a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800016c:	2301      	movs	r3, #1
 800016e:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000170:	f000 fd4a 	bl	8000c08 <HAL_ADC_Init>
 8000174:	b968      	cbnz	r0, 8000192 <MX_ADC1_Init+0x46>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000176:	2302      	movs	r3, #2
 8000178:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800017a:	2301      	movs	r3, #1
 800017c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800017e:	2300      	movs	r3, #0
 8000180:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000182:	a901      	add	r1, sp, #4
 8000184:	4806      	ldr	r0, [pc, #24]	@ (80001a0 <MX_ADC1_Init+0x54>)
 8000186:	f000 fc73 	bl	8000a70 <HAL_ADC_ConfigChannel>
 800018a:	b928      	cbnz	r0, 8000198 <MX_ADC1_Init+0x4c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800018c:	b005      	add	sp, #20
 800018e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000192:	f000 f8c3 	bl	800031c <Error_Handler>
 8000196:	e7ee      	b.n	8000176 <MX_ADC1_Init+0x2a>
    Error_Handler();
 8000198:	f000 f8c0 	bl	800031c <Error_Handler>
}
 800019c:	e7f6      	b.n	800018c <MX_ADC1_Init+0x40>
 800019e:	bf00      	nop
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	40012400 	.word	0x40012400

080001a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001a8:	b500      	push	{lr}
 80001aa:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ac:	2300      	movs	r3, #0
 80001ae:	9302      	str	r3, [sp, #8]
 80001b0:	9303      	str	r3, [sp, #12]
 80001b2:	9304      	str	r3, [sp, #16]
 80001b4:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 80001b6:	6802      	ldr	r2, [r0, #0]
 80001b8:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <HAL_ADC_MspInit+0x58>)
 80001ba:	429a      	cmp	r2, r3
 80001bc:	d002      	beq.n	80001c4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80001be:	b007      	add	sp, #28
 80001c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001c4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80001c8:	699a      	ldr	r2, [r3, #24]
 80001ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80001ce:	619a      	str	r2, [r3, #24]
 80001d0:	699a      	ldr	r2, [r3, #24]
 80001d2:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80001d6:	9200      	str	r2, [sp, #0]
 80001d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001da:	699a      	ldr	r2, [r3, #24]
 80001dc:	f042 0204 	orr.w	r2, r2, #4
 80001e0:	619a      	str	r2, [r3, #24]
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	f003 0304 	and.w	r3, r3, #4
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CS2_Pin|CS1_Pin;
 80001ec:	230c      	movs	r3, #12
 80001ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001f0:	2303      	movs	r3, #3
 80001f2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f4:	a902      	add	r1, sp, #8
 80001f6:	4803      	ldr	r0, [pc, #12]	@ (8000204 <HAL_ADC_MspInit+0x5c>)
 80001f8:	f000 fdf4 	bl	8000de4 <HAL_GPIO_Init>
}
 80001fc:	e7df      	b.n	80001be <HAL_ADC_MspInit+0x16>
 80001fe:	bf00      	nop
 8000200:	40012400 	.word	0x40012400
 8000204:	40010800 	.word	0x40010800

08000208 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800020c:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020e:	2400      	movs	r4, #0
 8000210:	9404      	str	r4, [sp, #16]
 8000212:	9405      	str	r4, [sp, #20]
 8000214:	9406      	str	r4, [sp, #24]
 8000216:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000218:	4b3c      	ldr	r3, [pc, #240]	@ (800030c <MX_GPIO_Init+0x104>)
 800021a:	699a      	ldr	r2, [r3, #24]
 800021c:	f042 0210 	orr.w	r2, r2, #16
 8000220:	619a      	str	r2, [r3, #24]
 8000222:	699a      	ldr	r2, [r3, #24]
 8000224:	f002 0210 	and.w	r2, r2, #16
 8000228:	9200      	str	r2, [sp, #0]
 800022a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800022c:	699a      	ldr	r2, [r3, #24]
 800022e:	f042 0220 	orr.w	r2, r2, #32
 8000232:	619a      	str	r2, [r3, #24]
 8000234:	699a      	ldr	r2, [r3, #24]
 8000236:	f002 0220 	and.w	r2, r2, #32
 800023a:	9201      	str	r2, [sp, #4]
 800023c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	699a      	ldr	r2, [r3, #24]
 8000240:	f042 0204 	orr.w	r2, r2, #4
 8000244:	619a      	str	r2, [r3, #24]
 8000246:	699a      	ldr	r2, [r3, #24]
 8000248:	f002 0204 	and.w	r2, r2, #4
 800024c:	9202      	str	r2, [sp, #8]
 800024e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000250:	699a      	ldr	r2, [r3, #24]
 8000252:	f042 0208 	orr.w	r2, r2, #8
 8000256:	619a      	str	r2, [r3, #24]
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0308 	and.w	r3, r3, #8
 800025e:	9303      	str	r3, [sp, #12]
 8000260:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BRIDGESLEEP2_Pin|DRVOFF2_Pin|SPI1_SS2_Pin|SPI1_SS3_Pin, GPIO_PIN_RESET);
 8000262:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8000310 <MX_GPIO_Init+0x108>
 8000266:	4622      	mov	r2, r4
 8000268:	213c      	movs	r1, #60	@ 0x3c
 800026a:	4648      	mov	r0, r9
 800026c:	f000 fecf 	bl	800100e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR2_1_Pin|SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000270:	4d28      	ldr	r5, [pc, #160]	@ (8000314 <MX_GPIO_Init+0x10c>)
 8000272:	4622      	mov	r2, r4
 8000274:	2112      	movs	r1, #18
 8000276:	4628      	mov	r0, r5
 8000278:	f000 fec9 	bl	800100e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SS4_Pin|DIR1_1_Pin|DRVOFF1_Pin|BRIDGESLEEP1_Pin
 800027c:	4e26      	ldr	r6, [pc, #152]	@ (8000318 <MX_GPIO_Init+0x110>)
 800027e:	4622      	mov	r2, r4
 8000280:	f243 0113 	movw	r1, #12307	@ 0x3013
 8000284:	4630      	mov	r0, r6
 8000286:	f000 fec2 	bl	800100e <HAL_GPIO_WritePin>
                          |IND_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nFAULT_L2_Pin nFAULT_R2_Pin ENC1_Z_Pin ENC2_Z_Pin */
  GPIO_InitStruct.Pin = nFAULT_L2_Pin|nFAULT_R2_Pin|ENC1_Z_Pin|ENC2_Z_Pin;
 800028a:	f240 3303 	movw	r3, #771	@ 0x303
 800028e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000290:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000294:	a904      	add	r1, sp, #16
 8000296:	4648      	mov	r0, r9
 8000298:	f000 fda4 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRIDGESLEEP2_Pin DRVOFF2_Pin SPI1_SS2_Pin SPI1_SS3_Pin */
  GPIO_InitStruct.Pin = BRIDGESLEEP2_Pin|DRVOFF2_Pin|SPI1_SS2_Pin|SPI1_SS3_Pin;
 800029c:	233c      	movs	r3, #60	@ 0x3c
 800029e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a0:	f04f 0801 	mov.w	r8, #1
 80002a4:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2702      	movs	r7, #2
 80002ac:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ae:	a904      	add	r1, sp, #16
 80002b0:	4648      	mov	r0, r9
 80002b2:	f000 fd97 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_1_Pin SPI1_SS1_Pin */
  GPIO_InitStruct.Pin = DIR2_1_Pin|SPI1_SS1_Pin;
 80002b6:	2312      	movs	r3, #18
 80002b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c0:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c2:	a904      	add	r1, sp, #16
 80002c4:	4628      	mov	r0, r5
 80002c6:	f000 fd8d 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SS4_Pin DIR1_1_Pin DRVOFF1_Pin BRIDGESLEEP1_Pin
                           IND_LED_Pin */
  GPIO_InitStruct.Pin = SPI1_SS4_Pin|DIR1_1_Pin|DRVOFF1_Pin|BRIDGESLEEP1_Pin
 80002ca:	f243 0313 	movw	r3, #12307	@ 0x3013
 80002ce:	9304      	str	r3, [sp, #16]
                          |IND_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d0:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d6:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d8:	a904      	add	r1, sp, #16
 80002da:	4630      	mov	r0, r6
 80002dc:	f000 fd82 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT_R1_Pin nFAULT_L1_Pin RS485_CTRL_Pin */
  GPIO_InitStruct.Pin = nFAULT_R1_Pin|nFAULT_L1_Pin|RS485_CTRL_Pin;
 80002e0:	f24c 0320 	movw	r3, #49184	@ 0xc020
 80002e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ea:	a904      	add	r1, sp, #16
 80002ec:	4630      	mov	r0, r6
 80002ee:	f000 fd79 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ID_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin;
 80002f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(USB_ID_GPIO_Port, &GPIO_InitStruct);
 80002fc:	a904      	add	r1, sp, #16
 80002fe:	4628      	mov	r0, r5
 8000300:	f000 fd70 	bl	8000de4 <HAL_GPIO_Init>

}
 8000304:	b009      	add	sp, #36	@ 0x24
 8000306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000
 8000310:	40011000 	.word	0x40011000
 8000314:	40010800 	.word	0x40010800
 8000318:	40010c00 	.word	0x40010c00

0800031c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800031e:	e7fe      	b.n	800031e <Error_Handler+0x2>

08000320 <SystemClock_Config>:
{
 8000320:	b500      	push	{lr}
 8000322:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000324:	2228      	movs	r2, #40	@ 0x28
 8000326:	2100      	movs	r1, #0
 8000328:	eb0d 0002 	add.w	r0, sp, r2
 800032c:	f001 fff9 	bl	8002322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	2300      	movs	r3, #0
 8000332:	9305      	str	r3, [sp, #20]
 8000334:	9306      	str	r3, [sp, #24]
 8000336:	9307      	str	r3, [sp, #28]
 8000338:	9308      	str	r3, [sp, #32]
 800033a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	9302      	str	r3, [sp, #8]
 8000340:	9303      	str	r3, [sp, #12]
 8000342:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000344:	2201      	movs	r2, #1
 8000346:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800034c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000350:	2202      	movs	r2, #2
 8000352:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000354:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000356:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800035a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035c:	a80a      	add	r0, sp, #40	@ 0x28
 800035e:	f000 fe73 	bl	8001048 <HAL_RCC_OscConfig>
 8000362:	b9c8      	cbnz	r0, 8000398 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000364:	230f      	movs	r3, #15
 8000366:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000368:	2102      	movs	r1, #2
 800036a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000370:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000374:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000376:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000378:	a805      	add	r0, sp, #20
 800037a:	f001 f897 	bl	80014ac <HAL_RCC_ClockConfig>
 800037e:	b968      	cbnz	r0, 800039c <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000380:	2302      	movs	r3, #2
 8000382:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000388:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	a801      	add	r0, sp, #4
 800038c:	f001 f96a 	bl	8001664 <HAL_RCCEx_PeriphCLKConfig>
 8000390:	b930      	cbnz	r0, 80003a0 <SystemClock_Config+0x80>
}
 8000392:	b015      	add	sp, #84	@ 0x54
 8000394:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000398:	f7ff ffc0 	bl	800031c <Error_Handler>
    Error_Handler();
 800039c:	f7ff ffbe 	bl	800031c <Error_Handler>
    Error_Handler();
 80003a0:	f7ff ffbc 	bl	800031c <Error_Handler>

080003a4 <main>:
{
 80003a4:	b500      	push	{lr}
 80003a6:	b083      	sub	sp, #12
  HAL_Init();
 80003a8:	f000 fb2a 	bl	8000a00 <HAL_Init>
  SystemClock_Config();
 80003ac:	f7ff ffb8 	bl	8000320 <SystemClock_Config>
  MX_GPIO_Init();
 80003b0:	f7ff ff2a 	bl	8000208 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003b4:	f7ff feca 	bl	800014c <MX_ADC1_Init>
  MX_SPI1_Init();
 80003b8:	f000 f840 	bl	800043c <MX_SPI1_Init>
  MX_TIM1_Init();
 80003bc:	f000 f8ca 	bl	8000554 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003c0:	f000 f8fa 	bl	80005b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003c4:	f000 fa4e 	bl	8000864 <MX_TIM3_Init>
  MX_TIM4_Init();
 80003c8:	f000 f926 	bl	8000618 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80003cc:	f000 fa94 	bl	80008f8 <MX_USART1_UART_Init>
  HAL_Delay(5);
 80003d0:	2005      	movs	r0, #5
 80003d2:	f000 fb39 	bl	8000a48 <HAL_Delay>
  HAL_GPIO_WritePin(BRIDGESLEEP1_GPIO_Port, BRIDGESLEEP1_Pin, GPIO_PIN_SET);
 80003d6:	4c13      	ldr	r4, [pc, #76]	@ (8000424 <main+0x80>)
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003de:	4620      	mov	r0, r4
 80003e0:	f000 fe15 	bl	800100e <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80003e4:	2001      	movs	r0, #1
 80003e6:	f000 fb2f 	bl	8000a48 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_RESET);
 80003ea:	4d0f      	ldr	r5, [pc, #60]	@ (8000428 <main+0x84>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	2110      	movs	r1, #16
 80003f0:	4628      	mov	r0, r5
 80003f2:	f000 fe0c 	bl	800100e <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 2, HAL_MAX_DELAY);
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2302      	movs	r3, #2
 80003fe:	4a0b      	ldr	r2, [pc, #44]	@ (800042c <main+0x88>)
 8000400:	490b      	ldr	r1, [pc, #44]	@ (8000430 <main+0x8c>)
 8000402:	480c      	ldr	r0, [pc, #48]	@ (8000434 <main+0x90>)
 8000404:	f001 fa9b 	bl	800193e <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2110      	movs	r1, #16
 800040c:	4628      	mov	r0, r5
 800040e:	f000 fdfe 	bl	800100e <HAL_GPIO_WritePin>
  fault1 = HAL_GPIO_ReadPin(nFAULT_L1_GPIO_Port, nFAULT_L1_Pin);
 8000412:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000416:	4620      	mov	r0, r4
 8000418:	f000 fdf2 	bl	8001000 <HAL_GPIO_ReadPin>
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <main+0x94>)
 800041e:	7018      	strb	r0, [r3, #0]
  while (1)
 8000420:	e7fe      	b.n	8000420 <main+0x7c>
 8000422:	bf00      	nop
 8000424:	40010c00 	.word	0x40010c00
 8000428:	40010800 	.word	0x40010800
 800042c:	2000005e 	.word	0x2000005e
 8000430:	20000000 	.word	0x20000000
 8000434:	20000060 	.word	0x20000060
 8000438:	2000005c 	.word	0x2000005c

0800043c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800043c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800043e:	480e      	ldr	r0, [pc, #56]	@ (8000478 <MX_SPI1_Init+0x3c>)
 8000440:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <MX_SPI1_Init+0x40>)
 8000442:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000444:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000448:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800044a:	2300      	movs	r3, #0
 800044c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800044e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000450:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000452:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000458:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800045a:	2218      	movs	r2, #24
 800045c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800045e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000460:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000462:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000464:	230a      	movs	r3, #10
 8000466:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000468:	f001 fa0e 	bl	8001888 <HAL_SPI_Init>
 800046c:	b900      	cbnz	r0, 8000470 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800046e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000470:	f7ff ff54 	bl	800031c <Error_Handler>
}
 8000474:	e7fb      	b.n	800046e <MX_SPI1_Init+0x32>
 8000476:	bf00      	nop
 8000478:	20000060 	.word	0x20000060
 800047c:	40013000 	.word	0x40013000

08000480 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000480:	b510      	push	{r4, lr}
 8000482:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	2300      	movs	r3, #0
 8000486:	9302      	str	r3, [sp, #8]
 8000488:	9303      	str	r3, [sp, #12]
 800048a:	9304      	str	r3, [sp, #16]
 800048c:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 800048e:	6802      	ldr	r2, [r0, #0]
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <HAL_SPI_MspInit+0x6c>)
 8000492:	429a      	cmp	r2, r3
 8000494:	d001      	beq.n	800049a <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000496:	b006      	add	sp, #24
 8000498:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800049a:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800049e:	699a      	ldr	r2, [r3, #24]
 80004a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80004a4:	619a      	str	r2, [r3, #24]
 80004a6:	699a      	ldr	r2, [r3, #24]
 80004a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	f042 0204 	orr.w	r2, r2, #4
 80004b6:	619a      	str	r2, [r3, #24]
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004c2:	23a0      	movs	r3, #160	@ 0xa0
 80004c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c6:	2302      	movs	r3, #2
 80004c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	4c08      	ldr	r4, [pc, #32]	@ (80004f0 <HAL_SPI_MspInit+0x70>)
 80004d0:	a902      	add	r1, sp, #8
 80004d2:	4620      	mov	r0, r4
 80004d4:	f000 fc86 	bl	8000de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004d8:	2340      	movs	r3, #64	@ 0x40
 80004da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004dc:	2300      	movs	r3, #0
 80004de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	a902      	add	r1, sp, #8
 80004e4:	4620      	mov	r0, r4
 80004e6:	f000 fc7d 	bl	8000de4 <HAL_GPIO_Init>
}
 80004ea:	e7d4      	b.n	8000496 <HAL_SPI_MspInit+0x16>
 80004ec:	40013000 	.word	0x40013000
 80004f0:	40010800 	.word	0x40010800

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <HAL_MspInit+0x3c>)
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	f042 0201 	orr.w	r2, r2, #1
 80004fe:	619a      	str	r2, [r3, #24]
 8000500:	699a      	ldr	r2, [r3, #24]
 8000502:	f002 0201 	and.w	r2, r2, #1
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	69da      	ldr	r2, [r3, #28]
 800050c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000510:	61da      	str	r2, [r3, #28]
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051c:	4a05      	ldr	r2, [pc, #20]	@ (8000534 <HAL_MspInit+0x40>)
 800051e:	6853      	ldr	r3, [r2, #4]
 8000520:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000524:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	b002      	add	sp, #8
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	40010000 	.word	0x40010000

08000538 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000538:	e7fe      	b.n	8000538 <NMI_Handler>

0800053a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler>

0800053c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <MemManage_Handler>

0800053e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <BusFault_Handler>

08000540 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler>

08000542 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000542:	4770      	bx	lr

08000544 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000548:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054a:	f000 fa6b 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054e:	bd08      	pop	{r3, pc}

08000550 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000550:	4770      	bx	lr
	...

08000554 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000554:	b500      	push	{lr}
 8000556:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000558:	2224      	movs	r2, #36	@ 0x24
 800055a:	2100      	movs	r1, #0
 800055c:	a803      	add	r0, sp, #12
 800055e:	f001 fee0 	bl	8002322 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000562:	2300      	movs	r3, #0
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000568:	4811      	ldr	r0, [pc, #68]	@ (80005b0 <MX_TIM1_Init+0x5c>)
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <MX_TIM1_Init+0x60>)
 800056c:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 800056e:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000570:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8000572:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000576:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000578:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800057a:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057c:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800057e:	2301      	movs	r3, #1
 8000580:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000582:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000584:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000586:	a903      	add	r1, sp, #12
 8000588:	f001 fc6c 	bl	8001e64 <HAL_TIM_Encoder_Init>
 800058c:	b950      	cbnz	r0, 80005a4 <MX_TIM1_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058e:	2300      	movs	r3, #0
 8000590:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000592:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000594:	a901      	add	r1, sp, #4
 8000596:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <MX_TIM1_Init+0x5c>)
 8000598:	f001 fdee 	bl	8002178 <HAL_TIMEx_MasterConfigSynchronization>
 800059c:	b928      	cbnz	r0, 80005aa <MX_TIM1_Init+0x56>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800059e:	b00d      	add	sp, #52	@ 0x34
 80005a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80005a4:	f7ff feba 	bl	800031c <Error_Handler>
 80005a8:	e7f1      	b.n	800058e <MX_TIM1_Init+0x3a>
    Error_Handler();
 80005aa:	f7ff feb7 	bl	800031c <Error_Handler>
}
 80005ae:	e7f6      	b.n	800059e <MX_TIM1_Init+0x4a>
 80005b0:	20000190 	.word	0x20000190
 80005b4:	40012c00 	.word	0x40012c00

080005b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80005b8:	b500      	push	{lr}
 80005ba:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005bc:	2224      	movs	r2, #36	@ 0x24
 80005be:	2100      	movs	r1, #0
 80005c0:	a803      	add	r0, sp, #12
 80005c2:	f001 feae 	bl	8002322 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c6:	2300      	movs	r3, #0
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005cc:	4811      	ldr	r0, [pc, #68]	@ (8000614 <MX_TIM2_Init+0x5c>)
 80005ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005d2:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80005d4:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d6:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 80005d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005dc:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005de:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e0:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005e6:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005e8:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005ea:	a903      	add	r1, sp, #12
 80005ec:	f001 fc3a 	bl	8001e64 <HAL_TIM_Encoder_Init>
 80005f0:	b950      	cbnz	r0, 8000608 <MX_TIM2_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f6:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f8:	a901      	add	r1, sp, #4
 80005fa:	4806      	ldr	r0, [pc, #24]	@ (8000614 <MX_TIM2_Init+0x5c>)
 80005fc:	f001 fdbc 	bl	8002178 <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	b928      	cbnz	r0, 800060e <MX_TIM2_Init+0x56>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000602:	b00d      	add	sp, #52	@ 0x34
 8000604:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000608:	f7ff fe88 	bl	800031c <Error_Handler>
 800060c:	e7f1      	b.n	80005f2 <MX_TIM2_Init+0x3a>
    Error_Handler();
 800060e:	f7ff fe85 	bl	800031c <Error_Handler>
}
 8000612:	e7f6      	b.n	8000602 <MX_TIM2_Init+0x4a>
 8000614:	20000148 	.word	0x20000148

08000618 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000618:	b500      	push	{lr}
 800061a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	2300      	movs	r3, #0
 800061e:	9304      	str	r3, [sp, #16]
 8000620:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800062a:	481b      	ldr	r0, [pc, #108]	@ (8000698 <MX_TIM4_Init+0x80>)
 800062c:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <MX_TIM4_Init+0x84>)
 800062e:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8000630:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8000634:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000638:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063a:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800063e:	f001 fbe5 	bl	8001e0c <HAL_TIM_IC_Init>
 8000642:	b9e0      	cbnz	r0, 800067e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000644:	2300      	movs	r3, #0
 8000646:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000648:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800064a:	a904      	add	r1, sp, #16
 800064c:	4812      	ldr	r0, [pc, #72]	@ (8000698 <MX_TIM4_Init+0x80>)
 800064e:	f001 fd93 	bl	8002178 <HAL_TIMEx_MasterConfigSynchronization>
 8000652:	b9b8      	cbnz	r0, 8000684 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000654:	2300      	movs	r3, #0
 8000656:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000658:	2201      	movs	r2, #1
 800065a:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800065c:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 0;
 800065e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000660:	2208      	movs	r2, #8
 8000662:	4669      	mov	r1, sp
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <MX_TIM4_Init+0x80>)
 8000666:	f001 fd21 	bl	80020ac <HAL_TIM_IC_ConfigChannel>
 800066a:	b970      	cbnz	r0, 800068a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800066c:	220c      	movs	r2, #12
 800066e:	4669      	mov	r1, sp
 8000670:	4809      	ldr	r0, [pc, #36]	@ (8000698 <MX_TIM4_Init+0x80>)
 8000672:	f001 fd1b 	bl	80020ac <HAL_TIM_IC_ConfigChannel>
 8000676:	b958      	cbnz	r0, 8000690 <MX_TIM4_Init+0x78>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000678:	b007      	add	sp, #28
 800067a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800067e:	f7ff fe4d 	bl	800031c <Error_Handler>
 8000682:	e7df      	b.n	8000644 <MX_TIM4_Init+0x2c>
    Error_Handler();
 8000684:	f7ff fe4a 	bl	800031c <Error_Handler>
 8000688:	e7e4      	b.n	8000654 <MX_TIM4_Init+0x3c>
    Error_Handler();
 800068a:	f7ff fe47 	bl	800031c <Error_Handler>
 800068e:	e7ed      	b.n	800066c <MX_TIM4_Init+0x54>
    Error_Handler();
 8000690:	f7ff fe44 	bl	800031c <Error_Handler>
}
 8000694:	e7f0      	b.n	8000678 <MX_TIM4_Init+0x60>
 8000696:	bf00      	nop
 8000698:	200000b8 	.word	0x200000b8
 800069c:	40000800 	.word	0x40000800

080006a0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80006a0:	b500      	push	{lr}
 80006a2:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	2300      	movs	r3, #0
 80006a6:	9306      	str	r3, [sp, #24]
 80006a8:	9307      	str	r3, [sp, #28]
 80006aa:	9308      	str	r3, [sp, #32]
 80006ac:	9309      	str	r3, [sp, #36]	@ 0x24
  if(tim_encoderHandle->Instance==TIM1)
 80006ae:	6803      	ldr	r3, [r0, #0]
 80006b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000768 <HAL_TIM_Encoder_MspInit+0xc8>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d005      	beq.n	80006c2 <HAL_TIM_Encoder_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM2)
 80006b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006ba:	d01d      	beq.n	80006f8 <HAL_TIM_Encoder_MspInit+0x58>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80006bc:	b00b      	add	sp, #44	@ 0x2c
 80006be:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006c2:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <HAL_TIM_Encoder_MspInit+0xcc>)
 80006c4:	699a      	ldr	r2, [r3, #24]
 80006c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	699a      	ldr	r2, [r3, #24]
 80006ce:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80006d2:	9201      	str	r2, [sp, #4]
 80006d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	f042 0204 	orr.w	r2, r2, #4
 80006dc:	619a      	str	r2, [r3, #24]
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 80006e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006ec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	a906      	add	r1, sp, #24
 80006f0:	481f      	ldr	r0, [pc, #124]	@ (8000770 <HAL_TIM_Encoder_MspInit+0xd0>)
 80006f2:	f000 fb77 	bl	8000de4 <HAL_GPIO_Init>
 80006f6:	e7e1      	b.n	80006bc <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006f8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80006fc:	69da      	ldr	r2, [r3, #28]
 80006fe:	f042 0201 	orr.w	r2, r2, #1
 8000702:	61da      	str	r2, [r3, #28]
 8000704:	69da      	ldr	r2, [r3, #28]
 8000706:	f002 0201 	and.w	r2, r2, #1
 800070a:	9203      	str	r2, [sp, #12]
 800070c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	699a      	ldr	r2, [r3, #24]
 8000710:	f042 0204 	orr.w	r2, r2, #4
 8000714:	619a      	str	r2, [r3, #24]
 8000716:	699a      	ldr	r2, [r3, #24]
 8000718:	f002 0204 	and.w	r2, r2, #4
 800071c:	9204      	str	r2, [sp, #16]
 800071e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	699a      	ldr	r2, [r3, #24]
 8000722:	f042 0208 	orr.w	r2, r2, #8
 8000726:	619a      	str	r2, [r3, #24]
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	9305      	str	r3, [sp, #20]
 8000730:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin;
 8000732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000736:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(ENC2_CH1_GPIO_Port, &GPIO_InitStruct);
 8000738:	a906      	add	r1, sp, #24
 800073a:	480d      	ldr	r0, [pc, #52]	@ (8000770 <HAL_TIM_Encoder_MspInit+0xd0>)
 800073c:	f000 fb52 	bl	8000de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC2_CH2_Pin;
 8000740:	2308      	movs	r3, #8
 8000742:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(ENC2_CH2_GPIO_Port, &GPIO_InitStruct);
 800074a:	a906      	add	r1, sp, #24
 800074c:	4809      	ldr	r0, [pc, #36]	@ (8000774 <HAL_TIM_Encoder_MspInit+0xd4>)
 800074e:	f000 fb49 	bl	8000de4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000752:	4a09      	ldr	r2, [pc, #36]	@ (8000778 <HAL_TIM_Encoder_MspInit+0xd8>)
 8000754:	6853      	ldr	r3, [r2, #4]
 8000756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800075a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800075e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000762:	6053      	str	r3, [r2, #4]
}
 8000764:	e7aa      	b.n	80006bc <HAL_TIM_Encoder_MspInit+0x1c>
 8000766:	bf00      	nop
 8000768:	40012c00 	.word	0x40012c00
 800076c:	40021000 	.word	0x40021000
 8000770:	40010800 	.word	0x40010800
 8000774:	40010c00 	.word	0x40010c00
 8000778:	40010000 	.word	0x40010000

0800077c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 800077c:	6802      	ldr	r2, [r0, #0]
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_TIM_PWM_MspInit+0x28>)
 8000780:	429a      	cmp	r2, r3
 8000782:	d000      	beq.n	8000786 <HAL_TIM_PWM_MspInit+0xa>
 8000784:	4770      	bx	lr
{
 8000786:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000788:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 800078c:	69da      	ldr	r2, [r3, #28]
 800078e:	f042 0202 	orr.w	r2, r2, #2
 8000792:	61da      	str	r2, [r3, #28]
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800079e:	b002      	add	sp, #8
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40000400 	.word	0x40000400

080007a8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80007a8:	b500      	push	{lr}
 80007aa:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	2300      	movs	r3, #0
 80007ae:	9302      	str	r3, [sp, #8]
 80007b0:	9303      	str	r3, [sp, #12]
 80007b2:	9304      	str	r3, [sp, #16]
 80007b4:	9305      	str	r3, [sp, #20]
  if(tim_icHandle->Instance==TIM4)
 80007b6:	6802      	ldr	r2, [r0, #0]
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_TIM_IC_MspInit+0x54>)
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d002      	beq.n	80007c4 <HAL_TIM_IC_MspInit+0x1c>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80007be:	b007      	add	sp, #28
 80007c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007c4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80007c8:	69da      	ldr	r2, [r3, #28]
 80007ca:	f042 0204 	orr.w	r2, r2, #4
 80007ce:	61da      	str	r2, [r3, #28]
 80007d0:	69da      	ldr	r2, [r3, #28]
 80007d2:	f002 0204 	and.w	r2, r2, #4
 80007d6:	9200      	str	r2, [sp, #0]
 80007d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	699a      	ldr	r2, [r3, #24]
 80007dc:	f042 0208 	orr.w	r2, r2, #8
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENC1_CH1_F_Pin|ENC2_CH1_F_Pin;
 80007ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007f0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	a902      	add	r1, sp, #8
 80007f4:	4802      	ldr	r0, [pc, #8]	@ (8000800 <HAL_TIM_IC_MspInit+0x58>)
 80007f6:	f000 faf5 	bl	8000de4 <HAL_GPIO_Init>
}
 80007fa:	e7e0      	b.n	80007be <HAL_TIM_IC_MspInit+0x16>
 80007fc:	40000800 	.word	0x40000800
 8000800:	40010c00 	.word	0x40010c00

08000804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000804:	b500      	push	{lr}
 8000806:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	2300      	movs	r3, #0
 800080a:	9302      	str	r3, [sp, #8]
 800080c:	9303      	str	r3, [sp, #12]
 800080e:	9304      	str	r3, [sp, #16]
 8000810:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8000812:	6802      	ldr	r2, [r0, #0]
 8000814:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_TIM_MspPostInit+0x54>)
 8000816:	429a      	cmp	r2, r3
 8000818:	d002      	beq.n	8000820 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800081a:	b007      	add	sp, #28
 800081c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8000824:	699a      	ldr	r2, [r3, #24]
 8000826:	f042 0210 	orr.w	r2, r2, #16
 800082a:	619a      	str	r2, [r3, #24]
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8000836:	23c0      	movs	r3, #192	@ 0xc0
 8000838:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000840:	a902      	add	r1, sp, #8
 8000842:	4806      	ldr	r0, [pc, #24]	@ (800085c <HAL_TIM_MspPostInit+0x58>)
 8000844:	f000 face 	bl	8000de4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000848:	4a05      	ldr	r2, [pc, #20]	@ (8000860 <HAL_TIM_MspPostInit+0x5c>)
 800084a:	6853      	ldr	r3, [r2, #4]
 800084c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000850:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000854:	6053      	str	r3, [r2, #4]
}
 8000856:	e7e0      	b.n	800081a <HAL_TIM_MspPostInit+0x16>
 8000858:	40000400 	.word	0x40000400
 800085c:	40011000 	.word	0x40011000
 8000860:	40010000 	.word	0x40010000

08000864 <MX_TIM3_Init>:
{
 8000864:	b500      	push	{lr}
 8000866:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	2300      	movs	r3, #0
 800086a:	9308      	str	r3, [sp, #32]
 800086c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	9303      	str	r3, [sp, #12]
 8000874:	9304      	str	r3, [sp, #16]
 8000876:	9305      	str	r3, [sp, #20]
 8000878:	9306      	str	r3, [sp, #24]
 800087a:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 800087c:	481c      	ldr	r0, [pc, #112]	@ (80008f0 <MX_TIM3_Init+0x8c>)
 800087e:	4a1d      	ldr	r2, [pc, #116]	@ (80008f4 <MX_TIM3_Init+0x90>)
 8000880:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8000882:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8000886:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800088a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000890:	f001 fa90 	bl	8001db4 <HAL_TIM_PWM_Init>
 8000894:	b9f8      	cbnz	r0, 80008d6 <MX_TIM3_Init+0x72>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800089c:	a908      	add	r1, sp, #32
 800089e:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <MX_TIM3_Init+0x8c>)
 80008a0:	f001 fc6a 	bl	8002178 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	b9d0      	cbnz	r0, 80008dc <MX_TIM3_Init+0x78>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a6:	2360      	movs	r3, #96	@ 0x60
 80008a8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80008aa:	2200      	movs	r2, #0
 80008ac:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ae:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b0:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b2:	a901      	add	r1, sp, #4
 80008b4:	480e      	ldr	r0, [pc, #56]	@ (80008f0 <MX_TIM3_Init+0x8c>)
 80008b6:	f001 fb5f 	bl	8001f78 <HAL_TIM_PWM_ConfigChannel>
 80008ba:	b990      	cbnz	r0, 80008e2 <MX_TIM3_Init+0x7e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008bc:	2204      	movs	r2, #4
 80008be:	eb0d 0102 	add.w	r1, sp, r2
 80008c2:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <MX_TIM3_Init+0x8c>)
 80008c4:	f001 fb58 	bl	8001f78 <HAL_TIM_PWM_ConfigChannel>
 80008c8:	b970      	cbnz	r0, 80008e8 <MX_TIM3_Init+0x84>
  HAL_TIM_MspPostInit(&htim3);
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <MX_TIM3_Init+0x8c>)
 80008cc:	f7ff ff9a 	bl	8000804 <HAL_TIM_MspPostInit>
}
 80008d0:	b00b      	add	sp, #44	@ 0x2c
 80008d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008d6:	f7ff fd21 	bl	800031c <Error_Handler>
 80008da:	e7dc      	b.n	8000896 <MX_TIM3_Init+0x32>
    Error_Handler();
 80008dc:	f7ff fd1e 	bl	800031c <Error_Handler>
 80008e0:	e7e1      	b.n	80008a6 <MX_TIM3_Init+0x42>
    Error_Handler();
 80008e2:	f7ff fd1b 	bl	800031c <Error_Handler>
 80008e6:	e7e9      	b.n	80008bc <MX_TIM3_Init+0x58>
    Error_Handler();
 80008e8:	f7ff fd18 	bl	800031c <Error_Handler>
 80008ec:	e7ed      	b.n	80008ca <MX_TIM3_Init+0x66>
 80008ee:	bf00      	nop
 80008f0:	20000100 	.word	0x20000100
 80008f4:	40000400 	.word	0x40000400

080008f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008f8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008fa:	480a      	ldr	r0, [pc, #40]	@ (8000924 <MX_USART1_UART_Init+0x2c>)
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <MX_USART1_UART_Init+0x30>)
 80008fe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000900:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000904:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	2300      	movs	r3, #0
 8000908:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800090a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800090e:	220c      	movs	r2, #12
 8000910:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000916:	f001 fcaf 	bl	8002278 <HAL_UART_Init>
 800091a:	b900      	cbnz	r0, 800091e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800091e:	f7ff fcfd 	bl	800031c <Error_Handler>
}
 8000922:	e7fb      	b.n	800091c <MX_USART1_UART_Init+0x24>
 8000924:	200001d8 	.word	0x200001d8
 8000928:	40013800 	.word	0x40013800

0800092c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800092c:	b510      	push	{r4, lr}
 800092e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	2300      	movs	r3, #0
 8000932:	9302      	str	r3, [sp, #8]
 8000934:	9303      	str	r3, [sp, #12]
 8000936:	9304      	str	r3, [sp, #16]
 8000938:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 800093a:	6802      	ldr	r2, [r0, #0]
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <HAL_UART_MspInit+0x7c>)
 800093e:	429a      	cmp	r2, r3
 8000940:	d001      	beq.n	8000946 <HAL_UART_MspInit+0x1a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000942:	b006      	add	sp, #24
 8000944:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000946:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 800094a:	699a      	ldr	r2, [r3, #24]
 800094c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000950:	619a      	str	r2, [r3, #24]
 8000952:	699a      	ldr	r2, [r3, #24]
 8000954:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000958:	9200      	str	r2, [sp, #0]
 800095a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	699a      	ldr	r2, [r3, #24]
 800095e:	f042 0208 	orr.w	r2, r2, #8
 8000962:	619a      	str	r2, [r3, #24]
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096e:	2340      	movs	r3, #64	@ 0x40
 8000970:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	4c0c      	ldr	r4, [pc, #48]	@ (80009ac <HAL_UART_MspInit+0x80>)
 800097c:	a902      	add	r1, sp, #8
 800097e:	4620      	mov	r0, r4
 8000980:	f000 fa30 	bl	8000de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000984:	2380      	movs	r3, #128	@ 0x80
 8000986:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	a902      	add	r1, sp, #8
 8000990:	4620      	mov	r0, r4
 8000992:	f000 fa27 	bl	8000de4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000996:	4a06      	ldr	r2, [pc, #24]	@ (80009b0 <HAL_UART_MspInit+0x84>)
 8000998:	6853      	ldr	r3, [r2, #4]
 800099a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6053      	str	r3, [r2, #4]
}
 80009a4:	e7cd      	b.n	8000942 <HAL_UART_MspInit+0x16>
 80009a6:	bf00      	nop
 80009a8:	40013800 	.word	0x40013800
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	40010000 	.word	0x40010000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b510      	push	{r4, lr}
 80009b6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_InitTick+0x40>)
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80009c4:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <HAL_InitTick+0x44>)
 80009c6:	6810      	ldr	r0, [r2, #0]
 80009c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80009cc:	f000 f9f6 	bl	8000dbc <HAL_SYSTICK_Config>
 80009d0:	b968      	cbnz	r0, 80009ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	2c0f      	cmp	r4, #15
 80009d4:	d901      	bls.n	80009da <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80009d6:	2001      	movs	r0, #1
 80009d8:	e00a      	b.n	80009f0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009da:	2200      	movs	r2, #0
 80009dc:	4621      	mov	r1, r4
 80009de:	f04f 30ff 	mov.w	r0, #4294967295
 80009e2:	f000 f9db 	bl	8000d9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e6:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <HAL_InitTick+0x48>)
 80009e8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2000      	movs	r0, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80009ee:	2001      	movs	r0, #1
}
 80009f0:	bd10      	pop	{r4, pc}
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000004 	.word	0x20000004
 80009fc:	2000000c 	.word	0x2000000c

08000a00 <HAL_Init>:
{
 8000a00:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a02:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <HAL_Init+0x20>)
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f9b3 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	200f      	movs	r0, #15
 8000a14:	f7ff ffce 	bl	80009b4 <HAL_InitTick>
  HAL_MspInit();
 8000a18:	f7ff fd6c 	bl	80004f4 <HAL_MspInit>
}
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	bd08      	pop	{r3, pc}
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a24:	4a03      	ldr	r2, [pc, #12]	@ (8000a34 <HAL_IncTick+0x10>)
 8000a26:	6811      	ldr	r1, [r2, #0]
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <HAL_IncTick+0x14>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	440b      	add	r3, r1
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000220 	.word	0x20000220
 8000a38:	20000008 	.word	0x20000008

08000a3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a3c:	4b01      	ldr	r3, [pc, #4]	@ (8000a44 <HAL_GetTick+0x8>)
 8000a3e:	6818      	ldr	r0, [r3, #0]
}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000220 	.word	0x20000220

08000a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff fff6 	bl	8000a3c <HAL_GetTick>
 8000a50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a56:	d002      	beq.n	8000a5e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <HAL_Delay+0x24>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5e:	f7ff ffed 	bl	8000a3c <HAL_GetTick>
 8000a62:	1b40      	subs	r0, r0, r5
 8000a64:	42a0      	cmp	r0, r4
 8000a66:	d3fa      	bcc.n	8000a5e <HAL_Delay+0x16>
  {
  }
}
 8000a68:	bd38      	pop	{r3, r4, r5, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008

08000a70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a70:	b430      	push	{r4, r5}
 8000a72:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000a74:	2200      	movs	r2, #0
 8000a76:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a78:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8000a7c:	2a01      	cmp	r2, #1
 8000a7e:	f000 808f 	beq.w	8000ba0 <HAL_ADC_ConfigChannel+0x130>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2201      	movs	r2, #1
 8000a86:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a8a:	684a      	ldr	r2, [r1, #4]
 8000a8c:	2a06      	cmp	r2, #6
 8000a8e:	d82d      	bhi.n	8000aec <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a90:	6804      	ldr	r4, [r0, #0]
 8000a92:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8000a94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000a98:	3a05      	subs	r2, #5
 8000a9a:	f04f 0c1f 	mov.w	ip, #31
 8000a9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa2:	ea20 000c 	bic.w	r0, r0, ip
 8000aa6:	680d      	ldr	r5, [r1, #0]
 8000aa8:	fa05 f202 	lsl.w	r2, r5, r2
 8000aac:	4302      	orrs	r2, r0
 8000aae:	6362      	str	r2, [r4, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ab0:	680a      	ldr	r2, [r1, #0]
 8000ab2:	2a09      	cmp	r2, #9
 8000ab4:	d938      	bls.n	8000b28 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ab6:	681c      	ldr	r4, [r3, #0]
 8000ab8:	68e0      	ldr	r0, [r4, #12]
 8000aba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000abe:	3a1e      	subs	r2, #30
 8000ac0:	f04f 0c07 	mov.w	ip, #7
 8000ac4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac8:	ea20 000c 	bic.w	r0, r0, ip
 8000acc:	688d      	ldr	r5, [r1, #8]
 8000ace:	fa05 f202 	lsl.w	r2, r5, r2
 8000ad2:	4302      	orrs	r2, r0
 8000ad4:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ad6:	680a      	ldr	r2, [r1, #0]
 8000ad8:	3a10      	subs	r2, #16
 8000ada:	2a01      	cmp	r2, #1
 8000adc:	d934      	bls.n	8000b48 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ade:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bc30      	pop	{r4, r5}
 8000aea:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8000aec:	2a0c      	cmp	r2, #12
 8000aee:	d80d      	bhi.n	8000b0c <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000af0:	6805      	ldr	r5, [r0, #0]
 8000af2:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000af4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000af8:	3a23      	subs	r2, #35	@ 0x23
 8000afa:	241f      	movs	r4, #31
 8000afc:	4094      	lsls	r4, r2
 8000afe:	ea20 0004 	bic.w	r0, r0, r4
 8000b02:	680c      	ldr	r4, [r1, #0]
 8000b04:	4094      	lsls	r4, r2
 8000b06:	4320      	orrs	r0, r4
 8000b08:	6328      	str	r0, [r5, #48]	@ 0x30
 8000b0a:	e7d1      	b.n	8000ab0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b0c:	6805      	ldr	r5, [r0, #0]
 8000b0e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8000b10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000b14:	3a41      	subs	r2, #65	@ 0x41
 8000b16:	241f      	movs	r4, #31
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea20 0004 	bic.w	r0, r0, r4
 8000b1e:	680c      	ldr	r4, [r1, #0]
 8000b20:	4094      	lsls	r4, r2
 8000b22:	4320      	orrs	r0, r4
 8000b24:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8000b26:	e7c3      	b.n	8000ab0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b28:	681c      	ldr	r4, [r3, #0]
 8000b2a:	6920      	ldr	r0, [r4, #16]
 8000b2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b30:	f04f 0c07 	mov.w	ip, #7
 8000b34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b38:	ea20 000c 	bic.w	r0, r0, ip
 8000b3c:	688d      	ldr	r5, [r1, #8]
 8000b3e:	fa05 f202 	lsl.w	r2, r5, r2
 8000b42:	4302      	orrs	r2, r0
 8000b44:	6122      	str	r2, [r4, #16]
 8000b46:	e7c6      	b.n	8000ad6 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4816      	ldr	r0, [pc, #88]	@ (8000ba4 <HAL_ADC_ConfigChannel+0x134>)
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	d005      	beq.n	8000b5c <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b52:	f042 0220 	orr.w	r2, r2, #32
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8000b58:	2001      	movs	r0, #1
 8000b5a:	e7c1      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b5c:	6890      	ldr	r0, [r2, #8]
 8000b5e:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8000b62:	d11b      	bne.n	8000b9c <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b64:	6890      	ldr	r0, [r2, #8]
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6a:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b6c:	680a      	ldr	r2, [r1, #0]
 8000b6e:	2a10      	cmp	r2, #16
 8000b70:	d001      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b72:	2000      	movs	r0, #0
 8000b74:	e7b4      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b76:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba8 <HAL_ADC_ConfigChannel+0x138>)
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	490c      	ldr	r1, [pc, #48]	@ (8000bac <HAL_ADC_ConfigChannel+0x13c>)
 8000b7c:	fba1 1202 	umull	r1, r2, r1, r2
 8000b80:	0c92      	lsrs	r2, r2, #18
 8000b82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000b86:	0052      	lsls	r2, r2, #1
 8000b88:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000b8a:	e002      	b.n	8000b92 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8000b8c:	9a01      	ldr	r2, [sp, #4]
 8000b8e:	3a01      	subs	r2, #1
 8000b90:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000b92:	9a01      	ldr	r2, [sp, #4]
 8000b94:	2a00      	cmp	r2, #0
 8000b96:	d1f9      	bne.n	8000b8c <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b98:	2000      	movs	r0, #0
 8000b9a:	e7a1      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0x70>
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	e79f      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	e7a0      	b.n	8000ae6 <HAL_ADC_ConfigChannel+0x76>
 8000ba4:	40012400 	.word	0x40012400
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	431bde83 	.word	0x431bde83

08000bb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000bb2:	6803      	ldr	r3, [r0, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	f012 0f01 	tst.w	r2, #1
 8000bba:	d101      	bne.n	8000bc0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bbc:	2000      	movs	r0, #0
}
 8000bbe:	bd38      	pop	{r3, r4, r5, pc}
 8000bc0:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	f022 0201 	bic.w	r2, r2, #1
 8000bc8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000bca:	f7ff ff37 	bl	8000a3c <HAL_GetTick>
 8000bce:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f013 0f01 	tst.w	r3, #1
 8000bd8:	d013      	beq.n	8000c02 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000bda:	f7ff ff2f 	bl	8000a3c <HAL_GetTick>
 8000bde:	1b43      	subs	r3, r0, r5
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d9f5      	bls.n	8000bd0 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f013 0f01 	tst.w	r3, #1
 8000bec:	d0f0      	beq.n	8000bd0 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8000bfe:	2001      	movs	r0, #1
 8000c00:	e7dd      	b.n	8000bbe <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8000c02:	2000      	movs	r0, #0
 8000c04:	e7db      	b.n	8000bbe <ADC_ConversionStop_Disable+0xe>
	...

08000c08 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d07b      	beq.n	8000d04 <HAL_ADC_Init+0xfc>
{
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c10:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d04d      	beq.n	8000cb2 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c16:	4620      	mov	r0, r4
 8000c18:	f7ff ffca 	bl	8000bb0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000c1e:	f013 0310 	ands.w	r3, r3, #16
 8000c22:	d169      	bne.n	8000cf8 <HAL_ADC_Init+0xf0>
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d167      	bne.n	8000cf8 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8000c28:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000c2a:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8000c2e:	f022 0202 	bic.w	r2, r2, #2
 8000c32:	f042 0202 	orr.w	r2, r2, #2
 8000c36:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c38:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c3a:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c3c:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c3e:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c40:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c44:	68a5      	ldr	r5, [r4, #8]
 8000c46:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8000c4a:	d002      	beq.n	8000c52 <HAL_ADC_Init+0x4a>
 8000c4c:	2d01      	cmp	r5, #1
 8000c4e:	d036      	beq.n	8000cbe <HAL_ADC_Init+0xb6>
 8000c50:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c52:	7d26      	ldrb	r6, [r4, #20]
 8000c54:	2e01      	cmp	r6, #1
 8000c56:	d035      	beq.n	8000cc4 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8000c58:	6826      	ldr	r6, [r4, #0]
 8000c5a:	6871      	ldr	r1, [r6, #4]
 8000c5c:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8000c60:	4329      	orrs	r1, r5
 8000c62:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000c64:	6825      	ldr	r5, [r4, #0]
 8000c66:	68ae      	ldr	r6, [r5, #8]
 8000c68:	4927      	ldr	r1, [pc, #156]	@ (8000d08 <HAL_ADC_Init+0x100>)
 8000c6a:	4031      	ands	r1, r6
 8000c6c:	4311      	orrs	r1, r2
 8000c6e:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c70:	68a1      	ldr	r1, [r4, #8]
 8000c72:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8000c76:	d001      	beq.n	8000c7c <HAL_ADC_Init+0x74>
 8000c78:	2901      	cmp	r1, #1
 8000c7a:	d102      	bne.n	8000c82 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c7c:	6923      	ldr	r3, [r4, #16]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000c82:	6825      	ldr	r5, [r4, #0]
 8000c84:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8000c86:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	6899      	ldr	r1, [r3, #8]
 8000c92:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <HAL_ADC_Init+0x104>)
 8000c94:	400b      	ands	r3, r1
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d025      	beq.n	8000ce6 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8000c9a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000c9c:	f023 0312 	bic.w	r3, r3, #18
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8000cae:	2001      	movs	r0, #1
 8000cb0:	e027      	b.n	8000d02 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8000cb2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000cb4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8000cb8:	f7ff fa76 	bl	80001a8 <HAL_ADC_MspInit>
 8000cbc:	e7ab      	b.n	8000c16 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cbe:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8000cc2:	e7c6      	b.n	8000c52 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cc4:	b931      	cbnz	r1, 8000cd4 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cc6:	69a1      	ldr	r1, [r4, #24]
 8000cc8:	3901      	subs	r1, #1
 8000cca:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8000cce:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8000cd2:	e7c1      	b.n	8000c58 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cd4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000cd6:	f041 0120 	orr.w	r1, r1, #32
 8000cda:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cdc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000cde:	f041 0101 	orr.w	r1, r1, #1
 8000ce2:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8000ce4:	e7b8      	b.n	8000c58 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000cea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000cec:	f023 0303 	bic.w	r3, r3, #3
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000cf6:	e004      	b.n	8000d02 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8000d00:	2001      	movs	r0, #1
}
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000d04:	2001      	movs	r0, #1
}
 8000d06:	4770      	bx	lr
 8000d08:	ffe1f7fd 	.word	0xffe1f7fd
 8000d0c:	ff1f0efe 	.word	0xff1f0efe

08000d10 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000d10:	2800      	cmp	r0, #0
 8000d12:	db08      	blt.n	8000d26 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	0109      	lsls	r1, r1, #4
 8000d16:	b2c9      	uxtb	r1, r1
 8000d18:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000d1c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000d20:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000d24:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	f000 000f 	and.w	r0, r0, #15
 8000d2a:	0109      	lsls	r1, r1, #4
 8000d2c:	b2c9      	uxtb	r1, r1
 8000d2e:	4b01      	ldr	r3, [pc, #4]	@ (8000d34 <__NVIC_SetPriority+0x24>)
 8000d30:	5419      	strb	r1, [r3, r0]
  }
}
 8000d32:	4770      	bx	lr
 8000d34:	e000ed14 	.word	0xe000ed14

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3e:	f1c0 0c07 	rsb	ip, r0, #7
 8000d42:	f1bc 0f04 	cmp.w	ip, #4
 8000d46:	bf28      	it	cs
 8000d48:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4c:	1d03      	adds	r3, r0, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d90f      	bls.n	8000d72 <NVIC_EncodePriority+0x3a>
 8000d52:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 3eff 	mov.w	lr, #4294967295
 8000d58:	fa0e f00c 	lsl.w	r0, lr, ip
 8000d5c:	ea21 0100 	bic.w	r1, r1, r0
 8000d60:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d62:	fa0e fe03 	lsl.w	lr, lr, r3
 8000d66:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000d6a:	ea41 0002 	orr.w	r0, r1, r2
 8000d6e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	2300      	movs	r3, #0
 8000d74:	e7ee      	b.n	8000d54 <NVIC_EncodePriority+0x1c>
	...

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d7a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000d80:	041b      	lsls	r3, r3, #16
 8000d82:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d84:	0200      	lsls	r0, r0, #8
 8000d86:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000d94:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_NVIC_SetPriority+0x1c>)
 8000da2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000da8:	f7ff ffc6 	bl	8000d38 <NVIC_EncodePriority>
 8000dac:	4601      	mov	r1, r0
 8000dae:	4620      	mov	r0, r4
 8000db0:	f7ff ffae 	bl	8000d10 <__NVIC_SetPriority>
}
 8000db4:	bd10      	pop	{r4, pc}
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000dc2:	d20b      	bcs.n	8000ddc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000dc8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <HAL_SYSTICK_Config+0x24>)
 8000dcc:	21f0      	movs	r1, #240	@ 0xf0
 8000dce:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dda:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ddc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b570      	push	{r4, r5, r6, lr}
 8000de6:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000dea:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dec:	e0a1      	b.n	8000f32 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dee:	4d7e      	ldr	r5, [pc, #504]	@ (8000fe8 <HAL_GPIO_Init+0x204>)
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	d014      	beq.n	8000e1e <HAL_GPIO_Init+0x3a>
 8000df4:	d80c      	bhi.n	8000e10 <HAL_GPIO_Init+0x2c>
 8000df6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8000dfa:	42ab      	cmp	r3, r5
 8000dfc:	d00f      	beq.n	8000e1e <HAL_GPIO_Init+0x3a>
 8000dfe:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d00b      	beq.n	8000e1e <HAL_GPIO_Init+0x3a>
 8000e06:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8000e0a:	42ab      	cmp	r3, r5
 8000e0c:	d110      	bne.n	8000e30 <HAL_GPIO_Init+0x4c>
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x3a>
 8000e10:	4d76      	ldr	r5, [pc, #472]	@ (8000fec <HAL_GPIO_Init+0x208>)
 8000e12:	42ab      	cmp	r3, r5
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x3a>
 8000e16:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8000e1a:	42ab      	cmp	r3, r5
 8000e1c:	d108      	bne.n	8000e30 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e1e:	688b      	ldr	r3, [r1, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d050      	beq.n	8000ec6 <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d049      	beq.n	8000ebc <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000e28:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e2a:	2408      	movs	r4, #8
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e2e:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e30:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8000e34:	d849      	bhi.n	8000eca <HAL_GPIO_Init+0xe6>
 8000e36:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e38:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e3c:	6833      	ldr	r3, [r6, #0]
 8000e3e:	250f      	movs	r5, #15
 8000e40:	4095      	lsls	r5, r2
 8000e42:	ea23 0305 	bic.w	r3, r3, r5
 8000e46:	fa04 f202 	lsl.w	r2, r4, r2
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e4e:	684b      	ldr	r3, [r1, #4]
 8000e50:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000e54:	d06b      	beq.n	8000f2e <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e56:	4b66      	ldr	r3, [pc, #408]	@ (8000ff0 <HAL_GPIO_Init+0x20c>)
 8000e58:	699a      	ldr	r2, [r3, #24]
 8000e5a:	f042 0201 	orr.w	r2, r2, #1
 8000e5e:	619a      	str	r2, [r3, #24]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000e6a:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000e6e:	1c95      	adds	r5, r2, #2
 8000e70:	4b60      	ldr	r3, [pc, #384]	@ (8000ff4 <HAL_GPIO_Init+0x210>)
 8000e72:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e76:	f00c 0503 	and.w	r5, ip, #3
 8000e7a:	00ad      	lsls	r5, r5, #2
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	40ab      	lsls	r3, r5
 8000e80:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e84:	4b5c      	ldr	r3, [pc, #368]	@ (8000ff8 <HAL_GPIO_Init+0x214>)
 8000e86:	4298      	cmp	r0, r3
 8000e88:	d026      	beq.n	8000ed8 <HAL_GPIO_Init+0xf4>
 8000e8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000e8e:	4298      	cmp	r0, r3
 8000e90:	f000 808c 	beq.w	8000fac <HAL_GPIO_Init+0x1c8>
 8000e94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f000 8089 	beq.w	8000fb0 <HAL_GPIO_Init+0x1cc>
 8000e9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000ea2:	4298      	cmp	r0, r3
 8000ea4:	d016      	beq.n	8000ed4 <HAL_GPIO_Init+0xf0>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e017      	b.n	8000eda <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eaa:	68cc      	ldr	r4, [r1, #12]
 8000eac:	3404      	adds	r4, #4
          break;
 8000eae:	e7bf      	b.n	8000e30 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eb0:	68cc      	ldr	r4, [r1, #12]
 8000eb2:	3408      	adds	r4, #8
          break;
 8000eb4:	e7bc      	b.n	8000e30 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb6:	68cc      	ldr	r4, [r1, #12]
 8000eb8:	340c      	adds	r4, #12
          break;
 8000eba:	e7b9      	b.n	8000e30 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8000ebc:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ebe:	2408      	movs	r4, #8
 8000ec0:	e7b6      	b.n	8000e30 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	e7b4      	b.n	8000e30 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ec6:	2404      	movs	r4, #4
 8000ec8:	e7b2      	b.n	8000e30 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eca:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ecc:	f1ac 0208 	sub.w	r2, ip, #8
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	e7b3      	b.n	8000e3c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e000      	b.n	8000eda <HAL_GPIO_Init+0xf6>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	40ab      	lsls	r3, r5
 8000edc:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000ede:	3202      	adds	r2, #2
 8000ee0:	4d44      	ldr	r5, [pc, #272]	@ (8000ff4 <HAL_GPIO_Init+0x210>)
 8000ee2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee6:	684b      	ldr	r3, [r1, #4]
 8000ee8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000eec:	d062      	beq.n	8000fb4 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eee:	4a43      	ldr	r2, [pc, #268]	@ (8000ffc <HAL_GPIO_Init+0x218>)
 8000ef0:	6893      	ldr	r3, [r2, #8]
 8000ef2:	ea43 030e 	orr.w	r3, r3, lr
 8000ef6:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef8:	684b      	ldr	r3, [r1, #4]
 8000efa:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8000efe:	d05f      	beq.n	8000fc0 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f00:	4a3e      	ldr	r2, [pc, #248]	@ (8000ffc <HAL_GPIO_Init+0x218>)
 8000f02:	68d3      	ldr	r3, [r2, #12]
 8000f04:	ea43 030e 	orr.w	r3, r3, lr
 8000f08:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0a:	684b      	ldr	r3, [r1, #4]
 8000f0c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f10:	d05c      	beq.n	8000fcc <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f12:	4a3a      	ldr	r2, [pc, #232]	@ (8000ffc <HAL_GPIO_Init+0x218>)
 8000f14:	6853      	ldr	r3, [r2, #4]
 8000f16:	ea43 030e 	orr.w	r3, r3, lr
 8000f1a:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f1c:	684b      	ldr	r3, [r1, #4]
 8000f1e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000f22:	d059      	beq.n	8000fd8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f24:	4a35      	ldr	r2, [pc, #212]	@ (8000ffc <HAL_GPIO_Init+0x218>)
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	ea43 030e 	orr.w	r3, r3, lr
 8000f2c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8000f2e:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	680b      	ldr	r3, [r1, #0]
 8000f34:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000f38:	d054      	beq.n	8000fe4 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f40:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8000f44:	ea32 0303 	bics.w	r3, r2, r3
 8000f48:	d1f1      	bne.n	8000f2e <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8000f4a:	684b      	ldr	r3, [r1, #4]
 8000f4c:	2b12      	cmp	r3, #18
 8000f4e:	f63f af4e 	bhi.w	8000dee <HAL_GPIO_Init+0xa>
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	f63f af6c 	bhi.w	8000e30 <HAL_GPIO_Init+0x4c>
 8000f58:	a501      	add	r5, pc, #4	@ (adr r5, 8000f60 <HAL_GPIO_Init+0x17c>)
 8000f5a:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000e1f 	.word	0x08000e1f
 8000f64:	08000e2f 	.word	0x08000e2f
 8000f68:	08000eb1 	.word	0x08000eb1
 8000f6c:	08000ec3 	.word	0x08000ec3
 8000f70:	08000e31 	.word	0x08000e31
 8000f74:	08000e31 	.word	0x08000e31
 8000f78:	08000e31 	.word	0x08000e31
 8000f7c:	08000e31 	.word	0x08000e31
 8000f80:	08000e31 	.word	0x08000e31
 8000f84:	08000e31 	.word	0x08000e31
 8000f88:	08000e31 	.word	0x08000e31
 8000f8c:	08000e31 	.word	0x08000e31
 8000f90:	08000e31 	.word	0x08000e31
 8000f94:	08000e31 	.word	0x08000e31
 8000f98:	08000e31 	.word	0x08000e31
 8000f9c:	08000e31 	.word	0x08000e31
 8000fa0:	08000e31 	.word	0x08000e31
 8000fa4:	08000eab 	.word	0x08000eab
 8000fa8:	08000eb7 	.word	0x08000eb7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fac:	2301      	movs	r3, #1
 8000fae:	e794      	b.n	8000eda <HAL_GPIO_Init+0xf6>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e792      	b.n	8000eda <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fb4:	4a11      	ldr	r2, [pc, #68]	@ (8000ffc <HAL_GPIO_Init+0x218>)
 8000fb6:	6893      	ldr	r3, [r2, #8]
 8000fb8:	ea23 030e 	bic.w	r3, r3, lr
 8000fbc:	6093      	str	r3, [r2, #8]
 8000fbe:	e79b      	b.n	8000ef8 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_GPIO_Init+0x218>)
 8000fc2:	68d3      	ldr	r3, [r2, #12]
 8000fc4:	ea23 030e 	bic.w	r3, r3, lr
 8000fc8:	60d3      	str	r3, [r2, #12]
 8000fca:	e79e      	b.n	8000f0a <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_GPIO_Init+0x218>)
 8000fce:	6853      	ldr	r3, [r2, #4]
 8000fd0:	ea23 030e 	bic.w	r3, r3, lr
 8000fd4:	6053      	str	r3, [r2, #4]
 8000fd6:	e7a1      	b.n	8000f1c <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd8:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <HAL_GPIO_Init+0x218>)
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	ea23 030e 	bic.w	r3, r3, lr
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e7a4      	b.n	8000f2e <HAL_GPIO_Init+0x14a>
  }
}
 8000fe4:	b002      	add	sp, #8
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
 8000fe8:	10220000 	.word	0x10220000
 8000fec:	10310000 	.word	0x10310000
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001000:	6883      	ldr	r3, [r0, #8]
 8001002:	4219      	tst	r1, r3
 8001004:	d001      	beq.n	800100a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001006:	2001      	movs	r0, #1
 8001008:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800100a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800100c:	4770      	bx	lr

0800100e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800100e:	b10a      	cbz	r2, 8001014 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001010:	6101      	str	r1, [r0, #16]
 8001012:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001014:	0409      	lsls	r1, r1, #16
 8001016:	6101      	str	r1, [r0, #16]
  }
}
 8001018:	4770      	bx	lr
	...

0800101c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800101c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <RCC_Delay+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <RCC_Delay+0x28>)
 8001024:	fba2 2303 	umull	r2, r3, r2, r3
 8001028:	0a5b      	lsrs	r3, r3, #9
 800102a:	fb00 f303 	mul.w	r3, r0, r3
 800102e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001030:	bf00      	nop
  }
  while (Delay --);
 8001032:	9b01      	ldr	r3, [sp, #4]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f9      	bne.n	8001030 <RCC_Delay+0x14>
}
 800103c:	b002      	add	sp, #8
 800103e:	4770      	bx	lr
 8001040:	20000004 	.word	0x20000004
 8001044:	10624dd3 	.word	0x10624dd3

08001048 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001048:	2800      	cmp	r0, #0
 800104a:	f000 81f1 	beq.w	8001430 <HAL_RCC_OscConfig+0x3e8>
{
 800104e:	b570      	push	{r4, r5, r6, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001054:	6803      	ldr	r3, [r0, #0]
 8001056:	f013 0f01 	tst.w	r3, #1
 800105a:	d02c      	beq.n	80010b6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105c:	4b99      	ldr	r3, [pc, #612]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b04      	cmp	r3, #4
 8001066:	d01d      	beq.n	80010a4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001068:	4b96      	ldr	r3, [pc, #600]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d012      	beq.n	800109a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800107a:	d041      	beq.n	8001100 <HAL_RCC_OscConfig+0xb8>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d155      	bne.n	800112c <HAL_RCC_OscConfig+0xe4>
 8001080:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001084:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e037      	b.n	800110a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800109a:	4b8a      	ldr	r3, [pc, #552]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80010a2:	d0e7      	beq.n	8001074 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	4b87      	ldr	r3, [pc, #540]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80010ac:	d003      	beq.n	80010b6 <HAL_RCC_OscConfig+0x6e>
 80010ae:	6863      	ldr	r3, [r4, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 81bf 	beq.w	8001434 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	f013 0f02 	tst.w	r3, #2
 80010bc:	d075      	beq.n	80011aa <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010be:	4b81      	ldr	r3, [pc, #516]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f013 0f0c 	tst.w	r3, #12
 80010c6:	d05f      	beq.n	8001188 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010c8:	4b7e      	ldr	r3, [pc, #504]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d054      	beq.n	800117e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d4:	6923      	ldr	r3, [r4, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 808a 	beq.w	80011f0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80010dc:	4b7a      	ldr	r3, [pc, #488]	@ (80012c8 <HAL_RCC_OscConfig+0x280>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010e2:	f7ff fcab 	bl	8000a3c <HAL_GetTick>
 80010e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	4b76      	ldr	r3, [pc, #472]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f013 0f02 	tst.w	r3, #2
 80010f0:	d175      	bne.n	80011de <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f2:	f7ff fca3 	bl	8000a3c <HAL_GetTick>
 80010f6:	1b40      	subs	r0, r0, r5
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d9f5      	bls.n	80010e8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80010fc:	2003      	movs	r0, #3
 80010fe:	e19e      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001100:	4a70      	ldr	r2, [pc, #448]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 8001102:	6813      	ldr	r3, [r2, #0]
 8001104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800110a:	6863      	ldr	r3, [r4, #4]
 800110c:	b343      	cbz	r3, 8001160 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800110e:	f7ff fc95 	bl	8000a3c <HAL_GetTick>
 8001112:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001114:	4b6b      	ldr	r3, [pc, #428]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800111c:	d1cb      	bne.n	80010b6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800111e:	f7ff fc8d 	bl	8000a3c <HAL_GetTick>
 8001122:	1b40      	subs	r0, r0, r5
 8001124:	2864      	cmp	r0, #100	@ 0x64
 8001126:	d9f5      	bls.n	8001114 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001128:	2003      	movs	r0, #3
 800112a:	e188      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001130:	d009      	beq.n	8001146 <HAL_RCC_OscConfig+0xfe>
 8001132:	4b64      	ldr	r3, [pc, #400]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e7e1      	b.n	800110a <HAL_RCC_OscConfig+0xc2>
 8001146:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800114a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e7d4      	b.n	800110a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001160:	f7ff fc6c 	bl	8000a3c <HAL_GetTick>
 8001164:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b57      	ldr	r3, [pc, #348]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800116e:	d0a2      	beq.n	80010b6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fc64 	bl	8000a3c <HAL_GetTick>
 8001174:	1b40      	subs	r0, r0, r5
 8001176:	2864      	cmp	r0, #100	@ 0x64
 8001178:	d9f5      	bls.n	8001166 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800117a:	2003      	movs	r0, #3
 800117c:	e15f      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800117e:	4b51      	ldr	r3, [pc, #324]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001186:	d1a5      	bne.n	80010d4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001188:	4b4e      	ldr	r3, [pc, #312]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f013 0f02 	tst.w	r3, #2
 8001190:	d003      	beq.n	800119a <HAL_RCC_OscConfig+0x152>
 8001192:	6923      	ldr	r3, [r4, #16]
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 814f 	bne.w	8001438 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119a:	4a4a      	ldr	r2, [pc, #296]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 800119c:	6813      	ldr	r3, [r2, #0]
 800119e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80011a2:	6961      	ldr	r1, [r4, #20]
 80011a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011a8:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	f013 0f08 	tst.w	r3, #8
 80011b0:	d033      	beq.n	800121a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b2:	69a3      	ldr	r3, [r4, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d05c      	beq.n	8001272 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80011b8:	4b43      	ldr	r3, [pc, #268]	@ (80012c8 <HAL_RCC_OscConfig+0x280>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80011c0:	f7ff fc3c 	bl	8000a3c <HAL_GetTick>
 80011c4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	4b3f      	ldr	r3, [pc, #252]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	f013 0f02 	tst.w	r3, #2
 80011ce:	d121      	bne.n	8001214 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc34 	bl	8000a3c <HAL_GetTick>
 80011d4:	1b40      	subs	r0, r0, r5
 80011d6:	2802      	cmp	r0, #2
 80011d8:	d9f5      	bls.n	80011c6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80011da:	2003      	movs	r0, #3
 80011dc:	e12f      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011de:	4a39      	ldr	r2, [pc, #228]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80011e6:	6961      	ldr	r1, [r4, #20]
 80011e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e7dc      	b.n	80011aa <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80011f0:	4b35      	ldr	r3, [pc, #212]	@ (80012c8 <HAL_RCC_OscConfig+0x280>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011f6:	f7ff fc21 	bl	8000a3c <HAL_GetTick>
 80011fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fc:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f013 0f02 	tst.w	r3, #2
 8001204:	d0d1      	beq.n	80011aa <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fc19 	bl	8000a3c <HAL_GetTick>
 800120a:	1b40      	subs	r0, r0, r5
 800120c:	2802      	cmp	r0, #2
 800120e:	d9f5      	bls.n	80011fc <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001210:	2003      	movs	r0, #3
 8001212:	e114      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff ff01 	bl	800101c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	f013 0f04 	tst.w	r3, #4
 8001220:	f000 8096 	beq.w	8001350 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001224:	4b27      	ldr	r3, [pc, #156]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800122c:	d134      	bne.n	8001298 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 8001230:	69da      	ldr	r2, [r3, #28]
 8001232:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001236:	61da      	str	r2, [r3, #28]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001242:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_RCC_OscConfig+0x284>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800124c:	d026      	beq.n	800129c <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124e:	68e3      	ldr	r3, [r4, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d03d      	beq.n	80012d0 <HAL_RCC_OscConfig+0x288>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d153      	bne.n	8001300 <HAL_RCC_OscConfig+0x2b8>
 8001258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800125c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	621a      	str	r2, [r3, #32]
 8001268:	6a1a      	ldr	r2, [r3, #32]
 800126a:	f022 0204 	bic.w	r2, r2, #4
 800126e:	621a      	str	r2, [r3, #32]
 8001270:	e033      	b.n	80012da <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_RCC_OscConfig+0x280>)
 8001274:	2200      	movs	r2, #0
 8001276:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800127a:	f7ff fbdf 	bl	8000a3c <HAL_GetTick>
 800127e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <HAL_RCC_OscConfig+0x27c>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	f013 0f02 	tst.w	r3, #2
 8001288:	d0c7      	beq.n	800121a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fbd7 	bl	8000a3c <HAL_GetTick>
 800128e:	1b40      	subs	r0, r0, r5
 8001290:	2802      	cmp	r0, #2
 8001292:	d9f5      	bls.n	8001280 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8001294:	2003      	movs	r0, #3
 8001296:	e0d2      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8001298:	2500      	movs	r5, #0
 800129a:	e7d3      	b.n	8001244 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129c:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <HAL_RCC_OscConfig+0x284>)
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80012a6:	f7ff fbc9 	bl	8000a3c <HAL_GetTick>
 80012aa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <HAL_RCC_OscConfig+0x284>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80012b4:	d1cb      	bne.n	800124e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b6:	f7ff fbc1 	bl	8000a3c <HAL_GetTick>
 80012ba:	1b80      	subs	r0, r0, r6
 80012bc:	2864      	cmp	r0, #100	@ 0x64
 80012be:	d9f5      	bls.n	80012ac <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80012c0:	2003      	movs	r0, #3
 80012c2:	e0bc      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
 80012c4:	40021000 	.word	0x40021000
 80012c8:	42420000 	.word	0x42420000
 80012cc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d0:	4a5f      	ldr	r2, [pc, #380]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 80012d2:	6a13      	ldr	r3, [r2, #32]
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012da:	68e3      	ldr	r3, [r4, #12]
 80012dc:	b333      	cbz	r3, 800132c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80012de:	f7ff fbad 	bl	8000a3c <HAL_GetTick>
 80012e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f013 0f02 	tst.w	r3, #2
 80012ec:	d12f      	bne.n	800134e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ee:	f7ff fba5 	bl	8000a3c <HAL_GetTick>
 80012f2:	1b80      	subs	r0, r0, r6
 80012f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012f8:	4298      	cmp	r0, r3
 80012fa:	d9f3      	bls.n	80012e4 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 80012fc:	2003      	movs	r0, #3
 80012fe:	e09e      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001300:	2b05      	cmp	r3, #5
 8001302:	d009      	beq.n	8001318 <HAL_RCC_OscConfig+0x2d0>
 8001304:	4b52      	ldr	r3, [pc, #328]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	621a      	str	r2, [r3, #32]
 800130e:	6a1a      	ldr	r2, [r3, #32]
 8001310:	f022 0204 	bic.w	r2, r2, #4
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e7e0      	b.n	80012da <HAL_RCC_OscConfig+0x292>
 8001318:	4b4d      	ldr	r3, [pc, #308]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 800131a:	6a1a      	ldr	r2, [r3, #32]
 800131c:	f042 0204 	orr.w	r2, r2, #4
 8001320:	621a      	str	r2, [r3, #32]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	f042 0201 	orr.w	r2, r2, #1
 8001328:	621a      	str	r2, [r3, #32]
 800132a:	e7d6      	b.n	80012da <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800132c:	f7ff fb86 	bl	8000a3c <HAL_GetTick>
 8001330:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001332:	4b47      	ldr	r3, [pc, #284]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	f013 0f02 	tst.w	r3, #2
 800133a:	d008      	beq.n	800134e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fb7e 	bl	8000a3c <HAL_GetTick>
 8001340:	1b80      	subs	r0, r0, r6
 8001342:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001346:	4298      	cmp	r0, r3
 8001348:	d9f3      	bls.n	8001332 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800134a:	2003      	movs	r0, #3
 800134c:	e077      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800134e:	b9e5      	cbnz	r5, 800138a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001350:	69e3      	ldr	r3, [r4, #28]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d072      	beq.n	800143c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001356:	4a3e      	ldr	r2, [pc, #248]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 8001358:	6852      	ldr	r2, [r2, #4]
 800135a:	f002 020c 	and.w	r2, r2, #12
 800135e:	2a08      	cmp	r2, #8
 8001360:	d056      	beq.n	8001410 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001362:	2b02      	cmp	r3, #2
 8001364:	d017      	beq.n	8001396 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b3b      	ldr	r3, [pc, #236]	@ (8001454 <HAL_RCC_OscConfig+0x40c>)
 8001368:	2200      	movs	r2, #0
 800136a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800136c:	f7ff fb66 	bl	8000a3c <HAL_GetTick>
 8001370:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800137a:	d047      	beq.n	800140c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff fb5e 	bl	8000a3c <HAL_GetTick>
 8001380:	1b00      	subs	r0, r0, r4
 8001382:	2802      	cmp	r0, #2
 8001384:	d9f5      	bls.n	8001372 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001386:	2003      	movs	r0, #3
 8001388:	e059      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800138a:	4a31      	ldr	r2, [pc, #196]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 800138c:	69d3      	ldr	r3, [r2, #28]
 800138e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001392:	61d3      	str	r3, [r2, #28]
 8001394:	e7dc      	b.n	8001350 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001396:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <HAL_RCC_OscConfig+0x40c>)
 8001398:	2200      	movs	r2, #0
 800139a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800139c:	f7ff fb4e 	bl	8000a3c <HAL_GetTick>
 80013a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80013aa:	d006      	beq.n	80013ba <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fb46 	bl	8000a3c <HAL_GetTick>
 80013b0:	1b40      	subs	r0, r0, r5
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9f5      	bls.n	80013a2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80013b6:	2003      	movs	r0, #3
 80013b8:	e041      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013ba:	6a23      	ldr	r3, [r4, #32]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c0:	d01a      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c2:	4923      	ldr	r1, [pc, #140]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 80013c4:	684b      	ldr	r3, [r1, #4]
 80013c6:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80013ca:	6a22      	ldr	r2, [r4, #32]
 80013cc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80013ce:	4302      	orrs	r2, r0
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <HAL_RCC_OscConfig+0x40c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80013da:	f7ff fb2f 	bl	8000a3c <HAL_GetTick>
 80013de:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80013e8:	d10e      	bne.n	8001408 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff fb27 	bl	8000a3c <HAL_GetTick>
 80013ee:	1b00      	subs	r0, r0, r4
 80013f0:	2802      	cmp	r0, #2
 80013f2:	d9f5      	bls.n	80013e0 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80013f4:	2003      	movs	r0, #3
 80013f6:	e022      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013f8:	4a15      	ldr	r2, [pc, #84]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 80013fa:	6853      	ldr	r3, [r2, #4]
 80013fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001400:	68a1      	ldr	r1, [r4, #8]
 8001402:	430b      	orrs	r3, r1
 8001404:	6053      	str	r3, [r2, #4]
 8001406:	e7dc      	b.n	80013c2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001408:	2000      	movs	r0, #0
 800140a:	e018      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
 800140c:	2000      	movs	r0, #0
 800140e:	e016      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001410:	2b01      	cmp	r3, #1
 8001412:	d016      	beq.n	8001442 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_RCC_OscConfig+0x408>)
 8001416:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001418:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 800141c:	6a22      	ldr	r2, [r4, #32]
 800141e:	4291      	cmp	r1, r2
 8001420:	d111      	bne.n	8001446 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001422:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001426:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001428:	4293      	cmp	r3, r2
 800142a:	d10e      	bne.n	800144a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 800142c:	2000      	movs	r0, #0
 800142e:	e006      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001430:	2001      	movs	r0, #1
}
 8001432:	4770      	bx	lr
        return HAL_ERROR;
 8001434:	2001      	movs	r0, #1
 8001436:	e002      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001438:	2001      	movs	r0, #1
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 800143c:	2000      	movs	r0, #0
}
 800143e:	b002      	add	sp, #8
 8001440:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001442:	2001      	movs	r0, #1
 8001444:	e7fb      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8001446:	2001      	movs	r0, #1
 8001448:	e7f9      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
 800144a:	2001      	movs	r0, #1
 800144c:	e7f7      	b.n	800143e <HAL_RCC_OscConfig+0x3f6>
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	42420000 	.word	0x42420000

08001458 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x40>)
 800145a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800145c:	f003 020c 	and.w	r2, r3, #12
 8001460:	2a08      	cmp	r2, #8
 8001462:	d001      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8001464:	480d      	ldr	r0, [pc, #52]	@ (800149c <HAL_RCC_GetSysClockFreq+0x44>)
}
 8001466:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001468:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800146c:	490c      	ldr	r1, [pc, #48]	@ (80014a0 <HAL_RCC_GetSysClockFreq+0x48>)
 800146e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001470:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001474:	d00b      	beq.n	800148e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x40>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001482:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_RCC_GetSysClockFreq+0x44>)
 8001484:	fb02 f000 	mul.w	r0, r2, r0
 8001488:	fbb0 f0f3 	udiv	r0, r0, r3
 800148c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001490:	fb03 f000 	mul.w	r0, r3, r0
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	007a1200 	.word	0x007a1200
 80014a0:	080023b0 	.word	0x080023b0
 80014a4:	080023ac 	.word	0x080023ac
 80014a8:	003d0900 	.word	0x003d0900

080014ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80014ac:	2800      	cmp	r0, #0
 80014ae:	f000 80a0 	beq.w	80015f2 <HAL_RCC_ClockConfig+0x146>
{
 80014b2:	b570      	push	{r4, r5, r6, lr}
 80014b4:	460d      	mov	r5, r1
 80014b6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b52      	ldr	r3, [pc, #328]	@ (8001604 <HAL_RCC_ClockConfig+0x158>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	428b      	cmp	r3, r1
 80014c2:	d20b      	bcs.n	80014dc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001604 <HAL_RCC_ClockConfig+0x158>)
 80014c6:	6813      	ldr	r3, [r2, #0]
 80014c8:	f023 0307 	bic.w	r3, r3, #7
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	428b      	cmp	r3, r1
 80014d8:	f040 808d 	bne.w	80015f6 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	f013 0f02 	tst.w	r3, #2
 80014e2:	d017      	beq.n	8001514 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	f013 0f04 	tst.w	r3, #4
 80014e8:	d004      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ea:	4a47      	ldr	r2, [pc, #284]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 80014ec:	6853      	ldr	r3, [r2, #4]
 80014ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014f2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	f013 0f08 	tst.w	r3, #8
 80014fa:	d004      	beq.n	8001506 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014fc:	4a42      	ldr	r2, [pc, #264]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 80014fe:	6853      	ldr	r3, [r2, #4]
 8001500:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001504:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001506:	4a40      	ldr	r2, [pc, #256]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 8001508:	6853      	ldr	r3, [r2, #4]
 800150a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800150e:	68a1      	ldr	r1, [r4, #8]
 8001510:	430b      	orrs	r3, r1
 8001512:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	f013 0f01 	tst.w	r3, #1
 800151a:	d031      	beq.n	8001580 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151c:	6863      	ldr	r3, [r4, #4]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d020      	beq.n	8001564 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001522:	2b02      	cmp	r3, #2
 8001524:	d025      	beq.n	8001572 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	4a38      	ldr	r2, [pc, #224]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	f012 0f02 	tst.w	r2, #2
 800152e:	d064      	beq.n	80015fa <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001530:	4935      	ldr	r1, [pc, #212]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 8001532:	684a      	ldr	r2, [r1, #4]
 8001534:	f022 0203 	bic.w	r2, r2, #3
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800153c:	f7ff fa7e 	bl	8000a3c <HAL_GetTick>
 8001540:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	6862      	ldr	r2, [r4, #4]
 800154c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001550:	d016      	beq.n	8001580 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001552:	f7ff fa73 	bl	8000a3c <HAL_GetTick>
 8001556:	1b80      	subs	r0, r0, r6
 8001558:	f241 3388 	movw	r3, #5000	@ 0x1388
 800155c:	4298      	cmp	r0, r3
 800155e:	d9f0      	bls.n	8001542 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001560:	2003      	movs	r0, #3
 8001562:	e045      	b.n	80015f0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001564:	4a28      	ldr	r2, [pc, #160]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800156c:	d1e0      	bne.n	8001530 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800156e:	2001      	movs	r0, #1
 8001570:	e03e      	b.n	80015f0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001572:	4a25      	ldr	r2, [pc, #148]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800157a:	d1d9      	bne.n	8001530 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800157c:	2001      	movs	r0, #1
 800157e:	e037      	b.n	80015f0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_RCC_ClockConfig+0x158>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	42ab      	cmp	r3, r5
 800158a:	d90a      	bls.n	80015a2 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158c:	4a1d      	ldr	r2, [pc, #116]	@ (8001604 <HAL_RCC_ClockConfig+0x158>)
 800158e:	6813      	ldr	r3, [r2, #0]
 8001590:	f023 0307 	bic.w	r3, r3, #7
 8001594:	432b      	orrs	r3, r5
 8001596:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001598:	6813      	ldr	r3, [r2, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	42ab      	cmp	r3, r5
 80015a0:	d12d      	bne.n	80015fe <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	f013 0f04 	tst.w	r3, #4
 80015a8:	d006      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015aa:	4a17      	ldr	r2, [pc, #92]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 80015ac:	6853      	ldr	r3, [r2, #4]
 80015ae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80015b2:	68e1      	ldr	r1, [r4, #12]
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	f013 0f08 	tst.w	r3, #8
 80015be:	d007      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c0:	4a11      	ldr	r2, [pc, #68]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 80015c2:	6853      	ldr	r3, [r2, #4]
 80015c4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80015c8:	6921      	ldr	r1, [r4, #16]
 80015ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015ce:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d0:	f7ff ff42 	bl	8001458 <HAL_RCC_GetSysClockFreq>
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_RCC_ClockConfig+0x15c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015dc:	4a0b      	ldr	r2, [pc, #44]	@ (800160c <HAL_RCC_ClockConfig+0x160>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	40d8      	lsrs	r0, r3
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <HAL_RCC_ClockConfig+0x164>)
 80015e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_RCC_ClockConfig+0x168>)
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	f7ff f9e3 	bl	80009b4 <HAL_InitTick>
  return HAL_OK;
 80015ee:	2000      	movs	r0, #0
}
 80015f0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80015f2:	2001      	movs	r0, #1
}
 80015f4:	4770      	bx	lr
    return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
 80015f8:	e7fa      	b.n	80015f0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80015fa:	2001      	movs	r0, #1
 80015fc:	e7f8      	b.n	80015f0 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80015fe:	2001      	movs	r0, #1
 8001600:	e7f6      	b.n	80015f0 <HAL_RCC_ClockConfig+0x144>
 8001602:	bf00      	nop
 8001604:	40022000 	.word	0x40022000
 8001608:	40021000 	.word	0x40021000
 800160c:	0800239c 	.word	0x0800239c
 8001610:	20000004 	.word	0x20000004
 8001614:	2000000c 	.word	0x2000000c

08001618 <HAL_RCC_GetHCLKFreq>:
}
 8001618:	4b01      	ldr	r3, [pc, #4]	@ (8001620 <HAL_RCC_GetHCLKFreq+0x8>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_RCC_GetPCLK1Freq>:
{
 8001624:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001626:	f7ff fff7 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 800162a:	4b04      	ldr	r3, [pc, #16]	@ (800163c <HAL_RCC_GetPCLK1Freq+0x18>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001632:	4a03      	ldr	r2, [pc, #12]	@ (8001640 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001634:	5cd3      	ldrb	r3, [r2, r3]
}
 8001636:	40d8      	lsrs	r0, r3
 8001638:	bd08      	pop	{r3, pc}
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	08002394 	.word	0x08002394

08001644 <HAL_RCC_GetPCLK2Freq>:
{
 8001644:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001646:	f7ff ffe7 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 800164a:	4b04      	ldr	r3, [pc, #16]	@ (800165c <HAL_RCC_GetPCLK2Freq+0x18>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001652:	4a03      	ldr	r2, [pc, #12]	@ (8001660 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
}
 8001656:	40d8      	lsrs	r0, r3
 8001658:	bd08      	pop	{r3, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	08002394 	.word	0x08002394

08001664 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800166a:	6803      	ldr	r3, [r0, #0]
 800166c:	f013 0f01 	tst.w	r3, #1
 8001670:	d036      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800167a:	d149      	bne.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167c:	4b3c      	ldr	r3, [pc, #240]	@ (8001770 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800167e:	69da      	ldr	r2, [r3, #28]
 8001680:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001684:	61da      	str	r2, [r3, #28]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001690:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800169a:	d03b      	beq.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800169c:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80016a4:	d013      	beq.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80016a6:	6862      	ldr	r2, [r4, #4]
 80016a8:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d00e      	beq.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001770 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80016b2:	6a13      	ldr	r3, [r2, #32]
 80016b4:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016b8:	492f      	ldr	r1, [pc, #188]	@ (8001778 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80016ba:	2601      	movs	r6, #1
 80016bc:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016c0:	2600      	movs	r6, #0
 80016c2:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016c6:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016c8:	f013 0f01 	tst.w	r3, #1
 80016cc:	d136      	bne.n	800173c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016ce:	4a28      	ldr	r2, [pc, #160]	@ (8001770 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80016d0:	6a13      	ldr	r3, [r2, #32]
 80016d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016d6:	6861      	ldr	r1, [r4, #4]
 80016d8:	430b      	orrs	r3, r1
 80016da:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016dc:	2d00      	cmp	r5, #0
 80016de:	d13e      	bne.n	800175e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	f013 0f02 	tst.w	r3, #2
 80016e6:	d006      	beq.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016e8:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80016ea:	6853      	ldr	r3, [r2, #4]
 80016ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016f0:	68a1      	ldr	r1, [r4, #8]
 80016f2:	430b      	orrs	r3, r1
 80016f4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	f013 0f10 	tst.w	r3, #16
 80016fc:	d034      	beq.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001700:	6853      	ldr	r3, [r2, #4]
 8001702:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001706:	68e1      	ldr	r1, [r4, #12]
 8001708:	430b      	orrs	r3, r1
 800170a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800170c:	2000      	movs	r0, #0
 800170e:	e02c      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8001710:	2500      	movs	r5, #0
 8001712:	e7be      	b.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001714:	4a17      	ldr	r2, [pc, #92]	@ (8001774 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001716:	6813      	ldr	r3, [r2, #0]
 8001718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800171e:	f7ff f98d 	bl	8000a3c <HAL_GetTick>
 8001722:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800172c:	d1b6      	bne.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7ff f985 	bl	8000a3c <HAL_GetTick>
 8001732:	1b80      	subs	r0, r0, r6
 8001734:	2864      	cmp	r0, #100	@ 0x64
 8001736:	d9f5      	bls.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8001738:	2003      	movs	r0, #3
 800173a:	e016      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 800173c:	f7ff f97e 	bl	8000a3c <HAL_GetTick>
 8001740:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	f013 0f02 	tst.w	r3, #2
 800174a:	d1c0      	bne.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff f976 	bl	8000a3c <HAL_GetTick>
 8001750:	1b80      	subs	r0, r0, r6
 8001752:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001756:	4298      	cmp	r0, r3
 8001758:	d9f3      	bls.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 800175a:	2003      	movs	r0, #3
 800175c:	e005      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 800175e:	69d3      	ldr	r3, [r2, #28]
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	e7bb      	b.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8001768:	2000      	movs	r0, #0
}
 800176a:	b002      	add	sp, #8
 800176c:	bd70      	pop	{r4, r5, r6, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	40007000 	.word	0x40007000
 8001778:	42420000 	.word	0x42420000

0800177c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800177c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	4605      	mov	r5, r0
 8001784:	4688      	mov	r8, r1
 8001786:	4617      	mov	r7, r2
 8001788:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800178a:	f7ff f957 	bl	8000a3c <HAL_GetTick>
 800178e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001790:	1a1b      	subs	r3, r3, r0
 8001792:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8001796:	f7ff f951 	bl	8000a3c <HAL_GetTick>
 800179a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800179c:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80017a4:	fb09 f303 	mul.w	r3, r9, r3
 80017a8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	689c      	ldr	r4, [r3, #8]
 80017ae:	ea38 0404 	bics.w	r4, r8, r4
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	42bb      	cmp	r3, r7
 80017ba:	d03d      	beq.n	8001838 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80017bc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80017c0:	d0f3      	beq.n	80017aa <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80017c2:	f7ff f93b 	bl	8000a3c <HAL_GetTick>
 80017c6:	eba0 000a 	sub.w	r0, r0, sl
 80017ca:	4548      	cmp	r0, r9
 80017cc:	d207      	bcs.n	80017de <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80017ce:	9a01      	ldr	r2, [sp, #4]
 80017d0:	b102      	cbz	r2, 80017d4 <SPI_WaitFlagStateUntilTimeout+0x58>
 80017d2:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80017d4:	9b01      	ldr	r3, [sp, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	4691      	mov	r9, r2
 80017dc:	e7e5      	b.n	80017aa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80017de:	682a      	ldr	r2, [r5, #0]
 80017e0:	6853      	ldr	r3, [r2, #4]
 80017e2:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80017e6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017e8:	686b      	ldr	r3, [r5, #4]
 80017ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80017ee:	d00b      	beq.n	8001808 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017f0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80017f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017f6:	d014      	beq.n	8001822 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80017fe:	2300      	movs	r3, #0
 8001800:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001804:	2003      	movs	r0, #3
 8001806:	e018      	b.n	800183a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001808:	68ab      	ldr	r3, [r5, #8]
 800180a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800180e:	d002      	beq.n	8001816 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001814:	d1ec      	bne.n	80017f0 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8001816:	682a      	ldr	r2, [r5, #0]
 8001818:	6813      	ldr	r3, [r2, #0]
 800181a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e7e6      	b.n	80017f0 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8001822:	682a      	ldr	r2, [r5, #0]
 8001824:	6813      	ldr	r3, [r2, #0]
 8001826:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	682a      	ldr	r2, [r5, #0]
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e7df      	b.n	80017f8 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8001838:	2000      	movs	r0, #0
}
 800183a:	b002      	add	sp, #8
 800183c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001840:	20000004 	.word	0x20000004

08001844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	4606      	mov	r6, r0
 800184a:	460c      	mov	r4, r1
 800184c:	4615      	mov	r5, r2
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800184e:	9200      	str	r2, [sp, #0]
 8001850:	460b      	mov	r3, r1
 8001852:	2201      	movs	r2, #1
 8001854:	2102      	movs	r1, #2
 8001856:	f7ff ff91 	bl	800177c <SPI_WaitFlagStateUntilTimeout>
 800185a:	b948      	cbnz	r0, 8001870 <SPI_EndRxTxTransaction+0x2c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800185c:	9500      	str	r5, [sp, #0]
 800185e:	4623      	mov	r3, r4
 8001860:	2200      	movs	r2, #0
 8001862:	2180      	movs	r1, #128	@ 0x80
 8001864:	4630      	mov	r0, r6
 8001866:	f7ff ff89 	bl	800177c <SPI_WaitFlagStateUntilTimeout>
 800186a:	b938      	cbnz	r0, 800187c <SPI_EndRxTxTransaction+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800186c:	b002      	add	sp, #8
 800186e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001870:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8001872:	f043 0320 	orr.w	r3, r3, #32
 8001876:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001878:	2003      	movs	r0, #3
 800187a:	e7f7      	b.n	800186c <SPI_EndRxTxTransaction+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800187c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800187e:	f043 0320 	orr.w	r3, r3, #32
 8001882:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001884:	2003      	movs	r0, #3
 8001886:	e7f1      	b.n	800186c <SPI_EndRxTxTransaction+0x28>

08001888 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001888:	2800      	cmp	r0, #0
 800188a:	d056      	beq.n	800193a <HAL_SPI_Init+0xb2>
{
 800188c:	b510      	push	{r4, lr}
 800188e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001890:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001892:	b933      	cbnz	r3, 80018a2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001894:	6843      	ldr	r3, [r0, #4]
 8001896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800189a:	d005      	beq.n	80018a8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800189c:	2300      	movs	r3, #0
 800189e:	61c3      	str	r3, [r0, #28]
 80018a0:	e002      	b.n	80018a8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018a6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80018ac:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d03c      	beq.n	800192e <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80018b4:	2302      	movs	r3, #2
 80018b6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80018c2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018c4:	6863      	ldr	r3, [r4, #4]
 80018c6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80018ca:	68a2      	ldr	r2, [r4, #8]
 80018cc:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80018d0:	4313      	orrs	r3, r2
 80018d2:	68e2      	ldr	r2, [r4, #12]
 80018d4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80018d8:	4313      	orrs	r3, r2
 80018da:	6922      	ldr	r2, [r4, #16]
 80018dc:	f002 0202 	and.w	r2, r2, #2
 80018e0:	4313      	orrs	r3, r2
 80018e2:	6962      	ldr	r2, [r4, #20]
 80018e4:	f002 0201 	and.w	r2, r2, #1
 80018e8:	4313      	orrs	r3, r2
 80018ea:	69a2      	ldr	r2, [r4, #24]
 80018ec:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80018f0:	4313      	orrs	r3, r2
 80018f2:	69e2      	ldr	r2, [r4, #28]
 80018f4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80018f8:	4313      	orrs	r3, r2
 80018fa:	6a22      	ldr	r2, [r4, #32]
 80018fc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001900:	4313      	orrs	r3, r2
 8001902:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001904:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001908:	6821      	ldr	r1, [r4, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800190e:	8b63      	ldrh	r3, [r4, #26]
 8001910:	6822      	ldr	r2, [r4, #0]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001918:	6822      	ldr	r2, [r4, #0]
 800191a:	69d3      	ldr	r3, [r2, #28]
 800191c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001920:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001922:	2000      	movs	r0, #0
 8001924:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001926:	2301      	movs	r3, #1
 8001928:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 800192c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800192e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8001932:	4620      	mov	r0, r4
 8001934:	f7fe fda4 	bl	8000480 <HAL_SPI_MspInit>
 8001938:	e7bc      	b.n	80018b4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
}
 800193c:	4770      	bx	lr

0800193e <HAL_SPI_TransmitReceive>:
{
 800193e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001942:	b083      	sub	sp, #12
 8001944:	4604      	mov	r4, r0
 8001946:	4688      	mov	r8, r1
 8001948:	4691      	mov	r9, r2
 800194a:	461f      	mov	r7, r3
 800194c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800194e:	f7ff f875 	bl	8000a3c <HAL_GetTick>
 8001952:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8001954:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8001958:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800195a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800195c:	2b01      	cmp	r3, #1
 800195e:	d00a      	beq.n	8001976 <HAL_SPI_TransmitReceive+0x38>
 8001960:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8001964:	f040 8105 	bne.w	8001b72 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001968:	68a2      	ldr	r2, [r4, #8]
 800196a:	2a00      	cmp	r2, #0
 800196c:	f040 8105 	bne.w	8001b7a <HAL_SPI_TransmitReceive+0x23c>
 8001970:	2b04      	cmp	r3, #4
 8001972:	f040 8104 	bne.w	8001b7e <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001976:	f1b8 0f00 	cmp.w	r8, #0
 800197a:	f000 8102 	beq.w	8001b82 <HAL_SPI_TransmitReceive+0x244>
 800197e:	f1b9 0f00 	cmp.w	r9, #0
 8001982:	f000 8100 	beq.w	8001b86 <HAL_SPI_TransmitReceive+0x248>
 8001986:	2f00      	cmp	r7, #0
 8001988:	f000 80ff 	beq.w	8001b8a <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 800198c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001990:	2b01      	cmp	r3, #1
 8001992:	f000 80fc 	beq.w	8001b8e <HAL_SPI_TransmitReceive+0x250>
 8001996:	2301      	movs	r3, #1
 8001998:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800199c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d002      	beq.n	80019ac <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019a6:	2305      	movs	r3, #5
 80019a8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019b0:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80019b4:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80019b6:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80019b8:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80019bc:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80019be:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 80019c0:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80019c2:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80019cc:	d103      	bne.n	80019d6 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019d4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019d6:	68e3      	ldr	r3, [r4, #12]
 80019d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019dc:	d011      	beq.n	8001a02 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019de:	6863      	ldr	r3, [r4, #4]
 80019e0:	b10b      	cbz	r3, 80019e6 <HAL_SPI_TransmitReceive+0xa8>
 80019e2:	2f01      	cmp	r7, #1
 80019e4:	d10b      	bne.n	80019fe <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80019e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	7812      	ldrb	r2, [r2, #0]
 80019ec:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80019f0:	3301      	adds	r3, #1
 80019f2:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80019f4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80019fe:	2701      	movs	r7, #1
 8001a00:	e071      	b.n	8001ae6 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a02:	6863      	ldr	r3, [r4, #4]
 8001a04:	b10b      	cbz	r3, 8001a0a <HAL_SPI_TransmitReceive+0xcc>
 8001a06:	2f01      	cmp	r7, #1
 8001a08:	d10b      	bne.n	8001a22 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a0a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	8812      	ldrh	r2, [r2, #0]
 8001a10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a14:	3302      	adds	r3, #2
 8001a16:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a18:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8001a22:	2701      	movs	r7, #1
 8001a24:	e01b      	b.n	8001a5e <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	f012 0f01 	tst.w	r2, #1
 8001a2e:	d00e      	beq.n	8001a4e <HAL_SPI_TransmitReceive+0x110>
 8001a30:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8001a32:	b292      	uxth	r2, r2
 8001a34:	b15a      	cbz	r2, 8001a4e <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001a3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a3c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001a3e:	3302      	adds	r3, #2
 8001a40:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8001a42:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8001a4c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a4e:	f7fe fff5 	bl	8000a3c <HAL_GetTick>
 8001a52:	1b80      	subs	r0, r0, r6
 8001a54:	42a8      	cmp	r0, r5
 8001a56:	d302      	bcc.n	8001a5e <HAL_SPI_TransmitReceive+0x120>
 8001a58:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001a5c:	d11e      	bne.n	8001a9c <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a5e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	b91b      	cbnz	r3, 8001a6c <HAL_SPI_TransmitReceive+0x12e>
 8001a64:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d062      	beq.n	8001b32 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	f012 0f02 	tst.w	r2, #2
 8001a74:	d0d7      	beq.n	8001a26 <HAL_SPI_TransmitReceive+0xe8>
 8001a76:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	2a00      	cmp	r2, #0
 8001a7c:	d0d3      	beq.n	8001a26 <HAL_SPI_TransmitReceive+0xe8>
 8001a7e:	2f00      	cmp	r7, #0
 8001a80:	d0d1      	beq.n	8001a26 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a82:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001a84:	8812      	ldrh	r2, [r2, #0]
 8001a86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a8e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8001a98:	2700      	movs	r7, #0
 8001a9a:	e7c4      	b.n	8001a26 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	e063      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	f012 0f01 	tst.w	r2, #1
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_SPI_TransmitReceive+0x196>
 8001ab6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8001ab8:	b292      	uxth	r2, r2
 8001aba:	b15a      	cbz	r2, 8001ad4 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001ac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001ac2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8001ac8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8001ad2:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001ad4:	f7fe ffb2 	bl	8000a3c <HAL_GetTick>
 8001ad8:	1b83      	subs	r3, r0, r6
 8001ada:	42ab      	cmp	r3, r5
 8001adc:	d302      	bcc.n	8001ae4 <HAL_SPI_TransmitReceive+0x1a6>
 8001ade:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001ae2:	d11e      	bne.n	8001b22 <HAL_SPI_TransmitReceive+0x1e4>
 8001ae4:	b1ed      	cbz	r5, 8001b22 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ae6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b913      	cbnz	r3, 8001af2 <HAL_SPI_TransmitReceive+0x1b4>
 8001aec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b1fb      	cbz	r3, 8001b32 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	f012 0f02 	tst.w	r2, #2
 8001afa:	d0d7      	beq.n	8001aac <HAL_SPI_TransmitReceive+0x16e>
 8001afc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8001afe:	b292      	uxth	r2, r2
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	d0d3      	beq.n	8001aac <HAL_SPI_TransmitReceive+0x16e>
 8001b04:	2f00      	cmp	r7, #0
 8001b06:	d0d1      	beq.n	8001aac <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b08:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001b0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b10:	3301      	adds	r3, #1
 8001b12:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b14:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8001b1e:	2700      	movs	r7, #0
 8001b20:	e7c4      	b.n	8001aac <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001b2e:	2003      	movs	r0, #3
 8001b30:	e020      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b32:	4632      	mov	r2, r6
 8001b34:	4629      	mov	r1, r5
 8001b36:	4620      	mov	r0, r4
 8001b38:	f7ff fe84 	bl	8001844 <SPI_EndRxTxTransaction>
 8001b3c:	b990      	cbnz	r0, 8001b64 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b3e:	68a3      	ldr	r3, [r4, #8]
 8001b40:	b933      	cbnz	r3, 8001b50 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	9201      	str	r2, [sp, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8001b56:	2300      	movs	r3, #0
 8001b58:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b5c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001b5e:	b14b      	cbz	r3, 8001b74 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8001b60:	2001      	movs	r0, #1
 8001b62:	e007      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b64:	2320      	movs	r3, #32
 8001b66:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
 8001b70:	e000      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8001b72:	2002      	movs	r0, #2
}
 8001b74:	b003      	add	sp, #12
 8001b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	e7fa      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
 8001b7e:	2002      	movs	r0, #2
 8001b80:	e7f8      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8001b82:	2001      	movs	r0, #1
 8001b84:	e7f6      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
 8001b86:	2001      	movs	r0, #1
 8001b88:	e7f4      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	e7f2      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8001b8e:	2002      	movs	r0, #2
 8001b90:	e7f0      	b.n	8001b74 <HAL_SPI_TransmitReceive+0x236>
	...

08001b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b94:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b96:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b98:	6a03      	ldr	r3, [r0, #32]
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ba0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ba2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ba4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ba8:	680c      	ldr	r4, [r1, #0]
 8001baa:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001bac:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bb0:	688b      	ldr	r3, [r1, #8]
 8001bb2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <TIM_OC1_SetConfig+0x50>)
 8001bb6:	4290      	cmp	r0, r2
 8001bb8:	d006      	beq.n	8001bc8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bba:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bbc:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bbe:	684a      	ldr	r2, [r1, #4]
 8001bc0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bc2:	6203      	str	r3, [r0, #32]
}
 8001bc4:	bc30      	pop	{r4, r5}
 8001bc6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bc8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001bcc:	68ca      	ldr	r2, [r1, #12]
 8001bce:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bd0:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bd4:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001bd8:	694a      	ldr	r2, [r1, #20]
 8001bda:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bdc:	698d      	ldr	r5, [r1, #24]
 8001bde:	4315      	orrs	r5, r2
 8001be0:	e7eb      	b.n	8001bba <TIM_OC1_SetConfig+0x26>
 8001be2:	bf00      	nop
 8001be4:	40012c00 	.word	0x40012c00

08001be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001be8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bea:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bec:	6a02      	ldr	r2, [r0, #32]
 8001bee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bf2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bf4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bf6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bf8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bfc:	680d      	ldr	r5, [r1, #0]
 8001bfe:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c04:	688a      	ldr	r2, [r1, #8]
 8001c06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c40 <TIM_OC3_SetConfig+0x58>)
 8001c0c:	4290      	cmp	r0, r2
 8001c0e:	d006      	beq.n	8001c1e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c10:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c12:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c14:	684a      	ldr	r2, [r1, #4]
 8001c16:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c18:	6203      	str	r3, [r0, #32]
}
 8001c1a:	bc30      	pop	{r4, r5}
 8001c1c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c22:	68ca      	ldr	r2, [r1, #12]
 8001c24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c2c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c30:	694a      	ldr	r2, [r1, #20]
 8001c32:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c36:	698a      	ldr	r2, [r1, #24]
 8001c38:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8001c3c:	e7e8      	b.n	8001c10 <TIM_OC3_SetConfig+0x28>
 8001c3e:	bf00      	nop
 8001c40:	40012c00 	.word	0x40012c00

08001c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c44:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c46:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c48:	6a02      	ldr	r2, [r0, #32]
 8001c4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c4e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c52:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c54:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c58:	680d      	ldr	r5, [r1, #0]
 8001c5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001c5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c62:	688d      	ldr	r5, [r1, #8]
 8001c64:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c68:	4d07      	ldr	r5, [pc, #28]	@ (8001c88 <TIM_OC4_SetConfig+0x44>)
 8001c6a:	42a8      	cmp	r0, r5
 8001c6c:	d006      	beq.n	8001c7c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c70:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c72:	684a      	ldr	r2, [r1, #4]
 8001c74:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c76:	6203      	str	r3, [r0, #32]
}
 8001c78:	bc30      	pop	{r4, r5}
 8001c7a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c7c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c80:	694d      	ldr	r5, [r1, #20]
 8001c82:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001c86:	e7f2      	b.n	8001c6e <TIM_OC4_SetConfig+0x2a>
 8001c88:	40012c00 	.word	0x40012c00

08001c8c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001c8c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c8e:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c90:	6a04      	ldr	r4, [r0, #32]
 8001c92:	f024 0410 	bic.w	r4, r4, #16
 8001c96:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c98:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001c9a:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001c9e:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ca2:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001ca6:	031b      	lsls	r3, r3, #12
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cae:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001cb2:	0109      	lsls	r1, r1, #4
 8001cb4:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 8001cb8:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cba:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cbc:	6201      	str	r1, [r0, #32]
}
 8001cbe:	bc30      	pop	{r4, r5}
 8001cc0:	4770      	bx	lr

08001cc2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001cc2:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8001cc4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cc6:	6a04      	ldr	r4, [r0, #32]
 8001cc8:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8001ccc:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001cce:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001cd0:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8001cd4:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001cd8:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8001ce4:	f425 7500 	bic.w	r5, r5, #512	@ 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8001ce8:	0209      	lsls	r1, r1, #8
 8001cea:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8001cee:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001cf0:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8001cf2:	6201      	str	r1, [r0, #32]
}
 8001cf4:	bc30      	pop	{r4, r5}
 8001cf6:	4770      	bx	lr

08001cf8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001cf8:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8001cfa:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cfc:	6a04      	ldr	r4, [r0, #32]
 8001cfe:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8001d02:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001d04:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001d06:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001d0a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001d0e:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001d12:	031b      	lsls	r3, r3, #12
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8001d1a:	f425 5500 	bic.w	r5, r5, #8192	@ 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8001d1e:	0309      	lsls	r1, r1, #12
 8001d20:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8001d24:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001d26:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8001d28:	6201      	str	r1, [r0, #32]
}
 8001d2a:	bc30      	pop	{r4, r5}
 8001d2c:	4770      	bx	lr
	...

08001d30 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001d30:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d32:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <TIM_Base_SetConfig+0x80>)
 8001d34:	4290      	cmp	r0, r2
 8001d36:	d00a      	beq.n	8001d4e <TIM_Base_SetConfig+0x1e>
 8001d38:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001d3c:	d007      	beq.n	8001d4e <TIM_Base_SetConfig+0x1e>
 8001d3e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001d42:	4290      	cmp	r0, r2
 8001d44:	d003      	beq.n	8001d4e <TIM_Base_SetConfig+0x1e>
 8001d46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d4a:	4290      	cmp	r0, r2
 8001d4c:	d103      	bne.n	8001d56 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d52:	684a      	ldr	r2, [r1, #4]
 8001d54:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d56:	4a16      	ldr	r2, [pc, #88]	@ (8001db0 <TIM_Base_SetConfig+0x80>)
 8001d58:	4290      	cmp	r0, r2
 8001d5a:	d00a      	beq.n	8001d72 <TIM_Base_SetConfig+0x42>
 8001d5c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001d60:	d007      	beq.n	8001d72 <TIM_Base_SetConfig+0x42>
 8001d62:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001d66:	4290      	cmp	r0, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_Base_SetConfig+0x42>
 8001d6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d6e:	4290      	cmp	r0, r2
 8001d70:	d103      	bne.n	8001d7a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d76:	68ca      	ldr	r2, [r1, #12]
 8001d78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d7e:	694a      	ldr	r2, [r1, #20]
 8001d80:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d82:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d84:	688b      	ldr	r3, [r1, #8]
 8001d86:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001d88:	680b      	ldr	r3, [r1, #0]
 8001d8a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <TIM_Base_SetConfig+0x80>)
 8001d8e:	4298      	cmp	r0, r3
 8001d90:	d00a      	beq.n	8001da8 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8001d92:	2301      	movs	r3, #1
 8001d94:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d96:	6903      	ldr	r3, [r0, #16]
 8001d98:	f013 0f01 	tst.w	r3, #1
 8001d9c:	d003      	beq.n	8001da6 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d9e:	6903      	ldr	r3, [r0, #16]
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6103      	str	r3, [r0, #16]
}
 8001da6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001da8:	690b      	ldr	r3, [r1, #16]
 8001daa:	6303      	str	r3, [r0, #48]	@ 0x30
 8001dac:	e7f1      	b.n	8001d92 <TIM_Base_SetConfig+0x62>
 8001dae:	bf00      	nop
 8001db0:	40012c00 	.word	0x40012c00

08001db4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001db4:	b340      	cbz	r0, 8001e08 <HAL_TIM_PWM_Init+0x54>
{
 8001db6:	b510      	push	{r4, lr}
 8001db8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001dba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001dbe:	b1f3      	cbz	r3, 8001dfe <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	f851 0b04 	ldr.w	r0, [r1], #4
 8001dcc:	f7ff ffb0 	bl	8001d30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001dda:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001dde:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001de2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001dee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001df2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001df6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001dfa:	2000      	movs	r0, #0
}
 8001dfc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001dfe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001e02:	f7fe fcbb 	bl	800077c <HAL_TIM_PWM_MspInit>
 8001e06:	e7db      	b.n	8001dc0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001e08:	2001      	movs	r0, #1
}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8001e0c:	b340      	cbz	r0, 8001e60 <HAL_TIM_IC_Init+0x54>
{
 8001e0e:	b510      	push	{r4, lr}
 8001e10:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e12:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001e16:	b1f3      	cbz	r3, 8001e56 <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1e:	4621      	mov	r1, r4
 8001e20:	f851 0b04 	ldr.w	r0, [r1], #4
 8001e24:	f7ff ff84 	bl	8001d30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001e32:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001e36:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001e3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e46:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001e4a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001e4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001e52:	2000      	movs	r0, #0
}
 8001e54:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e56:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001e5a:	f7fe fca5 	bl	80007a8 <HAL_TIM_IC_MspInit>
 8001e5e:	e7db      	b.n	8001e18 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8001e60:	2001      	movs	r0, #1
}
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d056      	beq.n	8001f16 <HAL_TIM_Encoder_Init+0xb2>
{
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	460d      	mov	r5, r1
 8001e6c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d04a      	beq.n	8001f0c <HAL_TIM_Encoder_Init+0xa8>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e76:	2302      	movs	r3, #2
 8001e78:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	6893      	ldr	r3, [r2, #8]
 8001e80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e84:	f023 0307 	bic.w	r3, r3, #7
 8001e88:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001e90:	f7ff ff4e 	bl	8001d30 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001e94:	6821      	ldr	r1, [r4, #0]
 8001e96:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001e98:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8001e9a:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001e9c:	6828      	ldr	r0, [r5, #0]
 8001e9e:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001ea0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001ea4:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ea8:	68ab      	ldr	r3, [r5, #8]
 8001eaa:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8001eae:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001eb2:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001eb4:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8001eb8:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ebc:	68ea      	ldr	r2, [r5, #12]
 8001ebe:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 8001ec2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8001ec6:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ec8:	6a2b      	ldr	r3, [r5, #32]
 8001eca:	031b      	lsls	r3, r3, #12
 8001ecc:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8001ed0:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8001ed4:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001ed6:	f026 0622 	bic.w	r6, r6, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001eda:	686a      	ldr	r2, [r5, #4]
 8001edc:	696d      	ldr	r5, [r5, #20]
 8001ede:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001ee2:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8001ee4:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001ee6:	6821      	ldr	r1, [r4, #0]
 8001ee8:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ef8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8001f04:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001f08:	2000      	movs	r0, #0
}
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001f0c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001f10:	f7fe fbc6 	bl	80006a0 <HAL_TIM_Encoder_MspInit>
 8001f14:	e7af      	b.n	8001e76 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8001f16:	2001      	movs	r0, #1
}
 8001f18:	4770      	bx	lr
	...

08001f1c <TIM_OC2_SetConfig>:
{
 8001f1c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8001f1e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f20:	6a02      	ldr	r2, [r0, #32]
 8001f22:	f022 0210 	bic.w	r2, r2, #16
 8001f26:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001f28:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001f2a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f2c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f30:	680d      	ldr	r5, [r1, #0]
 8001f32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001f36:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f3a:	688d      	ldr	r5, [r1, #8]
 8001f3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f40:	4d0c      	ldr	r5, [pc, #48]	@ (8001f74 <TIM_OC2_SetConfig+0x58>)
 8001f42:	42a8      	cmp	r0, r5
 8001f44:	d006      	beq.n	8001f54 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8001f46:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f48:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001f4a:	684a      	ldr	r2, [r1, #4]
 8001f4c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001f4e:	6203      	str	r3, [r0, #32]
}
 8001f50:	bc30      	pop	{r4, r5}
 8001f52:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f58:	68cd      	ldr	r5, [r1, #12]
 8001f5a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f62:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f66:	694d      	ldr	r5, [r1, #20]
 8001f68:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f6c:	698d      	ldr	r5, [r1, #24]
 8001f6e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001f72:	e7e8      	b.n	8001f46 <TIM_OC2_SetConfig+0x2a>
 8001f74:	40012c00 	.word	0x40012c00

08001f78 <HAL_TIM_PWM_ConfigChannel>:
{
 8001f78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001f7a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d066      	beq.n	8002050 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001f82:	4604      	mov	r4, r0
 8001f84:	460d      	mov	r5, r1
 8001f86:	2301      	movs	r3, #1
 8001f88:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8001f8c:	2a0c      	cmp	r2, #12
 8001f8e:	d85a      	bhi.n	8002046 <HAL_TIM_PWM_ConfigChannel+0xce>
 8001f90:	e8df f002 	tbb	[pc, r2]
 8001f94:	59595907 	.word	0x59595907
 8001f98:	5959591b 	.word	0x5959591b
 8001f9c:	59595930 	.word	0x59595930
 8001fa0:	44          	.byte	0x44
 8001fa1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fa2:	6800      	ldr	r0, [r0, #0]
 8001fa4:	f7ff fdf6 	bl	8001b94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	6993      	ldr	r3, [r2, #24]
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fb2:	6822      	ldr	r2, [r4, #0]
 8001fb4:	6993      	ldr	r3, [r2, #24]
 8001fb6:	f023 0304 	bic.w	r3, r3, #4
 8001fba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fbc:	6822      	ldr	r2, [r4, #0]
 8001fbe:	6993      	ldr	r3, [r2, #24]
 8001fc0:	6929      	ldr	r1, [r5, #16]
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2000      	movs	r0, #0
      break;
 8001fc8:	e03e      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fca:	6800      	ldr	r0, [r0, #0]
 8001fcc:	f7ff ffa6 	bl	8001f1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fd0:	6822      	ldr	r2, [r4, #0]
 8001fd2:	6993      	ldr	r3, [r2, #24]
 8001fd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fd8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fda:	6822      	ldr	r2, [r4, #0]
 8001fdc:	6993      	ldr	r3, [r2, #24]
 8001fde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fe2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fe4:	6822      	ldr	r2, [r4, #0]
 8001fe6:	6993      	ldr	r3, [r2, #24]
 8001fe8:	6929      	ldr	r1, [r5, #16]
 8001fea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fee:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff0:	2000      	movs	r0, #0
      break;
 8001ff2:	e029      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ff4:	6800      	ldr	r0, [r0, #0]
 8001ff6:	f7ff fdf7 	bl	8001be8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ffa:	6822      	ldr	r2, [r4, #0]
 8001ffc:	69d3      	ldr	r3, [r2, #28]
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	69d3      	ldr	r3, [r2, #28]
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800200e:	6822      	ldr	r2, [r4, #0]
 8002010:	69d3      	ldr	r3, [r2, #28]
 8002012:	6929      	ldr	r1, [r5, #16]
 8002014:	430b      	orrs	r3, r1
 8002016:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002018:	2000      	movs	r0, #0
      break;
 800201a:	e015      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800201c:	6800      	ldr	r0, [r0, #0]
 800201e:	f7ff fe11 	bl	8001c44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002022:	6822      	ldr	r2, [r4, #0]
 8002024:	69d3      	ldr	r3, [r2, #28]
 8002026:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800202a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800202c:	6822      	ldr	r2, [r4, #0]
 800202e:	69d3      	ldr	r3, [r2, #28]
 8002030:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002034:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002036:	6822      	ldr	r2, [r4, #0]
 8002038:	69d3      	ldr	r3, [r2, #28]
 800203a:	6929      	ldr	r1, [r5, #16]
 800203c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002040:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2000      	movs	r0, #0
      break;
 8002044:	e000      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002046:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002048:	2300      	movs	r3, #0
 800204a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800204e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002050:	2002      	movs	r0, #2
 8002052:	e7fc      	b.n	800204e <HAL_TIM_PWM_ConfigChannel+0xd6>

08002054 <TIM_TI1_SetConfig>:
{
 8002054:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8002056:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002058:	6a04      	ldr	r4, [r0, #32]
 800205a:	f024 0401 	bic.w	r4, r4, #1
 800205e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002060:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002062:	4e11      	ldr	r6, [pc, #68]	@ (80020a8 <TIM_TI1_SetConfig+0x54>)
 8002064:	42b0      	cmp	r0, r6
 8002066:	d00d      	beq.n	8002084 <TIM_TI1_SetConfig+0x30>
 8002068:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800206c:	d00a      	beq.n	8002084 <TIM_TI1_SetConfig+0x30>
 800206e:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8002072:	42b0      	cmp	r0, r6
 8002074:	d006      	beq.n	8002084 <TIM_TI1_SetConfig+0x30>
 8002076:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800207a:	42b0      	cmp	r0, r6
 800207c:	d002      	beq.n	8002084 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800207e:	f044 0201 	orr.w	r2, r4, #1
 8002082:	e002      	b.n	800208a <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002084:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002088:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800208a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002094:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002098:	f001 010a 	and.w	r1, r1, #10
 800209c:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800209e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80020a0:	6201      	str	r1, [r0, #32]
}
 80020a2:	bc70      	pop	{r4, r5, r6}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40012c00 	.word	0x40012c00

080020ac <HAL_TIM_IC_ConfigChannel>:
{
 80020ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80020ae:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d05e      	beq.n	8002174 <HAL_TIM_IC_ConfigChannel+0xc8>
 80020b6:	4604      	mov	r4, r0
 80020b8:	460d      	mov	r5, r1
 80020ba:	2301      	movs	r3, #1
 80020bc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 80020c0:	2a0c      	cmp	r2, #12
 80020c2:	d852      	bhi.n	800216a <HAL_TIM_IC_ConfigChannel+0xbe>
 80020c4:	e8df f002 	tbb	[pc, r2]
 80020c8:	51515107 	.word	0x51515107
 80020cc:	51515119 	.word	0x51515119
 80020d0:	5151512c 	.word	0x5151512c
 80020d4:	3e          	.byte	0x3e
 80020d5:	00          	.byte	0x00
    TIM_TI1_SetConfig(htim->Instance,
 80020d6:	68cb      	ldr	r3, [r1, #12]
 80020d8:	684a      	ldr	r2, [r1, #4]
 80020da:	6809      	ldr	r1, [r1, #0]
 80020dc:	6800      	ldr	r0, [r0, #0]
 80020de:	f7ff ffb9 	bl	8002054 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	6993      	ldr	r3, [r2, #24]
 80020e6:	f023 030c 	bic.w	r3, r3, #12
 80020ea:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	6993      	ldr	r3, [r2, #24]
 80020f0:	68a9      	ldr	r1, [r5, #8]
 80020f2:	430b      	orrs	r3, r1
 80020f4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2000      	movs	r0, #0
 80020f8:	e038      	b.n	800216c <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI2_SetConfig(htim->Instance,
 80020fa:	68cb      	ldr	r3, [r1, #12]
 80020fc:	684a      	ldr	r2, [r1, #4]
 80020fe:	6809      	ldr	r1, [r1, #0]
 8002100:	6800      	ldr	r0, [r0, #0]
 8002102:	f7ff fdc3 	bl	8001c8c <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002106:	6822      	ldr	r2, [r4, #0]
 8002108:	6993      	ldr	r3, [r2, #24]
 800210a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800210e:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002110:	6822      	ldr	r2, [r4, #0]
 8002112:	6993      	ldr	r3, [r2, #24]
 8002114:	68a9      	ldr	r1, [r5, #8]
 8002116:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800211a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800211c:	2000      	movs	r0, #0
 800211e:	e025      	b.n	800216c <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI3_SetConfig(htim->Instance,
 8002120:	68cb      	ldr	r3, [r1, #12]
 8002122:	684a      	ldr	r2, [r1, #4]
 8002124:	6809      	ldr	r1, [r1, #0]
 8002126:	6800      	ldr	r0, [r0, #0]
 8002128:	f7ff fdcb 	bl	8001cc2 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	69d3      	ldr	r3, [r2, #28]
 8002130:	f023 030c 	bic.w	r3, r3, #12
 8002134:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002136:	6822      	ldr	r2, [r4, #0]
 8002138:	69d3      	ldr	r3, [r2, #28]
 800213a:	68a9      	ldr	r1, [r5, #8]
 800213c:	430b      	orrs	r3, r1
 800213e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002140:	2000      	movs	r0, #0
 8002142:	e013      	b.n	800216c <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI4_SetConfig(htim->Instance,
 8002144:	68cb      	ldr	r3, [r1, #12]
 8002146:	684a      	ldr	r2, [r1, #4]
 8002148:	6809      	ldr	r1, [r1, #0]
 800214a:	6800      	ldr	r0, [r0, #0]
 800214c:	f7ff fdd4 	bl	8001cf8 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	69d3      	ldr	r3, [r2, #28]
 8002154:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002158:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800215a:	6822      	ldr	r2, [r4, #0]
 800215c:	69d3      	ldr	r3, [r2, #28]
 800215e:	68a9      	ldr	r1, [r5, #8]
 8002160:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002164:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2000      	movs	r0, #0
 8002168:	e000      	b.n	800216c <HAL_TIM_IC_ConfigChannel+0xc0>
  __HAL_LOCK(htim);
 800216a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800216c:	2300      	movs	r3, #0
 800216e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002172:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002174:	2002      	movs	r0, #2
 8002176:	e7fc      	b.n	8002172 <HAL_TIM_IC_ConfigChannel+0xc6>

08002178 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002178:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800217c:	2a01      	cmp	r2, #1
 800217e:	d02c      	beq.n	80021da <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8002180:	b410      	push	{r4}
 8002182:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002184:	2201      	movs	r2, #1
 8002186:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218a:	2202      	movs	r2, #2
 800218c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002190:	6802      	ldr	r2, [r0, #0]
 8002192:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002194:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002196:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800219a:	6808      	ldr	r0, [r1, #0]
 800219c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021a0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	480e      	ldr	r0, [pc, #56]	@ (80021e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80021a6:	4282      	cmp	r2, r0
 80021a8:	d00a      	beq.n	80021c0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80021aa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80021ae:	d007      	beq.n	80021c0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80021b0:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80021b4:	4282      	cmp	r2, r0
 80021b6:	d003      	beq.n	80021c0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80021b8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80021bc:	4282      	cmp	r2, r0
 80021be:	d104      	bne.n	80021ca <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021c0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021c4:	6849      	ldr	r1, [r1, #4]
 80021c6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021c8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80021d6:	bc10      	pop	{r4}
 80021d8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80021da:	2002      	movs	r0, #2
}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40012c00 	.word	0x40012c00

080021e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e4:	b510      	push	{r4, lr}
 80021e6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e8:	6802      	ldr	r2, [r0, #0]
 80021ea:	6913      	ldr	r3, [r2, #16]
 80021ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021f0:	68c1      	ldr	r1, [r0, #12]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021f6:	6883      	ldr	r3, [r0, #8]
 80021f8:	6902      	ldr	r2, [r0, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	6942      	ldr	r2, [r0, #20]
 80021fe:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002200:	6801      	ldr	r1, [r0, #0]
 8002202:	68cb      	ldr	r3, [r1, #12]
 8002204:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002208:	f023 030c 	bic.w	r3, r3, #12
 800220c:	4313      	orrs	r3, r2
 800220e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002210:	6802      	ldr	r2, [r0, #0]
 8002212:	6953      	ldr	r3, [r2, #20]
 8002214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002218:	6981      	ldr	r1, [r0, #24]
 800221a:	430b      	orrs	r3, r1
 800221c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800221e:	6802      	ldr	r2, [r0, #0]
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <UART_SetConfig+0x8c>)
 8002222:	429a      	cmp	r2, r3
 8002224:	d020      	beq.n	8002268 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002226:	f7ff f9fd 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 800222a:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800222c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002230:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002234:	6863      	ldr	r3, [r4, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fbb2 f2f3 	udiv	r2, r2, r3
 800223c:	480d      	ldr	r0, [pc, #52]	@ (8002274 <UART_SetConfig+0x90>)
 800223e:	fba0 3102 	umull	r3, r1, r0, r2
 8002242:	0949      	lsrs	r1, r1, #5
 8002244:	2364      	movs	r3, #100	@ 0x64
 8002246:	fb03 2311 	mls	r3, r3, r1, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	3332      	adds	r3, #50	@ 0x32
 800224e:	fba0 0303 	umull	r0, r3, r0, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002258:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	6821      	ldr	r1, [r4, #0]
 8002262:	4413      	add	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8002266:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002268:	f7ff f9ec 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 800226c:	4602      	mov	r2, r0
 800226e:	e7dd      	b.n	800222c <UART_SetConfig+0x48>
 8002270:	40013800 	.word	0x40013800
 8002274:	51eb851f 	.word	0x51eb851f

08002278 <HAL_UART_Init>:
  if (huart == NULL)
 8002278:	b360      	cbz	r0, 80022d4 <HAL_UART_Init+0x5c>
{
 800227a:	b510      	push	{r4, lr}
 800227c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800227e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002282:	b313      	cbz	r3, 80022ca <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002284:	2324      	movs	r3, #36	@ 0x24
 8002286:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800228a:	6822      	ldr	r2, [r4, #0]
 800228c:	68d3      	ldr	r3, [r2, #12]
 800228e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002292:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff ffa5 	bl	80021e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229a:	6822      	ldr	r2, [r4, #0]
 800229c:	6913      	ldr	r3, [r2, #16]
 800229e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80022a2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a4:	6822      	ldr	r2, [r4, #0]
 80022a6:	6953      	ldr	r3, [r2, #20]
 80022a8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80022ac:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	68d3      	ldr	r3, [r2, #12]
 80022b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022b6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b8:	2000      	movs	r0, #0
 80022ba:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022bc:	2320      	movs	r3, #32
 80022be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022c2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022c6:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80022c8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80022ca:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80022ce:	f7fe fb2d 	bl	800092c <HAL_UART_MspInit>
 80022d2:	e7d7      	b.n	8002284 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
}
 80022d6:	4770      	bx	lr

080022d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d8:	f7fe f93a 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022dc:	480b      	ldr	r0, [pc, #44]	@ (800230c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022de:	490c      	ldr	r1, [pc, #48]	@ (8002310 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a09      	ldr	r2, [pc, #36]	@ (8002318 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022f4:	4c09      	ldr	r4, [pc, #36]	@ (800231c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002302:	f000 f817 	bl	8002334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002306:	f7fe f84d 	bl	80003a4 <main>
  bx lr
 800230a:	4770      	bx	lr
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002314:	080023c8 	.word	0x080023c8
  ldr r2, =_sbss
 8002318:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800231c:	20000224 	.word	0x20000224

08002320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_2_IRQHandler>

08002322 <memset>:
 8002322:	4603      	mov	r3, r0
 8002324:	4402      	add	r2, r0
 8002326:	4293      	cmp	r3, r2
 8002328:	d100      	bne.n	800232c <memset+0xa>
 800232a:	4770      	bx	lr
 800232c:	f803 1b01 	strb.w	r1, [r3], #1
 8002330:	e7f9      	b.n	8002326 <memset+0x4>
	...

08002334 <__libc_init_array>:
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	2600      	movs	r6, #0
 8002338:	4d0c      	ldr	r5, [pc, #48]	@ (800236c <__libc_init_array+0x38>)
 800233a:	4c0d      	ldr	r4, [pc, #52]	@ (8002370 <__libc_init_array+0x3c>)
 800233c:	1b64      	subs	r4, r4, r5
 800233e:	10a4      	asrs	r4, r4, #2
 8002340:	42a6      	cmp	r6, r4
 8002342:	d109      	bne.n	8002358 <__libc_init_array+0x24>
 8002344:	f000 f81a 	bl	800237c <_init>
 8002348:	2600      	movs	r6, #0
 800234a:	4d0a      	ldr	r5, [pc, #40]	@ (8002374 <__libc_init_array+0x40>)
 800234c:	4c0a      	ldr	r4, [pc, #40]	@ (8002378 <__libc_init_array+0x44>)
 800234e:	1b64      	subs	r4, r4, r5
 8002350:	10a4      	asrs	r4, r4, #2
 8002352:	42a6      	cmp	r6, r4
 8002354:	d105      	bne.n	8002362 <__libc_init_array+0x2e>
 8002356:	bd70      	pop	{r4, r5, r6, pc}
 8002358:	f855 3b04 	ldr.w	r3, [r5], #4
 800235c:	4798      	blx	r3
 800235e:	3601      	adds	r6, #1
 8002360:	e7ee      	b.n	8002340 <__libc_init_array+0xc>
 8002362:	f855 3b04 	ldr.w	r3, [r5], #4
 8002366:	4798      	blx	r3
 8002368:	3601      	adds	r6, #1
 800236a:	e7f2      	b.n	8002352 <__libc_init_array+0x1e>
 800236c:	080023c0 	.word	0x080023c0
 8002370:	080023c0 	.word	0x080023c0
 8002374:	080023c0 	.word	0x080023c0
 8002378:	080023c4 	.word	0x080023c4

0800237c <_init>:
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237e:	bf00      	nop
 8002380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002382:	bc08      	pop	{r3}
 8002384:	469e      	mov	lr, r3
 8002386:	4770      	bx	lr

08002388 <_fini>:
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	bf00      	nop
 800238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238e:	bc08      	pop	{r3}
 8002390:	469e      	mov	lr, r3
 8002392:	4770      	bx	lr
