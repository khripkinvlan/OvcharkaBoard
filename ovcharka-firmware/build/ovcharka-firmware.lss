
build/ovcharka-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a00  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b0c  08004b0c  00005b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b4c  08004b4c  00005b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b50  08004b50  00005b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f8  20000000  08004b54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000710  200000f8  08004c4c  000060f8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000808  08004c4c  00006808  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000060f8  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  00006121  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d0c4  00000000  00000000  0000615a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046f6  00000000  00000000  0002321e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000c0d5  00000000  00000000  00027914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001390  00000000  00000000  000339f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e6c  00000000  00000000  00034d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015d6c  00000000  00000000  00035bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00005490  00000000  00000000  0004b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000032ac  00000000  00000000  00050de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000016d  00000000  00000000  00054094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__aeabi_frsub>:
 800010c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000110:	e002      	b.n	8000118 <__addsf3>
 8000112:	bf00      	nop

08000114 <__aeabi_fsub>:
 8000114:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000118 <__addsf3>:
 8000118:	0042      	lsls	r2, r0, #1
 800011a:	bf1f      	itttt	ne
 800011c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000120:	ea92 0f03 	teqne	r2, r3
 8000124:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000128:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800012c:	d06a      	beq.n	8000204 <__addsf3+0xec>
 800012e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000132:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000136:	bfc1      	itttt	gt
 8000138:	18d2      	addgt	r2, r2, r3
 800013a:	4041      	eorgt	r1, r0
 800013c:	4048      	eorgt	r0, r1
 800013e:	4041      	eorgt	r1, r0
 8000140:	bfb8      	it	lt
 8000142:	425b      	neglt	r3, r3
 8000144:	2b19      	cmp	r3, #25
 8000146:	bf88      	it	hi
 8000148:	4770      	bxhi	lr
 800014a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800014e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000152:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000156:	bf18      	it	ne
 8000158:	4240      	negne	r0, r0
 800015a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800015e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000162:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000166:	bf18      	it	ne
 8000168:	4249      	negne	r1, r1
 800016a:	ea92 0f03 	teq	r2, r3
 800016e:	d03f      	beq.n	80001f0 <__addsf3+0xd8>
 8000170:	f1a2 0201 	sub.w	r2, r2, #1
 8000174:	fa41 fc03 	asr.w	ip, r1, r3
 8000178:	eb10 000c 	adds.w	r0, r0, ip
 800017c:	f1c3 0320 	rsb	r3, r3, #32
 8000180:	fa01 f103 	lsl.w	r1, r1, r3
 8000184:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000188:	d502      	bpl.n	8000190 <__addsf3+0x78>
 800018a:	4249      	negs	r1, r1
 800018c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000190:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000194:	d313      	bcc.n	80001be <__addsf3+0xa6>
 8000196:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800019a:	d306      	bcc.n	80001aa <__addsf3+0x92>
 800019c:	0840      	lsrs	r0, r0, #1
 800019e:	ea4f 0131 	mov.w	r1, r1, rrx
 80001a2:	f102 0201 	add.w	r2, r2, #1
 80001a6:	2afe      	cmp	r2, #254	@ 0xfe
 80001a8:	d251      	bcs.n	800024e <__addsf3+0x136>
 80001aa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001b2:	bf08      	it	eq
 80001b4:	f020 0001 	biceq.w	r0, r0, #1
 80001b8:	ea40 0003 	orr.w	r0, r0, r3
 80001bc:	4770      	bx	lr
 80001be:	0049      	lsls	r1, r1, #1
 80001c0:	eb40 0000 	adc.w	r0, r0, r0
 80001c4:	3a01      	subs	r2, #1
 80001c6:	bf28      	it	cs
 80001c8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80001cc:	d2ed      	bcs.n	80001aa <__addsf3+0x92>
 80001ce:	fab0 fc80 	clz	ip, r0
 80001d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80001d6:	ebb2 020c 	subs.w	r2, r2, ip
 80001da:	fa00 f00c 	lsl.w	r0, r0, ip
 80001de:	bfaa      	itet	ge
 80001e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80001e4:	4252      	neglt	r2, r2
 80001e6:	4318      	orrge	r0, r3
 80001e8:	bfbc      	itt	lt
 80001ea:	40d0      	lsrlt	r0, r2
 80001ec:	4318      	orrlt	r0, r3
 80001ee:	4770      	bx	lr
 80001f0:	f092 0f00 	teq	r2, #0
 80001f4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80001f8:	bf06      	itte	eq
 80001fa:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80001fe:	3201      	addeq	r2, #1
 8000200:	3b01      	subne	r3, #1
 8000202:	e7b5      	b.n	8000170 <__addsf3+0x58>
 8000204:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000208:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800020c:	bf18      	it	ne
 800020e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000212:	d021      	beq.n	8000258 <__addsf3+0x140>
 8000214:	ea92 0f03 	teq	r2, r3
 8000218:	d004      	beq.n	8000224 <__addsf3+0x10c>
 800021a:	f092 0f00 	teq	r2, #0
 800021e:	bf08      	it	eq
 8000220:	4608      	moveq	r0, r1
 8000222:	4770      	bx	lr
 8000224:	ea90 0f01 	teq	r0, r1
 8000228:	bf1c      	itt	ne
 800022a:	2000      	movne	r0, #0
 800022c:	4770      	bxne	lr
 800022e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000232:	d104      	bne.n	800023e <__addsf3+0x126>
 8000234:	0040      	lsls	r0, r0, #1
 8000236:	bf28      	it	cs
 8000238:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800023c:	4770      	bx	lr
 800023e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000242:	bf3c      	itt	cc
 8000244:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000248:	4770      	bxcc	lr
 800024a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800024e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000252:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000256:	4770      	bx	lr
 8000258:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800025c:	bf16      	itet	ne
 800025e:	4608      	movne	r0, r1
 8000260:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000264:	4601      	movne	r1, r0
 8000266:	0242      	lsls	r2, r0, #9
 8000268:	bf06      	itte	eq
 800026a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800026e:	ea90 0f01 	teqeq	r0, r1
 8000272:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000276:	4770      	bx	lr

08000278 <__aeabi_ui2f>:
 8000278:	f04f 0300 	mov.w	r3, #0
 800027c:	e004      	b.n	8000288 <__aeabi_i2f+0x8>
 800027e:	bf00      	nop

08000280 <__aeabi_i2f>:
 8000280:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000284:	bf48      	it	mi
 8000286:	4240      	negmi	r0, r0
 8000288:	ea5f 0c00 	movs.w	ip, r0
 800028c:	bf08      	it	eq
 800028e:	4770      	bxeq	lr
 8000290:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000294:	4601      	mov	r1, r0
 8000296:	f04f 0000 	mov.w	r0, #0
 800029a:	e01c      	b.n	80002d6 <__aeabi_l2f+0x2a>

0800029c <__aeabi_ul2f>:
 800029c:	ea50 0201 	orrs.w	r2, r0, r1
 80002a0:	bf08      	it	eq
 80002a2:	4770      	bxeq	lr
 80002a4:	f04f 0300 	mov.w	r3, #0
 80002a8:	e00a      	b.n	80002c0 <__aeabi_l2f+0x14>
 80002aa:	bf00      	nop

080002ac <__aeabi_l2f>:
 80002ac:	ea50 0201 	orrs.w	r2, r0, r1
 80002b0:	bf08      	it	eq
 80002b2:	4770      	bxeq	lr
 80002b4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002b8:	d502      	bpl.n	80002c0 <__aeabi_l2f+0x14>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	ea5f 0c01 	movs.w	ip, r1
 80002c4:	bf02      	ittt	eq
 80002c6:	4684      	moveq	ip, r0
 80002c8:	4601      	moveq	r1, r0
 80002ca:	2000      	moveq	r0, #0
 80002cc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80002d0:	bf08      	it	eq
 80002d2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80002d6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80002da:	fabc f28c 	clz	r2, ip
 80002de:	3a08      	subs	r2, #8
 80002e0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80002e4:	db10      	blt.n	8000308 <__aeabi_l2f+0x5c>
 80002e6:	fa01 fc02 	lsl.w	ip, r1, r2
 80002ea:	4463      	add	r3, ip
 80002ec:	fa00 fc02 	lsl.w	ip, r0, r2
 80002f0:	f1c2 0220 	rsb	r2, r2, #32
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f8:	fa20 f202 	lsr.w	r2, r0, r2
 80002fc:	eb43 0002 	adc.w	r0, r3, r2
 8000300:	bf08      	it	eq
 8000302:	f020 0001 	biceq.w	r0, r0, #1
 8000306:	4770      	bx	lr
 8000308:	f102 0220 	add.w	r2, r2, #32
 800030c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000310:	f1c2 0220 	rsb	r2, r2, #32
 8000314:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000318:	fa21 f202 	lsr.w	r2, r1, r2
 800031c:	eb43 0002 	adc.w	r0, r3, r2
 8000320:	bf08      	it	eq
 8000322:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000326:	4770      	bx	lr

08000328 <__aeabi_fmul>:
 8000328:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800032c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000330:	bf1e      	ittt	ne
 8000332:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000336:	ea92 0f0c 	teqne	r2, ip
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d06f      	beq.n	8000420 <__aeabi_fmul+0xf8>
 8000340:	441a      	add	r2, r3
 8000342:	ea80 0c01 	eor.w	ip, r0, r1
 8000346:	0240      	lsls	r0, r0, #9
 8000348:	bf18      	it	ne
 800034a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800034e:	d01e      	beq.n	800038e <__aeabi_fmul+0x66>
 8000350:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000354:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000358:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800035c:	fba0 3101 	umull	r3, r1, r0, r1
 8000360:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000364:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000368:	bf3e      	ittt	cc
 800036a:	0049      	lslcc	r1, r1, #1
 800036c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000370:	005b      	lslcc	r3, r3, #1
 8000372:	ea40 0001 	orr.w	r0, r0, r1
 8000376:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800037a:	2afd      	cmp	r2, #253	@ 0xfd
 800037c:	d81d      	bhi.n	80003ba <__aeabi_fmul+0x92>
 800037e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000382:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000386:	bf08      	it	eq
 8000388:	f020 0001 	biceq.w	r0, r0, #1
 800038c:	4770      	bx	lr
 800038e:	f090 0f00 	teq	r0, #0
 8000392:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000396:	bf08      	it	eq
 8000398:	0249      	lsleq	r1, r1, #9
 800039a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800039e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003a2:	3a7f      	subs	r2, #127	@ 0x7f
 80003a4:	bfc2      	ittt	gt
 80003a6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003aa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ae:	4770      	bxgt	lr
 80003b0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003b4:	f04f 0300 	mov.w	r3, #0
 80003b8:	3a01      	subs	r2, #1
 80003ba:	dc5d      	bgt.n	8000478 <__aeabi_fmul+0x150>
 80003bc:	f112 0f19 	cmn.w	r2, #25
 80003c0:	bfdc      	itt	le
 80003c2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80003c6:	4770      	bxle	lr
 80003c8:	f1c2 0200 	rsb	r2, r2, #0
 80003cc:	0041      	lsls	r1, r0, #1
 80003ce:	fa21 f102 	lsr.w	r1, r1, r2
 80003d2:	f1c2 0220 	rsb	r2, r2, #32
 80003d6:	fa00 fc02 	lsl.w	ip, r0, r2
 80003da:	ea5f 0031 	movs.w	r0, r1, rrx
 80003de:	f140 0000 	adc.w	r0, r0, #0
 80003e2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80003e6:	bf08      	it	eq
 80003e8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ec:	4770      	bx	lr
 80003ee:	f092 0f00 	teq	r2, #0
 80003f2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80003f6:	bf02      	ittt	eq
 80003f8:	0040      	lsleq	r0, r0, #1
 80003fa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80003fe:	3a01      	subeq	r2, #1
 8000400:	d0f9      	beq.n	80003f6 <__aeabi_fmul+0xce>
 8000402:	ea40 000c 	orr.w	r0, r0, ip
 8000406:	f093 0f00 	teq	r3, #0
 800040a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800040e:	bf02      	ittt	eq
 8000410:	0049      	lsleq	r1, r1, #1
 8000412:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000416:	3b01      	subeq	r3, #1
 8000418:	d0f9      	beq.n	800040e <__aeabi_fmul+0xe6>
 800041a:	ea41 010c 	orr.w	r1, r1, ip
 800041e:	e78f      	b.n	8000340 <__aeabi_fmul+0x18>
 8000420:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000424:	ea92 0f0c 	teq	r2, ip
 8000428:	bf18      	it	ne
 800042a:	ea93 0f0c 	teqne	r3, ip
 800042e:	d00a      	beq.n	8000446 <__aeabi_fmul+0x11e>
 8000430:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000434:	bf18      	it	ne
 8000436:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800043a:	d1d8      	bne.n	80003ee <__aeabi_fmul+0xc6>
 800043c:	ea80 0001 	eor.w	r0, r0, r1
 8000440:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000444:	4770      	bx	lr
 8000446:	f090 0f00 	teq	r0, #0
 800044a:	bf17      	itett	ne
 800044c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000450:	4608      	moveq	r0, r1
 8000452:	f091 0f00 	teqne	r1, #0
 8000456:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800045a:	d014      	beq.n	8000486 <__aeabi_fmul+0x15e>
 800045c:	ea92 0f0c 	teq	r2, ip
 8000460:	d101      	bne.n	8000466 <__aeabi_fmul+0x13e>
 8000462:	0242      	lsls	r2, r0, #9
 8000464:	d10f      	bne.n	8000486 <__aeabi_fmul+0x15e>
 8000466:	ea93 0f0c 	teq	r3, ip
 800046a:	d103      	bne.n	8000474 <__aeabi_fmul+0x14c>
 800046c:	024b      	lsls	r3, r1, #9
 800046e:	bf18      	it	ne
 8000470:	4608      	movne	r0, r1
 8000472:	d108      	bne.n	8000486 <__aeabi_fmul+0x15e>
 8000474:	ea80 0001 	eor.w	r0, r0, r1
 8000478:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800047c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000480:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000484:	4770      	bx	lr
 8000486:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800048a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800048e:	4770      	bx	lr

08000490 <__aeabi_fdiv>:
 8000490:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000494:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000498:	bf1e      	ittt	ne
 800049a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800049e:	ea92 0f0c 	teqne	r2, ip
 80004a2:	ea93 0f0c 	teqne	r3, ip
 80004a6:	d069      	beq.n	800057c <__aeabi_fdiv+0xec>
 80004a8:	eba2 0203 	sub.w	r2, r2, r3
 80004ac:	ea80 0c01 	eor.w	ip, r0, r1
 80004b0:	0249      	lsls	r1, r1, #9
 80004b2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004b6:	d037      	beq.n	8000528 <__aeabi_fdiv+0x98>
 80004b8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004bc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80004c0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80004c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80004c8:	428b      	cmp	r3, r1
 80004ca:	bf38      	it	cc
 80004cc:	005b      	lslcc	r3, r3, #1
 80004ce:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80004d2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80004d6:	428b      	cmp	r3, r1
 80004d8:	bf24      	itt	cs
 80004da:	1a5b      	subcs	r3, r3, r1
 80004dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80004e0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80004e4:	bf24      	itt	cs
 80004e6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80004ea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80004ee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80004f2:	bf24      	itt	cs
 80004f4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80004f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80004fc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000500:	bf24      	itt	cs
 8000502:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000506:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	bf18      	it	ne
 800050e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000512:	d1e0      	bne.n	80004d6 <__aeabi_fdiv+0x46>
 8000514:	2afd      	cmp	r2, #253	@ 0xfd
 8000516:	f63f af50 	bhi.w	80003ba <__aeabi_fmul+0x92>
 800051a:	428b      	cmp	r3, r1
 800051c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000520:	bf08      	it	eq
 8000522:	f020 0001 	biceq.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800052c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000530:	327f      	adds	r2, #127	@ 0x7f
 8000532:	bfc2      	ittt	gt
 8000534:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000538:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800053c:	4770      	bxgt	lr
 800053e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000542:	f04f 0300 	mov.w	r3, #0
 8000546:	3a01      	subs	r2, #1
 8000548:	e737      	b.n	80003ba <__aeabi_fmul+0x92>
 800054a:	f092 0f00 	teq	r2, #0
 800054e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000552:	bf02      	ittt	eq
 8000554:	0040      	lsleq	r0, r0, #1
 8000556:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800055a:	3a01      	subeq	r2, #1
 800055c:	d0f9      	beq.n	8000552 <__aeabi_fdiv+0xc2>
 800055e:	ea40 000c 	orr.w	r0, r0, ip
 8000562:	f093 0f00 	teq	r3, #0
 8000566:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800056a:	bf02      	ittt	eq
 800056c:	0049      	lsleq	r1, r1, #1
 800056e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000572:	3b01      	subeq	r3, #1
 8000574:	d0f9      	beq.n	800056a <__aeabi_fdiv+0xda>
 8000576:	ea41 010c 	orr.w	r1, r1, ip
 800057a:	e795      	b.n	80004a8 <__aeabi_fdiv+0x18>
 800057c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000580:	ea92 0f0c 	teq	r2, ip
 8000584:	d108      	bne.n	8000598 <__aeabi_fdiv+0x108>
 8000586:	0242      	lsls	r2, r0, #9
 8000588:	f47f af7d 	bne.w	8000486 <__aeabi_fmul+0x15e>
 800058c:	ea93 0f0c 	teq	r3, ip
 8000590:	f47f af70 	bne.w	8000474 <__aeabi_fmul+0x14c>
 8000594:	4608      	mov	r0, r1
 8000596:	e776      	b.n	8000486 <__aeabi_fmul+0x15e>
 8000598:	ea93 0f0c 	teq	r3, ip
 800059c:	d104      	bne.n	80005a8 <__aeabi_fdiv+0x118>
 800059e:	024b      	lsls	r3, r1, #9
 80005a0:	f43f af4c 	beq.w	800043c <__aeabi_fmul+0x114>
 80005a4:	4608      	mov	r0, r1
 80005a6:	e76e      	b.n	8000486 <__aeabi_fmul+0x15e>
 80005a8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ac:	bf18      	it	ne
 80005ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005b2:	d1ca      	bne.n	800054a <__aeabi_fdiv+0xba>
 80005b4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005b8:	f47f af5c 	bne.w	8000474 <__aeabi_fmul+0x14c>
 80005bc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80005c0:	f47f af3c 	bne.w	800043c <__aeabi_fmul+0x114>
 80005c4:	e75f      	b.n	8000486 <__aeabi_fmul+0x15e>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2iz>:
 80005c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005d0:	d30f      	bcc.n	80005f2 <__aeabi_f2iz+0x2a>
 80005d2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005da:	d90d      	bls.n	80005f8 <__aeabi_f2iz+0x30>
 80005dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005e4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005e8:	fa23 f002 	lsr.w	r0, r3, r2
 80005ec:	bf18      	it	ne
 80005ee:	4240      	negne	r0, r0
 80005f0:	4770      	bx	lr
 80005f2:	f04f 0000 	mov.w	r0, #0
 80005f6:	4770      	bx	lr
 80005f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80005fc:	d101      	bne.n	8000602 <__aeabi_f2iz+0x3a>
 80005fe:	0242      	lsls	r2, r0, #9
 8000600:	d105      	bne.n	800060e <__aeabi_f2iz+0x46>
 8000602:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000606:	bf08      	it	eq
 8000608:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800060c:	4770      	bx	lr
 800060e:	f04f 0000 	mov.w	r0, #0
 8000612:	4770      	bx	lr

08000614 <__do_global_dtors_aux>:
 8000614:	b510      	push	{r4, lr}
 8000616:	4c05      	ldr	r4, [pc, #20]	@ (800062c <__do_global_dtors_aux+0x18>)
 8000618:	7823      	ldrb	r3, [r4, #0]
 800061a:	b933      	cbnz	r3, 800062a <__do_global_dtors_aux+0x16>
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <__do_global_dtors_aux+0x1c>)
 800061e:	b113      	cbz	r3, 8000626 <__do_global_dtors_aux+0x12>
 8000620:	4804      	ldr	r0, [pc, #16]	@ (8000634 <__do_global_dtors_aux+0x20>)
 8000622:	f3af 8000 	nop.w
 8000626:	2301      	movs	r3, #1
 8000628:	7023      	strb	r3, [r4, #0]
 800062a:	bd10      	pop	{r4, pc}
 800062c:	200000f8 	.word	0x200000f8
 8000630:	00000000 	.word	0x00000000
 8000634:	08004af4 	.word	0x08004af4

08000638 <frame_dummy>:
 8000638:	b508      	push	{r3, lr}
 800063a:	4b03      	ldr	r3, [pc, #12]	@ (8000648 <frame_dummy+0x10>)
 800063c:	b11b      	cbz	r3, 8000646 <frame_dummy+0xe>
 800063e:	4903      	ldr	r1, [pc, #12]	@ (800064c <frame_dummy+0x14>)
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <frame_dummy+0x18>)
 8000642:	f3af 8000 	nop.w
 8000646:	bd08      	pop	{r3, pc}
 8000648:	00000000 	.word	0x00000000
 800064c:	200000fc 	.word	0x200000fc
 8000650:	08004af4 	.word	0x08004af4

08000654 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000654:	b500      	push	{lr}
 8000656:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000658:	2300      	movs	r3, #0
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000660:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <MX_ADC1_Init+0x6c>)
 8000662:	4a18      	ldr	r2, [pc, #96]	@ (80006c4 <MX_ADC1_Init+0x70>)
 8000664:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000666:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800066a:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066c:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000670:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000674:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	f001 fe4c 	bl	8002318 <HAL_ADC_Init>
 8000680:	b9a8      	cbnz	r0, 80006ae <MX_ADC1_Init+0x5a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000682:	2303      	movs	r3, #3
 8000684:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2301      	movs	r3, #1
 8000688:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800068a:	2307      	movs	r3, #7
 800068c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	a901      	add	r1, sp, #4
 8000690:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <MX_ADC1_Init+0x6c>)
 8000692:	f001 fc99 	bl	8001fc8 <HAL_ADC_ConfigChannel>
 8000696:	b968      	cbnz	r0, 80006b4 <MX_ADC1_Init+0x60>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000698:	2302      	movs	r3, #2
 800069a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800069c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	a901      	add	r1, sp, #4
 80006a0:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <MX_ADC1_Init+0x6c>)
 80006a2:	f001 fc91 	bl	8001fc8 <HAL_ADC_ConfigChannel>
 80006a6:	b940      	cbnz	r0, 80006ba <MX_ADC1_Init+0x66>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a8:	b005      	add	sp, #20
 80006aa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006ae:	f000 fbc3 	bl	8000e38 <Error_Handler>
 80006b2:	e7e6      	b.n	8000682 <MX_ADC1_Init+0x2e>
    Error_Handler();
 80006b4:	f000 fbc0 	bl	8000e38 <Error_Handler>
 80006b8:	e7ee      	b.n	8000698 <MX_ADC1_Init+0x44>
    Error_Handler();
 80006ba:	f000 fbbd 	bl	8000e38 <Error_Handler>
}
 80006be:	e7f3      	b.n	80006a8 <MX_ADC1_Init+0x54>
 80006c0:	20000158 	.word	0x20000158
 80006c4:	40012400 	.word	0x40012400

080006c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c8:	b510      	push	{r4, lr}
 80006ca:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	2300      	movs	r3, #0
 80006ce:	9302      	str	r3, [sp, #8]
 80006d0:	9303      	str	r3, [sp, #12]
 80006d2:	9304      	str	r3, [sp, #16]
 80006d4:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 80006d6:	6802      	ldr	r2, [r0, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <HAL_ADC_MspInit+0x90>)
 80006da:	429a      	cmp	r2, r3
 80006dc:	d001      	beq.n	80006e2 <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006de:	b006      	add	sp, #24
 80006e0:	bd10      	pop	{r4, pc}
 80006e2:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006e4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80006e8:	699a      	ldr	r2, [r3, #24]
 80006ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80006ee:	619a      	str	r2, [r3, #24]
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	699a      	ldr	r2, [r3, #24]
 80006fc:	f042 0204 	orr.w	r2, r2, #4
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CS2_Pin|CS1_Pin;
 800070c:	230c      	movs	r3, #12
 800070e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000710:	2303      	movs	r3, #3
 8000712:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	a902      	add	r1, sp, #8
 8000716:	4811      	ldr	r0, [pc, #68]	@ (800075c <HAL_ADC_MspInit+0x94>)
 8000718:	f002 f910 	bl	800293c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800071c:	4810      	ldr	r0, [pc, #64]	@ (8000760 <HAL_ADC_MspInit+0x98>)
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <HAL_ADC_MspInit+0x9c>)
 8000720:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000722:	2300      	movs	r3, #0
 8000724:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000726:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000728:	2380      	movs	r3, #128	@ 0x80
 800072a:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800072c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000730:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000736:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000738:	2320      	movs	r3, #32
 800073a:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000742:	f001 ff7b 	bl	800263c <HAL_DMA_Init>
 8000746:	b918      	cbnz	r0, 8000750 <HAL_ADC_MspInit+0x88>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HAL_ADC_MspInit+0x98>)
 800074a:	6223      	str	r3, [r4, #32]
 800074c:	625c      	str	r4, [r3, #36]	@ 0x24
}
 800074e:	e7c6      	b.n	80006de <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8000750:	f000 fb72 	bl	8000e38 <Error_Handler>
 8000754:	e7f8      	b.n	8000748 <HAL_ADC_MspInit+0x80>
 8000756:	bf00      	nop
 8000758:	40012400 	.word	0x40012400
 800075c:	40010800 	.word	0x40010800
 8000760:	20000114 	.word	0x20000114
 8000764:	40020008 	.word	0x40020008

08000768 <adc_cur_init>:
int16_t CS_ADC_M2_Offset = 2055;
float CS_ADC_M1_Gain = 0.00107;
float CS_ADC_M2_Gain = 0.00107;

void adc_cur_init()
{
 8000768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Starting DMA for capturing current measures from ADC
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc, 2);
 800076a:	4c0f      	ldr	r4, [pc, #60]	@ (80007a8 <adc_cur_init+0x40>)
 800076c:	2202      	movs	r2, #2
 800076e:	4621      	mov	r1, r4
 8000770:	480e      	ldr	r0, [pc, #56]	@ (80007ac <adc_cur_init+0x44>)
 8000772:	f001 fd0d 	bl	8002190 <HAL_ADC_Start_DMA>

    // Initia;lization of filters
    filter1 = initEMA_iq18(0.005, _IQ18(CS_ADC_M1_Offset));
 8000776:	4e0e      	ldr	r6, [pc, #56]	@ (80007b0 <adc_cur_init+0x48>)
 8000778:	f9b6 1000 	ldrsh.w	r1, [r6]
 800077c:	4f0d      	ldr	r7, [pc, #52]	@ (80007b4 <adc_cur_init+0x4c>)
 800077e:	0489      	lsls	r1, r1, #18
 8000780:	4638      	mov	r0, r7
 8000782:	f000 f974 	bl	8000a6e <initEMA_iq18>
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <adc_cur_init+0x50>)
 8000788:	6018      	str	r0, [r3, #0]
    filter2 = initEMA_iq18(0.005, _IQ18(CS_ADC_M2_Offset));
 800078a:	4d0c      	ldr	r5, [pc, #48]	@ (80007bc <adc_cur_init+0x54>)
 800078c:	f9b5 1000 	ldrsh.w	r1, [r5]
 8000790:	0489      	lsls	r1, r1, #18
 8000792:	4638      	mov	r0, r7
 8000794:	f000 f96b 	bl	8000a6e <initEMA_iq18>
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <adc_cur_init+0x58>)
 800079a:	6018      	str	r0, [r3, #0]
    adc[0] = CS_ADC_M1_Offset;
 800079c:	8833      	ldrh	r3, [r6, #0]
 800079e:	8023      	strh	r3, [r4, #0]
    adc[1] = CS_ADC_M2_Offset;
 80007a0:	882b      	ldrh	r3, [r5, #0]
 80007a2:	8063      	strh	r3, [r4, #2]
}
 80007a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000198 	.word	0x20000198
 80007ac:	20000158 	.word	0x20000158
 80007b0:	2000000a 	.word	0x2000000a
 80007b4:	3ba3d70a 	.word	0x3ba3d70a
 80007b8:	2000018c 	.word	0x2000018c
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000188 	.word	0x20000188

080007c4 <adc_callback_handler>:

void adc_callback_handler()
{
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _iq18 adc0_filtered = updateEMA_iq18(filter1, _IQ18(adc[0]));
 80007c6:	4f19      	ldr	r7, [pc, #100]	@ (800082c <adc_callback_handler+0x68>)
 80007c8:	8839      	ldrh	r1, [r7, #0]
 80007ca:	0489      	lsls	r1, r1, #18
 80007cc:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <adc_callback_handler+0x6c>)
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	f000 f960 	bl	8000a94 <updateEMA_iq18>
 80007d4:	4605      	mov	r5, r0
    current[0] = _IQ18mpy((adc0_filtered - _IQ18(CS_ADC_M1_Offset)), _IQ18(CS_ADC_M1_Gain));
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <adc_callback_handler+0x70>)
 80007d8:	f9b3 4000 	ldrsh.w	r4, [r3]
 80007dc:	04a4      	lsls	r4, r4, #18
 80007de:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <adc_callback_handler+0x74>)
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	f7ff fd9f 	bl	8000328 <__aeabi_fmul>
 80007ea:	f7ff feed 	bl	80005c8 <__aeabi_f2iz>
 80007ee:	4601      	mov	r1, r0
 80007f0:	1b28      	subs	r0, r5, r4
 80007f2:	f004 f87d 	bl	80048f0 <_IQ18mpy>
 80007f6:	4e11      	ldr	r6, [pc, #68]	@ (800083c <adc_callback_handler+0x78>)
 80007f8:	6030      	str	r0, [r6, #0]

    _iq18 adc1_filtered = updateEMA_iq18(filter2, _IQ18(adc[1]));
 80007fa:	8879      	ldrh	r1, [r7, #2]
 80007fc:	0489      	lsls	r1, r1, #18
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <adc_callback_handler+0x7c>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	f000 f947 	bl	8000a94 <updateEMA_iq18>
 8000806:	4605      	mov	r5, r0
    current[1] = _IQ18mpy((adc1_filtered - _IQ18(CS_ADC_M2_Offset)), _IQ18(CS_ADC_M2_Gain));
 8000808:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <adc_callback_handler+0x80>)
 800080a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800080e:	04a4      	lsls	r4, r4, #18
 8000810:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <adc_callback_handler+0x84>)
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	f7ff fd86 	bl	8000328 <__aeabi_fmul>
 800081c:	f7ff fed4 	bl	80005c8 <__aeabi_f2iz>
 8000820:	4601      	mov	r1, r0
 8000822:	1b28      	subs	r0, r5, r4
 8000824:	f004 f864 	bl	80048f0 <_IQ18mpy>
 8000828:	6070      	str	r0, [r6, #4]
}
 800082a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082c:	20000198 	.word	0x20000198
 8000830:	2000018c 	.word	0x2000018c
 8000834:	2000000a 	.word	0x2000000a
 8000838:	20000004 	.word	0x20000004
 800083c:	20000190 	.word	0x20000190
 8000840:	20000188 	.word	0x20000188
 8000844:	20000008 	.word	0x20000008
 8000848:	20000000 	.word	0x20000000

0800084c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800084c:	b508      	push	{r3, lr}
    adc_callback_handler();
 800084e:	f7ff ffb9 	bl	80007c4 <adc_callback_handler>
 8000852:	bd08      	pop	{r3, pc}

08000854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000854:	b500      	push	{lr}
 8000856:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_DMA_Init+0x70>)
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	f042 0201 	orr.w	r2, r2, #1
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	4611      	mov	r1, r2
 8000870:	200b      	movs	r0, #11
 8000872:	f001 fe9b 	bl	80025ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000876:	200b      	movs	r0, #11
 8000878:	f001 fea8 	bl	80025cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	4611      	mov	r1, r2
 8000880:	200c      	movs	r0, #12
 8000882:	f001 fe93 	bl	80025ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000886:	200c      	movs	r0, #12
 8000888:	f001 fea0 	bl	80025cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	4611      	mov	r1, r2
 8000890:	200d      	movs	r0, #13
 8000892:	f001 fe8b 	bl	80025ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000896:	200d      	movs	r0, #13
 8000898:	f001 fe98 	bl	80025cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	4611      	mov	r1, r2
 80008a0:	200e      	movs	r0, #14
 80008a2:	f001 fe83 	bl	80025ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80008a6:	200e      	movs	r0, #14
 80008a8:	f001 fe90 	bl	80025cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	4611      	mov	r1, r2
 80008b0:	200f      	movs	r0, #15
 80008b2:	f001 fe7b 	bl	80025ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f001 fe88 	bl	80025cc <HAL_NVIC_EnableIRQ>

}
 80008bc:	b003      	add	sp, #12
 80008be:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <drv8106_read_reg_blocking>:
uint8_t drv8106_cur_read_addr;
uint8_t drv8106_read_flag;


void drv8106_read_reg_blocking(drv8106_t* drv_inst, uint8_t reg_addr)
{
 80008c8:	b510      	push	{r4, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	4604      	mov	r4, r0
    uint16_t tx = (reg_addr | DRV8106_READ_MASK) << 8;
 80008ce:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80008d2:	0209      	lsls	r1, r1, #8
 80008d4:	f8ad 100e 	strh.w	r1, [sp, #14]

    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	8901      	ldrh	r1, [r0, #8]
 80008dc:	6840      	ldr	r0, [r0, #4]
 80008de:	f002 f942 	bl	8002b66 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(drv_inst->spi_handler_ptr, (uint8_t*)&tx, (uint8_t*)&drv_inst->rxbuff, 1, HAL_MAX_DELAY);
 80008e2:	4622      	mov	r2, r4
 80008e4:	f852 0b0a 	ldr.w	r0, [r2], #10
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2301      	movs	r3, #1
 80008f0:	f10d 010e 	add.w	r1, sp, #14
 80008f4:	f002 fe3b 	bl	800356e <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	8921      	ldrh	r1, [r4, #8]
 80008fc:	6860      	ldr	r0, [r4, #4]
 80008fe:	f002 f932 	bl	8002b66 <HAL_GPIO_WritePin>
    // HAL_Delay(1); // in case it doesnt manage to flip CS
}
 8000902:	b004      	add	sp, #16
 8000904:	bd10      	pop	{r4, pc}

08000906 <drv8106_write_reg_blocking>:

void drv8106_write_reg_blocking(drv8106_t* drv_inst, uint8_t reg_addr, uint8_t data){
 8000906:	b510      	push	{r4, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	4604      	mov	r4, r0
    uint16_t tx;
    tx = (reg_addr << 8) | data;
 800090c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000910:	f8ad 200e 	strh.w	r2, [sp, #14]

    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	8901      	ldrh	r1, [r0, #8]
 8000918:	6840      	ldr	r0, [r0, #4]
 800091a:	f002 f924 	bl	8002b66 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(drv_inst->spi_handler_ptr, (uint8_t*)&tx, (uint8_t*)&drv_inst->rxbuff, 1, HAL_MAX_DELAY);
 800091e:	4622      	mov	r2, r4
 8000920:	f852 0b0a 	ldr.w	r0, [r2], #10
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2301      	movs	r3, #1
 800092c:	f10d 010e 	add.w	r1, sp, #14
 8000930:	f002 fe1d 	bl	800356e <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(drv_inst->CS_PORT, drv_inst->CS_PIN, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	8921      	ldrh	r1, [r4, #8]
 8000938:	6860      	ldr	r0, [r4, #4]
 800093a:	f002 f914 	bl	8002b66 <HAL_GPIO_WritePin>
    // HAL_Delay(1); // in case it doesnt manage to flip CS
}
 800093e:	b004      	add	sp, #16
 8000940:	bd10      	pop	{r4, pc}

08000942 <drv8106_read_all_blocking>:


void drv8106_read_all_blocking(drv8106_t* drv_inst){
 8000942:	b510      	push	{r4, lr}
 8000944:	4604      	mov	r4, r0

    drv8106_read_reg_blocking(drv_inst, DRV8106_IC_STAT_1);
 8000946:	2100      	movs	r1, #0
 8000948:	f7ff ffbe 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.IC_STAT_1 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 800094c:	7aa3      	ldrb	r3, [r4, #10]
 800094e:	73a3      	strb	r3, [r4, #14]

    drv8106_read_reg_blocking(drv_inst, DRV8106_VGS_VDS_STAT);
 8000950:	2101      	movs	r1, #1
 8000952:	4620      	mov	r0, r4
 8000954:	f7ff ffb8 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.VGS_VDS_STAT = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000958:	7aa3      	ldrb	r3, [r4, #10]
 800095a:	73e3      	strb	r3, [r4, #15]

    drv8106_read_reg_blocking(drv_inst, DRV8106_IC_STAT_2);
 800095c:	2102      	movs	r1, #2
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff ffb2 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.IC_STAT_2 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000964:	7aa3      	ldrb	r3, [r4, #10]
 8000966:	7423      	strb	r3, [r4, #16]

    drv8106_read_reg_blocking(drv_inst, DRV8106_IC_CTRL);
 8000968:	2104      	movs	r1, #4
 800096a:	4620      	mov	r0, r4
 800096c:	f7ff ffac 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.IC_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000970:	7aa3      	ldrb	r3, [r4, #10]
 8000972:	74a3      	strb	r3, [r4, #18]

    drv8106_read_reg_blocking(drv_inst, DRV8106_BRG_CTRL);
 8000974:	2105      	movs	r1, #5
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff ffa6 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.BRG_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 800097c:	7aa3      	ldrb	r3, [r4, #10]
 800097e:	74e3      	strb	r3, [r4, #19]

    drv8106_read_reg_blocking(drv_inst, DRV8106_DRV_CTRL_1);
 8000980:	2106      	movs	r1, #6
 8000982:	4620      	mov	r0, r4
 8000984:	f7ff ffa0 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.DRV_CTRL_1 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000988:	7aa3      	ldrb	r3, [r4, #10]
 800098a:	7523      	strb	r3, [r4, #20]

    drv8106_read_reg_blocking(drv_inst, DRV8106_DRV_CTRL_2);
 800098c:	2107      	movs	r1, #7
 800098e:	4620      	mov	r0, r4
 8000990:	f7ff ff9a 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.DRV_CTRL_2 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 8000994:	7aa3      	ldrb	r3, [r4, #10]
 8000996:	7563      	strb	r3, [r4, #21]

    drv8106_read_reg_blocking(drv_inst, DRV8106_DRV_CTRL_3);
 8000998:	2108      	movs	r1, #8
 800099a:	4620      	mov	r0, r4
 800099c:	f7ff ff94 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.DRV_CTRL_3 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80009a0:	7aa3      	ldrb	r3, [r4, #10]
 80009a2:	75a3      	strb	r3, [r4, #22]

    drv8106_read_reg_blocking(drv_inst, DRV8106_VDS_CTRL_1);
 80009a4:	2109      	movs	r1, #9
 80009a6:	4620      	mov	r0, r4
 80009a8:	f7ff ff8e 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.VDS_CTRL_1 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80009ac:	7aa3      	ldrb	r3, [r4, #10]
 80009ae:	75e3      	strb	r3, [r4, #23]

    drv8106_read_reg_blocking(drv_inst, DRV8106_VDS_CTRL_2);
 80009b0:	210a      	movs	r1, #10
 80009b2:	4620      	mov	r0, r4
 80009b4:	f7ff ff88 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.VDS_CTRL_2 = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80009b8:	7aa3      	ldrb	r3, [r4, #10]
 80009ba:	7623      	strb	r3, [r4, #24]

    drv8106_read_reg_blocking(drv_inst, DRV8106_OLSC_CTRL);
 80009bc:	210b      	movs	r1, #11
 80009be:	4620      	mov	r0, r4
 80009c0:	f7ff ff82 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.OLSC_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80009c4:	7aa3      	ldrb	r3, [r4, #10]
 80009c6:	7663      	strb	r3, [r4, #25]

    drv8106_read_reg_blocking(drv_inst, DRV8106_UVOV_CTRL);
 80009c8:	210c      	movs	r1, #12
 80009ca:	4620      	mov	r0, r4
 80009cc:	f7ff ff7c 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.UVOV_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80009d0:	7aa3      	ldrb	r3, [r4, #10]
 80009d2:	76a3      	strb	r3, [r4, #26]

    drv8106_read_reg_blocking(drv_inst, DRV8106_CSA_CTRL);
 80009d4:	210d      	movs	r1, #13
 80009d6:	4620      	mov	r0, r4
 80009d8:	f7ff ff76 	bl	80008c8 <drv8106_read_reg_blocking>
    drv_inst->register_map.CSA_CTRL = (uint8_t)(drv_inst->rxbuff & 0xFF);
 80009dc:	7aa3      	ldrb	r3, [r4, #10]
 80009de:	76e3      	strb	r3, [r4, #27]
}
 80009e0:	bd10      	pop	{r4, pc}

080009e2 <drv8106_reset_blocking>:

void drv8106_reset_blocking(drv8106_t* drv_inst){
 80009e2:	b510      	push	{r4, lr}
 80009e4:	4604      	mov	r4, r0
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, DRV8106_IC_CTRL_DEFAULT);
 80009e6:	2206      	movs	r2, #6
 80009e8:	2104      	movs	r1, #4
 80009ea:	f7ff ff8c 	bl	8000906 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_BRG_CTRL, DRV8106_BRG_CTRL_DEFAULT);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2105      	movs	r1, #5
 80009f2:	4620      	mov	r0, r4
 80009f4:	f7ff ff87 	bl	8000906 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_DRV_CTRL_1, DRV8106_DRV_CTRL_1_DEFAULT);
 80009f8:	22ff      	movs	r2, #255	@ 0xff
 80009fa:	2106      	movs	r1, #6
 80009fc:	4620      	mov	r0, r4
 80009fe:	f7ff ff82 	bl	8000906 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_DRV_CTRL_2, DRV8106_DRV_CTRL_2_DEFAULT);
 8000a02:	22ff      	movs	r2, #255	@ 0xff
 8000a04:	2107      	movs	r1, #7
 8000a06:	4620      	mov	r0, r4
 8000a08:	f7ff ff7d 	bl	8000906 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_DRV_CTRL_3, DRV8106_DRV_CTRL_3_DEFAULT);
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2108      	movs	r1, #8
 8000a10:	4620      	mov	r0, r4
 8000a12:	f7ff ff78 	bl	8000906 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_VDS_CTRL_1, DRV8106_VDS_CTRL_1_DEFAULT);
 8000a16:	2220      	movs	r2, #32
 8000a18:	2109      	movs	r1, #9
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f7ff ff73 	bl	8000906 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_VDS_CTRL_2, DRV8106_VDS_CTRL_2_DEFAULT);
 8000a20:	22dd      	movs	r2, #221	@ 0xdd
 8000a22:	210a      	movs	r1, #10
 8000a24:	4620      	mov	r0, r4
 8000a26:	f7ff ff6e 	bl	8000906 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_OLSC_CTRL, DRV8106_OLSC_CTRL_DEFAULT);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	210b      	movs	r1, #11
 8000a2e:	4620      	mov	r0, r4
 8000a30:	f7ff ff69 	bl	8000906 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_UVOV_CTRL, DRV8106_UVOV_CTRL_DEFAULT);
 8000a34:	2214      	movs	r2, #20
 8000a36:	210c      	movs	r1, #12
 8000a38:	4620      	mov	r0, r4
 8000a3a:	f7ff ff64 	bl	8000906 <drv8106_write_reg_blocking>
    drv8106_write_reg_blocking(drv_inst, DRV8106_CSA_CTRL, DRV8106_CSA_CTRL_DEFAULT);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	210d      	movs	r1, #13
 8000a42:	4620      	mov	r0, r4
 8000a44:	f7ff ff5f 	bl	8000906 <drv8106_write_reg_blocking>
}
 8000a48:	bd10      	pop	{r4, pc}

08000a4a <drv8106_Enable_blocking>:
// // disable drv ic in non-blocking manner via dma
// void drv8106_Disable_dma(drv8106_t* drv_inst){
//     drv8106_write_reg_dma(drv_inst, DRV8106_IC_CTRL, 0);
// }

void drv8106_Enable_blocking(drv8106_t* drv_inst){
 8000a4a:	b508      	push	{r3, lr}
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, DRV8106_EN_DRV);
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	2104      	movs	r1, #4
 8000a50:	f7ff ff59 	bl	8000906 <drv8106_write_reg_blocking>
}
 8000a54:	bd08      	pop	{r3, pc}

08000a56 <drv8106_CSA_enable_g10_blocking>:

void drv8106_Disable_blocking(drv8106_t* drv_inst){
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, 0);
}

void drv8106_CSA_enable_g10_blocking(drv8106_t* drv_inst){
 8000a56:	b508      	push	{r3, lr}
    drv8106_write_reg_blocking(drv_inst, DRV8106_CSA_CTRL, DRV8106_CSA_SH_EN | DRV8106_CSA_GAIN_10);
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	210d      	movs	r1, #13
 8000a5c:	f7ff ff53 	bl	8000906 <drv8106_write_reg_blocking>
}
 8000a60:	bd08      	pop	{r3, pc}

08000a62 <drv8106_clear_fault_blocking>:
    drv_inst->faults_list.Undervoltage = drv_inst->register_map.IC_STAT_1 & DRV8106_UV;
    drv_inst->faults_list.Overvoltage = drv_inst->register_map.IC_STAT_1 & DRV8106_OV;
    drv_inst->faults_list.Overtemperature = drv_inst->register_map.IC_STAT_1 & DRV8106_OT;
}

void drv8106_clear_fault_blocking(drv8106_t* drv_inst){
 8000a62:	b508      	push	{r3, lr}
    drv8106_write_reg_blocking(drv_inst, DRV8106_IC_CTRL, DRV8106_CLR_FLT);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2104      	movs	r1, #4
 8000a68:	f7ff ff4d 	bl	8000906 <drv8106_write_reg_blocking>
}
 8000a6c:	bd08      	pop	{r3, pc}

08000a6e <initEMA_iq18>:

#include "ema_iq18.h"
#include <stdlib.h>

// Initialize the EMA filter
EMA_iq18* initEMA_iq18(float alpha, _iq18 initial_value) {
 8000a6e:	b570      	push	{r4, r5, r6, lr}
 8000a70:	4605      	mov	r5, r0
 8000a72:	460c      	mov	r4, r1
	EMA_iq18 *filter = (EMA_iq18*) malloc(sizeof(EMA_iq18));
 8000a74:	2008      	movs	r0, #8
 8000a76:	f003 ff43 	bl	8004900 <malloc>
	if (filter != NULL) {
 8000a7a:	4606      	mov	r6, r0
 8000a7c:	b140      	cbz	r0, 8000a90 <initEMA_iq18+0x22>
		filter->alpha = _IQ18(alpha);
 8000a7e:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000a82:	4628      	mov	r0, r5
 8000a84:	f7ff fc50 	bl	8000328 <__aeabi_fmul>
 8000a88:	f7ff fd9e 	bl	80005c8 <__aeabi_f2iz>
 8000a8c:	6030      	str	r0, [r6, #0]
		filter->previous = initial_value;
 8000a8e:	6074      	str	r4, [r6, #4]
	}
	return filter;
}
 8000a90:	4630      	mov	r0, r6
 8000a92:	bd70      	pop	{r4, r5, r6, pc}

08000a94 <updateEMA_iq18>:

// Update the EMA filter with a new value and return the filtered result
_iq18 updateEMA_iq18(EMA_iq18 *filter, _iq18 newValue) {
	if (filter != NULL) {
 8000a94:	b908      	cbnz	r0, 8000a9a <updateEMA_iq18+0x6>
		_iq18 ema = _IQ18mpy(filter->alpha, newValue)
				+ _IQ18mpy((_IQ18(1) - filter->alpha), filter->previous);
		filter->previous = ema;
		return ema;
	}
	return 0; // Handle errors appropriately
 8000a96:	2000      	movs	r0, #0
}
 8000a98:	4770      	bx	lr
_iq18 updateEMA_iq18(EMA_iq18 *filter, _iq18 newValue) {
 8000a9a:	b538      	push	{r3, r4, r5, lr}
 8000a9c:	4605      	mov	r5, r0
		_iq18 ema = _IQ18mpy(filter->alpha, newValue)
 8000a9e:	6800      	ldr	r0, [r0, #0]
 8000aa0:	f003 ff26 	bl	80048f0 <_IQ18mpy>
 8000aa4:	4604      	mov	r4, r0
				+ _IQ18mpy((_IQ18(1) - filter->alpha), filter->previous);
 8000aa6:	6828      	ldr	r0, [r5, #0]
 8000aa8:	6869      	ldr	r1, [r5, #4]
 8000aaa:	f5c0 2080 	rsb	r0, r0, #262144	@ 0x40000
 8000aae:	f003 ff1f 	bl	80048f0 <_IQ18mpy>
		_iq18 ema = _IQ18mpy(filter->alpha, newValue)
 8000ab2:	4420      	add	r0, r4
		filter->previous = ema;
 8000ab4:	6068      	str	r0, [r5, #4]
}
 8000ab6:	bd38      	pop	{r3, r4, r5, pc}

08000ab8 <encoder_updatePosition_iq18>:
		encoder->reverse_flag = 1;
	} else {
		encoder->reverse_flag = -1;
	}
}
void encoder_updatePosition_iq18(encoder_iq18_t *encoder) {
 8000ab8:	b538      	push	{r3, r4, r5, lr}
 8000aba:	4604      	mov	r4, r0
	encoder->currentTicks = (int16_t) encoder->htim->Instance->CNT;
 8000abc:	6803      	ldr	r3, [r0, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000ac2:	b200      	sxth	r0, r0
 8000ac4:	8460      	strh	r0, [r4, #34]	@ 0x22

	encoder->fullRevolutions += _IQ18div(
			_IQ18(encoder->currentTicks / encoder->countsPerRevolution),
 8000ac6:	88a3      	ldrh	r3, [r4, #4]
 8000ac8:	fb90 f0f3 	sdiv	r0, r0, r3
	encoder->fullRevolutions += _IQ18div(
 8000acc:	f8d4 101a 	ldr.w	r1, [r4, #26]
 8000ad0:	0480      	lsls	r0, r0, #18
 8000ad2:	f003 fec5 	bl	8004860 <_IQ18div>
 8000ad6:	f8d4 300e 	ldr.w	r3, [r4, #14]
 8000ada:	4403      	add	r3, r0
 8000adc:	f8c4 300e 	str.w	r3, [r4, #14]
			encoder->gearRatio);

	encoder->currentTicks = encoder->currentTicks
 8000ae0:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
			% encoder->countsPerRevolution;
 8000ae4:	88a2      	ldrh	r2, [r4, #4]
 8000ae6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000aea:	fb02 3311 	mls	r3, r2, r1, r3
	encoder->currentTicks = encoder->currentTicks
 8000aee:	8463      	strh	r3, [r4, #34]	@ 0x22
	encoder->htim->Instance->CNT = (uint16_t) encoder->currentTicks;
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	6253      	str	r3, [r2, #36]	@ 0x24

	encoder->angle = _IQ18mpy(
			(encoder->fullRevolutions
 8000af8:	f8d4 500e 	ldr.w	r5, [r4, #14]
					+ _IQ18div(
							_IQ18div(_IQ18(encoder->currentTicks),
 8000afc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
									_IQ18(encoder->countsPerRevolution)),
 8000b00:	88a1      	ldrh	r1, [r4, #4]
					+ _IQ18div(
 8000b02:	0489      	lsls	r1, r1, #18
 8000b04:	0480      	lsls	r0, r0, #18
 8000b06:	f003 feab 	bl	8004860 <_IQ18div>
 8000b0a:	f8d4 101a 	ldr.w	r1, [r4, #26]
 8000b0e:	f003 fea7 	bl	8004860 <_IQ18div>
 8000b12:	4428      	add	r0, r5
	encoder->angle = _IQ18mpy(
 8000b14:	4905      	ldr	r1, [pc, #20]	@ (8000b2c <encoder_updatePosition_iq18+0x74>)
 8000b16:	0040      	lsls	r0, r0, #1
 8000b18:	f003 feea 	bl	80048f0 <_IQ18mpy>
							encoder->gearRatio)) << 1,
			PI_IQ18) * encoder->reverse_flag;
 8000b1c:	f994 3024 	ldrsb.w	r3, [r4, #36]	@ 0x24
 8000b20:	fb03 f000 	mul.w	r0, r3, r0
	encoder->angle = _IQ18mpy(
 8000b24:	f8c4 0006 	str.w	r0, [r4, #6]
}
 8000b28:	bd38      	pop	{r3, r4, r5, pc}
 8000b2a:	bf00      	nop
 8000b2c:	000c90fd 	.word	0x000c90fd

08000b30 <encoder_updateVelocity_qep_iq18>:
void encoder_updateVelocity_qep_iq18(encoder_iq18_t *encoder) {
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4604      	mov	r4, r0
	_iq18 velocity = _IQ18div((encoder->angle - encoder->previousAngle),
 8000b34:	f8d0 0006 	ldr.w	r0, [r0, #6]
 8000b38:	f8d4 301e 	ldr.w	r3, [r4, #30]
 8000b3c:	f8d4 1016 	ldr.w	r1, [r4, #22]
 8000b40:	1ac0      	subs	r0, r0, r3
 8000b42:	f003 fe8d 	bl	8004860 <_IQ18div>
 8000b46:	4601      	mov	r1, r0
			encoder->dt);
//	encoder->angularVelocity = velocity;
	encoder->angularVelocity = updateEMA_iq18(encoder->filter, velocity);
 8000b48:	f8d4 0025 	ldr.w	r0, [r4, #37]	@ 0x25
 8000b4c:	f7ff ffa2 	bl	8000a94 <updateEMA_iq18>
 8000b50:	f8c4 000a 	str.w	r0, [r4, #10]
	encoder->previousAngle = encoder->angle;
 8000b54:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8000b58:	f8c4 301e 	str.w	r3, [r4, #30]
}
 8000b5c:	bd10      	pop	{r4, pc}

08000b5e <encoder_reset_iq18>:
void encoder_reset_iq18(encoder_iq18_t *encoder) {
	encoder->htim->Instance->CNT = 0;
 8000b5e:	6803      	ldr	r3, [r0, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	2300      	movs	r3, #0
 8000b64:	6253      	str	r3, [r2, #36]	@ 0x24
	encoder->angularVelocity = 0;
 8000b66:	8143      	strh	r3, [r0, #10]
 8000b68:	8183      	strh	r3, [r0, #12]
	encoder->previousAngle = 0;
 8000b6a:	83c3      	strh	r3, [r0, #30]
 8000b6c:	8403      	strh	r3, [r0, #32]
	encoder->angle = 0;
 8000b6e:	80c3      	strh	r3, [r0, #6]
 8000b70:	8103      	strh	r3, [r0, #8]
	encoder->fullRevolutions = 0;
 8000b72:	81c3      	strh	r3, [r0, #14]
 8000b74:	8203      	strh	r3, [r0, #16]
	encoder->currentTicks = 0;
 8000b76:	8443      	strh	r3, [r0, #34]	@ 0x22
}
 8000b78:	4770      	bx	lr

08000b7a <encoder_getVelocity_iq18>:
	// return encoder->angle * encoder->reverse_flag;
}
_iq18 encoder_getVelocity_iq18(encoder_iq18_t *encoder) {
	return encoder->angularVelocity;// * encoder->reverse_flag;
	// return encoder->angularVelocity * encoder->reverse_flag;
}
 8000b7a:	f8d0 000a 	ldr.w	r0, [r0, #10]
 8000b7e:	4770      	bx	lr

08000b80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	2400      	movs	r4, #0
 8000b88:	9404      	str	r4, [sp, #16]
 8000b8a:	9405      	str	r4, [sp, #20]
 8000b8c:	9406      	str	r4, [sp, #24]
 8000b8e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b90:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc4 <MX_GPIO_Init+0x144>)
 8000b92:	699a      	ldr	r2, [r3, #24]
 8000b94:	f042 0220 	orr.w	r2, r2, #32
 8000b98:	619a      	str	r2, [r3, #24]
 8000b9a:	699a      	ldr	r2, [r3, #24]
 8000b9c:	f002 0220 	and.w	r2, r2, #32
 8000ba0:	9200      	str	r2, [sp, #0]
 8000ba2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba4:	699a      	ldr	r2, [r3, #24]
 8000ba6:	f042 0210 	orr.w	r2, r2, #16
 8000baa:	619a      	str	r2, [r3, #24]
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	f002 0210 	and.w	r2, r2, #16
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	f042 0204 	orr.w	r2, r2, #4
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	699a      	ldr	r2, [r3, #24]
 8000bc0:	f002 0204 	and.w	r2, r2, #4
 8000bc4:	9202      	str	r2, [sp, #8]
 8000bc6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	699a      	ldr	r2, [r3, #24]
 8000bca:	f042 0208 	orr.w	r2, r2, #8
 8000bce:	619a      	str	r2, [r3, #24]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	9303      	str	r3, [sp, #12]
 8000bd8:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BRIDGESLEEP1_Pin|DRVOFF2_Pin|SPI1_SS2_Pin|SPI1_SS3_Pin, GPIO_PIN_RESET);
 8000bda:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8000cc8 <MX_GPIO_Init+0x148>
 8000bde:	4622      	mov	r2, r4
 8000be0:	213c      	movs	r1, #60	@ 0x3c
 8000be2:	4648      	mov	r0, r9
 8000be4:	f001 ffbf 	bl	8002b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR2_1_Pin|SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000be8:	4e38      	ldr	r6, [pc, #224]	@ (8000ccc <MX_GPIO_Init+0x14c>)
 8000bea:	4622      	mov	r2, r4
 8000bec:	2112      	movs	r1, #18
 8000bee:	4630      	mov	r0, r6
 8000bf0:	f001 ffb9 	bl	8002b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SS4_Pin|DIR1_1_Pin|HIZ1_Pin|HIZ2_Pin
 8000bf4:	4f36      	ldr	r7, [pc, #216]	@ (8000cd0 <MX_GPIO_Init+0x150>)
 8000bf6:	4622      	mov	r2, r4
 8000bf8:	f643 0117 	movw	r1, #14359	@ 0x3817
 8000bfc:	4638      	mov	r0, r7
 8000bfe:	f001 ffb2 	bl	8002b66 <HAL_GPIO_WritePin>
                          |DRVOFF1_Pin|BRIDGESLEEP2_Pin|IND_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nFAULT_L2_Pin nFAULT_R2_Pin ENC1_Z_Pin ENC2_Z_Pin */
  GPIO_InitStruct.Pin = nFAULT_L2_Pin|nFAULT_R2_Pin|ENC1_Z_Pin|ENC2_Z_Pin;
 8000c02:	f240 3303 	movw	r3, #771	@ 0x303
 8000c06:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	a904      	add	r1, sp, #16
 8000c0e:	4648      	mov	r0, r9
 8000c10:	f001 fe94 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : BRIDGESLEEP1_Pin DRVOFF2_Pin */
  GPIO_InitStruct.Pin = BRIDGESLEEP1_Pin|DRVOFF2_Pin;
 8000c14:	230c      	movs	r3, #12
 8000c16:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2501      	movs	r5, #1
 8000c1a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	f04f 0802 	mov.w	r8, #2
 8000c22:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	a904      	add	r1, sp, #16
 8000c28:	4648      	mov	r0, r9
 8000c2a:	f001 fe87 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR2_1_Pin */
  GPIO_InitStruct.Pin = DIR2_1_Pin;
 8000c2e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(DIR2_1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	a904      	add	r1, sp, #16
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	f001 fe7d 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS1_Pin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 8000c42:	2310      	movs	r3, #16
 8000c44:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4a:	f04f 0a03 	mov.w	sl, #3
 8000c4e:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 8000c52:	eb0d 0103 	add.w	r1, sp, r3
 8000c56:	4630      	mov	r0, r6
 8000c58:	f001 fe70 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SS2_Pin SPI1_SS3_Pin */
  GPIO_InitStruct.Pin = SPI1_SS2_Pin|SPI1_SS3_Pin;
 8000c5c:	2330      	movs	r3, #48	@ 0x30
 8000c5e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c64:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	a904      	add	r1, sp, #16
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	f001 fe66 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS4_Pin */
  GPIO_InitStruct.Pin = SPI1_SS4_Pin;
 8000c70:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c76:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(SPI1_SS4_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	a904      	add	r1, sp, #16
 8000c7c:	4638      	mov	r0, r7
 8000c7e:	f001 fe5d 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_1_Pin HIZ1_Pin HIZ2_Pin DRVOFF1_Pin
                           BRIDGESLEEP2_Pin IND_LED_Pin */
  GPIO_InitStruct.Pin = DIR1_1_Pin|HIZ1_Pin|HIZ2_Pin|DRVOFF1_Pin
 8000c82:	f643 0316 	movw	r3, #14358	@ 0x3816
 8000c86:	9304      	str	r3, [sp, #16]
                          |BRIDGESLEEP2_Pin|IND_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	a904      	add	r1, sp, #16
 8000c92:	4638      	mov	r0, r7
 8000c94:	f001 fe52 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT_R1_Pin nFAULT_L1_Pin RS485_CTRL_Pin */
  GPIO_InitStruct.Pin = nFAULT_R1_Pin|nFAULT_L1_Pin|RS485_CTRL_Pin;
 8000c98:	f24c 0320 	movw	r3, #49184	@ 0xc020
 8000c9c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	a904      	add	r1, sp, #16
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	f001 fe49 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ID_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin;
 8000caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(USB_ID_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	a904      	add	r1, sp, #16
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	f001 fe40 	bl	800293c <HAL_GPIO_Init>

}
 8000cbc:	b008      	add	sp, #32
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
uint8_t fault1, fault2, fault3, fault4, debug_mode;

float cur_set_1, cur_set2, vel_set_1, vel_set_2;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b510      	push	{r4, lr}
    if (system_enabled)
 8000cd6:	4b46      	ldr	r3, [pc, #280]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d076      	beq.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0xf8>
    {
        if (!irq_counter9k)
 8000cde:	4b45      	ldr	r3, [pc, #276]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	b9d3      	cbnz	r3, 8000d1a <HAL_TIM_PeriodElapsedCallback+0x46>
        {
            servo_iq18_currentLoop(&servo1_g, current[0]);
 8000ce4:	4b44      	ldr	r3, [pc, #272]	@ (8000df8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ce6:	6819      	ldr	r1, [r3, #0]
 8000ce8:	4844      	ldr	r0, [pc, #272]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000cea:	f000 fca0 	bl	800162e <servo_iq18_currentLoop>
        else
        {
            servo_iq18_currentLoop(&servo2_g, current[1]);
        }

        irq_counter9k = !irq_counter9k;
 8000cee:	4a41      	ldr	r2, [pc, #260]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000cf0:	8813      	ldrh	r3, [r2, #0]
 8000cf2:	fab3 f383 	clz	r3, r3
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	8013      	strh	r3, [r2, #0]

        irq_counter250++;
 8000cfa:	4a41      	ldr	r2, [pc, #260]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000cfc:	8813      	ldrh	r3, [r2, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	8013      	strh	r3, [r2, #0]

        if (irq_counter250 == 36)
 8000d04:	2b24      	cmp	r3, #36	@ 0x24
 8000d06:	d00e      	beq.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x52>
            fault2 = HAL_GPIO_ReadPin(nFAULT_R1_GPIO_Port, nFAULT_R1_Pin);
            fault3 = HAL_GPIO_ReadPin(nFAULT_L2_GPIO_Port, nFAULT_L2_Pin);
            fault4 = HAL_GPIO_ReadPin(nFAULT_R2_GPIO_Port, nFAULT_R2_Pin);
        }

        if (irq_counter250 == 72)
 8000d08:	4b3d      	ldr	r3, [pc, #244]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	2b48      	cmp	r3, #72	@ 0x48
 8000d0e:	d02b      	beq.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x94>
        TIM3->CCR1 = 0;
        TIM3->CCR2 = 0;
        servo_iq18_reset(&servo1_g);
        servo_iq18_reset(&servo2_g);
    }
    if (reset_flag)
 8000d10:	4b3c      	ldr	r3, [pc, #240]	@ (8000e04 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d164      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x10e>
    {
        servo_iq18_reset(&servo1_g);
        servo_iq18_reset(&servo2_g);
    }
 8000d18:	bd10      	pop	{r4, pc}
            servo_iq18_currentLoop(&servo2_g, current[1]);
 8000d1a:	4b37      	ldr	r3, [pc, #220]	@ (8000df8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000d1c:	6859      	ldr	r1, [r3, #4]
 8000d1e:	483a      	ldr	r0, [pc, #232]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000d20:	f000 fc85 	bl	800162e <servo_iq18_currentLoop>
 8000d24:	e7e3      	b.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x1a>
            servo_iq18_velocityLoop(&servo1_g);
 8000d26:	4835      	ldr	r0, [pc, #212]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000d28:	f000 fc29 	bl	800157e <servo_iq18_velocityLoop>
            fault1 = HAL_GPIO_ReadPin(nFAULT_L1_GPIO_Port, nFAULT_L1_Pin);
 8000d2c:	4c37      	ldr	r4, [pc, #220]	@ (8000e0c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d32:	4620      	mov	r0, r4
 8000d34:	f001 ff10 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000d38:	4b35      	ldr	r3, [pc, #212]	@ (8000e10 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d3a:	7018      	strb	r0, [r3, #0]
            fault2 = HAL_GPIO_ReadPin(nFAULT_R1_GPIO_Port, nFAULT_R1_Pin);
 8000d3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d40:	4620      	mov	r0, r4
 8000d42:	f001 ff09 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000d46:	4b33      	ldr	r3, [pc, #204]	@ (8000e14 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d48:	7018      	strb	r0, [r3, #0]
            fault3 = HAL_GPIO_ReadPin(nFAULT_L2_GPIO_Port, nFAULT_L2_Pin);
 8000d4a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4620      	mov	r0, r4
 8000d52:	f001 ff01 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000d56:	4b30      	ldr	r3, [pc, #192]	@ (8000e18 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d58:	7018      	strb	r0, [r3, #0]
            fault4 = HAL_GPIO_ReadPin(nFAULT_R2_GPIO_Port, nFAULT_R2_Pin);
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f001 fefb 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000d62:	4b2e      	ldr	r3, [pc, #184]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d64:	7018      	strb	r0, [r3, #0]
 8000d66:	e7cf      	b.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x34>
            servo_iq18_velocityLoop(&servo2_g);
 8000d68:	4827      	ldr	r0, [pc, #156]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000d6a:	f000 fc08 	bl	800157e <servo_iq18_velocityLoop>
            irq_counter250 = 0;
 8000d6e:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	801a      	strh	r2, [r3, #0]
            if(debug_mode == 1){
 8000d74:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d01c      	beq.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0xe2>
            if(debug_mode == 2){
 8000d7c:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d1c5      	bne.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x3c>
                servo_iq18_controlVelocity(&servo1_g, _IQ18(vel_set_1));
 8000d84:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000d88:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	f7ff facc 	bl	8000328 <__aeabi_fmul>
 8000d90:	f7ff fc1a 	bl	80005c8 <__aeabi_f2iz>
 8000d94:	4601      	mov	r1, r0
 8000d96:	4819      	ldr	r0, [pc, #100]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000d98:	f000 fc76 	bl	8001688 <servo_iq18_controlVelocity>
                servo_iq18_controlVelocity(&servo2_g, _IQ18(vel_set_2));
 8000d9c:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8000da0:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	f7ff fac0 	bl	8000328 <__aeabi_fmul>
 8000da8:	f7ff fc0e 	bl	80005c8 <__aeabi_f2iz>
 8000dac:	4601      	mov	r1, r0
 8000dae:	4816      	ldr	r0, [pc, #88]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000db0:	f000 fc6a 	bl	8001688 <servo_iq18_controlVelocity>
 8000db4:	e7ac      	b.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x3c>
                servo_iq18_controlCurrent(&servo1_g, cur_set_1);
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	4810      	ldr	r0, [pc, #64]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000dbc:	f000 fc79 	bl	80016b2 <servo_iq18_controlCurrent>
                servo_iq18_controlCurrent(&servo2_g, cur_set2);
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	4810      	ldr	r0, [pc, #64]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000dc6:	f000 fc74 	bl	80016b2 <servo_iq18_controlCurrent>
 8000dca:	e7d7      	b.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0xa8>
        TIM3->CCR1 = 0;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = 0;
 8000dd2:	639a      	str	r2, [r3, #56]	@ 0x38
        servo_iq18_reset(&servo1_g);
 8000dd4:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000dd6:	f000 fc8f 	bl	80016f8 <servo_iq18_reset>
        servo_iq18_reset(&servo2_g);
 8000dda:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ddc:	f000 fc8c 	bl	80016f8 <servo_iq18_reset>
 8000de0:	e796      	b.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x3c>
        servo_iq18_reset(&servo1_g);
 8000de2:	4806      	ldr	r0, [pc, #24]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000de4:	f000 fc88 	bl	80016f8 <servo_iq18_reset>
        servo_iq18_reset(&servo2_g);
 8000de8:	4807      	ldr	r0, [pc, #28]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000dea:	f000 fc85 	bl	80016f8 <servo_iq18_reset>
 8000dee:	e793      	b.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0x44>
 8000df0:	2000019d 	.word	0x2000019d
 8000df4:	200001b8 	.word	0x200001b8
 8000df8:	20000190 	.word	0x20000190
 8000dfc:	200002d0 	.word	0x200002d0
 8000e00:	200001b6 	.word	0x200001b6
 8000e04:	2000019c 	.word	0x2000019c
 8000e08:	200001bc 	.word	0x200001bc
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	200001b4 	.word	0x200001b4
 8000e14:	200001b3 	.word	0x200001b3
 8000e18:	200001b2 	.word	0x200001b2
 8000e1c:	200001b1 	.word	0x200001b1
 8000e20:	200001b0 	.word	0x200001b0
 8000e24:	200001a4 	.word	0x200001a4
 8000e28:	200001a0 	.word	0x200001a0
 8000e2c:	200001ac 	.word	0x200001ac
 8000e30:	200001a8 	.word	0x200001a8
 8000e34:	40000400 	.word	0x40000400

08000e38 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <Error_Handler+0x2>

08000e3c <SystemClock_Config>:
{
 8000e3c:	b500      	push	{lr}
 8000e3e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e40:	2228      	movs	r2, #40	@ 0x28
 8000e42:	2100      	movs	r1, #0
 8000e44:	eb0d 0002 	add.w	r0, sp, r2
 8000e48:	f003 fe10 	bl	8004a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	9305      	str	r3, [sp, #20]
 8000e50:	9306      	str	r3, [sp, #24]
 8000e52:	9307      	str	r3, [sp, #28]
 8000e54:	9308      	str	r3, [sp, #32]
 8000e56:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	9303      	str	r3, [sp, #12]
 8000e5e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2201      	movs	r2, #1
 8000e62:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e68:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e70:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e72:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e76:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	a80a      	add	r0, sp, #40	@ 0x28
 8000e7a:	f001 fe91 	bl	8002ba0 <HAL_RCC_OscConfig>
 8000e7e:	b9c8      	cbnz	r0, 8000eb4 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e84:	2102      	movs	r1, #2
 8000e86:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e90:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e92:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e94:	a805      	add	r0, sp, #20
 8000e96:	f002 f8b5 	bl	8003004 <HAL_RCC_ClockConfig>
 8000e9a:	b968      	cbnz	r0, 8000eb8 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ea0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ea4:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea6:	a801      	add	r0, sp, #4
 8000ea8:	f002 f988 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	b930      	cbnz	r0, 8000ebc <SystemClock_Config+0x80>
}
 8000eae:	b015      	add	sp, #84	@ 0x54
 8000eb0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000eb4:	f7ff ffc0 	bl	8000e38 <Error_Handler>
    Error_Handler();
 8000eb8:	f7ff ffbe 	bl	8000e38 <Error_Handler>
    Error_Handler();
 8000ebc:	f7ff ffbc 	bl	8000e38 <Error_Handler>

08000ec0 <main>:
{
 8000ec0:	b580      	push	{r7, lr}
  HAL_Init();
 8000ec2:	f001 f80b 	bl	8001edc <HAL_Init>
  SystemClock_Config();
 8000ec6:	f7ff ffb9 	bl	8000e3c <SystemClock_Config>
  MX_GPIO_Init();
 8000eca:	f7ff fe59 	bl	8000b80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ece:	f7ff fcc1 	bl	8000854 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ed2:	f7ff fbbf 	bl	8000654 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000ed6:	f000 fc21 	bl	800171c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000eda:	f000 fd59 	bl	8001990 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ede:	f000 fd8d 	bl	80019fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ee2:	f000 feed 	bl	8001cc0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ee6:	f000 fdbb 	bl	8001a60 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000eea:	f000 ff35 	bl	8001d58 <MX_USART1_UART_Init>
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	483c      	ldr	r0, [pc, #240]	@ (8000fe4 <main+0x124>)
 8000ef4:	f001 fe37 	bl	8002b66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS2_GPIO_Port, SPI1_SS2_Pin, GPIO_PIN_SET);
 8000ef8:	4d3b      	ldr	r5, [pc, #236]	@ (8000fe8 <main+0x128>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	2110      	movs	r1, #16
 8000efe:	4628      	mov	r0, r5
 8000f00:	f001 fe31 	bl	8002b66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS3_GPIO_Port, SPI1_SS3_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2120      	movs	r1, #32
 8000f08:	4628      	mov	r0, r5
 8000f0a:	f001 fe2c 	bl	8002b66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS4_GPIO_Port, SPI1_SS4_Pin, GPIO_PIN_SET);
 8000f0e:	4c37      	ldr	r4, [pc, #220]	@ (8000fec <main+0x12c>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	4611      	mov	r1, r2
 8000f14:	4620      	mov	r0, r4
 8000f16:	f001 fe26 	bl	8002b66 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f001 f802 	bl	8001f24 <HAL_Delay>
  HAL_GPIO_WritePin(BRIDGESLEEP1_GPIO_Port, BRIDGESLEEP1_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2104      	movs	r1, #4
 8000f24:	4628      	mov	r0, r5
 8000f26:	f001 fe1e 	bl	8002b66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGESLEEP2_GPIO_Port, BRIDGESLEEP2_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f30:	4620      	mov	r0, r4
 8000f32:	f001 fe18 	bl	8002b66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HIZ1_GPIO_Port, HIZ1_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2104      	movs	r1, #4
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f001 fe13 	bl	8002b66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HIZ2_GPIO_Port, HIZ2_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f46:	4620      	mov	r0, r4
 8000f48:	f001 fe0d 	bl	8002b66 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f000 ffe9 	bl	8001f24 <HAL_Delay>
  drv8106_reset_blocking(&drv_l1_dd6);
 8000f52:	4f27      	ldr	r7, [pc, #156]	@ (8000ff0 <main+0x130>)
 8000f54:	4638      	mov	r0, r7
 8000f56:	f7ff fd44 	bl	80009e2 <drv8106_reset_blocking>
  drv8106_reset_blocking(&drv_r1_dd7);
 8000f5a:	4e26      	ldr	r6, [pc, #152]	@ (8000ff4 <main+0x134>)
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	f7ff fd40 	bl	80009e2 <drv8106_reset_blocking>
  drv8106_reset_blocking(&drv_l2_dd8);
 8000f62:	4d25      	ldr	r5, [pc, #148]	@ (8000ff8 <main+0x138>)
 8000f64:	4628      	mov	r0, r5
 8000f66:	f7ff fd3c 	bl	80009e2 <drv8106_reset_blocking>
  drv8106_reset_blocking(&drv_r2_dd9);
 8000f6a:	4c24      	ldr	r4, [pc, #144]	@ (8000ffc <main+0x13c>)
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff fd38 	bl	80009e2 <drv8106_reset_blocking>
  drv8106_clear_fault_blocking(&drv_l1_dd6);
 8000f72:	4638      	mov	r0, r7
 8000f74:	f7ff fd75 	bl	8000a62 <drv8106_clear_fault_blocking>
  drv8106_clear_fault_blocking(&drv_r1_dd7);
 8000f78:	4630      	mov	r0, r6
 8000f7a:	f7ff fd72 	bl	8000a62 <drv8106_clear_fault_blocking>
  drv8106_clear_fault_blocking(&drv_l2_dd8);
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f7ff fd6f 	bl	8000a62 <drv8106_clear_fault_blocking>
  drv8106_clear_fault_blocking(&drv_r2_dd9);
 8000f84:	4620      	mov	r0, r4
 8000f86:	f7ff fd6c 	bl	8000a62 <drv8106_clear_fault_blocking>
  drv8106_read_all_blocking(&drv_l1_dd6);
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	f7ff fcd9 	bl	8000942 <drv8106_read_all_blocking>
  drv8106_read_all_blocking(&drv_r1_dd7);
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff fcd6 	bl	8000942 <drv8106_read_all_blocking>
  drv8106_read_all_blocking(&drv_l2_dd8);
 8000f96:	4628      	mov	r0, r5
 8000f98:	f7ff fcd3 	bl	8000942 <drv8106_read_all_blocking>
  drv8106_read_all_blocking(&drv_r2_dd9);
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f7ff fcd0 	bl	8000942 <drv8106_read_all_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_l1_dd6);
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	f7ff fd57 	bl	8000a56 <drv8106_CSA_enable_g10_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_r1_dd7);
 8000fa8:	4630      	mov	r0, r6
 8000faa:	f7ff fd54 	bl	8000a56 <drv8106_CSA_enable_g10_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_l2_dd8);
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f7ff fd51 	bl	8000a56 <drv8106_CSA_enable_g10_blocking>
  drv8106_CSA_enable_g10_blocking(&drv_r2_dd9);
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f7ff fd4e 	bl	8000a56 <drv8106_CSA_enable_g10_blocking>
  drv8106_Enable_blocking(&drv_l1_dd6);
 8000fba:	4638      	mov	r0, r7
 8000fbc:	f7ff fd45 	bl	8000a4a <drv8106_Enable_blocking>
  drv8106_Enable_blocking(&drv_r1_dd7);
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	f7ff fd42 	bl	8000a4a <drv8106_Enable_blocking>
  drv8106_Enable_blocking(&drv_l2_dd8);
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	f7ff fd3f 	bl	8000a4a <drv8106_Enable_blocking>
  drv8106_Enable_blocking(&drv_r2_dd9);
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f7ff fd3c 	bl	8000a4a <drv8106_Enable_blocking>
  HAL_Delay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 ffa6 	bl	8001f24 <HAL_Delay>
  test_iq = _IQ18(0.2 * (int8_t)(-1));
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <main+0x140>)
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <main+0x144>)
 8000fdc:	601a      	str	r2, [r3, #0]
  init_mtr_ctrl();
 8000fde:	f000 f813 	bl	8001008 <init_mtr_ctrl>
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <main+0x122>
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40010c00 	.word	0x40010c00
 8000ff0:	20000078 	.word	0x20000078
 8000ff4:	20000054 	.word	0x20000054
 8000ff8:	20000030 	.word	0x20000030
 8000ffc:	2000000c 	.word	0x2000000c
 8001000:	200003e4 	.word	0x200003e4
 8001004:	ffff3334 	.word	0xffff3334

08001008 <init_mtr_ctrl>:
#include "main_init.h"

void init_mtr_ctrl()
{
 8001008:	b508      	push	{r3, lr}
    servo_init();
 800100a:	f000 f8df 	bl	80011cc <servo_init>
    // Init servo structures

    // Init ADC&DMA

    // Reset servos
    servo_iq18_reset(&servo1_g);
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <init_mtr_ctrl+0x24>)
 8001010:	f000 fb72 	bl	80016f8 <servo_iq18_reset>
    servo_iq18_reset(&servo2_g);
 8001014:	4806      	ldr	r0, [pc, #24]	@ (8001030 <init_mtr_ctrl+0x28>)
 8001016:	f000 fb6f 	bl	80016f8 <servo_iq18_reset>

    // Init finished
    system_enabled = 0;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <init_mtr_ctrl+0x2c>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
    servo_periph_init();
 8001020:	f000 f8a4 	bl	800116c <servo_periph_init>
    adc_cur_init();
 8001024:	f7ff fba0 	bl	8000768 <adc_cur_init>


}
 8001028:	bd08      	pop	{r3, pc}
 800102a:	bf00      	nop
 800102c:	200002d0 	.word	0x200002d0
 8001030:	200001bc 	.word	0x200001bc
 8001034:	2000019d 	.word	0x2000019d

08001038 <pid_iq18_reset>:
	pid->previousError = pid->error;
}

// Resets all the components and previous error
void pid_iq18_reset(pid_iq18_t *pid) {
	pid->P = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	6183      	str	r3, [r0, #24]
	pid->I = 0;
 800103c:	61c3      	str	r3, [r0, #28]
	pid->D = 0;
 800103e:	6203      	str	r3, [r0, #32]
	pid->previousError = 0;
 8001040:	6383      	str	r3, [r0, #56]	@ 0x38
	pid->output = 0;
 8001042:	6343      	str	r3, [r0, #52]	@ 0x34
}
 8001044:	4770      	bx	lr

08001046 <pid_iq18_calculate>:
void pid_iq18_calculate(pid_iq18_t *pid, _iq18 setpoint, _iq18 feedback) {
 8001046:	b538      	push	{r3, r4, r5, lr}
 8001048:	4604      	mov	r4, r0
	pid->error = setpoint - feedback;
 800104a:	1a89      	subs	r1, r1, r2
 800104c:	6001      	str	r1, [r0, #0]
	if ((pid->error > -(pid->toleranceBand))
 800104e:	6943      	ldr	r3, [r0, #20]
 8001050:	425a      	negs	r2, r3
 8001052:	4291      	cmp	r1, r2
 8001054:	dd01      	ble.n	800105a <pid_iq18_calculate+0x14>
			&& (pid->error < pid->toleranceBand)) {
 8001056:	4299      	cmp	r1, r3
 8001058:	db30      	blt.n	80010bc <pid_iq18_calculate+0x76>
	pid->P = _IQ18mpy(pid->error, pid->kp);
 800105a:	6861      	ldr	r1, [r4, #4]
 800105c:	6820      	ldr	r0, [r4, #0]
 800105e:	f003 fc47 	bl	80048f0 <_IQ18mpy>
 8001062:	61a0      	str	r0, [r4, #24]
			(_IQ18mpy(pid->error, pid->ki)
 8001064:	68a1      	ldr	r1, [r4, #8]
 8001066:	6820      	ldr	r0, [r4, #0]
 8001068:	f003 fc42 	bl	80048f0 <_IQ18mpy>
 800106c:	4605      	mov	r5, r0
					+ _IQ18mpy(pid->output - pid->rawOutput, pid->kb)),
 800106e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001070:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001072:	6921      	ldr	r1, [r4, #16]
 8001074:	1ac0      	subs	r0, r0, r3
 8001076:	f003 fc3b 	bl	80048f0 <_IQ18mpy>
	pid->I += _IQ18mpy(
 800107a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800107c:	4428      	add	r0, r5
 800107e:	f003 fc37 	bl	80048f0 <_IQ18mpy>
 8001082:	69e3      	ldr	r3, [r4, #28]
 8001084:	4403      	add	r3, r0
 8001086:	61e3      	str	r3, [r4, #28]
	pid->D = _IQ18div(_IQ18mpy((pid->error - pid->previousError), pid->kd),
 8001088:	6820      	ldr	r0, [r4, #0]
 800108a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800108c:	68e1      	ldr	r1, [r4, #12]
 800108e:	1ac0      	subs	r0, r0, r3
 8001090:	f003 fc2e 	bl	80048f0 <_IQ18mpy>
 8001094:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001096:	f003 fbe3 	bl	8004860 <_IQ18div>
 800109a:	6220      	str	r0, [r4, #32]
	pid->rawOutput = pid->P + pid->I + pid->D;
 800109c:	69a3      	ldr	r3, [r4, #24]
 800109e:	69e2      	ldr	r2, [r4, #28]
 80010a0:	4413      	add	r3, r2
 80010a2:	4418      	add	r0, r3
 80010a4:	6320      	str	r0, [r4, #48]	@ 0x30
	pid->output = _IQsat(pid->rawOutput, pid->upperLimit, pid->lowerLimit);
 80010a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80010a8:	4298      	cmp	r0, r3
 80010aa:	dc03      	bgt.n	80010b4 <pid_iq18_calculate+0x6e>
 80010ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80010ae:	4283      	cmp	r3, r0
 80010b0:	bfb8      	it	lt
 80010b2:	4603      	movlt	r3, r0
 80010b4:	6363      	str	r3, [r4, #52]	@ 0x34
	pid->previousError = pid->error;
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
		pid->error = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	6003      	str	r3, [r0, #0]
		pid_iq18_reset(pid);
 80010c0:	f7ff ffba 	bl	8001038 <pid_iq18_reset>
 80010c4:	e7c9      	b.n	800105a <pid_iq18_calculate+0x14>

080010c6 <pid_iq18_getOutput>:

// Getter for output
_iq18 pid_iq18_getOutput(pid_iq18_t *pid) {
	return pid->output;
}
 80010c6:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80010c8:	4770      	bx	lr

080010ca <pwm_setSpeed>:
void pwm_dutyLimits(pwmControl_t *driver, uint16_t minDuty, uint16_t maxDuty) {
	driver->minDuty = minDuty;
	driver->maxDuty = maxDuty;
}

void pwm_setSpeed(pwmControl_t *driver, int32_t duty) {
 80010ca:	b510      	push	{r4, lr}
 80010cc:	4604      	mov	r4, r0
	if (!duty) {
 80010ce:	b969      	cbnz	r1, 80010ec <pwm_setSpeed+0x22>
		driver->_duty = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	7443      	strb	r3, [r0, #17]
 80010d4:	7483      	strb	r3, [r0, #18]
 80010d6:	74c3      	strb	r3, [r0, #19]
 80010d8:	7503      	strb	r3, [r0, #20]
		driver->dir = 0;
 80010da:	7543      	strb	r3, [r0, #21]
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
			driver->dir = -1;
		}
	}

	switch (driver->timerChannel) {
 80010dc:	7923      	ldrb	r3, [r4, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d830      	bhi.n	8001146 <pwm_setSpeed+0x7c>
 80010e4:	e8df f003 	tbb	[pc, r3]
 80010e8:	3c36302a 	.word	0x3c36302a
 80010ec:	460a      	mov	r2, r1
		driver->_duty = constrain(ABS(duty), driver->minDuty, driver->maxDuty);
 80010ee:	ea81 71e1 	eor.w	r1, r1, r1, asr #31
 80010f2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 80010f6:	f8b0 300f 	ldrh.w	r3, [r0, #15]
 80010fa:	4299      	cmp	r1, r3
 80010fc:	db04      	blt.n	8001108 <pwm_setSpeed+0x3e>
 80010fe:	f8b0 300d 	ldrh.w	r3, [r0, #13]
 8001102:	428b      	cmp	r3, r1
 8001104:	bfa8      	it	ge
 8001106:	460b      	movge	r3, r1
 8001108:	f8c4 3011 	str.w	r3, [r4, #17]
		if (duty > 0) {
 800110c:	2a00      	cmp	r2, #0
 800110e:	dd0a      	ble.n	8001126 <pwm_setSpeed+0x5c>
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 1);
 8001110:	f8d4 1005 	ldr.w	r1, [r4, #5]
 8001114:	2201      	movs	r2, #1
 8001116:	b289      	uxth	r1, r1
 8001118:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800111c:	f001 fd23 	bl	8002b66 <HAL_GPIO_WritePin>
			driver->dir = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	7563      	strb	r3, [r4, #21]
 8001124:	e7da      	b.n	80010dc <pwm_setSpeed+0x12>
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
 8001126:	f8d4 1005 	ldr.w	r1, [r4, #5]
 800112a:	2200      	movs	r2, #0
 800112c:	b289      	uxth	r1, r1
 800112e:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8001132:	f001 fd18 	bl	8002b66 <HAL_GPIO_WritePin>
			driver->dir = -1;
 8001136:	23ff      	movs	r3, #255	@ 0xff
 8001138:	7563      	strb	r3, [r4, #21]
 800113a:	e7cf      	b.n	80010dc <pwm_setSpeed+0x12>
	case 1:
		driver->htim->Instance->CCR1 = driver->_duty;
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8001144:	635a      	str	r2, [r3, #52]	@ 0x34
		driver->htim->Instance->CCR4 = driver->_duty;
		break;
	default:
		break;
	}
}
 8001146:	bd10      	pop	{r4, pc}
		driver->htim->Instance->CCR2 = driver->_duty;
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8001150:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8001152:	e7f8      	b.n	8001146 <pwm_setSpeed+0x7c>
		driver->htim->Instance->CCR3 = driver->_duty;
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f8d4 2011 	ldr.w	r2, [r4, #17]
 800115c:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 800115e:	e7f2      	b.n	8001146 <pwm_setSpeed+0x7c>
		driver->htim->Instance->CCR4 = driver->_duty;
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8001168:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800116a:	e7ec      	b.n	8001146 <pwm_setSpeed+0x7c>

0800116c <servo_periph_init>:
#include "servo_init.h"

// servo_iq18_t servo1_g, servo2_g;

void servo_periph_init()
{
 800116c:	b510      	push	{r4, lr}
    // Init timers

    // TIM1&2 for encoders
    MX_TIM1_Init();
 800116e:	f000 fc0f 	bl	8001990 <MX_TIM1_Init>
    MX_TIM2_Init();
 8001172:	f000 fc43 	bl	80019fc <MX_TIM2_Init>

    // TIM3&4 for periodical tasks
    MX_TIM3_Init(); // PWM as well
 8001176:	f000 fda3 	bl	8001cc0 <MX_TIM3_Init>

    // Init & calibrate ADC
    MX_ADC1_Init();
 800117a:	f7ff fa6b 	bl	8000654 <MX_ADC1_Init>
    HAL_ADCEx_Calibration_Start(&hadc1);
 800117e:	480f      	ldr	r0, [pc, #60]	@ (80011bc <servo_periph_init+0x50>)
 8001180:	f001 f94e 	bl	8002420 <HAL_ADCEx_Calibration_Start>

    // Start timers

    // Clear CNT and start timers 1&2 in encoder mode
    __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001184:	480e      	ldr	r0, [pc, #56]	@ (80011c0 <servo_periph_init+0x54>)
 8001186:	6803      	ldr	r3, [r0, #0]
 8001188:	f06f 0401 	mvn.w	r4, #1
 800118c:	611c      	str	r4, [r3, #16]
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800118e:	213c      	movs	r1, #60	@ 0x3c
 8001190:	f002 fffc 	bl	800418c <HAL_TIM_Encoder_Start>
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <servo_periph_init+0x58>)
 8001196:	6803      	ldr	r3, [r0, #0]
 8001198:	611c      	str	r4, [r3, #16]
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800119a:	213c      	movs	r1, #60	@ 0x3c
 800119c:	f002 fff6 	bl	800418c <HAL_TIM_Encoder_Start>

    // Start TIM3 in PWM mode and also turn on interrupts
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011a0:	4c09      	ldr	r4, [pc, #36]	@ (80011c8 <servo_periph_init+0x5c>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4620      	mov	r0, r4
 80011a6:	f002 ff83 	bl	80040b0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011aa:	2104      	movs	r1, #4
 80011ac:	4620      	mov	r0, r4
 80011ae:	f002 ff7f 	bl	80040b0 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim3);
 80011b2:	4620      	mov	r0, r4
 80011b4:	f002 fc60 	bl	8003a78 <HAL_TIM_Base_Start_IT>
}
 80011b8:	bd10      	pop	{r4, pc}
 80011ba:	bf00      	nop
 80011bc:	20000158 	.word	0x20000158
 80011c0:	200005a4 	.word	0x200005a4
 80011c4:	2000055c 	.word	0x2000055c
 80011c8:	20000514 	.word	0x20000514

080011cc <servo_init>:

void servo_init()
{
 80011cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d0:	b085      	sub	sp, #20
    // Init servo1
    if (SERVO1_ENABLE)
    {
        servo_iq18_base_init(&servo1_g, Triple, MT_VELOCITY, MT_GEAR_RATIO, SERVO1_REVERSE);
 80011d2:	4d43      	ldr	r5, [pc, #268]	@ (80012e0 <servo_init+0x114>)
 80011d4:	f04f 0901 	mov.w	r9, #1
 80011d8:	f8cd 9000 	str.w	r9, [sp]
 80011dc:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <servo_init+0x118>)
 80011de:	4a42      	ldr	r2, [pc, #264]	@ (80012e8 <servo_init+0x11c>)
 80011e0:	2102      	movs	r1, #2
 80011e2:	4628      	mov	r0, r5
 80011e4:	f000 f8a0 	bl	8001328 <servo_iq18_base_init>
        servo_iq18_encoder_init(&servo1_g, &htim1, ENC_TPR, SERVO1_ENC_REVERSE);
 80011e8:	2300      	movs	r3, #0
 80011ea:	222c      	movs	r2, #44	@ 0x2c
 80011ec:	493f      	ldr	r1, [pc, #252]	@ (80012ec <servo_init+0x120>)
 80011ee:	4628      	mov	r0, r5
 80011f0:	f000 f8ca 	bl	8001388 <servo_iq18_encoder_init>

        servo_iq18_driver_init(&servo1_g, &htim3, 1, DIR1_1_GPIO_Port, DIR1_1_Pin, 0, 1000);
 80011f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	2200      	movs	r2, #0
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	f04f 0802 	mov.w	r8, #2
 8001202:	f8cd 8000 	str.w	r8, [sp]
 8001206:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <servo_init+0x124>)
 8001208:	464a      	mov	r2, r9
 800120a:	493a      	ldr	r1, [pc, #232]	@ (80012f4 <servo_init+0x128>)
 800120c:	4628      	mov	r0, r5
 800120e:	f000 f8d1 	bl	80013b4 <servo_iq18_driver_init>

        servo_iq18_position_init(&servo1_g, ANG_KP, ANG_KI, ANG_KD, ANG_DT, ANG_KB);
 8001212:	2400      	movs	r4, #0
 8001214:	9401      	str	r4, [sp, #4]
 8001216:	4f38      	ldr	r7, [pc, #224]	@ (80012f8 <servo_init+0x12c>)
 8001218:	9700      	str	r7, [sp, #0]
 800121a:	4623      	mov	r3, r4
 800121c:	4622      	mov	r2, r4
 800121e:	4937      	ldr	r1, [pc, #220]	@ (80012fc <servo_init+0x130>)
 8001220:	4628      	mov	r0, r5
 8001222:	f000 f8f9 	bl	8001418 <servo_iq18_position_init>
        servo_iq18_velocity_init(&servo1_g, VEL_KP, VEL_KI,
 8001226:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8001300 <servo_init+0x134>
 800122a:	f8cd b004 	str.w	fp, [sp, #4]
 800122e:	9700      	str	r7, [sp, #0]
 8001230:	4623      	mov	r3, r4
 8001232:	4a34      	ldr	r2, [pc, #208]	@ (8001304 <servo_init+0x138>)
 8001234:	4934      	ldr	r1, [pc, #208]	@ (8001308 <servo_init+0x13c>)
 8001236:	4628      	mov	r0, r5
 8001238:	f000 f91b 	bl	8001472 <servo_iq18_velocity_init>
                                 VEL_KD, VEL_DT, VEL_KB);
        servo_iq18_current_init(&servo1_g, CUR_LIMIT, CUR_KP, CUR_KI, CUR_KD,
 800123c:	4e33      	ldr	r6, [pc, #204]	@ (800130c <servo_init+0x140>)
 800123e:	9602      	str	r6, [sp, #8]
 8001240:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8001310 <servo_init+0x144>
 8001244:	f8cd a004 	str.w	sl, [sp, #4]
 8001248:	9400      	str	r4, [sp, #0]
 800124a:	4633      	mov	r3, r6
 800124c:	4a31      	ldr	r2, [pc, #196]	@ (8001314 <servo_init+0x148>)
 800124e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001252:	4628      	mov	r0, r5
 8001254:	f000 f93e 	bl	80014d4 <servo_iq18_current_init>
                                CUR_DT, CUR_KB);
        servo_iq18_setPositionTolerance(&servo1_g, ANG_TOLERANCE);
 8001258:	492f      	ldr	r1, [pc, #188]	@ (8001318 <servo_init+0x14c>)
 800125a:	4628      	mov	r0, r5
 800125c:	f000 f984 	bl	8001568 <servo_iq18_setPositionTolerance>
    }

    // Init servo2
    if (SERVO2_ENABLE)
    {
        servo_iq18_base_init(&servo2_g, Triple, MT_VELOCITY, MT_GEAR_RATIO, SERVO2_REVERSE);
 8001260:	4d2e      	ldr	r5, [pc, #184]	@ (800131c <servo_init+0x150>)
 8001262:	f8cd 9000 	str.w	r9, [sp]
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <servo_init+0x118>)
 8001268:	4a1f      	ldr	r2, [pc, #124]	@ (80012e8 <servo_init+0x11c>)
 800126a:	4641      	mov	r1, r8
 800126c:	4628      	mov	r0, r5
 800126e:	f000 f85b 	bl	8001328 <servo_iq18_base_init>
        servo_iq18_encoder_init(&servo2_g, &htim2, ENC_TPR, SERVO2_ENC_REVERSE);
 8001272:	464b      	mov	r3, r9
 8001274:	222c      	movs	r2, #44	@ 0x2c
 8001276:	492a      	ldr	r1, [pc, #168]	@ (8001320 <servo_init+0x154>)
 8001278:	4628      	mov	r0, r5
 800127a:	f000 f885 	bl	8001388 <servo_iq18_encoder_init>

        servo_iq18_driver_init(&servo2_g, &htim3, 2, DIR2_1_GPIO_Port, DIR2_1_Pin, 0, 1000);
 800127e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2200      	movs	r2, #0
 8001286:	9201      	str	r2, [sp, #4]
 8001288:	f8cd 8000 	str.w	r8, [sp]
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <servo_init+0x158>)
 800128e:	4642      	mov	r2, r8
 8001290:	4918      	ldr	r1, [pc, #96]	@ (80012f4 <servo_init+0x128>)
 8001292:	4628      	mov	r0, r5
 8001294:	f000 f88e 	bl	80013b4 <servo_iq18_driver_init>

        servo_iq18_position_init(&servo2_g, ANG_KP, ANG_KI, ANG_KD, ANG_DT, ANG_KB);
 8001298:	9401      	str	r4, [sp, #4]
 800129a:	9700      	str	r7, [sp, #0]
 800129c:	4623      	mov	r3, r4
 800129e:	4622      	mov	r2, r4
 80012a0:	4916      	ldr	r1, [pc, #88]	@ (80012fc <servo_init+0x130>)
 80012a2:	4628      	mov	r0, r5
 80012a4:	f000 f8b8 	bl	8001418 <servo_iq18_position_init>
        servo_iq18_velocity_init(&servo2_g, VEL_KP, VEL_KI,
 80012a8:	f8cd b004 	str.w	fp, [sp, #4]
 80012ac:	9700      	str	r7, [sp, #0]
 80012ae:	4623      	mov	r3, r4
 80012b0:	4a14      	ldr	r2, [pc, #80]	@ (8001304 <servo_init+0x138>)
 80012b2:	4915      	ldr	r1, [pc, #84]	@ (8001308 <servo_init+0x13c>)
 80012b4:	4628      	mov	r0, r5
 80012b6:	f000 f8dc 	bl	8001472 <servo_iq18_velocity_init>
                                 VEL_KD, VEL_DT, VEL_KB);
        servo_iq18_current_init(&servo2_g, CUR_LIMIT, CUR_KP, CUR_KI, CUR_KD,
 80012ba:	9602      	str	r6, [sp, #8]
 80012bc:	f8cd a004 	str.w	sl, [sp, #4]
 80012c0:	9400      	str	r4, [sp, #0]
 80012c2:	4633      	mov	r3, r6
 80012c4:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <servo_init+0x148>)
 80012c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012ca:	4628      	mov	r0, r5
 80012cc:	f000 f902 	bl	80014d4 <servo_iq18_current_init>
                                CUR_DT, CUR_KB);
        servo_iq18_setPositionTolerance(&servo2_g, ANG_TOLERANCE);
 80012d0:	4911      	ldr	r1, [pc, #68]	@ (8001318 <servo_init+0x14c>)
 80012d2:	4628      	mov	r0, r5
 80012d4:	f000 f948 	bl	8001568 <servo_iq18_setPositionTolerance>
    }
 80012d8:	b005      	add	sp, #20
 80012da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012de:	bf00      	nop
 80012e0:	200002d0 	.word	0x200002d0
 80012e4:	41aa6666 	.word	0x41aa6666
 80012e8:	44852000 	.word	0x44852000
 80012ec:	200005a4 	.word	0x200005a4
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	20000514 	.word	0x20000514
 80012f8:	3b83126f 	.word	0x3b83126f
 80012fc:	4064dd2f 	.word	0x4064dd2f
 8001300:	3f126e98 	.word	0x3f126e98
 8001304:	3e428f5c 	.word	0x3e428f5c
 8001308:	3d6a5f85 	.word	0x3d6a5f85
 800130c:	446159cb 	.word	0x446159cb
 8001310:	38e90444 	.word	0x38e90444
 8001314:	40891687 	.word	0x40891687
 8001318:	3ca3d70a 	.word	0x3ca3d70a
 800131c:	200001bc 	.word	0x200001bc
 8001320:	2000055c 	.word	0x2000055c
 8001324:	40010800 	.word	0x40010800

08001328 <servo_iq18_base_init>:
 *      Author: zhmis
 */
#include "servo_iq18.h"

void servo_iq18_base_init(servo_iq18_t *servo, enum loops servoLoops,
		float motorSpeed, float gearRatio, uint8_t reverse) {
 8001328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800132c:	4604      	mov	r4, r0
 800132e:	460d      	mov	r5, r1
 8001330:	4617      	mov	r7, r2
 8001332:	461e      	mov	r6, r3
 8001334:	f89d 8018 	ldrb.w	r8, [sp, #24]
	servo->controllerLoops = servoLoops;
 8001338:	f880 1108 	strb.w	r1, [r0, #264]	@ 0x108
	servo->encoder.gearRatio = _IQ18(gearRatio);
 800133c:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe fff1 	bl	8000328 <__aeabi_fmul>
 8001346:	f7ff f93f 	bl	80005c8 <__aeabi_f2iz>
 800134a:	f8c4 001a 	str.w	r0, [r4, #26]
	if (reverse) {
 800134e:	f1b8 0f00 	cmp.w	r8, #0
 8001352:	d014      	beq.n	800137e <servo_iq18_base_init+0x56>
		servo->reverseFlag = -1;
 8001354:	23ff      	movs	r3, #255	@ 0xff
 8001356:	f884 30f8 	strb.w	r3, [r4, #248]	@ 0xf8
	} else {
		servo->reverseFlag = 1;
	}
	servo->maxShaftSpeed = _IQ18(motorSpeed / gearRatio);
 800135a:	4631      	mov	r1, r6
 800135c:	4638      	mov	r0, r7
 800135e:	f7ff f897 	bl	8000490 <__aeabi_fdiv>
 8001362:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001366:	f7fe ffdf 	bl	8000328 <__aeabi_fmul>
 800136a:	f7ff f92d 	bl	80005c8 <__aeabi_f2iz>
 800136e:	f8c4 010a 	str.w	r0, [r4, #266]	@ 0x10a

	if (servoLoops != Single) {
 8001372:	b115      	cbz	r5, 800137a <servo_iq18_base_init+0x52>
		servo->pid_position.lowerLimit = -servo->maxShaftSpeed;
 8001374:	4243      	negs	r3, r0
 8001376:	65a3      	str	r3, [r4, #88]	@ 0x58
		servo->pid_position.upperLimit = servo->maxShaftSpeed;
 8001378:	6560      	str	r0, [r4, #84]	@ 0x54
	}
}
 800137a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		servo->reverseFlag = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	f884 30f8 	strb.w	r3, [r4, #248]	@ 0xf8
 8001384:	e7e9      	b.n	800135a <servo_iq18_base_init+0x32>
	...

08001388 <servo_iq18_encoder_init>:

void servo_iq18_encoder_init(servo_iq18_t *servo, TIM_HandleTypeDef *htim,
		uint16_t CPR, uint8_t encoder_is_reversed) {
 8001388:	b538      	push	{r3, r4, r5, lr}
 800138a:	4604      	mov	r4, r0
 800138c:	461d      	mov	r5, r3
	servo->encoder.htim = htim;
 800138e:	6001      	str	r1, [r0, #0]
	servo->encoder.countsPerRevolution = CPR;
 8001390:	8082      	strh	r2, [r0, #4]
	servo->encoder.filter = initEMA_iq18(VEL_EMA, 0);
 8001392:	2100      	movs	r1, #0
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <servo_iq18_encoder_init+0x28>)
 8001396:	f7ff fb6a 	bl	8000a6e <initEMA_iq18>
 800139a:	f8c4 0025 	str.w	r0, [r4, #37]	@ 0x25
	if(!encoder_is_reversed){
 800139e:	b91d      	cbnz	r5, 80013a8 <servo_iq18_encoder_init+0x20>
		servo->encoder.reverse_flag = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
	}else{
		servo->encoder.reverse_flag = -1;
	}
}
 80013a6:	bd38      	pop	{r3, r4, r5, pc}
		servo->encoder.reverse_flag = -1;
 80013a8:	23ff      	movs	r3, #255	@ 0xff
 80013aa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80013ae:	e7fa      	b.n	80013a6 <servo_iq18_encoder_init+0x1e>
 80013b0:	3ecccccd 	.word	0x3ecccccd

080013b4 <servo_iq18_driver_init>:

void servo_iq18_driver_init(servo_iq18_t *servo, TIM_HandleTypeDef *htim,
		uint8_t timerChannel, GPIO_TypeDef *dir1_Port, uint32_t dir1_Pin, uint16_t minDuty,
		uint16_t maxDuty) {
	servo->driver.htim = htim;
 80013b4:	f8c0 10e0 	str.w	r1, [r0, #224]	@ 0xe0
	servo->driver.timerChannel = timerChannel;
 80013b8:	f880 20e4 	strb.w	r2, [r0, #228]	@ 0xe4
	servo->driver.dir1_Port = dir1_Port;
 80013bc:	f8c0 30e9 	str.w	r3, [r0, #233]	@ 0xe9
	servo->driver.dir1_Pin = dir1_Pin;
 80013c0:	9b00      	ldr	r3, [sp, #0]
 80013c2:	f8c0 30e5 	str.w	r3, [r0, #229]	@ 0xe5

	servo->driver.minDuty = minDuty;
 80013c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80013ca:	f8a0 30ef 	strh.w	r3, [r0, #239]	@ 0xef
	servo->driver.maxDuty = maxDuty;
 80013ce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80013d2:	f8a0 30ed 	strh.w	r3, [r0, #237]	@ 0xed

	switch (servo->controllerLoops) {
 80013d6:	f890 3108 	ldrb.w	r3, [r0, #264]	@ 0x108
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d009      	beq.n	80013f2 <servo_iq18_driver_init+0x3e>
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d00f      	beq.n	8001402 <servo_iq18_driver_init+0x4e>
 80013e2:	b9ab      	cbnz	r3, 8001410 <servo_iq18_driver_init+0x5c>
	case Single:
		servo->pid_position.lowerLimit = _IQ18(-1);
 80013e4:	f5a3 2380 	sub.w	r3, r3, #262144	@ 0x40000
 80013e8:	6583      	str	r3, [r0, #88]	@ 0x58
		servo->pid_position.upperLimit = _IQ18(1);
 80013ea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80013ee:	6543      	str	r3, [r0, #84]	@ 0x54
		break;
 80013f0:	4770      	bx	lr
	case Double:
		servo->pid_velocity.lowerLimit = _IQ18(-1);
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <servo_iq18_driver_init+0x60>)
 80013f4:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
		servo->pid_velocity.upperLimit = _IQ18(1);
 80013f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80013fc:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
		break;
 8001400:	4770      	bx	lr
	case Triple:
		servo->pid_current.lowerLimit = _IQ18(-1);
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <servo_iq18_driver_init+0x60>)
 8001404:	f8c0 30d0 	str.w	r3, [r0, #208]	@ 0xd0
		servo->pid_current.upperLimit = _IQ18(1);
 8001408:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800140c:	f8c0 30cc 	str.w	r3, [r0, #204]	@ 0xcc
		break;
	default:
		break;
	}
}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	fffc0000 	.word	0xfffc0000

08001418 <servo_iq18_position_init>:

void servo_iq18_position_init(servo_iq18_t *servo, float kp, float ki, float kd,
		float dt, float kb) {
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	4604      	mov	r4, r0
 800141c:	4608      	mov	r0, r1
 800141e:	4616      	mov	r6, r2
 8001420:	461d      	mov	r5, r3
	servo->pid_position.kp = _IQ18(kp);
 8001422:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001426:	f7fe ff7f 	bl	8000328 <__aeabi_fmul>
 800142a:	f7ff f8cd 	bl	80005c8 <__aeabi_f2iz>
 800142e:	6320      	str	r0, [r4, #48]	@ 0x30
	servo->pid_position.ki = _IQ18(ki);
 8001430:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001434:	4630      	mov	r0, r6
 8001436:	f7fe ff77 	bl	8000328 <__aeabi_fmul>
 800143a:	f7ff f8c5 	bl	80005c8 <__aeabi_f2iz>
 800143e:	6360      	str	r0, [r4, #52]	@ 0x34
	servo->pid_position.kd = _IQ18(kd);
 8001440:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001444:	4628      	mov	r0, r5
 8001446:	f7fe ff6f 	bl	8000328 <__aeabi_fmul>
 800144a:	f7ff f8bd 	bl	80005c8 <__aeabi_f2iz>
 800144e:	63a0      	str	r0, [r4, #56]	@ 0x38
	servo->pid_position.dt = _IQ18(dt);
 8001450:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001454:	9804      	ldr	r0, [sp, #16]
 8001456:	f7fe ff67 	bl	8000328 <__aeabi_fmul>
 800145a:	f7ff f8b5 	bl	80005c8 <__aeabi_f2iz>
 800145e:	6520      	str	r0, [r4, #80]	@ 0x50
	servo->pid_position.kb = _IQ18(kb);
 8001460:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001464:	9805      	ldr	r0, [sp, #20]
 8001466:	f7fe ff5f 	bl	8000328 <__aeabi_fmul>
 800146a:	f7ff f8ad 	bl	80005c8 <__aeabi_f2iz>
 800146e:	63e0      	str	r0, [r4, #60]	@ 0x3c
}
 8001470:	bd70      	pop	{r4, r5, r6, pc}

08001472 <servo_iq18_velocity_init>:

void servo_iq18_velocity_init(servo_iq18_t *servo, float kp, float ki, float kd,
		float dt, float kb) {
 8001472:	b570      	push	{r4, r5, r6, lr}
 8001474:	4604      	mov	r4, r0
 8001476:	4608      	mov	r0, r1
 8001478:	4616      	mov	r6, r2
 800147a:	461d      	mov	r5, r3
	servo->pid_velocity.kp = _IQ18(kp);
 800147c:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001480:	f7fe ff52 	bl	8000328 <__aeabi_fmul>
 8001484:	f7ff f8a0 	bl	80005c8 <__aeabi_f2iz>
 8001488:	66e0      	str	r0, [r4, #108]	@ 0x6c
	servo->pid_velocity.ki = _IQ18(ki);
 800148a:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 800148e:	4630      	mov	r0, r6
 8001490:	f7fe ff4a 	bl	8000328 <__aeabi_fmul>
 8001494:	f7ff f898 	bl	80005c8 <__aeabi_f2iz>
 8001498:	6720      	str	r0, [r4, #112]	@ 0x70
	servo->pid_velocity.kd = _IQ18(kd);
 800149a:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 800149e:	4628      	mov	r0, r5
 80014a0:	f7fe ff42 	bl	8000328 <__aeabi_fmul>
 80014a4:	f7ff f890 	bl	80005c8 <__aeabi_f2iz>
 80014a8:	6760      	str	r0, [r4, #116]	@ 0x74
	servo->pid_velocity.dt = _IQ18(dt);
 80014aa:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80014ae:	9804      	ldr	r0, [sp, #16]
 80014b0:	f7fe ff3a 	bl	8000328 <__aeabi_fmul>
 80014b4:	f7ff f888 	bl	80005c8 <__aeabi_f2iz>
 80014b8:	4605      	mov	r5, r0
 80014ba:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
	servo->pid_velocity.kb = _IQ18(kb);
 80014be:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80014c2:	9805      	ldr	r0, [sp, #20]
 80014c4:	f7fe ff30 	bl	8000328 <__aeabi_fmul>
 80014c8:	f7ff f87e 	bl	80005c8 <__aeabi_f2iz>
 80014cc:	67a0      	str	r0, [r4, #120]	@ 0x78
	servo->encoder.dt = _IQ18(dt);
 80014ce:	f8c4 5016 	str.w	r5, [r4, #22]
}
 80014d2:	bd70      	pop	{r4, r5, r6, pc}

080014d4 <servo_iq18_current_init>:

void servo_iq18_current_init(servo_iq18_t *servo, float ratedCurrent, float kp,
		float ki, float kd, float dt, float kb) {
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	4604      	mov	r4, r0
 80014d8:	460d      	mov	r5, r1
 80014da:	461e      	mov	r6, r3
	servo->pid_current.kp = _IQ18(kp);
 80014dc:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80014e0:	4610      	mov	r0, r2
 80014e2:	f7fe ff21 	bl	8000328 <__aeabi_fmul>
 80014e6:	f7ff f86f 	bl	80005c8 <__aeabi_f2iz>
 80014ea:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
	servo->pid_current.ki = _IQ18(ki);
 80014ee:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80014f2:	4630      	mov	r0, r6
 80014f4:	f7fe ff18 	bl	8000328 <__aeabi_fmul>
 80014f8:	f7ff f866 	bl	80005c8 <__aeabi_f2iz>
 80014fc:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac
	servo->pid_current.kd = _IQ18(kd);
 8001500:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001504:	9804      	ldr	r0, [sp, #16]
 8001506:	f7fe ff0f 	bl	8000328 <__aeabi_fmul>
 800150a:	f7ff f85d 	bl	80005c8 <__aeabi_f2iz>
 800150e:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
	servo->pid_current.dt = _IQ18(dt);
 8001512:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001516:	9805      	ldr	r0, [sp, #20]
 8001518:	f7fe ff06 	bl	8000328 <__aeabi_fmul>
 800151c:	f7ff f854 	bl	80005c8 <__aeabi_f2iz>
 8001520:	f8c4 00c8 	str.w	r0, [r4, #200]	@ 0xc8
	servo->pid_current.kb = _IQ18(kb);
 8001524:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001528:	9806      	ldr	r0, [sp, #24]
 800152a:	f7fe fefd 	bl	8000328 <__aeabi_fmul>
 800152e:	f7ff f84b 	bl	80005c8 <__aeabi_f2iz>
 8001532:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
	servo->maxCurrent = _IQ18(ratedCurrent);
 8001536:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 800153a:	4628      	mov	r0, r5
 800153c:	f7fe fef4 	bl	8000328 <__aeabi_fmul>
 8001540:	4606      	mov	r6, r0
 8001542:	f7ff f841 	bl	80005c8 <__aeabi_f2iz>
 8001546:	f8c4 010e 	str.w	r0, [r4, #270]	@ 0x10e
	if (servo->controllerLoops == Triple) {
 800154a:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 800154e:	2b02      	cmp	r3, #2
 8001550:	d000      	beq.n	8001554 <servo_iq18_current_init+0x80>
		servo->pid_velocity.lowerLimit = _IQ18(-ratedCurrent);
		servo->pid_velocity.upperLimit = _IQ18(ratedCurrent);
	}
}
 8001552:	bd70      	pop	{r4, r5, r6, pc}
 8001554:	4605      	mov	r5, r0
		servo->pid_velocity.lowerLimit = _IQ18(-ratedCurrent);
 8001556:	f106 4000 	add.w	r0, r6, #2147483648	@ 0x80000000
 800155a:	f7ff f835 	bl	80005c8 <__aeabi_f2iz>
 800155e:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94
		servo->pid_velocity.upperLimit = _IQ18(ratedCurrent);
 8001562:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 8001566:	e7f4      	b.n	8001552 <servo_iq18_current_init+0x7e>

08001568 <servo_iq18_setPositionTolerance>:

void servo_iq18_setPositionTolerance(servo_iq18_t *servo, float tolerance) {
 8001568:	b510      	push	{r4, lr}
 800156a:	4604      	mov	r4, r0
 800156c:	4608      	mov	r0, r1
	servo->pid_position.toleranceBand = _IQ18(tolerance);
 800156e:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 8001572:	f7fe fed9 	bl	8000328 <__aeabi_fmul>
 8001576:	f7ff f827 	bl	80005c8 <__aeabi_f2iz>
 800157a:	6420      	str	r0, [r4, #64]	@ 0x40
}
 800157c:	bd10      	pop	{r4, pc}

0800157e <servo_iq18_velocityLoop>:
		break;
	}
	}
}

void servo_iq18_velocityLoop(servo_iq18_t *servo) {
 800157e:	b538      	push	{r3, r4, r5, lr}
 8001580:	4604      	mov	r4, r0
	encoder_updatePosition_iq18(&servo->encoder);
 8001582:	f7ff fa99 	bl	8000ab8 <encoder_updatePosition_iq18>
	encoder_updateVelocity_qep_iq18(&servo->encoder);
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff fad2 	bl	8000b30 <encoder_updateVelocity_qep_iq18>
	if (servo->currentMode != Current) {
 800158c:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 8001590:	2b03      	cmp	r3, #3
 8001592:	d114      	bne.n	80015be <servo_iq18_velocityLoop+0x40>
		pid_iq18_calculate(&servo->pid_velocity, servo->velocitySetpoint,
				encoder_getVelocity_iq18(&servo->encoder));
	}

	switch (servo->controllerLoops) {
 8001594:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 8001598:	2b01      	cmp	r3, #1
 800159a:	d01c      	beq.n	80015d6 <servo_iq18_velocityLoop+0x58>
 800159c:	2b02      	cmp	r3, #2
 800159e:	d02d      	beq.n	80015fc <servo_iq18_velocityLoop+0x7e>
 80015a0:	b963      	cbnz	r3, 80015bc <servo_iq18_velocityLoop+0x3e>
	case Single:
		pid_iq18_reset(&servo->pid_velocity);
 80015a2:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80015a6:	f7ff fd47 	bl	8001038 <pid_iq18_reset>
		servo->velocitySetpoint = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
 80015b0:	f884 3100 	strb.w	r3, [r4, #256]	@ 0x100
 80015b4:	f884 3101 	strb.w	r3, [r4, #257]	@ 0x101
 80015b8:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102
			pid_iq18_reset(&servo->pid_velocity);
			servo->velocitySetpoint = 0;
		}
		break;
	}
}
 80015bc:	bd38      	pop	{r3, r4, r5, pc}
		pid_iq18_calculate(&servo->pid_velocity, servo->velocitySetpoint,
 80015be:	f8d4 50ff 	ldr.w	r5, [r4, #255]	@ 0xff
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fad9 	bl	8000b7a <encoder_getVelocity_iq18>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4629      	mov	r1, r5
 80015cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80015d0:	f7ff fd39 	bl	8001046 <pid_iq18_calculate>
 80015d4:	e7de      	b.n	8001594 <servo_iq18_velocityLoop+0x16>
		int32_t duty = (int32_t) (((int64_t) pid_iq18_getOutput(
 80015d6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80015da:	f7ff fd74 	bl	80010c6 <pid_iq18_getOutput>
 80015de:	17c2      	asrs	r2, r0, #31
				&servo->pid_velocity) * servo->driver.maxDuty) >> 18);
 80015e0:	f8b4 30ed 	ldrh.w	r3, [r4, #237]	@ 0xed
 80015e4:	fba0 0103 	umull	r0, r1, r0, r3
 80015e8:	fb03 1102 	mla	r1, r3, r2, r1
 80015ec:	0c80      	lsrs	r0, r0, #18
		pwm_setSpeed(&servo->driver, duty);
 80015ee:	ea40 3181 	orr.w	r1, r0, r1, lsl #14
 80015f2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80015f6:	f7ff fd68 	bl	80010ca <pwm_setSpeed>
		break;
 80015fa:	e7df      	b.n	80015bc <servo_iq18_velocityLoop+0x3e>
		if (servo->currentMode != Current) {
 80015fc:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 8001600:	2b03      	cmp	r3, #3
 8001602:	d006      	beq.n	8001612 <servo_iq18_velocityLoop+0x94>
			servo->currentSetpoint = pid_iq18_getOutput(&servo->pid_velocity);
 8001604:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001608:	f7ff fd5d 	bl	80010c6 <pid_iq18_getOutput>
 800160c:	f8c4 0103 	str.w	r0, [r4, #259]	@ 0x103
 8001610:	e7d4      	b.n	80015bc <servo_iq18_velocityLoop+0x3e>
			pid_iq18_reset(&servo->pid_velocity);
 8001612:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001616:	f7ff fd0f 	bl	8001038 <pid_iq18_reset>
			servo->velocitySetpoint = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
 8001620:	f884 3100 	strb.w	r3, [r4, #256]	@ 0x100
 8001624:	f884 3101 	strb.w	r3, [r4, #257]	@ 0x101
 8001628:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102
}
 800162c:	e7c6      	b.n	80015bc <servo_iq18_velocityLoop+0x3e>

0800162e <servo_iq18_currentLoop>:

void servo_iq18_currentLoop(servo_iq18_t *servo, _iq18 currentFeedback) {
 800162e:	b538      	push	{r3, r4, r5, lr}
 8001630:	4604      	mov	r4, r0
	if (servo->controllerLoops == Triple) {
 8001632:	f890 3108 	ldrb.w	r3, [r0, #264]	@ 0x108
 8001636:	2b02      	cmp	r3, #2
 8001638:	d00c      	beq.n	8001654 <servo_iq18_currentLoop+0x26>
				currentFeedback);
		int32_t duty = (int32_t) (((int64_t) pid_iq18_getOutput(
				&servo->pid_current) * servo->driver.maxDuty) >> 18);
		pwm_setSpeed(&servo->driver, duty);
	} else {
		pid_iq18_reset(&servo->pid_current);
 800163a:	30a4      	adds	r0, #164	@ 0xa4
 800163c:	f7ff fcfc 	bl	8001038 <pid_iq18_reset>
		servo->currentSetpoint = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	f884 3103 	strb.w	r3, [r4, #259]	@ 0x103
 8001646:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 800164a:	f884 3105 	strb.w	r3, [r4, #261]	@ 0x105
 800164e:	f884 3106 	strb.w	r3, [r4, #262]	@ 0x106
	}
}
 8001652:	bd38      	pop	{r3, r4, r5, pc}
		pid_iq18_calculate(&servo->pid_current, servo->currentSetpoint,
 8001654:	f100 05a4 	add.w	r5, r0, #164	@ 0xa4
 8001658:	460a      	mov	r2, r1
 800165a:	f8d0 1103 	ldr.w	r1, [r0, #259]	@ 0x103
 800165e:	4628      	mov	r0, r5
 8001660:	f7ff fcf1 	bl	8001046 <pid_iq18_calculate>
		int32_t duty = (int32_t) (((int64_t) pid_iq18_getOutput(
 8001664:	4628      	mov	r0, r5
 8001666:	f7ff fd2e 	bl	80010c6 <pid_iq18_getOutput>
 800166a:	17c2      	asrs	r2, r0, #31
				&servo->pid_current) * servo->driver.maxDuty) >> 18);
 800166c:	f8b4 30ed 	ldrh.w	r3, [r4, #237]	@ 0xed
 8001670:	fba0 0103 	umull	r0, r1, r0, r3
 8001674:	fb03 1102 	mla	r1, r3, r2, r1
 8001678:	0c80      	lsrs	r0, r0, #18
		pwm_setSpeed(&servo->driver, duty);
 800167a:	ea40 3181 	orr.w	r1, r0, r1, lsl #14
 800167e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8001682:	f7ff fd22 	bl	80010ca <pwm_setSpeed>
 8001686:	e7e4      	b.n	8001652 <servo_iq18_currentLoop+0x24>

08001688 <servo_iq18_controlVelocity>:
	servo->currentMode = Position;
	servo->positionSetpoint = _IQ18(setpoint) * servo->reverseFlag;
}

void servo_iq18_controlVelocity(servo_iq18_t *servo, _iq18 setpoint) {
	if (servo->controllerLoops != Single) {
 8001688:	f890 3108 	ldrb.w	r3, [r0, #264]	@ 0x108
 800168c:	b183      	cbz	r3, 80016b0 <servo_iq18_controlVelocity+0x28>
		servo->currentMode = Velocity;
 800168e:	2302      	movs	r3, #2
 8001690:	f880 3109 	strb.w	r3, [r0, #265]	@ 0x109
		// _iq18 vel_setp_iq18 = (_iq18)setpoint_q9 << 9;
		servo->velocitySetpoint = _IQsat(setpoint * servo->reverseFlag,
 8001694:	f990 20f8 	ldrsb.w	r2, [r0, #248]	@ 0xf8
 8001698:	fb01 f202 	mul.w	r2, r1, r2
 800169c:	f8d0 310a 	ldr.w	r3, [r0, #266]	@ 0x10a
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dc03      	bgt.n	80016ac <servo_iq18_controlVelocity+0x24>
 80016a4:	425b      	negs	r3, r3
 80016a6:	4293      	cmp	r3, r2
 80016a8:	bfb8      	it	lt
 80016aa:	4613      	movlt	r3, r2
 80016ac:	f8c0 30ff 	str.w	r3, [r0, #255]	@ 0xff
				servo->maxShaftSpeed, -servo->maxShaftSpeed);
	}
}
 80016b0:	4770      	bx	lr

080016b2 <servo_iq18_controlCurrent>:

void servo_iq18_controlCurrent(servo_iq18_t *servo, float setpoint) {
 80016b2:	b538      	push	{r3, r4, r5, lr}
	if (servo->controllerLoops == Triple) {
 80016b4:	f890 3108 	ldrb.w	r3, [r0, #264]	@ 0x108
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d000      	beq.n	80016be <servo_iq18_controlCurrent+0xc>
		servo->currentMode = Current;
		servo->currentSetpoint = _IQsat(_IQ18(setpoint * servo->reverseFlag),
				servo->maxCurrent, -servo->maxCurrent);
		// servo->currentSetpoint = _IQ18(setpoint);
	}
}
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
 80016be:	4604      	mov	r4, r0
 80016c0:	460d      	mov	r5, r1
		servo->currentMode = Current;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f880 3109 	strb.w	r3, [r0, #265]	@ 0x109
		servo->currentSetpoint = _IQsat(_IQ18(setpoint * servo->reverseFlag),
 80016c8:	f990 00f8 	ldrsb.w	r0, [r0, #248]	@ 0xf8
 80016cc:	f7fe fdd8 	bl	8000280 <__aeabi_i2f>
 80016d0:	4629      	mov	r1, r5
 80016d2:	f7fe fe29 	bl	8000328 <__aeabi_fmul>
 80016d6:	f04f 4191 	mov.w	r1, #1216348160	@ 0x48800000
 80016da:	f7fe fe25 	bl	8000328 <__aeabi_fmul>
 80016de:	f7fe ff73 	bl	80005c8 <__aeabi_f2iz>
 80016e2:	f8d4 310e 	ldr.w	r3, [r4, #270]	@ 0x10e
 80016e6:	4298      	cmp	r0, r3
 80016e8:	dc03      	bgt.n	80016f2 <servo_iq18_controlCurrent+0x40>
 80016ea:	425b      	negs	r3, r3
 80016ec:	4283      	cmp	r3, r0
 80016ee:	bfb8      	it	lt
 80016f0:	4603      	movlt	r3, r0
 80016f2:	f8c4 3103 	str.w	r3, [r4, #259]	@ 0x103
}
 80016f6:	e7e1      	b.n	80016bc <servo_iq18_controlCurrent+0xa>

080016f8 <servo_iq18_reset>:

void servo_iq18_reset(servo_iq18_t *servo){
 80016f8:	b510      	push	{r4, lr}
 80016fa:	4604      	mov	r4, r0
	encoder_reset_iq18(&servo->encoder);
 80016fc:	f7ff fa2f 	bl	8000b5e <encoder_reset_iq18>
	pid_iq18_reset(&servo->pid_current);
 8001700:	f104 00a4 	add.w	r0, r4, #164	@ 0xa4
 8001704:	f7ff fc98 	bl	8001038 <pid_iq18_reset>
	pid_iq18_reset(&servo->pid_velocity);
 8001708:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800170c:	f7ff fc94 	bl	8001038 <pid_iq18_reset>
	pid_iq18_reset(&servo->pid_position);
 8001710:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8001714:	f7ff fc90 	bl	8001038 <pid_iq18_reset>
 8001718:	bd10      	pop	{r4, pc}
	...

0800171c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800171c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800171e:	480f      	ldr	r0, [pc, #60]	@ (800175c <MX_SPI1_Init+0x40>)
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <MX_SPI1_Init+0x44>)
 8001722:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001724:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001728:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800172a:	2300      	movs	r3, #0
 800172c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800172e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001732:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001734:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001736:	2201      	movs	r2, #1
 8001738:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800173a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001740:	2228      	movs	r2, #40	@ 0x28
 8001742:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001744:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001746:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800174a:	230a      	movs	r3, #10
 800174c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800174e:	f001 feb3 	bl	80034b8 <HAL_SPI_Init>
 8001752:	b900      	cbnz	r0, 8001756 <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001754:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001756:	f7ff fb6f 	bl	8000e38 <Error_Handler>
}
 800175a:	e7fb      	b.n	8001754 <MX_SPI1_Init+0x38>
 800175c:	20000470 	.word	0x20000470
 8001760:	40013000 	.word	0x40013000

08001764 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	2300      	movs	r3, #0
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	9303      	str	r3, [sp, #12]
 800176e:	9304      	str	r3, [sp, #16]
 8001770:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 8001772:	6802      	ldr	r2, [r0, #0]
 8001774:	4b36      	ldr	r3, [pc, #216]	@ (8001850 <HAL_SPI_MspInit+0xec>)
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_SPI_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800177a:	b006      	add	sp, #24
 800177c:	bd70      	pop	{r4, r5, r6, pc}
 800177e:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001780:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800178a:	619a      	str	r2, [r3, #24]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001792:	9200      	str	r2, [sp, #0]
 8001794:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	f042 0204 	orr.w	r2, r2, #4
 800179c:	619a      	str	r2, [r3, #24]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017a8:	23a0      	movs	r3, #160	@ 0xa0
 80017aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	4e27      	ldr	r6, [pc, #156]	@ (8001854 <HAL_SPI_MspInit+0xf0>)
 80017b6:	a902      	add	r1, sp, #8
 80017b8:	4630      	mov	r0, r6
 80017ba:	f001 f8bf 	bl	800293c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017be:	2340      	movs	r3, #64	@ 0x40
 80017c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c2:	2500      	movs	r5, #0
 80017c4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	a902      	add	r1, sp, #8
 80017ca:	4630      	mov	r0, r6
 80017cc:	f001 f8b6 	bl	800293c <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80017d0:	4821      	ldr	r0, [pc, #132]	@ (8001858 <HAL_SPI_MspInit+0xf4>)
 80017d2:	4b22      	ldr	r3, [pc, #136]	@ (800185c <HAL_SPI_MspInit+0xf8>)
 80017d4:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d6:	6045      	str	r5, [r0, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d8:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e2:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017e8:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80017ea:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f0:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80017f2:	f000 ff23 	bl	800263c <HAL_DMA_Init>
 80017f6:	bb20      	cbnz	r0, 8001842 <HAL_SPI_MspInit+0xde>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <HAL_SPI_MspInit+0xf4>)
 80017fa:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80017fc:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80017fe:	4818      	ldr	r0, [pc, #96]	@ (8001860 <HAL_SPI_MspInit+0xfc>)
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_SPI_MspInit+0x100>)
 8001802:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001804:	2310      	movs	r3, #16
 8001806:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800180c:	2280      	movs	r2, #128	@ 0x80
 800180e:	60c2      	str	r2, [r0, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001814:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800181a:	6142      	str	r2, [r0, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800181c:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800181e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001822:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001824:	f000 ff0a 	bl	800263c <HAL_DMA_Init>
 8001828:	b970      	cbnz	r0, 8001848 <HAL_SPI_MspInit+0xe4>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <HAL_SPI_MspInit+0xfc>)
 800182c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800182e:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	4611      	mov	r1, r2
 8001834:	2023      	movs	r0, #35	@ 0x23
 8001836:	f000 feb9 	bl	80025ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800183a:	2023      	movs	r0, #35	@ 0x23
 800183c:	f000 fec6 	bl	80025cc <HAL_NVIC_EnableIRQ>
}
 8001840:	e79b      	b.n	800177a <HAL_SPI_MspInit+0x16>
      Error_Handler();
 8001842:	f7ff faf9 	bl	8000e38 <Error_Handler>
 8001846:	e7d7      	b.n	80017f8 <HAL_SPI_MspInit+0x94>
      Error_Handler();
 8001848:	f7ff faf6 	bl	8000e38 <Error_Handler>
 800184c:	e7ed      	b.n	800182a <HAL_SPI_MspInit+0xc6>
 800184e:	bf00      	nop
 8001850:	40013000 	.word	0x40013000
 8001854:	40010800 	.word	0x40010800
 8001858:	2000042c 	.word	0x2000042c
 800185c:	4002001c 	.word	0x4002001c
 8001860:	200003e8 	.word	0x200003e8
 8001864:	40020030 	.word	0x40020030

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <HAL_MspInit+0x3c>)
 800186c:	699a      	ldr	r2, [r3, #24]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	619a      	str	r2, [r3, #24]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	f002 0201 	and.w	r2, r2, #1
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001884:	61da      	str	r2, [r3, #28]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001890:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <HAL_MspInit+0x40>)
 8001892:	6853      	ldr	r3, [r2, #4]
 8001894:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001898:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800189c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	b002      	add	sp, #8
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010000 	.word	0x40010000

080018ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ac:	e7fe      	b.n	80018ac <NMI_Handler>

080018ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler>

080018b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler>

080018b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler>

080018b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler>

080018b6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b6:	4770      	bx	lr

080018b8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f000 fb1f 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c2:	bd08      	pop	{r3, pc}

080018c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018c6:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <DMA1_Channel1_IRQHandler+0xc>)
 80018c8:	f000 ff96 	bl	80027f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018cc:	bd08      	pop	{r3, pc}
 80018ce:	bf00      	nop
 80018d0:	20000114 	.word	0x20000114

080018d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018d6:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <DMA1_Channel2_IRQHandler+0xc>)
 80018d8:	f000 ff8e 	bl	80027f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018dc:	bd08      	pop	{r3, pc}
 80018de:	bf00      	nop
 80018e0:	2000042c 	.word	0x2000042c

080018e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018e6:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA1_Channel3_IRQHandler+0xc>)
 80018e8:	f000 ff86 	bl	80027f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018ec:	bd08      	pop	{r3, pc}
 80018ee:	bf00      	nop
 80018f0:	200003e8 	.word	0x200003e8

080018f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80018f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018f6:	4802      	ldr	r0, [pc, #8]	@ (8001900 <DMA1_Channel4_IRQHandler+0xc>)
 80018f8:	f000 ff7e 	bl	80027f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80018fc:	bd08      	pop	{r3, pc}
 80018fe:	bf00      	nop
 8001900:	20000630 	.word	0x20000630

08001904 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001904:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001906:	4802      	ldr	r0, [pc, #8]	@ (8001910 <DMA1_Channel5_IRQHandler+0xc>)
 8001908:	f000 ff76 	bl	80027f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800190c:	bd08      	pop	{r3, pc}
 800190e:	bf00      	nop
 8001910:	200005ec 	.word	0x200005ec

08001914 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001916:	4802      	ldr	r0, [pc, #8]	@ (8001920 <TIM3_IRQHandler+0xc>)
 8001918:	f002 f8e6 	bl	8003ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  // sos++;
  // task18khz();

  /* USER CODE END TIM3_IRQn 1 */
}
 800191c:	bd08      	pop	{r3, pc}
 800191e:	bf00      	nop
 8001920:	20000514 	.word	0x20000514

08001924 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001924:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001926:	4802      	ldr	r0, [pc, #8]	@ (8001930 <SPI1_IRQHandler+0xc>)
 8001928:	f001 ff4c 	bl	80037c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800192c:	bd08      	pop	{r3, pc}
 800192e:	bf00      	nop
 8001930:	20000470 	.word	0x20000470

08001934 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001934:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001936:	4802      	ldr	r0, [pc, #8]	@ (8001940 <USART1_IRQHandler+0xc>)
 8001938:	f002 fe2a 	bl	8004590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800193c:	bd08      	pop	{r3, pc}
 800193e:	bf00      	nop
 8001940:	20000674 	.word	0x20000674

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a0c      	ldr	r2, [pc, #48]	@ (800197c <_sbrk+0x38>)
 800194a:	490d      	ldr	r1, [pc, #52]	@ (8001980 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	480d      	ldr	r0, [pc, #52]	@ (8001984 <_sbrk+0x40>)
 800194e:	6800      	ldr	r0, [r0, #0]
 8001950:	b140      	cbz	r0, 8001964 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	480c      	ldr	r0, [pc, #48]	@ (8001984 <_sbrk+0x40>)
 8001954:	6800      	ldr	r0, [r0, #0]
 8001956:	4403      	add	r3, r0
 8001958:	1a52      	subs	r2, r2, r1
 800195a:	4293      	cmp	r3, r2
 800195c:	d806      	bhi.n	800196c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800195e:	4a09      	ldr	r2, [pc, #36]	@ (8001984 <_sbrk+0x40>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001962:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001964:	4807      	ldr	r0, [pc, #28]	@ (8001984 <_sbrk+0x40>)
 8001966:	4c08      	ldr	r4, [pc, #32]	@ (8001988 <_sbrk+0x44>)
 8001968:	6004      	str	r4, [r0, #0]
 800196a:	e7f2      	b.n	8001952 <_sbrk+0xe>
    errno = ENOMEM;
 800196c:	f003 f896 	bl	8004a9c <__errno>
 8001970:	230c      	movs	r3, #12
 8001972:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	e7f3      	b.n	8001962 <_sbrk+0x1e>
 800197a:	bf00      	nop
 800197c:	20005000 	.word	0x20005000
 8001980:	00000400 	.word	0x00000400
 8001984:	200004c8 	.word	0x200004c8
 8001988:	20000808 	.word	0x20000808

0800198c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800198c:	4770      	bx	lr
	...

08001990 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001990:	b500      	push	{lr}
 8001992:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001994:	2224      	movs	r2, #36	@ 0x24
 8001996:	2100      	movs	r1, #0
 8001998:	a803      	add	r0, sp, #12
 800199a:	f003 f867 	bl	8004a6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199e:	2300      	movs	r3, #0
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019a4:	4813      	ldr	r0, [pc, #76]	@ (80019f4 <MX_TIM1_Init+0x64>)
 80019a6:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <MX_TIM1_Init+0x68>)
 80019a8:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 80019aa:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ac:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 80019ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019b2:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b4:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80019b6:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ba:	2303      	movs	r3, #3
 80019bc:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019be:	2201      	movs	r2, #1
 80019c0:	9205      	str	r2, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
 80019c2:	230a      	movs	r3, #10
 80019c4:	9307      	str	r3, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019c6:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 10;
 80019c8:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80019ca:	a903      	add	r1, sp, #12
 80019cc:	f002 f9d6 	bl	8003d7c <HAL_TIM_Encoder_Init>
 80019d0:	b950      	cbnz	r0, 80019e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d6:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019d8:	a901      	add	r1, sp, #4
 80019da:	4806      	ldr	r0, [pc, #24]	@ (80019f4 <MX_TIM1_Init+0x64>)
 80019dc:	f002 fc3c 	bl	8004258 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	b928      	cbnz	r0, 80019ee <MX_TIM1_Init+0x5e>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019e2:	b00d      	add	sp, #52	@ 0x34
 80019e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80019e8:	f7ff fa26 	bl	8000e38 <Error_Handler>
 80019ec:	e7f1      	b.n	80019d2 <MX_TIM1_Init+0x42>
    Error_Handler();
 80019ee:	f7ff fa23 	bl	8000e38 <Error_Handler>
}
 80019f2:	e7f6      	b.n	80019e2 <MX_TIM1_Init+0x52>
 80019f4:	200005a4 	.word	0x200005a4
 80019f8:	40012c00 	.word	0x40012c00

080019fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019fc:	b500      	push	{lr}
 80019fe:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a00:	2224      	movs	r2, #36	@ 0x24
 8001a02:	2100      	movs	r1, #0
 8001a04:	a803      	add	r0, sp, #12
 8001a06:	f003 f831 	bl	8004a6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a10:	4812      	ldr	r0, [pc, #72]	@ (8001a5c <MX_TIM2_Init+0x60>)
 8001a12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a16:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001a18:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8001a1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a20:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a26:	2303      	movs	r3, #3
 8001a28:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2e:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a30:	a903      	add	r1, sp, #12
 8001a32:	f002 f9a3 	bl	8003d7c <HAL_TIM_Encoder_Init>
 8001a36:	b950      	cbnz	r0, 8001a4e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a3e:	a901      	add	r1, sp, #4
 8001a40:	4806      	ldr	r0, [pc, #24]	@ (8001a5c <MX_TIM2_Init+0x60>)
 8001a42:	f002 fc09 	bl	8004258 <HAL_TIMEx_MasterConfigSynchronization>
 8001a46:	b928      	cbnz	r0, 8001a54 <MX_TIM2_Init+0x58>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a48:	b00d      	add	sp, #52	@ 0x34
 8001a4a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001a4e:	f7ff f9f3 	bl	8000e38 <Error_Handler>
 8001a52:	e7f1      	b.n	8001a38 <MX_TIM2_Init+0x3c>
    Error_Handler();
 8001a54:	f7ff f9f0 	bl	8000e38 <Error_Handler>
}
 8001a58:	e7f6      	b.n	8001a48 <MX_TIM2_Init+0x4c>
 8001a5a:	bf00      	nop
 8001a5c:	2000055c 	.word	0x2000055c

08001a60 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a60:	b500      	push	{lr}
 8001a62:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a64:	2300      	movs	r3, #0
 8001a66:	9304      	str	r3, [sp, #16]
 8001a68:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a72:	481b      	ldr	r0, [pc, #108]	@ (8001ae0 <MX_TIM4_Init+0x80>)
 8001a74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <MX_TIM4_Init+0x84>)
 8001a76:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8001a78:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8001a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a80:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a86:	f002 f94d 	bl	8003d24 <HAL_TIM_IC_Init>
 8001a8a:	b9e0      	cbnz	r0, 8001ac6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a92:	a904      	add	r1, sp, #16
 8001a94:	4812      	ldr	r0, [pc, #72]	@ (8001ae0 <MX_TIM4_Init+0x80>)
 8001a96:	f002 fbdf 	bl	8004258 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	b9b8      	cbnz	r0, 8001acc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aa4:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 0;
 8001aa6:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	4669      	mov	r1, sp
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <MX_TIM4_Init+0x80>)
 8001aae:	f002 fa89 	bl	8003fc4 <HAL_TIM_IC_ConfigChannel>
 8001ab2:	b970      	cbnz	r0, 8001ad2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ab4:	220c      	movs	r2, #12
 8001ab6:	4669      	mov	r1, sp
 8001ab8:	4809      	ldr	r0, [pc, #36]	@ (8001ae0 <MX_TIM4_Init+0x80>)
 8001aba:	f002 fa83 	bl	8003fc4 <HAL_TIM_IC_ConfigChannel>
 8001abe:	b958      	cbnz	r0, 8001ad8 <MX_TIM4_Init+0x78>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ac0:	b007      	add	sp, #28
 8001ac2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001ac6:	f7ff f9b7 	bl	8000e38 <Error_Handler>
 8001aca:	e7df      	b.n	8001a8c <MX_TIM4_Init+0x2c>
    Error_Handler();
 8001acc:	f7ff f9b4 	bl	8000e38 <Error_Handler>
 8001ad0:	e7e4      	b.n	8001a9c <MX_TIM4_Init+0x3c>
    Error_Handler();
 8001ad2:	f7ff f9b1 	bl	8000e38 <Error_Handler>
 8001ad6:	e7ed      	b.n	8001ab4 <MX_TIM4_Init+0x54>
    Error_Handler();
 8001ad8:	f7ff f9ae 	bl	8000e38 <Error_Handler>
}
 8001adc:	e7f0      	b.n	8001ac0 <MX_TIM4_Init+0x60>
 8001ade:	bf00      	nop
 8001ae0:	200004cc 	.word	0x200004cc
 8001ae4:	40000800 	.word	0x40000800

08001ae8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ae8:	b500      	push	{lr}
 8001aea:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	2300      	movs	r3, #0
 8001aee:	9306      	str	r3, [sp, #24]
 8001af0:	9307      	str	r3, [sp, #28]
 8001af2:	9308      	str	r3, [sp, #32]
 8001af4:	9309      	str	r3, [sp, #36]	@ 0x24
  if(tim_encoderHandle->Instance==TIM1)
 8001af6:	6803      	ldr	r3, [r0, #0]
 8001af8:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d005      	beq.n	8001b0a <HAL_TIM_Encoder_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM2)
 8001afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b02:	d01d      	beq.n	8001b40 <HAL_TIM_Encoder_MspInit+0x58>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b04:	b00b      	add	sp, #44	@ 0x2c
 8001b06:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b12:	619a      	str	r2, [r3, #24]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	f042 0204 	orr.w	r2, r2, #4
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	9302      	str	r3, [sp, #8]
 8001b2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 8001b30:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b34:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	a906      	add	r1, sp, #24
 8001b38:	481f      	ldr	r0, [pc, #124]	@ (8001bb8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001b3a:	f000 feff 	bl	800293c <HAL_GPIO_Init>
 8001b3e:	e7e1      	b.n	8001b04 <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b40:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001b44:	69da      	ldr	r2, [r3, #28]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	61da      	str	r2, [r3, #28]
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	f002 0201 	and.w	r2, r2, #1
 8001b52:	9203      	str	r2, [sp, #12]
 8001b54:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	f042 0204 	orr.w	r2, r2, #4
 8001b5c:	619a      	str	r2, [r3, #24]
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	f002 0204 	and.w	r2, r2, #4
 8001b64:	9204      	str	r2, [sp, #16]
 8001b66:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
 8001b6e:	619a      	str	r2, [r3, #24]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	9305      	str	r3, [sp, #20]
 8001b78:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin;
 8001b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b7e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(ENC2_CH1_GPIO_Port, &GPIO_InitStruct);
 8001b80:	a906      	add	r1, sp, #24
 8001b82:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001b84:	f000 feda 	bl	800293c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC2_CH2_Pin;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(ENC2_CH2_GPIO_Port, &GPIO_InitStruct);
 8001b92:	a906      	add	r1, sp, #24
 8001b94:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b96:	f000 fed1 	bl	800293c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001b9c:	6853      	ldr	r3, [r2, #4]
 8001b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ba2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001baa:	6053      	str	r3, [r2, #4]
}
 8001bac:	e7aa      	b.n	8001b04 <HAL_TIM_Encoder_MspInit+0x1c>
 8001bae:	bf00      	nop
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	40010000 	.word	0x40010000

08001bc4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8001bc4:	6802      	ldr	r2, [r0, #0]
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d000      	beq.n	8001bce <HAL_TIM_PWM_MspInit+0xa>
 8001bcc:	4770      	bx	lr
{
 8001bce:	b500      	push	{lr}
 8001bd0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd2:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001bd6:	69da      	ldr	r2, [r3, #28]
 8001bd8:	f042 0202 	orr.w	r2, r2, #2
 8001bdc:	61da      	str	r2, [r3, #28]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	9b01      	ldr	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	4611      	mov	r1, r2
 8001bec:	201d      	movs	r0, #29
 8001bee:	f000 fcdd 	bl	80025ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bf2:	201d      	movs	r0, #29
 8001bf4:	f000 fcea 	bl	80025cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bf8:	b003      	add	sp, #12
 8001bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bfe:	bf00      	nop
 8001c00:	40000400 	.word	0x40000400

08001c04 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001c04:	b500      	push	{lr}
 8001c06:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	9303      	str	r3, [sp, #12]
 8001c0e:	9304      	str	r3, [sp, #16]
 8001c10:	9305      	str	r3, [sp, #20]
  if(tim_icHandle->Instance==TIM4)
 8001c12:	6802      	ldr	r2, [r0, #0]
 8001c14:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_TIM_IC_MspInit+0x54>)
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d002      	beq.n	8001c20 <HAL_TIM_IC_MspInit+0x1c>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c1a:	b007      	add	sp, #28
 8001c1c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c20:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	f042 0204 	orr.w	r2, r2, #4
 8001c2a:	61da      	str	r2, [r3, #28]
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	f002 0204 	and.w	r2, r2, #4
 8001c32:	9200      	str	r2, [sp, #0]
 8001c34:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	f042 0208 	orr.w	r2, r2, #8
 8001c3c:	619a      	str	r2, [r3, #24]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENC1_CH1_F_Pin|ENC2_CH1_F_Pin;
 8001c48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c4c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	a902      	add	r1, sp, #8
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <HAL_TIM_IC_MspInit+0x58>)
 8001c52:	f000 fe73 	bl	800293c <HAL_GPIO_Init>
}
 8001c56:	e7e0      	b.n	8001c1a <HAL_TIM_IC_MspInit+0x16>
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40010c00 	.word	0x40010c00

08001c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c60:	b500      	push	{lr}
 8001c62:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	2300      	movs	r3, #0
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	9303      	str	r3, [sp, #12]
 8001c6a:	9304      	str	r3, [sp, #16]
 8001c6c:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_TIM_MspPostInit+0x54>)
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d002      	beq.n	8001c7c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c76:	b007      	add	sp, #28
 8001c78:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7c:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	f042 0210 	orr.w	r2, r2, #16
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8001c92:	23c0      	movs	r3, #192	@ 0xc0
 8001c94:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	a902      	add	r1, sp, #8
 8001c9e:	4806      	ldr	r0, [pc, #24]	@ (8001cb8 <HAL_TIM_MspPostInit+0x58>)
 8001ca0:	f000 fe4c 	bl	800293c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001ca4:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <HAL_TIM_MspPostInit+0x5c>)
 8001ca6:	6853      	ldr	r3, [r2, #4]
 8001ca8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001cac:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001cb0:	6053      	str	r3, [r2, #4]
}
 8001cb2:	e7e0      	b.n	8001c76 <HAL_TIM_MspPostInit+0x16>
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40011000 	.word	0x40011000
 8001cbc:	40010000 	.word	0x40010000

08001cc0 <MX_TIM3_Init>:
{
 8001cc0:	b500      	push	{lr}
 8001cc2:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9308      	str	r3, [sp, #32]
 8001cc8:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	9303      	str	r3, [sp, #12]
 8001cd0:	9304      	str	r3, [sp, #16]
 8001cd2:	9305      	str	r3, [sp, #20]
 8001cd4:	9306      	str	r3, [sp, #24]
 8001cd6:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8001cd8:	481d      	ldr	r0, [pc, #116]	@ (8001d50 <MX_TIM3_Init+0x90>)
 8001cda:	4a1e      	ldr	r2, [pc, #120]	@ (8001d54 <MX_TIM3_Init+0x94>)
 8001cdc:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4-1;
 8001cde:	2203      	movs	r2, #3
 8001ce0:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000-1;
 8001ce4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ce8:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cea:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cee:	f001 ffed 	bl	8003ccc <HAL_TIM_PWM_Init>
 8001cf2:	bb00      	cbnz	r0, 8001d36 <MX_TIM3_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cfc:	a908      	add	r1, sp, #32
 8001cfe:	4814      	ldr	r0, [pc, #80]	@ (8001d50 <MX_TIM3_Init+0x90>)
 8001d00:	f002 faaa 	bl	8004258 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	b9d0      	cbnz	r0, 8001d3c <MX_TIM3_Init+0x7c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d06:	2360      	movs	r3, #96	@ 0x60
 8001d08:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0e:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d10:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d12:	a901      	add	r1, sp, #4
 8001d14:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <MX_TIM3_Init+0x90>)
 8001d16:	f002 f8bb 	bl	8003e90 <HAL_TIM_PWM_ConfigChannel>
 8001d1a:	b990      	cbnz	r0, 8001d42 <MX_TIM3_Init+0x82>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	eb0d 0102 	add.w	r1, sp, r2
 8001d22:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <MX_TIM3_Init+0x90>)
 8001d24:	f002 f8b4 	bl	8003e90 <HAL_TIM_PWM_ConfigChannel>
 8001d28:	b970      	cbnz	r0, 8001d48 <MX_TIM3_Init+0x88>
  HAL_TIM_MspPostInit(&htim3);
 8001d2a:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <MX_TIM3_Init+0x90>)
 8001d2c:	f7ff ff98 	bl	8001c60 <HAL_TIM_MspPostInit>
}
 8001d30:	b00b      	add	sp, #44	@ 0x2c
 8001d32:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d36:	f7ff f87f 	bl	8000e38 <Error_Handler>
 8001d3a:	e7db      	b.n	8001cf4 <MX_TIM3_Init+0x34>
    Error_Handler();
 8001d3c:	f7ff f87c 	bl	8000e38 <Error_Handler>
 8001d40:	e7e1      	b.n	8001d06 <MX_TIM3_Init+0x46>
    Error_Handler();
 8001d42:	f7ff f879 	bl	8000e38 <Error_Handler>
 8001d46:	e7e9      	b.n	8001d1c <MX_TIM3_Init+0x5c>
    Error_Handler();
 8001d48:	f7ff f876 	bl	8000e38 <Error_Handler>
 8001d4c:	e7ed      	b.n	8001d2a <MX_TIM3_Init+0x6a>
 8001d4e:	bf00      	nop
 8001d50:	20000514 	.word	0x20000514
 8001d54:	40000400 	.word	0x40000400

08001d58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d58:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d5a:	480a      	ldr	r0, [pc, #40]	@ (8001d84 <MX_USART1_UART_Init+0x2c>)
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <MX_USART1_UART_Init+0x30>)
 8001d5e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001d60:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001d64:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d66:	2300      	movs	r3, #0
 8001d68:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d6a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d6c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d6e:	220c      	movs	r2, #12
 8001d70:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d76:	f002 fb4f 	bl	8004418 <HAL_UART_Init>
 8001d7a:	b900      	cbnz	r0, 8001d7e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d7c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d7e:	f7ff f85b 	bl	8000e38 <Error_Handler>
}
 8001d82:	e7fb      	b.n	8001d7c <MX_USART1_UART_Init+0x24>
 8001d84:	20000674 	.word	0x20000674
 8001d88:	40013800 	.word	0x40013800

08001d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	2300      	movs	r3, #0
 8001d92:	9302      	str	r3, [sp, #8]
 8001d94:	9303      	str	r3, [sp, #12]
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8001d9a:	6802      	ldr	r2, [r0, #0]
 8001d9c:	4b35      	ldr	r3, [pc, #212]	@ (8001e74 <HAL_UART_MspInit+0xe8>)
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001da2:	b007      	add	sp, #28
 8001da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da6:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001da8:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001dba:	9200      	str	r2, [sp, #0]
 8001dbc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	f042 0208 	orr.w	r2, r2, #8
 8001dc4:	619a      	str	r2, [r3, #24]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dd0:	2340      	movs	r3, #64	@ 0x40
 8001dd2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	4f26      	ldr	r7, [pc, #152]	@ (8001e78 <HAL_UART_MspInit+0xec>)
 8001dde:	a902      	add	r1, sp, #8
 8001de0:	4638      	mov	r0, r7
 8001de2:	f000 fdab 	bl	800293c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001de6:	2680      	movs	r6, #128	@ 0x80
 8001de8:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dea:	2500      	movs	r5, #0
 8001dec:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	a902      	add	r1, sp, #8
 8001df2:	4638      	mov	r0, r7
 8001df4:	f000 fda2 	bl	800293c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001df8:	4a20      	ldr	r2, [pc, #128]	@ (8001e7c <HAL_UART_MspInit+0xf0>)
 8001dfa:	6853      	ldr	r3, [r2, #4]
 8001dfc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6053      	str	r3, [r2, #4]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001e06:	481e      	ldr	r0, [pc, #120]	@ (8001e80 <HAL_UART_MspInit+0xf4>)
 8001e08:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <HAL_UART_MspInit+0xf8>)
 8001e0a:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e10:	6085      	str	r5, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e12:	60c6      	str	r6, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e14:	6105      	str	r5, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e16:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e18:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e1e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e20:	f000 fc0c 	bl	800263c <HAL_DMA_Init>
 8001e24:	b9f8      	cbnz	r0, 8001e66 <HAL_UART_MspInit+0xda>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e26:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <HAL_UART_MspInit+0xf4>)
 8001e28:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001e2a:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e2c:	4816      	ldr	r0, [pc, #88]	@ (8001e88 <HAL_UART_MspInit+0xfc>)
 8001e2e:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e30:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e32:	2300      	movs	r3, #0
 8001e34:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e36:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e38:	2280      	movs	r2, #128	@ 0x80
 8001e3a:	60c2      	str	r2, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3c:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3e:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e40:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e46:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e48:	f000 fbf8 	bl	800263c <HAL_DMA_Init>
 8001e4c:	b970      	cbnz	r0, 8001e6c <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_UART_MspInit+0xfc>)
 8001e50:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001e52:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	4611      	mov	r1, r2
 8001e58:	2025      	movs	r0, #37	@ 0x25
 8001e5a:	f000 fba7 	bl	80025ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e5e:	2025      	movs	r0, #37	@ 0x25
 8001e60:	f000 fbb4 	bl	80025cc <HAL_NVIC_EnableIRQ>
}
 8001e64:	e79d      	b.n	8001da2 <HAL_UART_MspInit+0x16>
      Error_Handler();
 8001e66:	f7fe ffe7 	bl	8000e38 <Error_Handler>
 8001e6a:	e7dc      	b.n	8001e26 <HAL_UART_MspInit+0x9a>
      Error_Handler();
 8001e6c:	f7fe ffe4 	bl	8000e38 <Error_Handler>
 8001e70:	e7ed      	b.n	8001e4e <HAL_UART_MspInit+0xc2>
 8001e72:	bf00      	nop
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	20000630 	.word	0x20000630
 8001e84:	40020044 	.word	0x40020044
 8001e88:	200005ec 	.word	0x200005ec
 8001e8c:	40020058 	.word	0x40020058

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <HAL_InitTick+0x40>)
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed4 <HAL_InitTick+0x44>)
 8001ea2:	6810      	ldr	r0, [r2, #0]
 8001ea4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ea8:	f000 fb9e 	bl	80025e8 <HAL_SYSTICK_Config>
 8001eac:	b968      	cbnz	r0, 8001eca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	2c0f      	cmp	r4, #15
 8001eb0:	d901      	bls.n	8001eb6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	e00a      	b.n	8001ecc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4621      	mov	r1, r4
 8001eba:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebe:	f000 fb75 	bl	80025ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_InitTick+0x48>)
 8001ec4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001eca:	2001      	movs	r0, #1
}
 8001ecc:	bd10      	pop	{r4, pc}
 8001ece:	bf00      	nop
 8001ed0:	200000a0 	.word	0x200000a0
 8001ed4:	2000009c 	.word	0x2000009c
 8001ed8:	200000a4 	.word	0x200000a4

08001edc <HAL_Init>:
{
 8001edc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ede:	4a07      	ldr	r2, [pc, #28]	@ (8001efc <HAL_Init+0x20>)
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 fb4d 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f7ff ffce 	bl	8001e90 <HAL_InitTick>
  HAL_MspInit();
 8001ef4:	f7ff fcb8 	bl	8001868 <HAL_MspInit>
}
 8001ef8:	2000      	movs	r0, #0
 8001efa:	bd08      	pop	{r3, pc}
 8001efc:	40022000 	.word	0x40022000

08001f00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f00:	4a03      	ldr	r2, [pc, #12]	@ (8001f10 <HAL_IncTick+0x10>)
 8001f02:	6811      	ldr	r1, [r2, #0]
 8001f04:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <HAL_IncTick+0x14>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	440b      	add	r3, r1
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200006bc 	.word	0x200006bc
 8001f14:	200000a0 	.word	0x200000a0

08001f18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f18:	4b01      	ldr	r3, [pc, #4]	@ (8001f20 <HAL_GetTick+0x8>)
 8001f1a:	6818      	ldr	r0, [r3, #0]
}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200006bc 	.word	0x200006bc

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff fff6 	bl	8001f18 <HAL_GetTick>
 8001f2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001f32:	d002      	beq.n	8001f3a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f34:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <HAL_Delay+0x24>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3a:	f7ff ffed 	bl	8001f18 <HAL_GetTick>
 8001f3e:	1b40      	subs	r0, r0, r5
 8001f40:	42a0      	cmp	r0, r4
 8001f42:	d3fa      	bcc.n	8001f3a <HAL_Delay+0x16>
  {
  }
}
 8001f44:	bd38      	pop	{r3, r4, r5, pc}
 8001f46:	bf00      	nop
 8001f48:	200000a0 	.word	0x200000a0

08001f4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f4e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f52:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001f56:	d11e      	bne.n	8001f96 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f5e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	6892      	ldr	r2, [r2, #8]
 8001f64:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001f68:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001f6c:	d003      	beq.n	8001f76 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fc6c 	bl	800084c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f74:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f76:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f78:	2a00      	cmp	r2, #0
 8001f7a:	d1f8      	bne.n	8001f6e <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f86:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8001f8a:	d1f0      	bne.n	8001f6e <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f94:	e7eb      	b.n	8001f6e <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4798      	blx	r3
}
 8001f9c:	e7ea      	b.n	8001f74 <ADC_DMAConvCplt+0x28>

08001f9e <HAL_ADC_ConvHalfCpltCallback>:
}
 8001f9e:	4770      	bx	lr

08001fa0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fa0:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fa2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001fa4:	f7ff fffb 	bl	8001f9e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fa8:	bd08      	pop	{r3, pc}

08001faa <HAL_ADC_ErrorCallback>:
}
 8001faa:	4770      	bx	lr

08001fac <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fac:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fae:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fb0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fb6:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fb8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fc0:	f7ff fff3 	bl	8001faa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc4:	bd08      	pop	{r3, pc}
	...

08001fc8 <HAL_ADC_ConfigChannel>:
{ 
 8001fc8:	b430      	push	{r4, r5}
 8001fca:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001fcc:	2200      	movs	r2, #0
 8001fce:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001fd0:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8001fd4:	2a01      	cmp	r2, #1
 8001fd6:	f000 808f 	beq.w	80020f8 <HAL_ADC_ConfigChannel+0x130>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8001fe2:	684a      	ldr	r2, [r1, #4]
 8001fe4:	2a06      	cmp	r2, #6
 8001fe6:	d82d      	bhi.n	8002044 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fe8:	6804      	ldr	r4, [r0, #0]
 8001fea:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001fec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ff0:	3a05      	subs	r2, #5
 8001ff2:	f04f 0c1f 	mov.w	ip, #31
 8001ff6:	fa0c fc02 	lsl.w	ip, ip, r2
 8001ffa:	ea20 000c 	bic.w	r0, r0, ip
 8001ffe:	680d      	ldr	r5, [r1, #0]
 8002000:	fa05 f202 	lsl.w	r2, r5, r2
 8002004:	4302      	orrs	r2, r0
 8002006:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002008:	680a      	ldr	r2, [r1, #0]
 800200a:	2a09      	cmp	r2, #9
 800200c:	d938      	bls.n	8002080 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800200e:	681c      	ldr	r4, [r3, #0]
 8002010:	68e0      	ldr	r0, [r4, #12]
 8002012:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002016:	3a1e      	subs	r2, #30
 8002018:	f04f 0c07 	mov.w	ip, #7
 800201c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002020:	ea20 000c 	bic.w	r0, r0, ip
 8002024:	688d      	ldr	r5, [r1, #8]
 8002026:	fa05 f202 	lsl.w	r2, r5, r2
 800202a:	4302      	orrs	r2, r0
 800202c:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800202e:	680a      	ldr	r2, [r1, #0]
 8002030:	3a10      	subs	r2, #16
 8002032:	2a01      	cmp	r2, #1
 8002034:	d934      	bls.n	80020a0 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002036:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800203e:	b002      	add	sp, #8
 8002040:	bc30      	pop	{r4, r5}
 8002042:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002044:	2a0c      	cmp	r2, #12
 8002046:	d80d      	bhi.n	8002064 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002048:	6805      	ldr	r5, [r0, #0]
 800204a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800204c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002050:	3a23      	subs	r2, #35	@ 0x23
 8002052:	241f      	movs	r4, #31
 8002054:	4094      	lsls	r4, r2
 8002056:	ea20 0004 	bic.w	r0, r0, r4
 800205a:	680c      	ldr	r4, [r1, #0]
 800205c:	4094      	lsls	r4, r2
 800205e:	4320      	orrs	r0, r4
 8002060:	6328      	str	r0, [r5, #48]	@ 0x30
 8002062:	e7d1      	b.n	8002008 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002064:	6805      	ldr	r5, [r0, #0]
 8002066:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002068:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800206c:	3a41      	subs	r2, #65	@ 0x41
 800206e:	241f      	movs	r4, #31
 8002070:	4094      	lsls	r4, r2
 8002072:	ea20 0004 	bic.w	r0, r0, r4
 8002076:	680c      	ldr	r4, [r1, #0]
 8002078:	4094      	lsls	r4, r2
 800207a:	4320      	orrs	r0, r4
 800207c:	62e8      	str	r0, [r5, #44]	@ 0x2c
 800207e:	e7c3      	b.n	8002008 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002080:	681c      	ldr	r4, [r3, #0]
 8002082:	6920      	ldr	r0, [r4, #16]
 8002084:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002088:	f04f 0c07 	mov.w	ip, #7
 800208c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002090:	ea20 000c 	bic.w	r0, r0, ip
 8002094:	688d      	ldr	r5, [r1, #8]
 8002096:	fa05 f202 	lsl.w	r2, r5, r2
 800209a:	4302      	orrs	r2, r0
 800209c:	6122      	str	r2, [r4, #16]
 800209e:	e7c6      	b.n	800202e <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4816      	ldr	r0, [pc, #88]	@ (80020fc <HAL_ADC_ConfigChannel+0x134>)
 80020a4:	4282      	cmp	r2, r0
 80020a6:	d005      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80020b0:	2001      	movs	r0, #1
 80020b2:	e7c1      	b.n	8002038 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020b4:	6890      	ldr	r0, [r2, #8]
 80020b6:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 80020ba:	d11b      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020bc:	6890      	ldr	r0, [r2, #8]
 80020be:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80020c2:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c4:	680a      	ldr	r2, [r1, #0]
 80020c6:	2a10      	cmp	r2, #16
 80020c8:	d001      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ca:	2000      	movs	r0, #0
 80020cc:	e7b4      	b.n	8002038 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <HAL_ADC_ConfigChannel+0x138>)
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	490c      	ldr	r1, [pc, #48]	@ (8002104 <HAL_ADC_ConfigChannel+0x13c>)
 80020d4:	fba1 1202 	umull	r1, r2, r1, r2
 80020d8:	0c92      	lsrs	r2, r2, #18
 80020da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80020de:	0052      	lsls	r2, r2, #1
 80020e0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80020e2:	e002      	b.n	80020ea <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 80020e4:	9a01      	ldr	r2, [sp, #4]
 80020e6:	3a01      	subs	r2, #1
 80020e8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80020ea:	9a01      	ldr	r2, [sp, #4]
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d1f9      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f0:	2000      	movs	r0, #0
 80020f2:	e7a1      	b.n	8002038 <HAL_ADC_ConfigChannel+0x70>
 80020f4:	2000      	movs	r0, #0
 80020f6:	e79f      	b.n	8002038 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80020f8:	2002      	movs	r0, #2
 80020fa:	e7a0      	b.n	800203e <HAL_ADC_ConfigChannel+0x76>
 80020fc:	40012400 	.word	0x40012400
 8002100:	2000009c 	.word	0x2000009c
 8002104:	431bde83 	.word	0x431bde83

08002108 <ADC_Enable>:
{
 8002108:	b530      	push	{r4, r5, lr}
 800210a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002110:	6803      	ldr	r3, [r0, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	f012 0f01 	tst.w	r2, #1
 8002118:	d133      	bne.n	8002182 <ADC_Enable+0x7a>
 800211a:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <ADC_Enable+0x80>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a18      	ldr	r2, [pc, #96]	@ (800218c <ADC_Enable+0x84>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0c9b      	lsrs	r3, r3, #18
 8002130:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002132:	e002      	b.n	800213a <ADC_Enable+0x32>
      wait_loop_index--;
 8002134:	9b01      	ldr	r3, [sp, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8002140:	f7ff feea 	bl	8001f18 <HAL_GetTick>
 8002144:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f013 0f01 	tst.w	r3, #1
 800214e:	d116      	bne.n	800217e <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002150:	f7ff fee2 	bl	8001f18 <HAL_GetTick>
 8002154:	1b43      	subs	r3, r0, r5
 8002156:	2b02      	cmp	r3, #2
 8002158:	d9f5      	bls.n	8002146 <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f013 0f01 	tst.w	r3, #1
 8002162:	d1f0      	bne.n	8002146 <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002164:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002166:	f043 0310 	orr.w	r3, r3, #16
 800216a:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8002174:	2300      	movs	r3, #0
 8002176:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 800217a:	2001      	movs	r0, #1
 800217c:	e002      	b.n	8002184 <ADC_Enable+0x7c>
  return HAL_OK;
 800217e:	2000      	movs	r0, #0
 8002180:	e000      	b.n	8002184 <ADC_Enable+0x7c>
 8002182:	2000      	movs	r0, #0
}
 8002184:	b003      	add	sp, #12
 8002186:	bd30      	pop	{r4, r5, pc}
 8002188:	2000009c 	.word	0x2000009c
 800218c:	431bde83 	.word	0x431bde83

08002190 <HAL_ADC_Start_DMA>:
{
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	4604      	mov	r4, r0
 8002194:	460d      	mov	r5, r1
 8002196:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002198:	6801      	ldr	r1, [r0, #0]
 800219a:	4844      	ldr	r0, [pc, #272]	@ (80022ac <HAL_ADC_Start_DMA+0x11c>)
 800219c:	4281      	cmp	r1, r0
 800219e:	d059      	beq.n	8002254 <HAL_ADC_Start_DMA+0xc4>
 80021a0:	4b43      	ldr	r3, [pc, #268]	@ (80022b0 <HAL_ADC_Start_DMA+0x120>)
 80021a2:	4299      	cmp	r1, r3
 80021a4:	d056      	beq.n	8002254 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 80021a6:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d07c      	beq.n	80022a8 <HAL_ADC_Start_DMA+0x118>
 80021ae:	2301      	movs	r3, #1
 80021b0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7ff ffa7 	bl	8002108 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80021ba:	4607      	mov	r7, r0
 80021bc:	2800      	cmp	r0, #0
 80021be:	d16e      	bne.n	800229e <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 80021c0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80021c2:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 80021c6:	f021 0101 	bic.w	r1, r1, #1
 80021ca:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80021ce:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	4b37      	ldr	r3, [pc, #220]	@ (80022b0 <HAL_ADC_Start_DMA+0x120>)
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d044      	beq.n	8002262 <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021de:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021e0:	6853      	ldr	r3, [r2, #4]
 80021e2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80021e6:	d005      	beq.n	80021f4 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021f2:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021f6:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80021fa:	d048      	beq.n	800228e <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80021fe:	f023 0306 	bic.w	r3, r3, #6
 8002202:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8002204:	2300      	movs	r3, #0
 8002206:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800220a:	6a23      	ldr	r3, [r4, #32]
 800220c:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <HAL_ADC_Start_DMA+0x124>)
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002210:	6a23      	ldr	r3, [r4, #32]
 8002212:	4a29      	ldr	r2, [pc, #164]	@ (80022b8 <HAL_ADC_Start_DMA+0x128>)
 8002214:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002216:	6a23      	ldr	r3, [r4, #32]
 8002218:	4a28      	ldr	r2, [pc, #160]	@ (80022bc <HAL_ADC_Start_DMA+0x12c>)
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	f06f 0202 	mvn.w	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	6893      	ldr	r3, [r2, #8]
 8002228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222c:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800222e:	6821      	ldr	r1, [r4, #0]
 8002230:	4633      	mov	r3, r6
 8002232:	462a      	mov	r2, r5
 8002234:	314c      	adds	r1, #76	@ 0x4c
 8002236:	6a20      	ldr	r0, [r4, #32]
 8002238:	f000 fa34 	bl	80026a4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002244:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002248:	d024      	beq.n	8002294 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	e027      	b.n	80022a4 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002254:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <HAL_ADC_Start_DMA+0x11c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 800225c:	d0a3      	beq.n	80021a6 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800225e:	2701      	movs	r7, #1
 8002260:	e020      	b.n	80022a4 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002262:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 800226c:	d0b4      	beq.n	80021d8 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800226e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002270:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002274:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <HAL_ADC_Start_DMA+0x11c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800227e:	d0b9      	beq.n	80021f4 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002280:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002282:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002286:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800228a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800228c:	e7b2      	b.n	80021f4 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 800228e:	2300      	movs	r3, #0
 8002290:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002292:	e7b7      	b.n	8002204 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e002      	b.n	80022a4 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 800229e:	2300      	movs	r3, #0
 80022a0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80022a4:	4638      	mov	r0, r7
 80022a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80022a8:	2702      	movs	r7, #2
 80022aa:	e7fb      	b.n	80022a4 <HAL_ADC_Start_DMA+0x114>
 80022ac:	40012400 	.word	0x40012400
 80022b0:	40012800 	.word	0x40012800
 80022b4:	08001f4d 	.word	0x08001f4d
 80022b8:	08001fa1 	.word	0x08001fa1
 80022bc:	08001fad 	.word	0x08001fad

080022c0 <ADC_ConversionStop_Disable>:
{
 80022c0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022c2:	6803      	ldr	r3, [r0, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	f012 0f01 	tst.w	r2, #1
 80022ca:	d101      	bne.n	80022d0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80022cc:	2000      	movs	r0, #0
}
 80022ce:	bd38      	pop	{r3, r4, r5, pc}
 80022d0:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80022da:	f7ff fe1d 	bl	8001f18 <HAL_GetTick>
 80022de:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f013 0f01 	tst.w	r3, #1
 80022e8:	d013      	beq.n	8002312 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022ea:	f7ff fe15 	bl	8001f18 <HAL_GetTick>
 80022ee:	1b43      	subs	r3, r0, r5
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d9f5      	bls.n	80022e0 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f013 0f01 	tst.w	r3, #1
 80022fc:	d0f0      	beq.n	80022e0 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800230e:	2001      	movs	r0, #1
 8002310:	e7dd      	b.n	80022ce <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002312:	2000      	movs	r0, #0
 8002314:	e7db      	b.n	80022ce <ADC_ConversionStop_Disable+0xe>
	...

08002318 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002318:	2800      	cmp	r0, #0
 800231a:	d07b      	beq.n	8002414 <HAL_ADC_Init+0xfc>
{
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002320:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002322:	2b00      	cmp	r3, #0
 8002324:	d04d      	beq.n	80023c2 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff ffca 	bl	80022c0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800232c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800232e:	f013 0310 	ands.w	r3, r3, #16
 8002332:	d169      	bne.n	8002408 <HAL_ADC_Init+0xf0>
 8002334:	2800      	cmp	r0, #0
 8002336:	d167      	bne.n	8002408 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8002338:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800233a:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 800233e:	f022 0202 	bic.w	r2, r2, #2
 8002342:	f042 0202 	orr.w	r2, r2, #2
 8002346:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002348:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800234a:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800234c:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800234e:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002350:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002354:	68a5      	ldr	r5, [r4, #8]
 8002356:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800235a:	d002      	beq.n	8002362 <HAL_ADC_Init+0x4a>
 800235c:	2d01      	cmp	r5, #1
 800235e:	d036      	beq.n	80023ce <HAL_ADC_Init+0xb6>
 8002360:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002362:	7d26      	ldrb	r6, [r4, #20]
 8002364:	2e01      	cmp	r6, #1
 8002366:	d035      	beq.n	80023d4 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8002368:	6826      	ldr	r6, [r4, #0]
 800236a:	6871      	ldr	r1, [r6, #4]
 800236c:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8002370:	4329      	orrs	r1, r5
 8002372:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002374:	6825      	ldr	r5, [r4, #0]
 8002376:	68ae      	ldr	r6, [r5, #8]
 8002378:	4927      	ldr	r1, [pc, #156]	@ (8002418 <HAL_ADC_Init+0x100>)
 800237a:	4031      	ands	r1, r6
 800237c:	4311      	orrs	r1, r2
 800237e:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002380:	68a1      	ldr	r1, [r4, #8]
 8002382:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8002386:	d001      	beq.n	800238c <HAL_ADC_Init+0x74>
 8002388:	2901      	cmp	r1, #1
 800238a:	d102      	bne.n	8002392 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800238c:	6923      	ldr	r3, [r4, #16]
 800238e:	3b01      	subs	r3, #1
 8002390:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002392:	6825      	ldr	r5, [r4, #0]
 8002394:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8002396:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 800239a:	430b      	orrs	r3, r1
 800239c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <HAL_ADC_Init+0x104>)
 80023a4:	400b      	ands	r3, r1
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d025      	beq.n	80023f6 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80023aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80023ac:	f023 0312 	bic.w	r3, r3, #18
 80023b0:	f043 0310 	orr.w	r3, r3, #16
 80023b4:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 80023be:	2001      	movs	r0, #1
 80023c0:	e027      	b.n	8002412 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 80023c2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80023c4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 80023c8:	f7fe f97e 	bl	80006c8 <HAL_ADC_MspInit>
 80023cc:	e7ab      	b.n	8002326 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023ce:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80023d2:	e7c6      	b.n	8002362 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023d4:	b931      	cbnz	r1, 80023e4 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023d6:	69a1      	ldr	r1, [r4, #24]
 80023d8:	3901      	subs	r1, #1
 80023da:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 80023de:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 80023e2:	e7c1      	b.n	8002368 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80023e6:	f041 0120 	orr.w	r1, r1, #32
 80023ea:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80023ee:	f041 0101 	orr.w	r1, r1, #1
 80023f2:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80023f4:	e7b8      	b.n	8002368 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 80023f6:	2300      	movs	r3, #0
 80023f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80023fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80023fc:	f023 0303 	bic.w	r3, r3, #3
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002406:	e004      	b.n	8002412 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002408:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8002410:	2001      	movs	r0, #1
}
 8002412:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
}
 8002416:	4770      	bx	lr
 8002418:	ffe1f7fd 	.word	0xffe1f7fd
 800241c:	ff1f0efe 	.word	0xff1f0efe

08002420 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002428:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800242c:	2b01      	cmp	r3, #1
 800242e:	d072      	beq.n	8002516 <HAL_ADCEx_Calibration_Start+0xf6>
 8002430:	4604      	mov	r4, r0
 8002432:	2301      	movs	r3, #1
 8002434:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002438:	f7ff ff42 	bl	80022c0 <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800243c:	4620      	mov	r0, r4
 800243e:	f7ff fe63 	bl	8002108 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002442:	4605      	mov	r5, r0
 8002444:	b128      	cbz	r0, 8002452 <HAL_ADCEx_Calibration_Start+0x32>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	2300      	movs	r3, #0
 8002448:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800244c:	4628      	mov	r0, r5
 800244e:	b002      	add	sp, #8
 8002450:	bd70      	pop	{r4, r5, r6, pc}
     ADC_STATE_CLR_SET(hadc->State,
 8002452:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002454:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002458:	f023 0302 	bic.w	r3, r3, #2
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	62a3      	str	r3, [r4, #40]	@ 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002462:	4b2e      	ldr	r3, [pc, #184]	@ (800251c <HAL_ADCEx_Calibration_Start+0xfc>)
 8002464:	681e      	ldr	r6, [r3, #0]
 8002466:	2002      	movs	r0, #2
 8002468:	f000 ff34 	bl	80032d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800246c:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002470:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8002472:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8002474:	e002      	b.n	800247c <HAL_ADCEx_Calibration_Start+0x5c>
      wait_loop_index--;
 8002476:	9b01      	ldr	r3, [sp, #4]
 8002478:	3b01      	subs	r3, #1
 800247a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800247c:	9b01      	ldr	r3, [sp, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADCEx_Calibration_Start+0x56>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002482:	6822      	ldr	r2, [r4, #0]
 8002484:	6893      	ldr	r3, [r2, #8]
 8002486:	f043 0308 	orr.w	r3, r3, #8
 800248a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800248c:	f7ff fd44 	bl	8001f18 <HAL_GetTick>
 8002490:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	f012 0f08 	tst.w	r2, #8
 800249a:	d014      	beq.n	80024c6 <HAL_ADCEx_Calibration_Start+0xa6>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800249c:	f7ff fd3c 	bl	8001f18 <HAL_GetTick>
 80024a0:	1b80      	subs	r0, r0, r6
 80024a2:	280a      	cmp	r0, #10
 80024a4:	d9f5      	bls.n	8002492 <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f013 0f08 	tst.w	r3, #8
 80024ae:	d0f0      	beq.n	8002492 <HAL_ADCEx_Calibration_Start+0x72>
          ADC_STATE_CLR_SET(hadc->State,
 80024b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80024b2:	f023 0312 	bic.w	r3, r3, #18
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 80024bc:	2300      	movs	r3, #0
 80024be:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 80024c2:	2501      	movs	r5, #1
 80024c4:	e7c2      	b.n	800244c <HAL_ADCEx_Calibration_Start+0x2c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	f042 0204 	orr.w	r2, r2, #4
 80024cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80024ce:	f7ff fd23 	bl	8001f18 <HAL_GetTick>
 80024d2:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f013 0f04 	tst.w	r3, #4
 80024dc:	d014      	beq.n	8002508 <HAL_ADCEx_Calibration_Start+0xe8>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80024de:	f7ff fd1b 	bl	8001f18 <HAL_GetTick>
 80024e2:	1b80      	subs	r0, r0, r6
 80024e4:	280a      	cmp	r0, #10
 80024e6:	d9f5      	bls.n	80024d4 <HAL_ADCEx_Calibration_Start+0xb4>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f013 0f04 	tst.w	r3, #4
 80024f0:	d0f0      	beq.n	80024d4 <HAL_ADCEx_Calibration_Start+0xb4>
          ADC_STATE_CLR_SET(hadc->State,
 80024f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80024f4:	f023 0312 	bic.w	r3, r3, #18
 80024f8:	f043 0310 	orr.w	r3, r3, #16
 80024fc:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 80024fe:	2300      	movs	r3, #0
 8002500:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8002504:	2501      	movs	r5, #1
 8002506:	e7a1      	b.n	800244c <HAL_ADCEx_Calibration_Start+0x2c>
    ADC_STATE_CLR_SET(hadc->State,
 8002508:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002514:	e797      	b.n	8002446 <HAL_ADCEx_Calibration_Start+0x26>
  __HAL_LOCK(hadc);
 8002516:	2502      	movs	r5, #2
 8002518:	e798      	b.n	800244c <HAL_ADCEx_Calibration_Start+0x2c>
 800251a:	bf00      	nop
 800251c:	2000009c 	.word	0x2000009c

08002520 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002520:	2800      	cmp	r0, #0
 8002522:	db08      	blt.n	8002536 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002524:	0109      	lsls	r1, r1, #4
 8002526:	b2c9      	uxtb	r1, r1
 8002528:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800252c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002530:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002534:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	f000 000f 	and.w	r0, r0, #15
 800253a:	0109      	lsls	r1, r1, #4
 800253c:	b2c9      	uxtb	r1, r1
 800253e:	4b01      	ldr	r3, [pc, #4]	@ (8002544 <__NVIC_SetPriority+0x24>)
 8002540:	5419      	strb	r1, [r3, r0]
  }
}
 8002542:	4770      	bx	lr
 8002544:	e000ed14 	.word	0xe000ed14

08002548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800254a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800254e:	f1c0 0c07 	rsb	ip, r0, #7
 8002552:	f1bc 0f04 	cmp.w	ip, #4
 8002556:	bf28      	it	cs
 8002558:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255c:	1d03      	adds	r3, r0, #4
 800255e:	2b06      	cmp	r3, #6
 8002560:	d90f      	bls.n	8002582 <NVIC_EncodePriority+0x3a>
 8002562:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	f04f 3eff 	mov.w	lr, #4294967295
 8002568:	fa0e f00c 	lsl.w	r0, lr, ip
 800256c:	ea21 0100 	bic.w	r1, r1, r0
 8002570:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002572:	fa0e fe03 	lsl.w	lr, lr, r3
 8002576:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800257a:	ea41 0002 	orr.w	r0, r1, r2
 800257e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	2300      	movs	r3, #0
 8002584:	e7ee      	b.n	8002564 <NVIC_EncodePriority+0x1c>
	...

08002588 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800258a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002594:	0200      	lsls	r0, r0, #8
 8002596:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80025a4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ac:	b510      	push	{r4, lr}
 80025ae:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_NVIC_SetPriority+0x1c>)
 80025b2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80025b8:	f7ff ffc6 	bl	8002548 <NVIC_EncodePriority>
 80025bc:	4601      	mov	r1, r0
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff ffae 	bl	8002520 <__NVIC_SetPriority>
}
 80025c4:	bd10      	pop	{r4, pc}
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80025cc:	2800      	cmp	r0, #0
 80025ce:	db07      	blt.n	80025e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d0:	f000 021f 	and.w	r2, r0, #31
 80025d4:	0940      	lsrs	r0, r0, #5
 80025d6:	2301      	movs	r3, #1
 80025d8:	4093      	lsls	r3, r2
 80025da:	4a02      	ldr	r2, [pc, #8]	@ (80025e4 <HAL_NVIC_EnableIRQ+0x18>)
 80025dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	3801      	subs	r0, #1
 80025ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80025ee:	d20b      	bcs.n	8002608 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025f4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	4a05      	ldr	r2, [pc, #20]	@ (800260c <HAL_SYSTICK_Config+0x24>)
 80025f8:	21f0      	movs	r1, #240	@ 0xf0
 80025fa:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fe:	2000      	movs	r0, #0
 8002600:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	2207      	movs	r2, #7
 8002604:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002606:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002608:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002610:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002612:	2401      	movs	r4, #1
 8002614:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002616:	40ac      	lsls	r4, r5
 8002618:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800261a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800261c:	6804      	ldr	r4, [r0, #0]
 800261e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002620:	6843      	ldr	r3, [r0, #4]
 8002622:	2b10      	cmp	r3, #16
 8002624:	d005      	beq.n	8002632 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002626:	6803      	ldr	r3, [r0, #0]
 8002628:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800262a:	6803      	ldr	r3, [r0, #0]
 800262c:	60da      	str	r2, [r3, #12]
  }
}
 800262e:	bc30      	pop	{r4, r5}
 8002630:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002632:	6803      	ldr	r3, [r0, #0]
 8002634:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	60d9      	str	r1, [r3, #12]
 800263a:	e7f8      	b.n	800262e <DMA_SetConfig+0x1e>

0800263c <HAL_DMA_Init>:
  if(hdma == NULL)
 800263c:	b350      	cbz	r0, 8002694 <HAL_DMA_Init+0x58>
{
 800263e:	b410      	push	{r4}
 8002640:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002642:	6801      	ldr	r1, [r0, #0]
 8002644:	4b14      	ldr	r3, [pc, #80]	@ (8002698 <HAL_DMA_Init+0x5c>)
 8002646:	440b      	add	r3, r1
 8002648:	4814      	ldr	r0, [pc, #80]	@ (800269c <HAL_DMA_Init+0x60>)
 800264a:	fba0 0303 	umull	r0, r3, r0, r3
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002654:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_DMA_Init+0x64>)
 8002656:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002658:	2302      	movs	r3, #2
 800265a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 800265e:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002660:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 8002664:	6853      	ldr	r3, [r2, #4]
 8002666:	6894      	ldr	r4, [r2, #8]
 8002668:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266a:	68d4      	ldr	r4, [r2, #12]
 800266c:	4323      	orrs	r3, r4
 800266e:	6914      	ldr	r4, [r2, #16]
 8002670:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002672:	6954      	ldr	r4, [r2, #20]
 8002674:	4323      	orrs	r3, r4
 8002676:	6994      	ldr	r4, [r2, #24]
 8002678:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800267a:	69d4      	ldr	r4, [r2, #28]
 800267c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800267e:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8002680:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002682:	2000      	movs	r0, #0
 8002684:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002686:	2301      	movs	r3, #1
 8002688:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 800268c:	f882 0020 	strb.w	r0, [r2, #32]
}
 8002690:	bc10      	pop	{r4}
 8002692:	4770      	bx	lr
    return HAL_ERROR;
 8002694:	2001      	movs	r0, #1
}
 8002696:	4770      	bx	lr
 8002698:	bffdfff8 	.word	0xbffdfff8
 800269c:	cccccccd 	.word	0xcccccccd
 80026a0:	40020000 	.word	0x40020000

080026a4 <HAL_DMA_Start_IT>:
{
 80026a4:	b538      	push	{r3, r4, r5, lr}
 80026a6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80026a8:	f890 0020 	ldrb.w	r0, [r0, #32]
 80026ac:	2801      	cmp	r0, #1
 80026ae:	d032      	beq.n	8002716 <HAL_DMA_Start_IT+0x72>
 80026b0:	2001      	movs	r0, #1
 80026b2:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80026b6:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 80026ba:	b2c0      	uxtb	r0, r0
 80026bc:	2801      	cmp	r0, #1
 80026be:	d004      	beq.n	80026ca <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 80026c0:	2300      	movs	r3, #0
 80026c2:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 80026c6:	2002      	movs	r0, #2
}
 80026c8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ca:	2002      	movs	r0, #2
 80026cc:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d0:	2000      	movs	r0, #0
 80026d2:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 80026d4:	6825      	ldr	r5, [r4, #0]
 80026d6:	6828      	ldr	r0, [r5, #0]
 80026d8:	f020 0001 	bic.w	r0, r0, #1
 80026dc:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff ff96 	bl	8002610 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80026e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80026e6:	b15b      	cbz	r3, 8002700 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e8:	6822      	ldr	r2, [r4, #0]
 80026ea:	6813      	ldr	r3, [r2, #0]
 80026ec:	f043 030e 	orr.w	r3, r3, #14
 80026f0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	6813      	ldr	r3, [r2, #0]
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2000      	movs	r0, #0
 80026fe:	e7e3      	b.n	80026c8 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002700:	6822      	ldr	r2, [r4, #0]
 8002702:	6813      	ldr	r3, [r2, #0]
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800270a:	6822      	ldr	r2, [r4, #0]
 800270c:	6813      	ldr	r3, [r2, #0]
 800270e:	f043 030a 	orr.w	r3, r3, #10
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e7ed      	b.n	80026f2 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002716:	2002      	movs	r0, #2
 8002718:	e7d6      	b.n	80026c8 <HAL_DMA_Start_IT+0x24>

0800271a <HAL_DMA_Abort>:
{
 800271a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271c:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	2a02      	cmp	r2, #2
 8002724:	d006      	beq.n	8002734 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002726:	2204      	movs	r2, #4
 8002728:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 800272a:	2200      	movs	r2, #0
 800272c:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8002730:	2001      	movs	r0, #1
 8002732:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002734:	6801      	ldr	r1, [r0, #0]
 8002736:	680a      	ldr	r2, [r1, #0]
 8002738:	f022 020e 	bic.w	r2, r2, #14
 800273c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800273e:	6801      	ldr	r1, [r0, #0]
 8002740:	680a      	ldr	r2, [r1, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002748:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800274a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f202 	lsl.w	r2, r1, r2
 8002752:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8002754:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 8002758:	2000      	movs	r0, #0
 800275a:	f883 0020 	strb.w	r0, [r3, #32]
}
 800275e:	4770      	bx	lr

08002760 <HAL_DMA_Abort_IT>:
{  
 8002760:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002762:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d003      	beq.n	8002774 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276c:	2304      	movs	r3, #4
 800276e:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8002770:	2001      	movs	r0, #1
}
 8002772:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002774:	6802      	ldr	r2, [r0, #0]
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	f023 030e 	bic.w	r3, r3, #14
 800277c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800277e:	6802      	ldr	r2, [r0, #0]
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002788:	6803      	ldr	r3, [r0, #0]
 800278a:	4a19      	ldr	r2, [pc, #100]	@ (80027f0 <HAL_DMA_Abort_IT+0x90>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d014      	beq.n	80027ba <HAL_DMA_Abort_IT+0x5a>
 8002790:	3214      	adds	r2, #20
 8002792:	4293      	cmp	r3, r2
 8002794:	d01f      	beq.n	80027d6 <HAL_DMA_Abort_IT+0x76>
 8002796:	3214      	adds	r2, #20
 8002798:	4293      	cmp	r3, r2
 800279a:	d01e      	beq.n	80027da <HAL_DMA_Abort_IT+0x7a>
 800279c:	3214      	adds	r2, #20
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01e      	beq.n	80027e0 <HAL_DMA_Abort_IT+0x80>
 80027a2:	3214      	adds	r2, #20
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d01e      	beq.n	80027e6 <HAL_DMA_Abort_IT+0x86>
 80027a8:	3214      	adds	r2, #20
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d002      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x54>
 80027ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027b2:	e003      	b.n	80027bc <HAL_DMA_Abort_IT+0x5c>
 80027b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80027b8:	e000      	b.n	80027bc <HAL_DMA_Abort_IT+0x5c>
 80027ba:	2201      	movs	r2, #1
 80027bc:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <HAL_DMA_Abort_IT+0x94>)
 80027be:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80027c6:	2300      	movs	r3, #0
 80027c8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80027cc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80027ce:	b16b      	cbz	r3, 80027ec <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 80027d0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2000      	movs	r0, #0
 80027d4:	e7cd      	b.n	8002772 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027d6:	2210      	movs	r2, #16
 80027d8:	e7f0      	b.n	80027bc <HAL_DMA_Abort_IT+0x5c>
 80027da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027de:	e7ed      	b.n	80027bc <HAL_DMA_Abort_IT+0x5c>
 80027e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027e4:	e7ea      	b.n	80027bc <HAL_DMA_Abort_IT+0x5c>
 80027e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027ea:	e7e7      	b.n	80027bc <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 80027ec:	2000      	movs	r0, #0
 80027ee:	e7c0      	b.n	8002772 <HAL_DMA_Abort_IT+0x12>
 80027f0:	40020008 	.word	0x40020008
 80027f4:	40020000 	.word	0x40020000

080027f8 <HAL_DMA_IRQHandler>:
{
 80027f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027fa:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80027fc:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80027fe:	6804      	ldr	r4, [r0, #0]
 8002800:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002802:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002804:	2304      	movs	r3, #4
 8002806:	408b      	lsls	r3, r1
 8002808:	4213      	tst	r3, r2
 800280a:	d035      	beq.n	8002878 <HAL_DMA_IRQHandler+0x80>
 800280c:	f015 0f04 	tst.w	r5, #4
 8002810:	d032      	beq.n	8002878 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	f013 0f20 	tst.w	r3, #32
 8002818:	d103      	bne.n	8002822 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002822:	6803      	ldr	r3, [r0, #0]
 8002824:	4a43      	ldr	r2, [pc, #268]	@ (8002934 <HAL_DMA_IRQHandler+0x13c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d014      	beq.n	8002854 <HAL_DMA_IRQHandler+0x5c>
 800282a:	3214      	adds	r2, #20
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_DMA_IRQHandler+0x6a>
 8002830:	3214      	adds	r2, #20
 8002832:	4293      	cmp	r3, r2
 8002834:	d017      	beq.n	8002866 <HAL_DMA_IRQHandler+0x6e>
 8002836:	3214      	adds	r2, #20
 8002838:	4293      	cmp	r3, r2
 800283a:	d017      	beq.n	800286c <HAL_DMA_IRQHandler+0x74>
 800283c:	3214      	adds	r2, #20
 800283e:	4293      	cmp	r3, r2
 8002840:	d017      	beq.n	8002872 <HAL_DMA_IRQHandler+0x7a>
 8002842:	3214      	adds	r2, #20
 8002844:	4293      	cmp	r3, r2
 8002846:	d002      	beq.n	800284e <HAL_DMA_IRQHandler+0x56>
 8002848:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800284c:	e003      	b.n	8002856 <HAL_DMA_IRQHandler+0x5e>
 800284e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002852:	e000      	b.n	8002856 <HAL_DMA_IRQHandler+0x5e>
 8002854:	2204      	movs	r2, #4
 8002856:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <HAL_DMA_IRQHandler+0x140>)
 8002858:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800285a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800285c:	b103      	cbz	r3, 8002860 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 800285e:	4798      	blx	r3
}
 8002860:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002862:	2240      	movs	r2, #64	@ 0x40
 8002864:	e7f7      	b.n	8002856 <HAL_DMA_IRQHandler+0x5e>
 8002866:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800286a:	e7f4      	b.n	8002856 <HAL_DMA_IRQHandler+0x5e>
 800286c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002870:	e7f1      	b.n	8002856 <HAL_DMA_IRQHandler+0x5e>
 8002872:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002876:	e7ee      	b.n	8002856 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002878:	2302      	movs	r3, #2
 800287a:	408b      	lsls	r3, r1
 800287c:	4213      	tst	r3, r2
 800287e:	d03c      	beq.n	80028fa <HAL_DMA_IRQHandler+0x102>
 8002880:	f015 0f02 	tst.w	r5, #2
 8002884:	d039      	beq.n	80028fa <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	f013 0f20 	tst.w	r3, #32
 800288c:	d106      	bne.n	800289c <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	f023 030a 	bic.w	r3, r3, #10
 8002894:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002896:	2301      	movs	r3, #1
 8002898:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800289c:	6803      	ldr	r3, [r0, #0]
 800289e:	4a25      	ldr	r2, [pc, #148]	@ (8002934 <HAL_DMA_IRQHandler+0x13c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d014      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd6>
 80028a4:	3214      	adds	r2, #20
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01c      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xec>
 80028aa:	3214      	adds	r2, #20
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d01b      	beq.n	80028e8 <HAL_DMA_IRQHandler+0xf0>
 80028b0:	3214      	adds	r2, #20
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01b      	beq.n	80028ee <HAL_DMA_IRQHandler+0xf6>
 80028b6:	3214      	adds	r2, #20
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d01b      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xfc>
 80028bc:	3214      	adds	r2, #20
 80028be:	4293      	cmp	r3, r2
 80028c0:	d002      	beq.n	80028c8 <HAL_DMA_IRQHandler+0xd0>
 80028c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c6:	e003      	b.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
 80028c8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80028cc:	e000      	b.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
 80028ce:	2202      	movs	r2, #2
 80028d0:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <HAL_DMA_IRQHandler+0x140>)
 80028d2:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80028d4:	2300      	movs	r3, #0
 80028d6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80028da:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0bf      	beq.n	8002860 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 80028e0:	4798      	blx	r3
 80028e2:	e7bd      	b.n	8002860 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028e4:	2220      	movs	r2, #32
 80028e6:	e7f3      	b.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
 80028e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ec:	e7f0      	b.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
 80028ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028f2:	e7ed      	b.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
 80028f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028f8:	e7ea      	b.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028fa:	2308      	movs	r3, #8
 80028fc:	408b      	lsls	r3, r1
 80028fe:	4213      	tst	r3, r2
 8002900:	d0ae      	beq.n	8002860 <HAL_DMA_IRQHandler+0x68>
 8002902:	f015 0f08 	tst.w	r5, #8
 8002906:	d0ab      	beq.n	8002860 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002908:	6823      	ldr	r3, [r4, #0]
 800290a:	f023 030e 	bic.w	r3, r3, #14
 800290e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002910:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002912:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002914:	2301      	movs	r3, #1
 8002916:	fa03 f202 	lsl.w	r2, r3, r2
 800291a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800291c:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002922:	2300      	movs	r3, #0
 8002924:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002928:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800292a:	2b00      	cmp	r3, #0
 800292c:	d098      	beq.n	8002860 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 800292e:	4798      	blx	r3
  return;
 8002930:	e796      	b.n	8002860 <HAL_DMA_IRQHandler+0x68>
 8002932:	bf00      	nop
 8002934:	40020008 	.word	0x40020008
 8002938:	40020000 	.word	0x40020000

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b570      	push	{r4, r5, r6, lr}
 800293e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002940:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002942:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002944:	e0a1      	b.n	8002a8a <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002946:	4d7e      	ldr	r5, [pc, #504]	@ (8002b40 <HAL_GPIO_Init+0x204>)
 8002948:	42ab      	cmp	r3, r5
 800294a:	d014      	beq.n	8002976 <HAL_GPIO_Init+0x3a>
 800294c:	d80c      	bhi.n	8002968 <HAL_GPIO_Init+0x2c>
 800294e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002952:	42ab      	cmp	r3, r5
 8002954:	d00f      	beq.n	8002976 <HAL_GPIO_Init+0x3a>
 8002956:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 800295a:	42ab      	cmp	r3, r5
 800295c:	d00b      	beq.n	8002976 <HAL_GPIO_Init+0x3a>
 800295e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002962:	42ab      	cmp	r3, r5
 8002964:	d110      	bne.n	8002988 <HAL_GPIO_Init+0x4c>
 8002966:	e006      	b.n	8002976 <HAL_GPIO_Init+0x3a>
 8002968:	4d76      	ldr	r5, [pc, #472]	@ (8002b44 <HAL_GPIO_Init+0x208>)
 800296a:	42ab      	cmp	r3, r5
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x3a>
 800296e:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8002972:	42ab      	cmp	r3, r5
 8002974:	d108      	bne.n	8002988 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002976:	688b      	ldr	r3, [r1, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d050      	beq.n	8002a1e <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800297c:	2b01      	cmp	r3, #1
 800297e:	d049      	beq.n	8002a14 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002980:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002982:	2408      	movs	r4, #8
 8002984:	e000      	b.n	8002988 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002986:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002988:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800298c:	d849      	bhi.n	8002a22 <HAL_GPIO_Init+0xe6>
 800298e:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002990:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002994:	6833      	ldr	r3, [r6, #0]
 8002996:	250f      	movs	r5, #15
 8002998:	4095      	lsls	r5, r2
 800299a:	ea23 0305 	bic.w	r3, r3, r5
 800299e:	fa04 f202 	lsl.w	r2, r4, r2
 80029a2:	4313      	orrs	r3, r2
 80029a4:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a6:	684b      	ldr	r3, [r1, #4]
 80029a8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80029ac:	d06b      	beq.n	8002a86 <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029ae:	4b66      	ldr	r3, [pc, #408]	@ (8002b48 <HAL_GPIO_Init+0x20c>)
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	619a      	str	r2, [r3, #24]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80029c2:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80029c6:	1c95      	adds	r5, r2, #2
 80029c8:	4b60      	ldr	r3, [pc, #384]	@ (8002b4c <HAL_GPIO_Init+0x210>)
 80029ca:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029ce:	f00c 0503 	and.w	r5, ip, #3
 80029d2:	00ad      	lsls	r5, r5, #2
 80029d4:	230f      	movs	r3, #15
 80029d6:	40ab      	lsls	r3, r5
 80029d8:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002b50 <HAL_GPIO_Init+0x214>)
 80029de:	4298      	cmp	r0, r3
 80029e0:	d026      	beq.n	8002a30 <HAL_GPIO_Init+0xf4>
 80029e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029e6:	4298      	cmp	r0, r3
 80029e8:	f000 808c 	beq.w	8002b04 <HAL_GPIO_Init+0x1c8>
 80029ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029f0:	4298      	cmp	r0, r3
 80029f2:	f000 8089 	beq.w	8002b08 <HAL_GPIO_Init+0x1cc>
 80029f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029fa:	4298      	cmp	r0, r3
 80029fc:	d016      	beq.n	8002a2c <HAL_GPIO_Init+0xf0>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e017      	b.n	8002a32 <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a02:	68cc      	ldr	r4, [r1, #12]
 8002a04:	3404      	adds	r4, #4
          break;
 8002a06:	e7bf      	b.n	8002988 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a08:	68cc      	ldr	r4, [r1, #12]
 8002a0a:	3408      	adds	r4, #8
          break;
 8002a0c:	e7bc      	b.n	8002988 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a0e:	68cc      	ldr	r4, [r1, #12]
 8002a10:	340c      	adds	r4, #12
          break;
 8002a12:	e7b9      	b.n	8002988 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8002a14:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a16:	2408      	movs	r4, #8
 8002a18:	e7b6      	b.n	8002988 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a1a:	2400      	movs	r4, #0
 8002a1c:	e7b4      	b.n	8002988 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a1e:	2404      	movs	r4, #4
 8002a20:	e7b2      	b.n	8002988 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a22:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a24:	f1ac 0208 	sub.w	r2, ip, #8
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	e7b3      	b.n	8002994 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <HAL_GPIO_Init+0xf6>
 8002a30:	2300      	movs	r3, #0
 8002a32:	40ab      	lsls	r3, r5
 8002a34:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8002a36:	3202      	adds	r2, #2
 8002a38:	4d44      	ldr	r5, [pc, #272]	@ (8002b4c <HAL_GPIO_Init+0x210>)
 8002a3a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a3e:	684b      	ldr	r3, [r1, #4]
 8002a40:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002a44:	d062      	beq.n	8002b0c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a46:	4a43      	ldr	r2, [pc, #268]	@ (8002b54 <HAL_GPIO_Init+0x218>)
 8002a48:	6893      	ldr	r3, [r2, #8]
 8002a4a:	ea43 030e 	orr.w	r3, r3, lr
 8002a4e:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a50:	684b      	ldr	r3, [r1, #4]
 8002a52:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002a56:	d05f      	beq.n	8002b18 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a58:	4a3e      	ldr	r2, [pc, #248]	@ (8002b54 <HAL_GPIO_Init+0x218>)
 8002a5a:	68d3      	ldr	r3, [r2, #12]
 8002a5c:	ea43 030e 	orr.w	r3, r3, lr
 8002a60:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a62:	684b      	ldr	r3, [r1, #4]
 8002a64:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002a68:	d05c      	beq.n	8002b24 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b54 <HAL_GPIO_Init+0x218>)
 8002a6c:	6853      	ldr	r3, [r2, #4]
 8002a6e:	ea43 030e 	orr.w	r3, r3, lr
 8002a72:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a74:	684b      	ldr	r3, [r1, #4]
 8002a76:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002a7a:	d059      	beq.n	8002b30 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a7c:	4a35      	ldr	r2, [pc, #212]	@ (8002b54 <HAL_GPIO_Init+0x218>)
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	ea43 030e 	orr.w	r3, r3, lr
 8002a84:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8002a86:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8a:	680b      	ldr	r3, [r1, #0]
 8002a8c:	fa33 f20c 	lsrs.w	r2, r3, ip
 8002a90:	d054      	beq.n	8002b3c <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8002a92:	2201      	movs	r2, #1
 8002a94:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a98:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8002a9c:	ea32 0303 	bics.w	r3, r2, r3
 8002aa0:	d1f1      	bne.n	8002a86 <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8002aa2:	684b      	ldr	r3, [r1, #4]
 8002aa4:	2b12      	cmp	r3, #18
 8002aa6:	f63f af4e 	bhi.w	8002946 <HAL_GPIO_Init+0xa>
 8002aaa:	2b12      	cmp	r3, #18
 8002aac:	f63f af6c 	bhi.w	8002988 <HAL_GPIO_Init+0x4c>
 8002ab0:	a501      	add	r5, pc, #4	@ (adr r5, 8002ab8 <HAL_GPIO_Init+0x17c>)
 8002ab2:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002977 	.word	0x08002977
 8002abc:	08002987 	.word	0x08002987
 8002ac0:	08002a09 	.word	0x08002a09
 8002ac4:	08002a1b 	.word	0x08002a1b
 8002ac8:	08002989 	.word	0x08002989
 8002acc:	08002989 	.word	0x08002989
 8002ad0:	08002989 	.word	0x08002989
 8002ad4:	08002989 	.word	0x08002989
 8002ad8:	08002989 	.word	0x08002989
 8002adc:	08002989 	.word	0x08002989
 8002ae0:	08002989 	.word	0x08002989
 8002ae4:	08002989 	.word	0x08002989
 8002ae8:	08002989 	.word	0x08002989
 8002aec:	08002989 	.word	0x08002989
 8002af0:	08002989 	.word	0x08002989
 8002af4:	08002989 	.word	0x08002989
 8002af8:	08002989 	.word	0x08002989
 8002afc:	08002a03 	.word	0x08002a03
 8002b00:	08002a0f 	.word	0x08002a0f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b04:	2301      	movs	r3, #1
 8002b06:	e794      	b.n	8002a32 <HAL_GPIO_Init+0xf6>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e792      	b.n	8002a32 <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b0c:	4a11      	ldr	r2, [pc, #68]	@ (8002b54 <HAL_GPIO_Init+0x218>)
 8002b0e:	6893      	ldr	r3, [r2, #8]
 8002b10:	ea23 030e 	bic.w	r3, r3, lr
 8002b14:	6093      	str	r3, [r2, #8]
 8002b16:	e79b      	b.n	8002a50 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b18:	4a0e      	ldr	r2, [pc, #56]	@ (8002b54 <HAL_GPIO_Init+0x218>)
 8002b1a:	68d3      	ldr	r3, [r2, #12]
 8002b1c:	ea23 030e 	bic.w	r3, r3, lr
 8002b20:	60d3      	str	r3, [r2, #12]
 8002b22:	e79e      	b.n	8002a62 <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b24:	4a0b      	ldr	r2, [pc, #44]	@ (8002b54 <HAL_GPIO_Init+0x218>)
 8002b26:	6853      	ldr	r3, [r2, #4]
 8002b28:	ea23 030e 	bic.w	r3, r3, lr
 8002b2c:	6053      	str	r3, [r2, #4]
 8002b2e:	e7a1      	b.n	8002a74 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b30:	4a08      	ldr	r2, [pc, #32]	@ (8002b54 <HAL_GPIO_Init+0x218>)
 8002b32:	6813      	ldr	r3, [r2, #0]
 8002b34:	ea23 030e 	bic.w	r3, r3, lr
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e7a4      	b.n	8002a86 <HAL_GPIO_Init+0x14a>
  }
}
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	10220000 	.word	0x10220000
 8002b44:	10310000 	.word	0x10310000
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40010800 	.word	0x40010800
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b58:	6883      	ldr	r3, [r0, #8]
 8002b5a:	4219      	tst	r1, r3
 8002b5c:	d001      	beq.n	8002b62 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002b5e:	2001      	movs	r0, #1
 8002b60:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b62:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002b64:	4770      	bx	lr

08002b66 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b66:	b10a      	cbz	r2, 8002b6c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b68:	6101      	str	r1, [r0, #16]
 8002b6a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b6c:	0409      	lsls	r1, r1, #16
 8002b6e:	6101      	str	r1, [r0, #16]
  }
}
 8002b70:	4770      	bx	lr
	...

08002b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b74:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b76:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <RCC_Delay+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <RCC_Delay+0x28>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	0a5b      	lsrs	r3, r3, #9
 8002b82:	fb00 f303 	mul.w	r3, r0, r3
 8002b86:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002b88:	bf00      	nop
  }
  while (Delay --);
 8002b8a:	9b01      	ldr	r3, [sp, #4]
 8002b8c:	1e5a      	subs	r2, r3, #1
 8002b8e:	9201      	str	r2, [sp, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f9      	bne.n	8002b88 <RCC_Delay+0x14>
}
 8002b94:	b002      	add	sp, #8
 8002b96:	4770      	bx	lr
 8002b98:	2000009c 	.word	0x2000009c
 8002b9c:	10624dd3 	.word	0x10624dd3

08002ba0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	f000 81f1 	beq.w	8002f88 <HAL_RCC_OscConfig+0x3e8>
{
 8002ba6:	b570      	push	{r4, r5, r6, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bac:	6803      	ldr	r3, [r0, #0]
 8002bae:	f013 0f01 	tst.w	r3, #1
 8002bb2:	d02c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb4:	4b99      	ldr	r3, [pc, #612]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d01d      	beq.n	8002bfc <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc0:	4b96      	ldr	r3, [pc, #600]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d012      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bcc:	6863      	ldr	r3, [r4, #4]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd2:	d041      	beq.n	8002c58 <HAL_RCC_OscConfig+0xb8>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d155      	bne.n	8002c84 <HAL_RCC_OscConfig+0xe4>
 8002bd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bdc:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e037      	b.n	8002c62 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bf2:	4b8a      	ldr	r3, [pc, #552]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002bfa:	d0e7      	beq.n	8002bcc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	4b87      	ldr	r3, [pc, #540]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002c04:	d003      	beq.n	8002c0e <HAL_RCC_OscConfig+0x6e>
 8002c06:	6863      	ldr	r3, [r4, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 81bf 	beq.w	8002f8c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	f013 0f02 	tst.w	r3, #2
 8002c14:	d075      	beq.n	8002d02 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c16:	4b81      	ldr	r3, [pc, #516]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f013 0f0c 	tst.w	r3, #12
 8002c1e:	d05f      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c20:	4b7e      	ldr	r3, [pc, #504]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d054      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c2c:	6923      	ldr	r3, [r4, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 808a 	beq.w	8002d48 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002c34:	4b7a      	ldr	r3, [pc, #488]	@ (8002e20 <HAL_RCC_OscConfig+0x280>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c3a:	f7ff f96d 	bl	8001f18 <HAL_GetTick>
 8002c3e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b76      	ldr	r3, [pc, #472]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f013 0f02 	tst.w	r3, #2
 8002c48:	d175      	bne.n	8002d36 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7ff f965 	bl	8001f18 <HAL_GetTick>
 8002c4e:	1b40      	subs	r0, r0, r5
 8002c50:	2802      	cmp	r0, #2
 8002c52:	d9f5      	bls.n	8002c40 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002c54:	2003      	movs	r0, #3
 8002c56:	e19e      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c58:	4a70      	ldr	r2, [pc, #448]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c5a:	6813      	ldr	r3, [r2, #0]
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c62:	6863      	ldr	r3, [r4, #4]
 8002c64:	b343      	cbz	r3, 8002cb8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002c66:	f7ff f957 	bl	8001f18 <HAL_GetTick>
 8002c6a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6c:	4b6b      	ldr	r3, [pc, #428]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002c74:	d1cb      	bne.n	8002c0e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c76:	f7ff f94f 	bl	8001f18 <HAL_GetTick>
 8002c7a:	1b40      	subs	r0, r0, r5
 8002c7c:	2864      	cmp	r0, #100	@ 0x64
 8002c7e:	d9f5      	bls.n	8002c6c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002c80:	2003      	movs	r0, #3
 8002c82:	e188      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_OscConfig+0xfe>
 8002c8a:	4b64      	ldr	r3, [pc, #400]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e7e1      	b.n	8002c62 <HAL_RCC_OscConfig+0xc2>
 8002c9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ca2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e7d4      	b.n	8002c62 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f92e 	bl	8001f18 <HAL_GetTick>
 8002cbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b57      	ldr	r3, [pc, #348]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002cc6:	d0a2      	beq.n	8002c0e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7ff f926 	bl	8001f18 <HAL_GetTick>
 8002ccc:	1b40      	subs	r0, r0, r5
 8002cce:	2864      	cmp	r0, #100	@ 0x64
 8002cd0:	d9f5      	bls.n	8002cbe <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	e15f      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cd6:	4b51      	ldr	r3, [pc, #324]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002cde:	d1a5      	bne.n	8002c2c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce0:	4b4e      	ldr	r3, [pc, #312]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f013 0f02 	tst.w	r3, #2
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x152>
 8002cea:	6923      	ldr	r3, [r4, #16]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 814f 	bne.w	8002f90 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002cfa:	6961      	ldr	r1, [r4, #20]
 8002cfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d00:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	f013 0f08 	tst.w	r3, #8
 8002d08:	d033      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d0a:	69a3      	ldr	r3, [r4, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05c      	beq.n	8002dca <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002d10:	4b43      	ldr	r3, [pc, #268]	@ (8002e20 <HAL_RCC_OscConfig+0x280>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002d18:	f7ff f8fe 	bl	8001f18 <HAL_GetTick>
 8002d1c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	f013 0f02 	tst.w	r3, #2
 8002d26:	d121      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7ff f8f6 	bl	8001f18 <HAL_GetTick>
 8002d2c:	1b40      	subs	r0, r0, r5
 8002d2e:	2802      	cmp	r0, #2
 8002d30:	d9f5      	bls.n	8002d1e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002d32:	2003      	movs	r0, #3
 8002d34:	e12f      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	4a39      	ldr	r2, [pc, #228]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002d3e:	6961      	ldr	r1, [r4, #20]
 8002d40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e7dc      	b.n	8002d02 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002d48:	4b35      	ldr	r3, [pc, #212]	@ (8002e20 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d4e:	f7ff f8e3 	bl	8001f18 <HAL_GetTick>
 8002d52:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d54:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f013 0f02 	tst.w	r3, #2
 8002d5c:	d0d1      	beq.n	8002d02 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7ff f8db 	bl	8001f18 <HAL_GetTick>
 8002d62:	1b40      	subs	r0, r0, r5
 8002d64:	2802      	cmp	r0, #2
 8002d66:	d9f5      	bls.n	8002d54 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002d68:	2003      	movs	r0, #3
 8002d6a:	e114      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f7ff ff01 	bl	8002b74 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	f013 0f04 	tst.w	r3, #4
 8002d78:	f000 8096 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7c:	4b27      	ldr	r3, [pc, #156]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002d84:	d134      	bne.n	8002df0 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d8e:	61da      	str	r2, [r3, #28]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d9a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b21      	ldr	r3, [pc, #132]	@ (8002e24 <HAL_RCC_OscConfig+0x284>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002da4:	d026      	beq.n	8002df4 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da6:	68e3      	ldr	r3, [r4, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d03d      	beq.n	8002e28 <HAL_RCC_OscConfig+0x288>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d153      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2b8>
 8002db0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002db4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002db8:	6a1a      	ldr	r2, [r3, #32]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	621a      	str	r2, [r3, #32]
 8002dc0:	6a1a      	ldr	r2, [r3, #32]
 8002dc2:	f022 0204 	bic.w	r2, r2, #4
 8002dc6:	621a      	str	r2, [r3, #32]
 8002dc8:	e033      	b.n	8002e32 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002dd2:	f7ff f8a1 	bl	8001f18 <HAL_GetTick>
 8002dd6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	f013 0f02 	tst.w	r3, #2
 8002de0:	d0c7      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de2:	f7ff f899 	bl	8001f18 <HAL_GetTick>
 8002de6:	1b40      	subs	r0, r0, r5
 8002de8:	2802      	cmp	r0, #2
 8002dea:	d9f5      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8002dec:	2003      	movs	r0, #3
 8002dee:	e0d2      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8002df0:	2500      	movs	r5, #0
 8002df2:	e7d3      	b.n	8002d9c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df4:	4a0b      	ldr	r2, [pc, #44]	@ (8002e24 <HAL_RCC_OscConfig+0x284>)
 8002df6:	6813      	ldr	r3, [r2, #0]
 8002df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002dfe:	f7ff f88b 	bl	8001f18 <HAL_GetTick>
 8002e02:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <HAL_RCC_OscConfig+0x284>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002e0c:	d1cb      	bne.n	8002da6 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7ff f883 	bl	8001f18 <HAL_GetTick>
 8002e12:	1b80      	subs	r0, r0, r6
 8002e14:	2864      	cmp	r0, #100	@ 0x64
 8002e16:	d9f5      	bls.n	8002e04 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8002e18:	2003      	movs	r0, #3
 8002e1a:	e0bc      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	42420000 	.word	0x42420000
 8002e24:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e28:	4a5f      	ldr	r2, [pc, #380]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002e2a:	6a13      	ldr	r3, [r2, #32]
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e32:	68e3      	ldr	r3, [r4, #12]
 8002e34:	b333      	cbz	r3, 8002e84 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8002e36:	f7ff f86f 	bl	8001f18 <HAL_GetTick>
 8002e3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f013 0f02 	tst.w	r3, #2
 8002e44:	d12f      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7ff f867 	bl	8001f18 <HAL_GetTick>
 8002e4a:	1b80      	subs	r0, r0, r6
 8002e4c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e50:	4298      	cmp	r0, r3
 8002e52:	d9f3      	bls.n	8002e3c <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002e54:	2003      	movs	r0, #3
 8002e56:	e09e      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2d0>
 8002e5c:	4b52      	ldr	r3, [pc, #328]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	621a      	str	r2, [r3, #32]
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	f022 0204 	bic.w	r2, r2, #4
 8002e6c:	621a      	str	r2, [r3, #32]
 8002e6e:	e7e0      	b.n	8002e32 <HAL_RCC_OscConfig+0x292>
 8002e70:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	f042 0204 	orr.w	r2, r2, #4
 8002e78:	621a      	str	r2, [r3, #32]
 8002e7a:	6a1a      	ldr	r2, [r3, #32]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	621a      	str	r2, [r3, #32]
 8002e82:	e7d6      	b.n	8002e32 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002e84:	f7ff f848 	bl	8001f18 <HAL_GetTick>
 8002e88:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8a:	4b47      	ldr	r3, [pc, #284]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f013 0f02 	tst.w	r3, #2
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7ff f840 	bl	8001f18 <HAL_GetTick>
 8002e98:	1b80      	subs	r0, r0, r6
 8002e9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e9e:	4298      	cmp	r0, r3
 8002ea0:	d9f3      	bls.n	8002e8a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	e077      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8002ea6:	b9e5      	cbnz	r5, 8002ee2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea8:	69e3      	ldr	r3, [r4, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d072      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eae:	4a3e      	ldr	r2, [pc, #248]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002eb0:	6852      	ldr	r2, [r2, #4]
 8002eb2:	f002 020c 	and.w	r2, r2, #12
 8002eb6:	2a08      	cmp	r2, #8
 8002eb8:	d056      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d017      	beq.n	8002eee <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8002fac <HAL_RCC_OscConfig+0x40c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002ec4:	f7ff f828 	bl	8001f18 <HAL_GetTick>
 8002ec8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eca:	4b37      	ldr	r3, [pc, #220]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002ed2:	d047      	beq.n	8002f64 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7ff f820 	bl	8001f18 <HAL_GetTick>
 8002ed8:	1b00      	subs	r0, r0, r4
 8002eda:	2802      	cmp	r0, #2
 8002edc:	d9f5      	bls.n	8002eca <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8002ede:	2003      	movs	r0, #3
 8002ee0:	e059      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee2:	4a31      	ldr	r2, [pc, #196]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002ee4:	69d3      	ldr	r3, [r2, #28]
 8002ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	61d3      	str	r3, [r2, #28]
 8002eec:	e7dc      	b.n	8002ea8 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b2f      	ldr	r3, [pc, #188]	@ (8002fac <HAL_RCC_OscConfig+0x40c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002ef4:	f7ff f810 	bl	8001f18 <HAL_GetTick>
 8002ef8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efa:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002f02:	d006      	beq.n	8002f12 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7ff f808 	bl	8001f18 <HAL_GetTick>
 8002f08:	1b40      	subs	r0, r0, r5
 8002f0a:	2802      	cmp	r0, #2
 8002f0c:	d9f5      	bls.n	8002efa <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002f0e:	2003      	movs	r0, #3
 8002f10:	e041      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f12:	6a23      	ldr	r3, [r4, #32]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f18:	d01a      	beq.n	8002f50 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1a:	4923      	ldr	r1, [pc, #140]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002f1c:	684b      	ldr	r3, [r1, #4]
 8002f1e:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8002f22:	6a22      	ldr	r2, [r4, #32]
 8002f24:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002f26:	4302      	orrs	r2, r0
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fac <HAL_RCC_OscConfig+0x40c>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002f32:	f7fe fff1 	bl	8001f18 <HAL_GetTick>
 8002f36:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f38:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002f40:	d10e      	bne.n	8002f60 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe ffe9 	bl	8001f18 <HAL_GetTick>
 8002f46:	1b00      	subs	r0, r0, r4
 8002f48:	2802      	cmp	r0, #2
 8002f4a:	d9f5      	bls.n	8002f38 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	e022      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f50:	4a15      	ldr	r2, [pc, #84]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002f52:	6853      	ldr	r3, [r2, #4]
 8002f54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002f58:	68a1      	ldr	r1, [r4, #8]
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	6053      	str	r3, [r2, #4]
 8002f5e:	e7dc      	b.n	8002f1a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002f60:	2000      	movs	r0, #0
 8002f62:	e018      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
 8002f64:	2000      	movs	r0, #0
 8002f66:	e016      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d016      	beq.n	8002f9a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <HAL_RCC_OscConfig+0x408>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f70:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002f74:	6a22      	ldr	r2, [r4, #32]
 8002f76:	4291      	cmp	r1, r2
 8002f78:	d111      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f7a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002f7e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10e      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002f84:	2000      	movs	r0, #0
 8002f86:	e006      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002f88:	2001      	movs	r0, #1
}
 8002f8a:	4770      	bx	lr
        return HAL_ERROR;
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	e002      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002f90:	2001      	movs	r0, #1
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002f94:	2000      	movs	r0, #0
}
 8002f96:	b002      	add	sp, #8
 8002f98:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	e7fb      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	e7f9      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	e7f7      	b.n	8002f96 <HAL_RCC_OscConfig+0x3f6>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	42420000 	.word	0x42420000

08002fb0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x40>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002fb4:	f003 020c 	and.w	r2, r3, #12
 8002fb8:	2a08      	cmp	r2, #8
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002fbc:	480d      	ldr	r0, [pc, #52]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8002fbe:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fc0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002fc4:	490c      	ldr	r1, [pc, #48]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x48>)
 8002fc6:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fc8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fce:	4b08      	ldr	r3, [pc, #32]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x40>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002fd6:	4a09      	ldr	r2, [pc, #36]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x4c>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fda:	4a06      	ldr	r2, [pc, #24]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x44>)
 8002fdc:	fb02 f000 	mul.w	r0, r2, r0
 8002fe0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fe4:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x50>)
 8002fe8:	fb03 f000 	mul.w	r0, r3, r0
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	007a1200 	.word	0x007a1200
 8002ff8:	08004b28 	.word	0x08004b28
 8002ffc:	08004b24 	.word	0x08004b24
 8003000:	003d0900 	.word	0x003d0900

08003004 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003004:	2800      	cmp	r0, #0
 8003006:	f000 80a0 	beq.w	800314a <HAL_RCC_ClockConfig+0x146>
{
 800300a:	b570      	push	{r4, r5, r6, lr}
 800300c:	460d      	mov	r5, r1
 800300e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003010:	4b52      	ldr	r3, [pc, #328]	@ (800315c <HAL_RCC_ClockConfig+0x158>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	428b      	cmp	r3, r1
 800301a:	d20b      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301c:	4a4f      	ldr	r2, [pc, #316]	@ (800315c <HAL_RCC_ClockConfig+0x158>)
 800301e:	6813      	ldr	r3, [r2, #0]
 8003020:	f023 0307 	bic.w	r3, r3, #7
 8003024:	430b      	orrs	r3, r1
 8003026:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003028:	6813      	ldr	r3, [r2, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	428b      	cmp	r3, r1
 8003030:	f040 808d 	bne.w	800314e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	f013 0f02 	tst.w	r3, #2
 800303a:	d017      	beq.n	800306c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	f013 0f04 	tst.w	r3, #4
 8003040:	d004      	beq.n	800304c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003042:	4a47      	ldr	r2, [pc, #284]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 8003044:	6853      	ldr	r3, [r2, #4]
 8003046:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800304a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	f013 0f08 	tst.w	r3, #8
 8003052:	d004      	beq.n	800305e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4a42      	ldr	r2, [pc, #264]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 8003056:	6853      	ldr	r3, [r2, #4]
 8003058:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800305c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305e:	4a40      	ldr	r2, [pc, #256]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 8003060:	6853      	ldr	r3, [r2, #4]
 8003062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003066:	68a1      	ldr	r1, [r4, #8]
 8003068:	430b      	orrs	r3, r1
 800306a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	f013 0f01 	tst.w	r3, #1
 8003072:	d031      	beq.n	80030d8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003074:	6863      	ldr	r3, [r4, #4]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d020      	beq.n	80030bc <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307a:	2b02      	cmp	r3, #2
 800307c:	d025      	beq.n	80030ca <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4a38      	ldr	r2, [pc, #224]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	f012 0f02 	tst.w	r2, #2
 8003086:	d064      	beq.n	8003152 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003088:	4935      	ldr	r1, [pc, #212]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 800308a:	684a      	ldr	r2, [r1, #4]
 800308c:	f022 0203 	bic.w	r2, r2, #3
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003094:	f7fe ff40 	bl	8001f18 <HAL_GetTick>
 8003098:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	6862      	ldr	r2, [r4, #4]
 80030a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80030a8:	d016      	beq.n	80030d8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030aa:	f7fe ff35 	bl	8001f18 <HAL_GetTick>
 80030ae:	1b80      	subs	r0, r0, r6
 80030b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030b4:	4298      	cmp	r0, r3
 80030b6:	d9f0      	bls.n	800309a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80030b8:	2003      	movs	r0, #3
 80030ba:	e045      	b.n	8003148 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030bc:	4a28      	ldr	r2, [pc, #160]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80030c4:	d1e0      	bne.n	8003088 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80030c6:	2001      	movs	r0, #1
 80030c8:	e03e      	b.n	8003148 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ca:	4a25      	ldr	r2, [pc, #148]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80030d2:	d1d9      	bne.n	8003088 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80030d4:	2001      	movs	r0, #1
 80030d6:	e037      	b.n	8003148 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b20      	ldr	r3, [pc, #128]	@ (800315c <HAL_RCC_ClockConfig+0x158>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	42ab      	cmp	r3, r5
 80030e2:	d90a      	bls.n	80030fa <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e4:	4a1d      	ldr	r2, [pc, #116]	@ (800315c <HAL_RCC_ClockConfig+0x158>)
 80030e6:	6813      	ldr	r3, [r2, #0]
 80030e8:	f023 0307 	bic.w	r3, r3, #7
 80030ec:	432b      	orrs	r3, r5
 80030ee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f0:	6813      	ldr	r3, [r2, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	42ab      	cmp	r3, r5
 80030f8:	d12d      	bne.n	8003156 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	f013 0f04 	tst.w	r3, #4
 8003100:	d006      	beq.n	8003110 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003102:	4a17      	ldr	r2, [pc, #92]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 8003104:	6853      	ldr	r3, [r2, #4]
 8003106:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800310a:	68e1      	ldr	r1, [r4, #12]
 800310c:	430b      	orrs	r3, r1
 800310e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	f013 0f08 	tst.w	r3, #8
 8003116:	d007      	beq.n	8003128 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003118:	4a11      	ldr	r2, [pc, #68]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 800311a:	6853      	ldr	r3, [r2, #4]
 800311c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003120:	6921      	ldr	r1, [r4, #16]
 8003122:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003126:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003128:	f7ff ff42 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <HAL_RCC_ClockConfig+0x15c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003134:	4a0b      	ldr	r2, [pc, #44]	@ (8003164 <HAL_RCC_ClockConfig+0x160>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	40d8      	lsrs	r0, r3
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_RCC_ClockConfig+0x164>)
 800313c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800313e:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_RCC_ClockConfig+0x168>)
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	f7fe fea5 	bl	8001e90 <HAL_InitTick>
  return HAL_OK;
 8003146:	2000      	movs	r0, #0
}
 8003148:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800314a:	2001      	movs	r0, #1
}
 800314c:	4770      	bx	lr
    return HAL_ERROR;
 800314e:	2001      	movs	r0, #1
 8003150:	e7fa      	b.n	8003148 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8003152:	2001      	movs	r0, #1
 8003154:	e7f8      	b.n	8003148 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8003156:	2001      	movs	r0, #1
 8003158:	e7f6      	b.n	8003148 <HAL_RCC_ClockConfig+0x144>
 800315a:	bf00      	nop
 800315c:	40022000 	.word	0x40022000
 8003160:	40021000 	.word	0x40021000
 8003164:	08004b14 	.word	0x08004b14
 8003168:	2000009c 	.word	0x2000009c
 800316c:	200000a4 	.word	0x200000a4

08003170 <HAL_RCC_GetHCLKFreq>:
}
 8003170:	4b01      	ldr	r3, [pc, #4]	@ (8003178 <HAL_RCC_GetHCLKFreq+0x8>)
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	2000009c 	.word	0x2000009c

0800317c <HAL_RCC_GetPCLK1Freq>:
{
 800317c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800317e:	f7ff fff7 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8003182:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800318a:	4a03      	ldr	r2, [pc, #12]	@ (8003198 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
}
 800318e:	40d8      	lsrs	r0, r3
 8003190:	bd08      	pop	{r3, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	08004b0c 	.word	0x08004b0c

0800319c <HAL_RCC_GetPCLK2Freq>:
{
 800319c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800319e:	f7ff ffe7 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031a2:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80031aa:	4a03      	ldr	r2, [pc, #12]	@ (80031b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80031ae:	40d8      	lsrs	r0, r3
 80031b0:	bd08      	pop	{r3, pc}
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08004b0c 	.word	0x08004b0c

080031bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031c2:	6803      	ldr	r3, [r0, #0]
 80031c4:	f013 0f01 	tst.w	r3, #1
 80031c8:	d036      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ca:	4b3f      	ldr	r3, [pc, #252]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80031d2:	d149      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d4:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80031dc:	61da      	str	r2, [r3, #28]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031e8:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80031f2:	d03b      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031f4:	4b34      	ldr	r3, [pc, #208]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031f8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80031fc:	d013      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80031fe:	6862      	ldr	r2, [r4, #4]
 8003200:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003204:	429a      	cmp	r2, r3
 8003206:	d00e      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003208:	4a2f      	ldr	r2, [pc, #188]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800320a:	6a13      	ldr	r3, [r2, #32]
 800320c:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003210:	492f      	ldr	r1, [pc, #188]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003212:	2601      	movs	r6, #1
 8003214:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003218:	2600      	movs	r6, #0
 800321a:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800321e:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003220:	f013 0f01 	tst.w	r3, #1
 8003224:	d136      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003226:	4a28      	ldr	r2, [pc, #160]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003228:	6a13      	ldr	r3, [r2, #32]
 800322a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800322e:	6861      	ldr	r1, [r4, #4]
 8003230:	430b      	orrs	r3, r1
 8003232:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003234:	2d00      	cmp	r5, #0
 8003236:	d13e      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	f013 0f02 	tst.w	r3, #2
 800323e:	d006      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003240:	4a21      	ldr	r2, [pc, #132]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003242:	6853      	ldr	r3, [r2, #4]
 8003244:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003248:	68a1      	ldr	r1, [r4, #8]
 800324a:	430b      	orrs	r3, r1
 800324c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	f013 0f10 	tst.w	r3, #16
 8003254:	d034      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003256:	4a1c      	ldr	r2, [pc, #112]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003258:	6853      	ldr	r3, [r2, #4]
 800325a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800325e:	68e1      	ldr	r1, [r4, #12]
 8003260:	430b      	orrs	r3, r1
 8003262:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003264:	2000      	movs	r0, #0
 8003266:	e02c      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8003268:	2500      	movs	r5, #0
 800326a:	e7be      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326c:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800326e:	6813      	ldr	r3, [r2, #0]
 8003270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003274:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003276:	f7fe fe4f 	bl	8001f18 <HAL_GetTick>
 800327a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003284:	d1b6      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7fe fe47 	bl	8001f18 <HAL_GetTick>
 800328a:	1b80      	subs	r0, r0, r6
 800328c:	2864      	cmp	r0, #100	@ 0x64
 800328e:	d9f5      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003290:	2003      	movs	r0, #3
 8003292:	e016      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8003294:	f7fe fe40 	bl	8001f18 <HAL_GetTick>
 8003298:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f013 0f02 	tst.w	r3, #2
 80032a2:	d1c0      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe fe38 	bl	8001f18 <HAL_GetTick>
 80032a8:	1b80      	subs	r0, r0, r6
 80032aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032ae:	4298      	cmp	r0, r3
 80032b0:	d9f3      	bls.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 80032b2:	2003      	movs	r0, #3
 80032b4:	e005      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b6:	69d3      	ldr	r3, [r2, #28]
 80032b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032bc:	61d3      	str	r3, [r2, #28]
 80032be:	e7bb      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 80032c0:	2000      	movs	r0, #0
}
 80032c2:	b002      	add	sp, #8
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40007000 	.word	0x40007000
 80032d0:	42420000 	.word	0x42420000

080032d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032d4:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80032d6:	2802      	cmp	r0, #2
 80032d8:	d04e      	beq.n	8003378 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80032da:	2810      	cmp	r0, #16
 80032dc:	d003      	beq.n	80032e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80032de:	2801      	cmp	r0, #1
 80032e0:	d028      	beq.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80032e2:	2000      	movs	r0, #0
 80032e4:	e052      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80032e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80032e8:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 80032f0:	d04c      	beq.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032f2:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80032f6:	4928      	ldr	r1, [pc, #160]	@ (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80032f8:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032fa:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80032fe:	d015      	beq.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003300:	4b24      	ldr	r3, [pc, #144]	@ (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003308:	4a24      	ldr	r2, [pc, #144]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800330a:	5cd2      	ldrb	r2, [r2, r3]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800330c:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 800330e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003312:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003316:	4b1f      	ldr	r3, [pc, #124]	@ (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800331e:	d135      	bne.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 8003320:	0040      	lsls	r0, r0, #1
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8003324:	fba3 3000 	umull	r3, r0, r3, r0
 8003328:	0840      	lsrs	r0, r0, #1
 800332a:	e02f      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800332c:	4b1e      	ldr	r3, [pc, #120]	@ (80033a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 800332e:	fb03 f000 	mul.w	r0, r3, r0
 8003332:	e7f0      	b.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003334:	4b17      	ldr	r3, [pc, #92]	@ (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003336:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003338:	f240 3202 	movw	r2, #770	@ 0x302
 800333c:	401a      	ands	r2, r3
 800333e:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 8003342:	d024      	beq.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800334c:	d004      	beq.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800334e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003352:	d009      	beq.n	8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003354:	2000      	movs	r0, #0
 8003356:	e019      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003358:	4a0e      	ldr	r2, [pc, #56]	@ (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800335a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800335c:	f012 0f02 	tst.w	r2, #2
 8003360:	d0f5      	beq.n	800334e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 8003362:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8003366:	e011      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003368:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8003370:	d00c      	beq.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        frequency = HSE_VALUE / 128U;
 8003372:	f24f 4024 	movw	r0, #62500	@ 0xf424
    default:
    {
      break;
    }
  }
  return (frequency);
 8003376:	e009      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003378:	f7ff ff10 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 800337c:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003384:	3301      	adds	r3, #1
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800338c:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 800338e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003392:	e7fb      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8003394:	40021000 	.word	0x40021000
 8003398:	08004b3c 	.word	0x08004b3c
 800339c:	08004b38 	.word	0x08004b38
 80033a0:	007a1200 	.word	0x007a1200
 80033a4:	aaaaaaab 	.word	0xaaaaaaab
 80033a8:	003d0900 	.word	0x003d0900

080033ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	4605      	mov	r5, r0
 80033b4:	4688      	mov	r8, r1
 80033b6:	4617      	mov	r7, r2
 80033b8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033ba:	f7fe fdad 	bl	8001f18 <HAL_GetTick>
 80033be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033c0:	1a1b      	subs	r3, r3, r0
 80033c2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80033c6:	f7fe fda7 	bl	8001f18 <HAL_GetTick>
 80033ca:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033cc:	4b28      	ldr	r3, [pc, #160]	@ (8003470 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80033d4:	fb09 f303 	mul.w	r3, r9, r3
 80033d8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033da:	682b      	ldr	r3, [r5, #0]
 80033dc:	689c      	ldr	r4, [r3, #8]
 80033de:	ea38 0404 	bics.w	r4, r8, r4
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	42bb      	cmp	r3, r7
 80033ea:	d03d      	beq.n	8003468 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	f1b6 3fff 	cmp.w	r6, #4294967295
 80033f0:	d0f3      	beq.n	80033da <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033f2:	f7fe fd91 	bl	8001f18 <HAL_GetTick>
 80033f6:	eba0 000a 	sub.w	r0, r0, sl
 80033fa:	4548      	cmp	r0, r9
 80033fc:	d207      	bcs.n	800340e <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033fe:	9a01      	ldr	r2, [sp, #4]
 8003400:	b102      	cbz	r2, 8003404 <SPI_WaitFlagStateUntilTimeout+0x58>
 8003402:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003404:	9b01      	ldr	r3, [sp, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	4691      	mov	r9, r2
 800340c:	e7e5      	b.n	80033da <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800340e:	682a      	ldr	r2, [r5, #0]
 8003410:	6853      	ldr	r3, [r2, #4]
 8003412:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003416:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003418:	686b      	ldr	r3, [r5, #4]
 800341a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800341e:	d00b      	beq.n	8003438 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003420:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003426:	d014      	beq.n	8003452 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8003428:	2301      	movs	r3, #1
 800342a:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800342e:	2300      	movs	r3, #0
 8003430:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003434:	2003      	movs	r0, #3
 8003436:	e018      	b.n	800346a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003438:	68ab      	ldr	r3, [r5, #8]
 800343a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800343e:	d002      	beq.n	8003446 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003444:	d1ec      	bne.n	8003420 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8003446:	682a      	ldr	r2, [r5, #0]
 8003448:	6813      	ldr	r3, [r2, #0]
 800344a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	e7e6      	b.n	8003420 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8003452:	682a      	ldr	r2, [r5, #0]
 8003454:	6813      	ldr	r3, [r2, #0]
 8003456:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	682a      	ldr	r2, [r5, #0]
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e7df      	b.n	8003428 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8003468:	2000      	movs	r0, #0
}
 800346a:	b002      	add	sp, #8
 800346c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003470:	2000009c 	.word	0x2000009c

08003474 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	4606      	mov	r6, r0
 800347a:	460c      	mov	r4, r1
 800347c:	4615      	mov	r5, r2
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800347e:	9200      	str	r2, [sp, #0]
 8003480:	460b      	mov	r3, r1
 8003482:	2201      	movs	r2, #1
 8003484:	2102      	movs	r1, #2
 8003486:	f7ff ff91 	bl	80033ac <SPI_WaitFlagStateUntilTimeout>
 800348a:	b948      	cbnz	r0, 80034a0 <SPI_EndRxTxTransaction+0x2c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800348c:	9500      	str	r5, [sp, #0]
 800348e:	4623      	mov	r3, r4
 8003490:	2200      	movs	r2, #0
 8003492:	2180      	movs	r1, #128	@ 0x80
 8003494:	4630      	mov	r0, r6
 8003496:	f7ff ff89 	bl	80033ac <SPI_WaitFlagStateUntilTimeout>
 800349a:	b938      	cbnz	r0, 80034ac <SPI_EndRxTxTransaction+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800349c:	b002      	add	sp, #8
 800349e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a0:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80034a2:	f043 0320 	orr.w	r3, r3, #32
 80034a6:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034a8:	2003      	movs	r0, #3
 80034aa:	e7f7      	b.n	800349c <SPI_EndRxTxTransaction+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ac:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80034ae:	f043 0320 	orr.w	r3, r3, #32
 80034b2:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034b4:	2003      	movs	r0, #3
 80034b6:	e7f1      	b.n	800349c <SPI_EndRxTxTransaction+0x28>

080034b8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d056      	beq.n	800356a <HAL_SPI_Init+0xb2>
{
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80034c2:	b933      	cbnz	r3, 80034d2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034c4:	6843      	ldr	r3, [r0, #4]
 80034c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ca:	d005      	beq.n	80034d8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61c3      	str	r3, [r0, #28]
 80034d0:	e002      	b.n	80034d8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d2:	2300      	movs	r3, #0
 80034d4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034d6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80034dc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03c      	beq.n	800355e <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80034e4:	2302      	movs	r3, #2
 80034e6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80034ea:	6822      	ldr	r2, [r4, #0]
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034f2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f4:	6863      	ldr	r3, [r4, #4]
 80034f6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80034fa:	68a2      	ldr	r2, [r4, #8]
 80034fc:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8003500:	4313      	orrs	r3, r2
 8003502:	68e2      	ldr	r2, [r4, #12]
 8003504:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003508:	4313      	orrs	r3, r2
 800350a:	6922      	ldr	r2, [r4, #16]
 800350c:	f002 0202 	and.w	r2, r2, #2
 8003510:	4313      	orrs	r3, r2
 8003512:	6962      	ldr	r2, [r4, #20]
 8003514:	f002 0201 	and.w	r2, r2, #1
 8003518:	4313      	orrs	r3, r2
 800351a:	69a2      	ldr	r2, [r4, #24]
 800351c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003520:	4313      	orrs	r3, r2
 8003522:	69e2      	ldr	r2, [r4, #28]
 8003524:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003528:	4313      	orrs	r3, r2
 800352a:	6a22      	ldr	r2, [r4, #32]
 800352c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8003530:	4313      	orrs	r3, r2
 8003532:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003534:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003538:	6821      	ldr	r1, [r4, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800353e:	8b63      	ldrh	r3, [r4, #26]
 8003540:	6822      	ldr	r2, [r4, #0]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	69d3      	ldr	r3, [r2, #28]
 800354c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003550:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003552:	2000      	movs	r0, #0
 8003554:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003556:	2301      	movs	r3, #1
 8003558:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 800355c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800355e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003562:	4620      	mov	r0, r4
 8003564:	f7fe f8fe 	bl	8001764 <HAL_SPI_MspInit>
 8003568:	e7bc      	b.n	80034e4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800356a:	2001      	movs	r0, #1
}
 800356c:	4770      	bx	lr

0800356e <HAL_SPI_TransmitReceive>:
{
 800356e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003572:	b083      	sub	sp, #12
 8003574:	4604      	mov	r4, r0
 8003576:	4688      	mov	r8, r1
 8003578:	4691      	mov	r9, r2
 800357a:	461f      	mov	r7, r3
 800357c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800357e:	f7fe fccb 	bl	8001f18 <HAL_GetTick>
 8003582:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003584:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003588:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800358a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800358c:	2b01      	cmp	r3, #1
 800358e:	d00a      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x38>
 8003590:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003594:	f040 8105 	bne.w	80037a2 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003598:	68a2      	ldr	r2, [r4, #8]
 800359a:	2a00      	cmp	r2, #0
 800359c:	f040 8105 	bne.w	80037aa <HAL_SPI_TransmitReceive+0x23c>
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	f040 8104 	bne.w	80037ae <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035a6:	f1b8 0f00 	cmp.w	r8, #0
 80035aa:	f000 8102 	beq.w	80037b2 <HAL_SPI_TransmitReceive+0x244>
 80035ae:	f1b9 0f00 	cmp.w	r9, #0
 80035b2:	f000 8100 	beq.w	80037b6 <HAL_SPI_TransmitReceive+0x248>
 80035b6:	2f00      	cmp	r7, #0
 80035b8:	f000 80ff 	beq.w	80037ba <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 80035bc:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f000 80fc 	beq.w	80037be <HAL_SPI_TransmitReceive+0x250>
 80035c6:	2301      	movs	r3, #1
 80035c8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035cc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035d6:	2305      	movs	r3, #5
 80035d8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035dc:	2300      	movs	r3, #0
 80035de:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035e0:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80035e4:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80035e6:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80035e8:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80035ec:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80035ee:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 80035f0:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035f2:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80035fc:	d103      	bne.n	8003606 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003604:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003606:	68e3      	ldr	r3, [r4, #12]
 8003608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800360c:	d011      	beq.n	8003632 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360e:	6863      	ldr	r3, [r4, #4]
 8003610:	b10b      	cbz	r3, 8003616 <HAL_SPI_TransmitReceive+0xa8>
 8003612:	2f01      	cmp	r7, #1
 8003614:	d10b      	bne.n	800362e <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003616:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800361e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003620:	3301      	adds	r3, #1
 8003622:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003624:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29b      	uxth	r3, r3
 800362c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800362e:	2701      	movs	r7, #1
 8003630:	e071      	b.n	8003716 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003632:	6863      	ldr	r3, [r4, #4]
 8003634:	b10b      	cbz	r3, 800363a <HAL_SPI_TransmitReceive+0xcc>
 8003636:	2f01      	cmp	r7, #1
 8003638:	d10b      	bne.n	8003652 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800363a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003642:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003644:	3302      	adds	r3, #2
 8003646:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003648:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29b      	uxth	r3, r3
 8003650:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003652:	2701      	movs	r7, #1
 8003654:	e01b      	b.n	800368e <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	f012 0f01 	tst.w	r2, #1
 800365e:	d00e      	beq.n	800367e <HAL_SPI_TransmitReceive+0x110>
 8003660:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003662:	b292      	uxth	r2, r2
 8003664:	b15a      	cbz	r2, 800367e <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800366a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800366c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800366e:	3302      	adds	r3, #2
 8003670:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003672:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29b      	uxth	r3, r3
 800367a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800367c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800367e:	f7fe fc4b 	bl	8001f18 <HAL_GetTick>
 8003682:	1b80      	subs	r0, r0, r6
 8003684:	42a8      	cmp	r0, r5
 8003686:	d302      	bcc.n	800368e <HAL_SPI_TransmitReceive+0x120>
 8003688:	f1b5 3fff 	cmp.w	r5, #4294967295
 800368c:	d11e      	bne.n	80036cc <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800368e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003690:	b29b      	uxth	r3, r3
 8003692:	b91b      	cbnz	r3, 800369c <HAL_SPI_TransmitReceive+0x12e>
 8003694:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d062      	beq.n	8003762 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	f012 0f02 	tst.w	r2, #2
 80036a4:	d0d7      	beq.n	8003656 <HAL_SPI_TransmitReceive+0xe8>
 80036a6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80036a8:	b292      	uxth	r2, r2
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	d0d3      	beq.n	8003656 <HAL_SPI_TransmitReceive+0xe8>
 80036ae:	2f00      	cmp	r7, #0
 80036b0:	d0d1      	beq.n	8003656 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036b2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80036b4:	8812      	ldrh	r2, [r2, #0]
 80036b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80036ba:	3302      	adds	r3, #2
 80036bc:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80036be:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80036c8:	2700      	movs	r7, #0
 80036ca:	e7c4      	b.n	8003656 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80036d2:	2300      	movs	r3, #0
 80036d4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80036d8:	2003      	movs	r0, #3
 80036da:	e063      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	f012 0f01 	tst.w	r2, #1
 80036e4:	d00e      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x196>
 80036e6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80036e8:	b292      	uxth	r2, r2
 80036ea:	b15a      	cbz	r2, 8003704 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036f4:	3301      	adds	r3, #1
 80036f6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80036f8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29b      	uxth	r3, r3
 8003700:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003702:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003704:	f7fe fc08 	bl	8001f18 <HAL_GetTick>
 8003708:	1b83      	subs	r3, r0, r6
 800370a:	42ab      	cmp	r3, r5
 800370c:	d302      	bcc.n	8003714 <HAL_SPI_TransmitReceive+0x1a6>
 800370e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003712:	d11e      	bne.n	8003752 <HAL_SPI_TransmitReceive+0x1e4>
 8003714:	b1ed      	cbz	r5, 8003752 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003716:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003718:	b29b      	uxth	r3, r3
 800371a:	b913      	cbnz	r3, 8003722 <HAL_SPI_TransmitReceive+0x1b4>
 800371c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	b1fb      	cbz	r3, 8003762 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	f012 0f02 	tst.w	r2, #2
 800372a:	d0d7      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x16e>
 800372c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800372e:	b292      	uxth	r2, r2
 8003730:	2a00      	cmp	r2, #0
 8003732:	d0d3      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x16e>
 8003734:	2f00      	cmp	r7, #0
 8003736:	d0d1      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003738:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800373a:	7812      	ldrb	r2, [r2, #0]
 800373c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800373e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003740:	3301      	adds	r3, #1
 8003742:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003744:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29b      	uxth	r3, r3
 800374c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800374e:	2700      	movs	r7, #0
 8003750:	e7c4      	b.n	80036dc <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8003752:	2301      	movs	r3, #1
 8003754:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003758:	2300      	movs	r3, #0
 800375a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 800375e:	2003      	movs	r0, #3
 8003760:	e020      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003762:	4632      	mov	r2, r6
 8003764:	4629      	mov	r1, r5
 8003766:	4620      	mov	r0, r4
 8003768:	f7ff fe84 	bl	8003474 <SPI_EndRxTxTransaction>
 800376c:	b990      	cbnz	r0, 8003794 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800376e:	68a3      	ldr	r3, [r4, #8]
 8003770:	b933      	cbnz	r3, 8003780 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	9201      	str	r2, [sp, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003780:	2301      	movs	r3, #1
 8003782:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003786:	2300      	movs	r3, #0
 8003788:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800378c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800378e:	b14b      	cbz	r3, 80037a4 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8003790:	2001      	movs	r0, #1
 8003792:	e007      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003794:	2320      	movs	r3, #32
 8003796:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003798:	2300      	movs	r3, #0
 800379a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800379e:	2001      	movs	r0, #1
 80037a0:	e000      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 80037a2:	2002      	movs	r0, #2
}
 80037a4:	b003      	add	sp, #12
 80037a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80037aa:	2002      	movs	r0, #2
 80037ac:	e7fa      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>
 80037ae:	2002      	movs	r0, #2
 80037b0:	e7f8      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 80037b2:	2001      	movs	r0, #1
 80037b4:	e7f6      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>
 80037b6:	2001      	movs	r0, #1
 80037b8:	e7f4      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>
 80037ba:	2001      	movs	r0, #1
 80037bc:	e7f2      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 80037be:	2002      	movs	r0, #2
 80037c0:	e7f0      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x236>

080037c2 <HAL_SPI_ErrorCallback>:
}
 80037c2:	4770      	bx	lr

080037c4 <HAL_SPI_IRQHandler>:
{
 80037c4:	b530      	push	{r4, r5, lr}
 80037c6:	b085      	sub	sp, #20
 80037c8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80037ca:	6802      	ldr	r2, [r0, #0]
 80037cc:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80037ce:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037d0:	f3c3 1080 	ubfx	r0, r3, #6, #1
 80037d4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80037d8:	d105      	bne.n	80037e6 <HAL_SPI_IRQHandler+0x22>
 80037da:	f013 0f01 	tst.w	r3, #1
 80037de:	d002      	beq.n	80037e6 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037e0:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80037e4:	d15a      	bne.n	800389c <HAL_SPI_IRQHandler+0xd8>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80037e6:	f013 0f02 	tst.w	r3, #2
 80037ea:	d002      	beq.n	80037f2 <HAL_SPI_IRQHandler+0x2e>
 80037ec:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80037f0:	d158      	bne.n	80038a4 <HAL_SPI_IRQHandler+0xe0>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80037f2:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80037f6:	f013 0f20 	tst.w	r3, #32
 80037fa:	d101      	bne.n	8003800 <HAL_SPI_IRQHandler+0x3c>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d054      	beq.n	80038aa <HAL_SPI_IRQHandler+0xe6>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003800:	f011 0f20 	tst.w	r1, #32
 8003804:	d051      	beq.n	80038aa <HAL_SPI_IRQHandler+0xe6>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003806:	b178      	cbz	r0, 8003828 <HAL_SPI_IRQHandler+0x64>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003808:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b03      	cmp	r3, #3
 8003810:	d04d      	beq.n	80038ae <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003812:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800381a:	2300      	movs	r3, #0
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	68d3      	ldr	r3, [r2, #12]
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	6893      	ldr	r3, [r2, #8]
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	9b01      	ldr	r3, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003828:	b165      	cbz	r5, 8003844 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800382a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6563      	str	r3, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003832:	2300      	movs	r3, #0
 8003834:	9303      	str	r3, [sp, #12]
 8003836:	6893      	ldr	r3, [r2, #8]
 8003838:	9303      	str	r3, [sp, #12]
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003844:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003846:	2b00      	cmp	r3, #0
 8003848:	d02f      	beq.n	80038aa <HAL_SPI_IRQHandler+0xe6>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800384a:	6822      	ldr	r2, [r4, #0]
 800384c:	6853      	ldr	r3, [r2, #4]
 800384e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003852:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003854:	2301      	movs	r3, #1
 8003856:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800385a:	f011 0f03 	tst.w	r1, #3
 800385e:	d02e      	beq.n	80038be <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003860:	6822      	ldr	r2, [r4, #0]
 8003862:	6853      	ldr	r3, [r2, #4]
 8003864:	f023 0303 	bic.w	r3, r3, #3
 8003868:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800386a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800386c:	b14b      	cbz	r3, 8003882 <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800386e:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <HAL_SPI_IRQHandler+0x104>)
 8003870:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003872:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003874:	f7fe ff74 	bl	8002760 <HAL_DMA_Abort_IT>
 8003878:	b118      	cbz	r0, 8003882 <HAL_SPI_IRQHandler+0xbe>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800387a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800387c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003880:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003882:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003884:	b18b      	cbz	r3, 80038aa <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003886:	4a10      	ldr	r2, [pc, #64]	@ (80038c8 <HAL_SPI_IRQHandler+0x104>)
 8003888:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800388a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800388c:	f7fe ff68 	bl	8002760 <HAL_DMA_Abort_IT>
 8003890:	b158      	cbz	r0, 80038aa <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003892:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003898:	6563      	str	r3, [r4, #84]	@ 0x54
 800389a:	e006      	b.n	80038aa <HAL_SPI_IRQHandler+0xe6>
    hspi->RxISR(hspi);
 800389c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800389e:	4620      	mov	r0, r4
 80038a0:	4798      	blx	r3
    return;
 80038a2:	e002      	b.n	80038aa <HAL_SPI_IRQHandler+0xe6>
    hspi->TxISR(hspi);
 80038a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80038a6:	4620      	mov	r0, r4
 80038a8:	4798      	blx	r3
}
 80038aa:	b005      	add	sp, #20
 80038ac:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ae:	2300      	movs	r3, #0
 80038b0:	9302      	str	r3, [sp, #8]
 80038b2:	68d3      	ldr	r3, [r2, #12]
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	6893      	ldr	r3, [r2, #8]
 80038b8:	9302      	str	r3, [sp, #8]
 80038ba:	9b02      	ldr	r3, [sp, #8]
        return;
 80038bc:	e7f5      	b.n	80038aa <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 80038be:	4620      	mov	r0, r4
 80038c0:	f7ff ff7f 	bl	80037c2 <HAL_SPI_ErrorCallback>
    return;
 80038c4:	e7f1      	b.n	80038aa <HAL_SPI_IRQHandler+0xe6>
 80038c6:	bf00      	nop
 80038c8:	080038cd 	.word	0x080038cd

080038cc <SPI_DMAAbortOnError>:
{
 80038cc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80038ce:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80038d4:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 80038d6:	f7ff ff74 	bl	80037c2 <HAL_SPI_ErrorCallback>
}
 80038da:	bd08      	pop	{r3, pc}

080038dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038de:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e0:	6a03      	ldr	r3, [r0, #32]
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ea:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038ec:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f0:	680c      	ldr	r4, [r1, #0]
 80038f2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038f4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038f8:	688b      	ldr	r3, [r1, #8]
 80038fa:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038fc:	4a0b      	ldr	r2, [pc, #44]	@ (800392c <TIM_OC1_SetConfig+0x50>)
 80038fe:	4290      	cmp	r0, r2
 8003900:	d006      	beq.n	8003910 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003902:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003904:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003906:	684a      	ldr	r2, [r1, #4]
 8003908:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390a:	6203      	str	r3, [r0, #32]
}
 800390c:	bc30      	pop	{r4, r5}
 800390e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003910:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003914:	68ca      	ldr	r2, [r1, #12]
 8003916:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8003918:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800391c:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003920:	694a      	ldr	r2, [r1, #20]
 8003922:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003924:	698d      	ldr	r5, [r1, #24]
 8003926:	4315      	orrs	r5, r2
 8003928:	e7eb      	b.n	8003902 <TIM_OC1_SetConfig+0x26>
 800392a:	bf00      	nop
 800392c:	40012c00 	.word	0x40012c00

08003930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003934:	6a02      	ldr	r2, [r0, #32]
 8003936:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800393a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800393c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003940:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003944:	680d      	ldr	r5, [r1, #0]
 8003946:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800394c:	688a      	ldr	r2, [r1, #8]
 800394e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003952:	4a0d      	ldr	r2, [pc, #52]	@ (8003988 <TIM_OC3_SetConfig+0x58>)
 8003954:	4290      	cmp	r0, r2
 8003956:	d006      	beq.n	8003966 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003958:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800395c:	684a      	ldr	r2, [r1, #4]
 800395e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003960:	6203      	str	r3, [r0, #32]
}
 8003962:	bc30      	pop	{r4, r5}
 8003964:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003966:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800396a:	68ca      	ldr	r2, [r1, #12]
 800396c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003970:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003974:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003978:	694a      	ldr	r2, [r1, #20]
 800397a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800397e:	698a      	ldr	r2, [r1, #24]
 8003980:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003984:	e7e8      	b.n	8003958 <TIM_OC3_SetConfig+0x28>
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00

0800398c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003990:	6a02      	ldr	r2, [r0, #32]
 8003992:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003996:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003998:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800399c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a0:	680d      	ldr	r5, [r1, #0]
 80039a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039aa:	688d      	ldr	r5, [r1, #8]
 80039ac:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b0:	4d07      	ldr	r5, [pc, #28]	@ (80039d0 <TIM_OC4_SetConfig+0x44>)
 80039b2:	42a8      	cmp	r0, r5
 80039b4:	d006      	beq.n	80039c4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ba:	684a      	ldr	r2, [r1, #4]
 80039bc:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039be:	6203      	str	r3, [r0, #32]
}
 80039c0:	bc30      	pop	{r4, r5}
 80039c2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c8:	694d      	ldr	r5, [r1, #20]
 80039ca:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80039ce:	e7f2      	b.n	80039b6 <TIM_OC4_SetConfig+0x2a>
 80039d0:	40012c00 	.word	0x40012c00

080039d4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039d4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039d6:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d8:	6a04      	ldr	r4, [r0, #32]
 80039da:	f024 0410 	bic.w	r4, r4, #16
 80039de:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e0:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039e2:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039e6:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ea:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039ee:	031b      	lsls	r3, r3, #12
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f6:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039fa:	0109      	lsls	r1, r1, #4
 80039fc:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 8003a00:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a02:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a04:	6201      	str	r1, [r0, #32]
}
 8003a06:	bc30      	pop	{r4, r5}
 8003a08:	4770      	bx	lr

08003a0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a0a:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a0c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a0e:	6a04      	ldr	r4, [r0, #32]
 8003a10:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8003a14:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a16:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a18:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003a1c:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a20:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003a2c:	f425 7500 	bic.w	r5, r5, #512	@ 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003a30:	0209      	lsls	r1, r1, #8
 8003a32:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8003a36:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a38:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003a3a:	6201      	str	r1, [r0, #32]
}
 8003a3c:	bc30      	pop	{r4, r5}
 8003a3e:	4770      	bx	lr

08003a40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a40:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003a42:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a44:	6a04      	ldr	r4, [r0, #32]
 8003a46:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8003a4a:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a4c:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a4e:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a52:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a56:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a5a:	031b      	lsls	r3, r3, #12
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003a62:	f425 5500 	bic.w	r5, r5, #8192	@ 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a66:	0309      	lsls	r1, r1, #12
 8003a68:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8003a6c:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a6e:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003a70:	6201      	str	r1, [r0, #32]
}
 8003a72:	bc30      	pop	{r4, r5}
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003a78:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d127      	bne.n	8003ad2 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	2302      	movs	r3, #2
 8003a84:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a88:	6802      	ldr	r2, [r0, #0]
 8003a8a:	68d3      	ldr	r3, [r2, #12]
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a92:	6803      	ldr	r3, [r0, #0]
 8003a94:	4a11      	ldr	r2, [pc, #68]	@ (8003adc <HAL_TIM_Base_Start_IT+0x64>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d010      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x44>
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9e:	d00d      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x44>
 8003aa0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x44>
 8003aa8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d005      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ab8:	2000      	movs	r0, #0
 8003aba:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac2:	2a06      	cmp	r2, #6
 8003ac4:	d007      	beq.n	8003ad6 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ace:	2000      	movs	r0, #0
 8003ad0:	4770      	bx	lr
    return HAL_ERROR;
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	4770      	bx	lr
  return HAL_OK;
 8003ad6:	2000      	movs	r0, #0
}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40012c00 	.word	0x40012c00

08003ae0 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_TIM_IC_CaptureCallback>:
}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_TIM_TriggerCallback>:
}
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIM_IRQHandler>:
{
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003aec:	6803      	ldr	r3, [r0, #0]
 8003aee:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003af0:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003af2:	f015 0f02 	tst.w	r5, #2
 8003af6:	d010      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003af8:	f016 0f02 	tst.w	r6, #2
 8003afc:	d00d      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003afe:	f06f 0202 	mvn.w	r2, #2
 8003b02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b04:	2301      	movs	r3, #1
 8003b06:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b08:	6803      	ldr	r3, [r0, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f013 0f03 	tst.w	r3, #3
 8003b10:	d05e      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	f7ff ffe6 	bl	8003ae2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	2300      	movs	r3, #0
 8003b18:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b1a:	f015 0f04 	tst.w	r5, #4
 8003b1e:	d012      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b20:	f016 0f04 	tst.w	r6, #4
 8003b24:	d00f      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	f06f 0204 	mvn.w	r2, #4
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003b3a:	d04f      	beq.n	8003bdc <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f7ff ffd0 	bl	8003ae2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	2300      	movs	r3, #0
 8003b44:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b46:	f015 0f08 	tst.w	r5, #8
 8003b4a:	d012      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b4c:	f016 0f08 	tst.w	r6, #8
 8003b50:	d00f      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	f06f 0208 	mvn.w	r2, #8
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f013 0f03 	tst.w	r3, #3
 8003b66:	d040      	beq.n	8003bea <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f7ff ffba 	bl	8003ae2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b72:	f015 0f10 	tst.w	r5, #16
 8003b76:	d012      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b78:	f016 0f10 	tst.w	r6, #16
 8003b7c:	d00f      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	f06f 0210 	mvn.w	r2, #16
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b86:	2308      	movs	r3, #8
 8003b88:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003b92:	d031      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b94:	4620      	mov	r0, r4
 8003b96:	f7ff ffa4 	bl	8003ae2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b9e:	f015 0f01 	tst.w	r5, #1
 8003ba2:	d002      	beq.n	8003baa <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ba4:	f016 0f01 	tst.w	r6, #1
 8003ba8:	d12d      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003baa:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003bae:	d002      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bb0:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003bb4:	d12f      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bb6:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8003bba:	d002      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bbc:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003bc0:	d131      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bc2:	f015 0f20 	tst.w	r5, #32
 8003bc6:	d002      	beq.n	8003bce <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bc8:	f016 0f20 	tst.w	r6, #32
 8003bcc:	d133      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x14e>
}
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd0:	f7ff ff86 	bl	8003ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7ff ff85 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bda:	e79c      	b.n	8003b16 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7ff ff7f 	bl	8003ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7ff ff7e 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003be8:	e7ab      	b.n	8003b42 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7ff ff78 	bl	8003ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff ff77 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bf6:	e7ba      	b.n	8003b6e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f7ff ff71 	bl	8003ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f7ff ff70 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c04:	e7c9      	b.n	8003b9a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	f06f 0201 	mvn.w	r2, #1
 8003c0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7fd f860 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
 8003c14:	e7c9      	b.n	8003baa <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 fb51 	bl	80042c6 <HAL_TIMEx_BreakCallback>
 8003c24:	e7c7      	b.n	8003bb6 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff ff59 	bl	8003ae6 <HAL_TIM_TriggerCallback>
 8003c34:	e7c5      	b.n	8003bc2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	f06f 0220 	mvn.w	r2, #32
 8003c3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 fb40 	bl	80042c4 <HAL_TIMEx_CommutCallback>
}
 8003c44:	e7c3      	b.n	8003bce <HAL_TIM_IRQHandler+0xe6>
	...

08003c48 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003c48:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc8 <TIM_Base_SetConfig+0x80>)
 8003c4c:	4290      	cmp	r0, r2
 8003c4e:	d00a      	beq.n	8003c66 <TIM_Base_SetConfig+0x1e>
 8003c50:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003c54:	d007      	beq.n	8003c66 <TIM_Base_SetConfig+0x1e>
 8003c56:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003c5a:	4290      	cmp	r0, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_Base_SetConfig+0x1e>
 8003c5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c62:	4290      	cmp	r0, r2
 8003c64:	d103      	bne.n	8003c6e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c6a:	684a      	ldr	r2, [r1, #4]
 8003c6c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6e:	4a16      	ldr	r2, [pc, #88]	@ (8003cc8 <TIM_Base_SetConfig+0x80>)
 8003c70:	4290      	cmp	r0, r2
 8003c72:	d00a      	beq.n	8003c8a <TIM_Base_SetConfig+0x42>
 8003c74:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003c78:	d007      	beq.n	8003c8a <TIM_Base_SetConfig+0x42>
 8003c7a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003c7e:	4290      	cmp	r0, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_Base_SetConfig+0x42>
 8003c82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c86:	4290      	cmp	r0, r2
 8003c88:	d103      	bne.n	8003c92 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8e:	68ca      	ldr	r2, [r1, #12]
 8003c90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c96:	694a      	ldr	r2, [r1, #20]
 8003c98:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003c9a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c9c:	688b      	ldr	r3, [r1, #8]
 8003c9e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ca0:	680b      	ldr	r3, [r1, #0]
 8003ca2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca4:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <TIM_Base_SetConfig+0x80>)
 8003ca6:	4298      	cmp	r0, r3
 8003ca8:	d00a      	beq.n	8003cc0 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8003caa:	2301      	movs	r3, #1
 8003cac:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cae:	6903      	ldr	r3, [r0, #16]
 8003cb0:	f013 0f01 	tst.w	r3, #1
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cb6:	6903      	ldr	r3, [r0, #16]
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	6103      	str	r3, [r0, #16]
}
 8003cbe:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc0:	690b      	ldr	r3, [r1, #16]
 8003cc2:	6303      	str	r3, [r0, #48]	@ 0x30
 8003cc4:	e7f1      	b.n	8003caa <TIM_Base_SetConfig+0x62>
 8003cc6:	bf00      	nop
 8003cc8:	40012c00 	.word	0x40012c00

08003ccc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003ccc:	b340      	cbz	r0, 8003d20 <HAL_TIM_PWM_Init+0x54>
{
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003cd6:	b1f3      	cbz	r3, 8003d16 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cde:	4621      	mov	r1, r4
 8003ce0:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ce4:	f7ff ffb0 	bl	8003c48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003cf2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003cf6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003cfa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d06:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003d0a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003d12:	2000      	movs	r0, #0
}
 8003d14:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d16:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003d1a:	f7fd ff53 	bl	8001bc4 <HAL_TIM_PWM_MspInit>
 8003d1e:	e7db      	b.n	8003cd8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003d20:	2001      	movs	r0, #1
}
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003d24:	b340      	cbz	r0, 8003d78 <HAL_TIM_IC_Init+0x54>
{
 8003d26:	b510      	push	{r4, lr}
 8003d28:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003d2e:	b1f3      	cbz	r3, 8003d6e <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	2302      	movs	r3, #2
 8003d32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d36:	4621      	mov	r1, r4
 8003d38:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d3c:	f7ff ff84 	bl	8003c48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003d4a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003d4e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003d52:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d56:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d5e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003d62:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d66:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003d6a:	2000      	movs	r0, #0
}
 8003d6c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003d72:	f7fd ff47 	bl	8001c04 <HAL_TIM_IC_MspInit>
 8003d76:	e7db      	b.n	8003d30 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8003d78:	2001      	movs	r0, #1
}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d056      	beq.n	8003e2e <HAL_TIM_Encoder_Init+0xb2>
{
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	460d      	mov	r5, r1
 8003d84:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d86:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d04a      	beq.n	8003e24 <HAL_TIM_Encoder_Init+0xa8>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d94:	6822      	ldr	r2, [r4, #0]
 8003d96:	6893      	ldr	r3, [r2, #8]
 8003d98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d9c:	f023 0307 	bic.w	r3, r3, #7
 8003da0:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da2:	4621      	mov	r1, r4
 8003da4:	f851 0b04 	ldr.w	r0, [r1], #4
 8003da8:	f7ff ff4e 	bl	8003c48 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003dac:	6821      	ldr	r1, [r4, #0]
 8003dae:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003db0:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8003db2:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003db4:	6828      	ldr	r0, [r5, #0]
 8003db6:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003db8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003dbc:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003dc0:	68ab      	ldr	r3, [r5, #8]
 8003dc2:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8003dc6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003dca:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dcc:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8003dd0:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dd4:	68ea      	ldr	r2, [r5, #12]
 8003dd6:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 8003dda:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8003dde:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003de0:	6a2b      	ldr	r3, [r5, #32]
 8003de2:	031b      	lsls	r3, r3, #12
 8003de4:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003de8:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8003dec:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dee:	f026 0622 	bic.w	r6, r6, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003df2:	686a      	ldr	r2, [r5, #4]
 8003df4:	696d      	ldr	r5, [r5, #20]
 8003df6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003dfa:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8003dfc:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003dfe:	6821      	ldr	r1, [r4, #0]
 8003e00:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003e20:	2000      	movs	r0, #0
}
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e24:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003e28:	f7fd fe5e 	bl	8001ae8 <HAL_TIM_Encoder_MspInit>
 8003e2c:	e7af      	b.n	8003d8e <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8003e2e:	2001      	movs	r0, #1
}
 8003e30:	4770      	bx	lr
	...

08003e34 <TIM_OC2_SetConfig>:
{
 8003e34:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003e36:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e38:	6a02      	ldr	r2, [r0, #32]
 8003e3a:	f022 0210 	bic.w	r2, r2, #16
 8003e3e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003e40:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e42:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e44:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e48:	680d      	ldr	r5, [r1, #0]
 8003e4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003e4e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e52:	688d      	ldr	r5, [r1, #8]
 8003e54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e58:	4d0c      	ldr	r5, [pc, #48]	@ (8003e8c <TIM_OC2_SetConfig+0x58>)
 8003e5a:	42a8      	cmp	r0, r5
 8003e5c:	d006      	beq.n	8003e6c <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003e5e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e60:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003e62:	684a      	ldr	r2, [r1, #4]
 8003e64:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003e66:	6203      	str	r3, [r0, #32]
}
 8003e68:	bc30      	pop	{r4, r5}
 8003e6a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e70:	68cd      	ldr	r5, [r1, #12]
 8003e72:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e7a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e7e:	694d      	ldr	r5, [r1, #20]
 8003e80:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e84:	698d      	ldr	r5, [r1, #24]
 8003e86:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003e8a:	e7e8      	b.n	8003e5e <TIM_OC2_SetConfig+0x2a>
 8003e8c:	40012c00 	.word	0x40012c00

08003e90 <HAL_TIM_PWM_ConfigChannel>:
{
 8003e90:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003e92:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d066      	beq.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	460d      	mov	r5, r1
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003ea4:	2a0c      	cmp	r2, #12
 8003ea6:	d85a      	bhi.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0xce>
 8003ea8:	e8df f002 	tbb	[pc, r2]
 8003eac:	59595907 	.word	0x59595907
 8003eb0:	5959591b 	.word	0x5959591b
 8003eb4:	59595930 	.word	0x59595930
 8003eb8:	44          	.byte	0x44
 8003eb9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eba:	6800      	ldr	r0, [r0, #0]
 8003ebc:	f7ff fd0e 	bl	80038dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	6993      	ldr	r3, [r2, #24]
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	6993      	ldr	r3, [r2, #24]
 8003ece:	f023 0304 	bic.w	r3, r3, #4
 8003ed2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	6993      	ldr	r3, [r2, #24]
 8003ed8:	6929      	ldr	r1, [r5, #16]
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2000      	movs	r0, #0
      break;
 8003ee0:	e03e      	b.n	8003f60 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee2:	6800      	ldr	r0, [r0, #0]
 8003ee4:	f7ff ffa6 	bl	8003e34 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	6993      	ldr	r3, [r2, #24]
 8003eec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ef0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	6993      	ldr	r3, [r2, #24]
 8003ef6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003efa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003efc:	6822      	ldr	r2, [r4, #0]
 8003efe:	6993      	ldr	r3, [r2, #24]
 8003f00:	6929      	ldr	r1, [r5, #16]
 8003f02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f06:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2000      	movs	r0, #0
      break;
 8003f0a:	e029      	b.n	8003f60 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f0c:	6800      	ldr	r0, [r0, #0]
 8003f0e:	f7ff fd0f 	bl	8003930 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	69d3      	ldr	r3, [r2, #28]
 8003f16:	f043 0308 	orr.w	r3, r3, #8
 8003f1a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f1c:	6822      	ldr	r2, [r4, #0]
 8003f1e:	69d3      	ldr	r3, [r2, #28]
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f26:	6822      	ldr	r2, [r4, #0]
 8003f28:	69d3      	ldr	r3, [r2, #28]
 8003f2a:	6929      	ldr	r1, [r5, #16]
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2000      	movs	r0, #0
      break;
 8003f32:	e015      	b.n	8003f60 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f34:	6800      	ldr	r0, [r0, #0]
 8003f36:	f7ff fd29 	bl	800398c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	69d3      	ldr	r3, [r2, #28]
 8003f3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f42:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f44:	6822      	ldr	r2, [r4, #0]
 8003f46:	69d3      	ldr	r3, [r2, #28]
 8003f48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f4c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	69d3      	ldr	r3, [r2, #28]
 8003f52:	6929      	ldr	r1, [r5, #16]
 8003f54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f58:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2000      	movs	r0, #0
      break;
 8003f5c:	e000      	b.n	8003f60 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003f5e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003f60:	2300      	movs	r3, #0
 8003f62:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003f68:	2002      	movs	r0, #2
 8003f6a:	e7fc      	b.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003f6c <TIM_TI1_SetConfig>:
{
 8003f6c:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8003f6e:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f70:	6a04      	ldr	r4, [r0, #32]
 8003f72:	f024 0401 	bic.w	r4, r4, #1
 8003f76:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f78:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f7a:	4e11      	ldr	r6, [pc, #68]	@ (8003fc0 <TIM_TI1_SetConfig+0x54>)
 8003f7c:	42b0      	cmp	r0, r6
 8003f7e:	d00d      	beq.n	8003f9c <TIM_TI1_SetConfig+0x30>
 8003f80:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003f84:	d00a      	beq.n	8003f9c <TIM_TI1_SetConfig+0x30>
 8003f86:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8003f8a:	42b0      	cmp	r0, r6
 8003f8c:	d006      	beq.n	8003f9c <TIM_TI1_SetConfig+0x30>
 8003f8e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003f92:	42b0      	cmp	r0, r6
 8003f94:	d002      	beq.n	8003f9c <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f96:	f044 0201 	orr.w	r2, r4, #1
 8003f9a:	e002      	b.n	8003fa2 <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f9c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003fa0:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fac:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fb0:	f001 010a 	and.w	r1, r1, #10
 8003fb4:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8003fb6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003fb8:	6201      	str	r1, [r0, #32]
}
 8003fba:	bc70      	pop	{r4, r5, r6}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40012c00 	.word	0x40012c00

08003fc4 <HAL_TIM_IC_ConfigChannel>:
{
 8003fc4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003fc6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d05e      	beq.n	800408c <HAL_TIM_IC_ConfigChannel+0xc8>
 8003fce:	4604      	mov	r4, r0
 8003fd0:	460d      	mov	r5, r1
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8003fd8:	2a0c      	cmp	r2, #12
 8003fda:	d852      	bhi.n	8004082 <HAL_TIM_IC_ConfigChannel+0xbe>
 8003fdc:	e8df f002 	tbb	[pc, r2]
 8003fe0:	51515107 	.word	0x51515107
 8003fe4:	51515119 	.word	0x51515119
 8003fe8:	5151512c 	.word	0x5151512c
 8003fec:	3e          	.byte	0x3e
 8003fed:	00          	.byte	0x00
    TIM_TI1_SetConfig(htim->Instance,
 8003fee:	68cb      	ldr	r3, [r1, #12]
 8003ff0:	684a      	ldr	r2, [r1, #4]
 8003ff2:	6809      	ldr	r1, [r1, #0]
 8003ff4:	6800      	ldr	r0, [r0, #0]
 8003ff6:	f7ff ffb9 	bl	8003f6c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	6993      	ldr	r3, [r2, #24]
 8003ffe:	f023 030c 	bic.w	r3, r3, #12
 8004002:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004004:	6822      	ldr	r2, [r4, #0]
 8004006:	6993      	ldr	r3, [r2, #24]
 8004008:	68a9      	ldr	r1, [r5, #8]
 800400a:	430b      	orrs	r3, r1
 800400c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800400e:	2000      	movs	r0, #0
 8004010:	e038      	b.n	8004084 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI2_SetConfig(htim->Instance,
 8004012:	68cb      	ldr	r3, [r1, #12]
 8004014:	684a      	ldr	r2, [r1, #4]
 8004016:	6809      	ldr	r1, [r1, #0]
 8004018:	6800      	ldr	r0, [r0, #0]
 800401a:	f7ff fcdb 	bl	80039d4 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	6993      	ldr	r3, [r2, #24]
 8004022:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004026:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	6993      	ldr	r3, [r2, #24]
 800402c:	68a9      	ldr	r1, [r5, #8]
 800402e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004032:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004034:	2000      	movs	r0, #0
 8004036:	e025      	b.n	8004084 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI3_SetConfig(htim->Instance,
 8004038:	68cb      	ldr	r3, [r1, #12]
 800403a:	684a      	ldr	r2, [r1, #4]
 800403c:	6809      	ldr	r1, [r1, #0]
 800403e:	6800      	ldr	r0, [r0, #0]
 8004040:	f7ff fce3 	bl	8003a0a <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004044:	6822      	ldr	r2, [r4, #0]
 8004046:	69d3      	ldr	r3, [r2, #28]
 8004048:	f023 030c 	bic.w	r3, r3, #12
 800404c:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	69d3      	ldr	r3, [r2, #28]
 8004052:	68a9      	ldr	r1, [r5, #8]
 8004054:	430b      	orrs	r3, r1
 8004056:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2000      	movs	r0, #0
 800405a:	e013      	b.n	8004084 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI4_SetConfig(htim->Instance,
 800405c:	68cb      	ldr	r3, [r1, #12]
 800405e:	684a      	ldr	r2, [r1, #4]
 8004060:	6809      	ldr	r1, [r1, #0]
 8004062:	6800      	ldr	r0, [r0, #0]
 8004064:	f7ff fcec 	bl	8003a40 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	69d3      	ldr	r3, [r2, #28]
 800406c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004070:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	69d3      	ldr	r3, [r2, #28]
 8004076:	68a9      	ldr	r1, [r5, #8]
 8004078:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800407c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800407e:	2000      	movs	r0, #0
 8004080:	e000      	b.n	8004084 <HAL_TIM_IC_ConfigChannel+0xc0>
  __HAL_LOCK(htim);
 8004082:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004084:	2300      	movs	r3, #0
 8004086:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800408a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800408c:	2002      	movs	r0, #2
 800408e:	e7fc      	b.n	800408a <HAL_TIM_IC_ConfigChannel+0xc6>

08004090 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004090:	f001 011f 	and.w	r1, r1, #31
 8004094:	f04f 0c01 	mov.w	ip, #1
 8004098:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800409c:	6a03      	ldr	r3, [r0, #32]
 800409e:	ea23 030c 	bic.w	r3, r3, ip
 80040a2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040a4:	6a03      	ldr	r3, [r0, #32]
 80040a6:	408a      	lsls	r2, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	6203      	str	r3, [r0, #32]
}
 80040ac:	4770      	bx	lr
	...

080040b0 <HAL_TIM_PWM_Start>:
{
 80040b0:	b510      	push	{r4, lr}
 80040b2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040b4:	4608      	mov	r0, r1
 80040b6:	bb51      	cbnz	r1, 800410e <HAL_TIM_PWM_Start+0x5e>
 80040b8:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	bf18      	it	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d15b      	bne.n	8004180 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d139      	bne.n	8004140 <HAL_TIM_PWM_Start+0x90>
 80040cc:	2302      	movs	r3, #2
 80040ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d2:	2201      	movs	r2, #1
 80040d4:	4601      	mov	r1, r0
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	f7ff ffda 	bl	8004090 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	4a2a      	ldr	r2, [pc, #168]	@ (8004188 <HAL_TIM_PWM_Start+0xd8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03d      	beq.n	8004160 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	4a28      	ldr	r2, [pc, #160]	@ (8004188 <HAL_TIM_PWM_Start+0xd8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d03e      	beq.n	800416a <HAL_TIM_PWM_Start+0xba>
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f0:	d03b      	beq.n	800416a <HAL_TIM_PWM_Start+0xba>
 80040f2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d037      	beq.n	800416a <HAL_TIM_PWM_Start+0xba>
 80040fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80040fe:	4293      	cmp	r3, r2
 8004100:	d033      	beq.n	800416a <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800410a:	2000      	movs	r0, #0
 800410c:	e039      	b.n	8004182 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800410e:	2904      	cmp	r1, #4
 8004110:	d008      	beq.n	8004124 <HAL_TIM_PWM_Start+0x74>
 8004112:	2908      	cmp	r1, #8
 8004114:	d00d      	beq.n	8004132 <HAL_TIM_PWM_Start+0x82>
 8004116:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	bf18      	it	ne
 8004120:	2301      	movne	r3, #1
 8004122:	e7cf      	b.n	80040c4 <HAL_TIM_PWM_Start+0x14>
 8004124:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8004128:	b2db      	uxtb	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	bf18      	it	ne
 800412e:	2301      	movne	r3, #1
 8004130:	e7c8      	b.n	80040c4 <HAL_TIM_PWM_Start+0x14>
 8004132:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004136:	b2db      	uxtb	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	bf18      	it	ne
 800413c:	2301      	movne	r3, #1
 800413e:	e7c1      	b.n	80040c4 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004140:	2804      	cmp	r0, #4
 8004142:	d005      	beq.n	8004150 <HAL_TIM_PWM_Start+0xa0>
 8004144:	2808      	cmp	r0, #8
 8004146:	d007      	beq.n	8004158 <HAL_TIM_PWM_Start+0xa8>
 8004148:	2302      	movs	r3, #2
 800414a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800414e:	e7c0      	b.n	80040d2 <HAL_TIM_PWM_Start+0x22>
 8004150:	2302      	movs	r3, #2
 8004152:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004156:	e7bc      	b.n	80040d2 <HAL_TIM_PWM_Start+0x22>
 8004158:	2302      	movs	r3, #2
 800415a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800415e:	e7b8      	b.n	80040d2 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8004160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004162:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004166:	645a      	str	r2, [r3, #68]	@ 0x44
 8004168:	e7bc      	b.n	80040e4 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	2a06      	cmp	r2, #6
 8004172:	d007      	beq.n	8004184 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800417c:	2000      	movs	r0, #0
 800417e:	e000      	b.n	8004182 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8004180:	2001      	movs	r0, #1
}
 8004182:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004184:	2000      	movs	r0, #0
 8004186:	e7fc      	b.n	8004182 <HAL_TIM_PWM_Start+0xd2>
 8004188:	40012c00 	.word	0x40012c00

0800418c <HAL_TIM_Encoder_Start>:
{
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004190:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8004194:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004196:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800419a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800419e:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041a0:	f894 c043 	ldrb.w	ip, [r4, #67]	@ 0x43
  if (Channel == TIM_CHANNEL_1)
 80041a4:	460d      	mov	r5, r1
 80041a6:	b9b1      	cbnz	r1, 80041d6 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a8:	2801      	cmp	r0, #1
 80041aa:	d149      	bne.n	8004240 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ac:	2a01      	cmp	r2, #1
 80041ae:	d148      	bne.n	8004242 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b0:	2302      	movs	r3, #2
 80041b2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  switch (Channel)
 80041ba:	b37d      	cbz	r5, 800421c <HAL_TIM_Encoder_Start+0x90>
 80041bc:	2d04      	cmp	r5, #4
 80041be:	d039      	beq.n	8004234 <HAL_TIM_Encoder_Start+0xa8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041c0:	2201      	movs	r2, #1
 80041c2:	2100      	movs	r1, #0
 80041c4:	6820      	ldr	r0, [r4, #0]
 80041c6:	f7ff ff63 	bl	8004090 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041ca:	2201      	movs	r2, #1
 80041cc:	2104      	movs	r1, #4
 80041ce:	6820      	ldr	r0, [r4, #0]
 80041d0:	f7ff ff5e 	bl	8004090 <TIM_CCxChannelCmd>
      break;
 80041d4:	e027      	b.n	8004226 <HAL_TIM_Encoder_Start+0x9a>
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 80041dc:	2904      	cmp	r1, #4
 80041de:	d012      	beq.n	8004206 <HAL_TIM_Encoder_Start+0x7a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041e0:	2801      	cmp	r0, #1
 80041e2:	d133      	bne.n	800424c <HAL_TIM_Encoder_Start+0xc0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d12c      	bne.n	8004242 <HAL_TIM_Encoder_Start+0xb6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041e8:	2a01      	cmp	r2, #1
 80041ea:	d131      	bne.n	8004250 <HAL_TIM_Encoder_Start+0xc4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ec:	f1bc 0f01 	cmp.w	ip, #1
 80041f0:	d130      	bne.n	8004254 <HAL_TIM_Encoder_Start+0xc8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f2:	2302      	movs	r3, #2
 80041f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004204:	e7d9      	b.n	80041ba <HAL_TIM_Encoder_Start+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004206:	2b01      	cmp	r3, #1
 8004208:	d11c      	bne.n	8004244 <HAL_TIM_Encoder_Start+0xb8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800420a:	f1bc 0f01 	cmp.w	ip, #1
 800420e:	d11b      	bne.n	8004248 <HAL_TIM_Encoder_Start+0xbc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004210:	2302      	movs	r3, #2
 8004212:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004216:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800421a:	e7ce      	b.n	80041ba <HAL_TIM_Encoder_Start+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800421c:	2201      	movs	r2, #1
 800421e:	2100      	movs	r1, #0
 8004220:	6820      	ldr	r0, [r4, #0]
 8004222:	f7ff ff35 	bl	8004090 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	6813      	ldr	r3, [r2, #0]
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004230:	2000      	movs	r0, #0
 8004232:	e006      	b.n	8004242 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004234:	2201      	movs	r2, #1
 8004236:	2104      	movs	r1, #4
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	f7ff ff29 	bl	8004090 <TIM_CCxChannelCmd>
      break;
 800423e:	e7f2      	b.n	8004226 <HAL_TIM_Encoder_Start+0x9a>
      return HAL_ERROR;
 8004240:	2001      	movs	r0, #1
}
 8004242:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004244:	2001      	movs	r0, #1
 8004246:	e7fc      	b.n	8004242 <HAL_TIM_Encoder_Start+0xb6>
 8004248:	4618      	mov	r0, r3
 800424a:	e7fa      	b.n	8004242 <HAL_TIM_Encoder_Start+0xb6>
      return HAL_ERROR;
 800424c:	2001      	movs	r0, #1
 800424e:	e7f8      	b.n	8004242 <HAL_TIM_Encoder_Start+0xb6>
 8004250:	4618      	mov	r0, r3
 8004252:	e7f6      	b.n	8004242 <HAL_TIM_Encoder_Start+0xb6>
 8004254:	4610      	mov	r0, r2
 8004256:	e7f4      	b.n	8004242 <HAL_TIM_Encoder_Start+0xb6>

08004258 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004258:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800425c:	2a01      	cmp	r2, #1
 800425e:	d02c      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8004260:	b410      	push	{r4}
 8004262:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004264:	2201      	movs	r2, #1
 8004266:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426a:	2202      	movs	r2, #2
 800426c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004270:	6802      	ldr	r2, [r0, #0]
 8004272:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004274:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004276:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800427a:	6808      	ldr	r0, [r1, #0]
 800427c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004280:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	480e      	ldr	r0, [pc, #56]	@ (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004286:	4282      	cmp	r2, r0
 8004288:	d00a      	beq.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800428a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800428e:	d007      	beq.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004290:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004294:	4282      	cmp	r2, r0
 8004296:	d003      	beq.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004298:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800429c:	4282      	cmp	r2, r0
 800429e:	d104      	bne.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042a4:	6849      	ldr	r1, [r1, #4]
 80042a6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042a8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042b0:	2000      	movs	r0, #0
 80042b2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80042b6:	bc10      	pop	{r4}
 80042b8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80042ba:	2002      	movs	r0, #2
}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00

080042c4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c4:	4770      	bx	lr

080042c6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042c6:	4770      	bx	lr

080042c8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	f102 030c 	add.w	r3, r2, #12
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	320c      	adds	r2, #12
 80042d8:	e842 3100 	strex	r1, r3, [r2]
 80042dc:	2900      	cmp	r1, #0
 80042de:	d1f3      	bne.n	80042c8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	f102 0314 	add.w	r3, r2, #20
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	3214      	adds	r2, #20
 80042f0:	e842 3100 	strex	r1, r3, [r2]
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d1f3      	bne.n	80042e0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d005      	beq.n	800430a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042fe:	2320      	movs	r3, #32
 8004300:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004304:	2300      	movs	r3, #0
 8004306:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004308:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	f102 030c 	add.w	r3, r2, #12
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	320c      	adds	r2, #12
 800431a:	e842 3100 	strex	r1, r3, [r2]
 800431e:	2900      	cmp	r1, #0
 8004320:	d1f3      	bne.n	800430a <UART_EndRxTransfer+0x42>
 8004322:	e7ec      	b.n	80042fe <UART_EndRxTransfer+0x36>

08004324 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004324:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b21      	cmp	r3, #33	@ 0x21
 800432c:	d001      	beq.n	8004332 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800432e:	2002      	movs	r0, #2
  }
}
 8004330:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004332:	6883      	ldr	r3, [r0, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004338:	d017      	beq.n	800436a <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800433a:	6a03      	ldr	r3, [r0, #32]
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	6202      	str	r2, [r0, #32]
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	6803      	ldr	r3, [r0, #0]
 8004344:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004346:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29b      	uxth	r3, r3
 800434e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8004350:	b94b      	cbnz	r3, 8004366 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004352:	6802      	ldr	r2, [r0, #0]
 8004354:	68d3      	ldr	r3, [r2, #12]
 8004356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800435a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800435c:	6802      	ldr	r2, [r0, #0]
 800435e:	68d3      	ldr	r3, [r2, #12]
 8004360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004364:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8004366:	2000      	movs	r0, #0
 8004368:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436a:	6903      	ldr	r3, [r0, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e4      	bne.n	800433a <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004370:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	6802      	ldr	r2, [r0, #0]
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800437c:	6a03      	ldr	r3, [r0, #32]
 800437e:	3302      	adds	r3, #2
 8004380:	6203      	str	r3, [r0, #32]
 8004382:	e7e0      	b.n	8004346 <UART_Transmit_IT+0x22>

08004384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004384:	b510      	push	{r4, lr}
 8004386:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004388:	6802      	ldr	r2, [r0, #0]
 800438a:	6913      	ldr	r3, [r2, #16]
 800438c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004390:	68c1      	ldr	r1, [r0, #12]
 8004392:	430b      	orrs	r3, r1
 8004394:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004396:	6883      	ldr	r3, [r0, #8]
 8004398:	6902      	ldr	r2, [r0, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	6942      	ldr	r2, [r0, #20]
 800439e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80043a0:	6801      	ldr	r1, [r0, #0]
 80043a2:	68cb      	ldr	r3, [r1, #12]
 80043a4:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043a8:	f023 030c 	bic.w	r3, r3, #12
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043b0:	6802      	ldr	r2, [r0, #0]
 80043b2:	6953      	ldr	r3, [r2, #20]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b8:	6981      	ldr	r1, [r0, #24]
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80043be:	6802      	ldr	r2, [r0, #0]
 80043c0:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <UART_SetConfig+0x8c>)
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d020      	beq.n	8004408 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043c6:	f7fe fed9 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 80043ca:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80043d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80043d4:	6863      	ldr	r3, [r4, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043dc:	480d      	ldr	r0, [pc, #52]	@ (8004414 <UART_SetConfig+0x90>)
 80043de:	fba0 3102 	umull	r3, r1, r0, r2
 80043e2:	0949      	lsrs	r1, r1, #5
 80043e4:	2364      	movs	r3, #100	@ 0x64
 80043e6:	fb03 2311 	mls	r3, r3, r1, r2
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	3332      	adds	r3, #50	@ 0x32
 80043ee:	fba0 0303 	umull	r0, r3, r0, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043f8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	6821      	ldr	r1, [r4, #0]
 8004402:	4413      	add	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004406:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7fe fec8 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 800440c:	4602      	mov	r2, r0
 800440e:	e7dd      	b.n	80043cc <UART_SetConfig+0x48>
 8004410:	40013800 	.word	0x40013800
 8004414:	51eb851f 	.word	0x51eb851f

08004418 <HAL_UART_Init>:
  if (huart == NULL)
 8004418:	b360      	cbz	r0, 8004474 <HAL_UART_Init+0x5c>
{
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800441e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004422:	b313      	cbz	r3, 800446a <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004424:	2324      	movs	r3, #36	@ 0x24
 8004426:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	68d3      	ldr	r3, [r2, #12]
 800442e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004432:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004434:	4620      	mov	r0, r4
 8004436:	f7ff ffa5 	bl	8004384 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	6913      	ldr	r3, [r2, #16]
 800443e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004442:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	6953      	ldr	r3, [r2, #20]
 8004448:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800444c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	68d3      	ldr	r3, [r2, #12]
 8004452:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004456:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	2000      	movs	r0, #0
 800445a:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800445c:	2320      	movs	r3, #32
 800445e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004462:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004466:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004468:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800446a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800446e:	f7fd fc8d 	bl	8001d8c <HAL_UART_MspInit>
 8004472:	e7d7      	b.n	8004424 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004474:	2001      	movs	r0, #1
}
 8004476:	4770      	bx	lr

08004478 <HAL_UART_TxCpltCallback>:
}
 8004478:	4770      	bx	lr

0800447a <UART_EndTransmit_IT>:
{
 800447a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800447c:	6801      	ldr	r1, [r0, #0]
 800447e:	68ca      	ldr	r2, [r1, #12]
 8004480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004484:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004486:	2220      	movs	r2, #32
 8004488:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800448c:	f7ff fff4 	bl	8004478 <HAL_UART_TxCpltCallback>
}
 8004490:	2000      	movs	r0, #0
 8004492:	bd08      	pop	{r3, pc}

08004494 <HAL_UART_RxCpltCallback>:
}
 8004494:	4770      	bx	lr

08004496 <HAL_UART_ErrorCallback>:
}
 8004496:	4770      	bx	lr

08004498 <UART_DMAAbortOnError>:
{
 8004498:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 800449c:	2300      	movs	r3, #0
 800449e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80044a0:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80044a2:	f7ff fff8 	bl	8004496 <HAL_UART_ErrorCallback>
}
 80044a6:	bd08      	pop	{r3, pc}

080044a8 <HAL_UARTEx_RxEventCallback>:
}
 80044a8:	4770      	bx	lr

080044aa <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044aa:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b22      	cmp	r3, #34	@ 0x22
 80044b2:	d169      	bne.n	8004588 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b4:	6883      	ldr	r3, [r0, #8]
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ba:	d04f      	beq.n	800455c <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044bc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c2:	d004      	beq.n	80044ce <UART_Receive_IT+0x24>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d156      	bne.n	8004576 <UART_Receive_IT+0xcc>
 80044c8:	6903      	ldr	r3, [r0, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d153      	bne.n	8004576 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ce:	6803      	ldr	r3, [r0, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80044d4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80044d6:	3301      	adds	r3, #1
 80044d8:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80044da:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d151      	bne.n	800458c <UART_Receive_IT+0xe2>
{
 80044e8:	b500      	push	{lr}
 80044ea:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ec:	6802      	ldr	r2, [r0, #0]
 80044ee:	68d3      	ldr	r3, [r2, #12]
 80044f0:	f023 0320 	bic.w	r3, r3, #32
 80044f4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044f6:	6802      	ldr	r2, [r0, #0]
 80044f8:	68d3      	ldr	r3, [r2, #12]
 80044fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044fe:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004500:	6802      	ldr	r2, [r0, #0]
 8004502:	6953      	ldr	r3, [r2, #20]
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800450a:	2320      	movs	r3, #32
 800450c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004510:	2300      	movs	r3, #0
 8004512:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004516:	2b01      	cmp	r3, #1
 8004518:	d133      	bne.n	8004582 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	2300      	movs	r3, #0
 800451c:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	f102 030c 	add.w	r3, r2, #12
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	320c      	adds	r2, #12
 800452e:	e842 3100 	strex	r1, r3, [r2]
 8004532:	2900      	cmp	r1, #0
 8004534:	d1f3      	bne.n	800451e <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004536:	6803      	ldr	r3, [r0, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	f012 0f10 	tst.w	r2, #16
 800453e:	d006      	beq.n	800454e <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004540:	2200      	movs	r2, #0
 8004542:	9201      	str	r2, [sp, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	9201      	str	r2, [sp, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800454e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004550:	f7ff ffaa 	bl	80044a8 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004554:	2000      	movs	r0, #0
}
 8004556:	b003      	add	sp, #12
 8004558:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455c:	6902      	ldr	r2, [r0, #16]
 800455e:	2a00      	cmp	r2, #0
 8004560:	d1ac      	bne.n	80044bc <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004562:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004564:	6803      	ldr	r3, [r0, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800456e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004570:	3302      	adds	r3, #2
 8004572:	6283      	str	r3, [r0, #40]	@ 0x28
 8004574:	e7b1      	b.n	80044da <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004576:	6803      	ldr	r3, [r0, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800457e:	7013      	strb	r3, [r2, #0]
 8004580:	e7a8      	b.n	80044d4 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8004582:	f7ff ff87 	bl	8004494 <HAL_UART_RxCpltCallback>
 8004586:	e7e5      	b.n	8004554 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8004588:	2002      	movs	r0, #2
 800458a:	4770      	bx	lr
    return HAL_OK;
 800458c:	2000      	movs	r0, #0
}
 800458e:	4770      	bx	lr

08004590 <HAL_UART_IRQHandler>:
{
 8004590:	b510      	push	{r4, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004596:	6802      	ldr	r2, [r0, #0]
 8004598:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800459a:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800459c:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800459e:	f013 0f0f 	tst.w	r3, #15
 80045a2:	d109      	bne.n	80045b8 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045a4:	f013 0f20 	tst.w	r3, #32
 80045a8:	d00c      	beq.n	80045c4 <HAL_UART_IRQHandler+0x34>
 80045aa:	f010 0f20 	tst.w	r0, #32
 80045ae:	d009      	beq.n	80045c4 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7ff ff7a 	bl	80044aa <UART_Receive_IT>
      return;
 80045b6:	e016      	b.n	80045e6 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045b8:	f011 0101 	ands.w	r1, r1, #1
 80045bc:	d115      	bne.n	80045ea <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045be:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80045c2:	d112      	bne.n	80045ea <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80045c6:	2901      	cmp	r1, #1
 80045c8:	d079      	beq.n	80046be <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80045ce:	d003      	beq.n	80045d8 <HAL_UART_IRQHandler+0x48>
 80045d0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80045d4:	f040 8113 	bne.w	80047fe <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045d8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80045dc:	d003      	beq.n	80045e6 <HAL_UART_IRQHandler+0x56>
 80045de:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80045e2:	f040 8110 	bne.w	8004806 <HAL_UART_IRQHandler+0x276>
}
 80045e6:	b002      	add	sp, #8
 80045e8:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045ea:	f013 0f01 	tst.w	r3, #1
 80045ee:	d006      	beq.n	80045fe <HAL_UART_IRQHandler+0x6e>
 80045f0:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80045f4:	d003      	beq.n	80045fe <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045f6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045fe:	f013 0f04 	tst.w	r3, #4
 8004602:	d004      	beq.n	800460e <HAL_UART_IRQHandler+0x7e>
 8004604:	b119      	cbz	r1, 800460e <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004606:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004608:	f042 0202 	orr.w	r2, r2, #2
 800460c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800460e:	f013 0f02 	tst.w	r3, #2
 8004612:	d004      	beq.n	800461e <HAL_UART_IRQHandler+0x8e>
 8004614:	b119      	cbz	r1, 800461e <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004616:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004618:	f042 0204 	orr.w	r2, r2, #4
 800461c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800461e:	f013 0f08 	tst.w	r3, #8
 8004622:	d007      	beq.n	8004634 <HAL_UART_IRQHandler+0xa4>
 8004624:	f010 0f20 	tst.w	r0, #32
 8004628:	d100      	bne.n	800462c <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800462a:	b119      	cbz	r1, 8004634 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800462c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800462e:	f042 0208 	orr.w	r2, r2, #8
 8004632:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004634:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004636:	2a00      	cmp	r2, #0
 8004638:	d0d5      	beq.n	80045e6 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800463a:	f013 0f20 	tst.w	r3, #32
 800463e:	d002      	beq.n	8004646 <HAL_UART_IRQHandler+0xb6>
 8004640:	f010 0f20 	tst.w	r0, #32
 8004644:	d129      	bne.n	800469a <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800464e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004650:	f012 0f08 	tst.w	r2, #8
 8004654:	d100      	bne.n	8004658 <HAL_UART_IRQHandler+0xc8>
 8004656:	b363      	cbz	r3, 80046b2 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8004658:	4620      	mov	r0, r4
 800465a:	f7ff fe35 	bl	80042c8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004666:	d020      	beq.n	80046aa <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004668:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	f102 0314 	add.w	r3, r2, #20
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	3214      	adds	r2, #20
 8004678:	e842 3100 	strex	r1, r3, [r2]
 800467c:	2900      	cmp	r1, #0
 800467e:	d1f3      	bne.n	8004668 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8004680:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004682:	b173      	cbz	r3, 80046a2 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004684:	4a62      	ldr	r2, [pc, #392]	@ (8004810 <HAL_UART_IRQHandler+0x280>)
 8004686:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004688:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800468a:	f7fe f869 	bl	8002760 <HAL_DMA_Abort_IT>
 800468e:	2800      	cmp	r0, #0
 8004690:	d0a9      	beq.n	80045e6 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004692:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004694:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004696:	4798      	blx	r3
 8004698:	e7a5      	b.n	80045e6 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 800469a:	4620      	mov	r0, r4
 800469c:	f7ff ff05 	bl	80044aa <UART_Receive_IT>
 80046a0:	e7d1      	b.n	8004646 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80046a2:	4620      	mov	r0, r4
 80046a4:	f7ff fef7 	bl	8004496 <HAL_UART_ErrorCallback>
 80046a8:	e79d      	b.n	80045e6 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7ff fef3 	bl	8004496 <HAL_UART_ErrorCallback>
 80046b0:	e799      	b.n	80045e6 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80046b2:	4620      	mov	r0, r4
 80046b4:	f7ff feef 	bl	8004496 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80046bc:	e793      	b.n	80045e6 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046be:	f013 0f10 	tst.w	r3, #16
 80046c2:	d082      	beq.n	80045ca <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046c4:	f010 0f10 	tst.w	r0, #16
 80046c8:	f43f af7f 	beq.w	80045ca <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046cc:	2300      	movs	r3, #0
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	6813      	ldr	r3, [r2, #0]
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	6853      	ldr	r3, [r2, #4]
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046da:	6953      	ldr	r3, [r2, #20]
 80046dc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80046e0:	d051      	beq.n	8004786 <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046e2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80046e4:	6813      	ldr	r3, [r2, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f43f af7b 	beq.w	80045e6 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046f0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80046f2:	4299      	cmp	r1, r3
 80046f4:	f67f af77 	bls.w	80045e6 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 80046f8:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046fa:	6993      	ldr	r3, [r2, #24]
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d037      	beq.n	8004770 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004700:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	f102 030c 	add.w	r3, r2, #12
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	320c      	adds	r2, #12
 8004710:	e842 3100 	strex	r1, r3, [r2]
 8004714:	2900      	cmp	r1, #0
 8004716:	d1f3      	bne.n	8004700 <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004718:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	f102 0314 	add.w	r3, r2, #20
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	3214      	adds	r2, #20
 8004728:	e842 3100 	strex	r1, r3, [r2]
 800472c:	2900      	cmp	r1, #0
 800472e:	d1f3      	bne.n	8004718 <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004730:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	f102 0314 	add.w	r3, r2, #20
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	3214      	adds	r2, #20
 8004740:	e842 3100 	strex	r1, r3, [r2]
 8004744:	2900      	cmp	r1, #0
 8004746:	d1f3      	bne.n	8004730 <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 8004748:	2320      	movs	r3, #32
 800474a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	2300      	movs	r3, #0
 8004750:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004752:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	f102 030c 	add.w	r3, r2, #12
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	320c      	adds	r2, #12
 8004762:	e842 3100 	strex	r1, r3, [r2]
 8004766:	2900      	cmp	r1, #0
 8004768:	d1f3      	bne.n	8004752 <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800476a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800476c:	f7fd ffd5 	bl	800271a <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004770:	2302      	movs	r3, #2
 8004772:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004774:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004776:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004778:	b29b      	uxth	r3, r3
 800477a:	1ac9      	subs	r1, r1, r3
 800477c:	b289      	uxth	r1, r1
 800477e:	4620      	mov	r0, r4
 8004780:	f7ff fe92 	bl	80044a8 <HAL_UARTEx_RxEventCallback>
      return;
 8004784:	e72f      	b.n	80045e6 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004786:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004788:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800478a:	b29b      	uxth	r3, r3
 800478c:	1ac9      	subs	r1, r1, r3
 800478e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004790:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	f43f af26 	beq.w	80045e6 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 800479a:	2900      	cmp	r1, #0
 800479c:	f43f af23 	beq.w	80045e6 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	f102 030c 	add.w	r3, r2, #12
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	320c      	adds	r2, #12
 80047b0:	e842 3000 	strex	r0, r3, [r2]
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d1f3      	bne.n	80047a0 <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	f102 0314 	add.w	r3, r2, #20
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	3214      	adds	r2, #20
 80047c8:	e842 3000 	strex	r0, r3, [r2]
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d1f3      	bne.n	80047b8 <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 80047d0:	2320      	movs	r3, #32
 80047d2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	2300      	movs	r3, #0
 80047d8:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	f102 030c 	add.w	r3, r2, #12
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	320c      	adds	r2, #12
 80047ea:	e842 3000 	strex	r0, r3, [r2]
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d1f3      	bne.n	80047da <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047f2:	2302      	movs	r3, #2
 80047f4:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7ff fe56 	bl	80044a8 <HAL_UARTEx_RxEventCallback>
      return;
 80047fc:	e6f3      	b.n	80045e6 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff fd90 	bl	8004324 <UART_Transmit_IT>
    return;
 8004804:	e6ef      	b.n	80045e6 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8004806:	4620      	mov	r0, r4
 8004808:	f7ff fe37 	bl	800447a <UART_EndTransmit_IT>
    return;
 800480c:	e6eb      	b.n	80045e6 <HAL_UART_IRQHandler+0x56>
 800480e:	bf00      	nop
 8004810:	08004499 	.word	0x08004499

08004814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004814:	f7fd f8ba 	bl	800198c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004818:	480b      	ldr	r0, [pc, #44]	@ (8004848 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800481a:	490c      	ldr	r1, [pc, #48]	@ (800484c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800481c:	4a0c      	ldr	r2, [pc, #48]	@ (8004850 <LoopFillZerobss+0x16>)
  movs r3, #0
 800481e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004820:	e002      	b.n	8004828 <LoopCopyDataInit>

08004822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004826:	3304      	adds	r3, #4

08004828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800482a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800482c:	d3f9      	bcc.n	8004822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800482e:	4a09      	ldr	r2, [pc, #36]	@ (8004854 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004830:	4c09      	ldr	r4, [pc, #36]	@ (8004858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004834:	e001      	b.n	800483a <LoopFillZerobss>

08004836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004838:	3204      	adds	r2, #4

0800483a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800483a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800483c:	d3fb      	bcc.n	8004836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800483e:	f000 f933 	bl	8004aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004842:	f7fc fb3d 	bl	8000ec0 <main>
  bx lr
 8004846:	4770      	bx	lr
  ldr r0, =_sdata
 8004848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800484c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8004850:	08004b54 	.word	0x08004b54
  ldr r2, =_sbss
 8004854:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8004858:	20000808 	.word	0x20000808

0800485c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800485c:	e7fe      	b.n	800485c <ADC1_2_IRQHandler>
	...

08004860 <_IQ18div>:
 8004860:	f091 0f00 	teq	r1, #0
 8004864:	bf04      	itt	eq
 8004866:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800486a:	4770      	bxeq	lr
 800486c:	b510      	push	{r4, lr}
 800486e:	f04f 0e01 	mov.w	lr, #1
 8004872:	ea90 0f01 	teq	r0, r1
 8004876:	bf48      	it	mi
 8004878:	f04f 0e00 	movmi.w	lr, #0
 800487c:	2800      	cmp	r0, #0
 800487e:	bf48      	it	mi
 8004880:	4240      	negmi	r0, r0
 8004882:	2900      	cmp	r1, #0
 8004884:	bf48      	it	mi
 8004886:	4249      	negmi	r1, r1
 8004888:	fab0 f480 	clz	r4, r0
 800488c:	2c12      	cmp	r4, #18
 800488e:	bfa8      	it	ge
 8004890:	2412      	movge	r4, #18
 8004892:	fa00 f204 	lsl.w	r2, r0, r4
 8004896:	f1c4 0c12 	rsb	ip, r4, #18
 800489a:	fbb2 f0f1 	udiv	r0, r2, r1
 800489e:	fab0 f380 	clz	r3, r0
 80048a2:	459c      	cmp	ip, r3
 80048a4:	bfa4      	itt	ge
 80048a6:	f1ce 4000 	rsbge	r0, lr, #2147483648	@ 0x80000000
 80048aa:	bd10      	popge	{r4, pc}
 80048ac:	fb01 2210 	mls	r2, r1, r0, r2
 80048b0:	fab2 f482 	clz	r4, r2
 80048b4:	4564      	cmp	r4, ip
 80048b6:	da0e      	bge.n	80048d6 <divfinished18>

080048b8 <divmore18>:
 80048b8:	ebac 0c04 	sub.w	ip, ip, r4
 80048bc:	fa02 f204 	lsl.w	r2, r2, r4
 80048c0:	fa00 f004 	lsl.w	r0, r0, r4
 80048c4:	fbb2 f3f1 	udiv	r3, r2, r1
 80048c8:	fb01 2213 	mls	r2, r1, r3, r2
 80048cc:	4418      	add	r0, r3
 80048ce:	fab2 f482 	clz	r4, r2
 80048d2:	4564      	cmp	r4, ip
 80048d4:	ddf0      	ble.n	80048b8 <divmore18>

080048d6 <divfinished18>:
 80048d6:	fa02 f20c 	lsl.w	r2, r2, ip
 80048da:	fa00 f00c 	lsl.w	r0, r0, ip
 80048de:	fbb2 f3f1 	udiv	r3, r2, r1
 80048e2:	4418      	add	r0, r3
 80048e4:	f09e 0f00 	teq	lr, #0
 80048e8:	bf08      	it	eq
 80048ea:	4240      	negeq	r0, r0
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	bf00      	nop

080048f0 <_IQ18mpy>:
 80048f0:	fb80 0101 	smull	r0, r1, r0, r1
 80048f4:	ea4f 4090 	mov.w	r0, r0, lsr #18
 80048f8:	eb00 3081 	add.w	r0, r0, r1, lsl #14
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop

08004900 <malloc>:
 8004900:	4b02      	ldr	r3, [pc, #8]	@ (800490c <malloc+0xc>)
 8004902:	4601      	mov	r1, r0
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	f000 b825 	b.w	8004954 <_malloc_r>
 800490a:	bf00      	nop
 800490c:	200000a8 	.word	0x200000a8

08004910 <sbrk_aligned>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4e0f      	ldr	r6, [pc, #60]	@ (8004950 <sbrk_aligned+0x40>)
 8004914:	460c      	mov	r4, r1
 8004916:	6831      	ldr	r1, [r6, #0]
 8004918:	4605      	mov	r5, r0
 800491a:	b911      	cbnz	r1, 8004922 <sbrk_aligned+0x12>
 800491c:	f000 f8ae 	bl	8004a7c <_sbrk_r>
 8004920:	6030      	str	r0, [r6, #0]
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f000 f8a9 	bl	8004a7c <_sbrk_r>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d103      	bne.n	8004936 <sbrk_aligned+0x26>
 800492e:	f04f 34ff 	mov.w	r4, #4294967295
 8004932:	4620      	mov	r0, r4
 8004934:	bd70      	pop	{r4, r5, r6, pc}
 8004936:	1cc4      	adds	r4, r0, #3
 8004938:	f024 0403 	bic.w	r4, r4, #3
 800493c:	42a0      	cmp	r0, r4
 800493e:	d0f8      	beq.n	8004932 <sbrk_aligned+0x22>
 8004940:	1a21      	subs	r1, r4, r0
 8004942:	4628      	mov	r0, r5
 8004944:	f000 f89a 	bl	8004a7c <_sbrk_r>
 8004948:	3001      	adds	r0, #1
 800494a:	d1f2      	bne.n	8004932 <sbrk_aligned+0x22>
 800494c:	e7ef      	b.n	800492e <sbrk_aligned+0x1e>
 800494e:	bf00      	nop
 8004950:	200006c0 	.word	0x200006c0

08004954 <_malloc_r>:
 8004954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004958:	1ccd      	adds	r5, r1, #3
 800495a:	f025 0503 	bic.w	r5, r5, #3
 800495e:	3508      	adds	r5, #8
 8004960:	2d0c      	cmp	r5, #12
 8004962:	bf38      	it	cc
 8004964:	250c      	movcc	r5, #12
 8004966:	2d00      	cmp	r5, #0
 8004968:	4606      	mov	r6, r0
 800496a:	db01      	blt.n	8004970 <_malloc_r+0x1c>
 800496c:	42a9      	cmp	r1, r5
 800496e:	d904      	bls.n	800497a <_malloc_r+0x26>
 8004970:	230c      	movs	r3, #12
 8004972:	6033      	str	r3, [r6, #0]
 8004974:	2000      	movs	r0, #0
 8004976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800497a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a50 <_malloc_r+0xfc>
 800497e:	f000 f869 	bl	8004a54 <__malloc_lock>
 8004982:	f8d8 3000 	ldr.w	r3, [r8]
 8004986:	461c      	mov	r4, r3
 8004988:	bb44      	cbnz	r4, 80049dc <_malloc_r+0x88>
 800498a:	4629      	mov	r1, r5
 800498c:	4630      	mov	r0, r6
 800498e:	f7ff ffbf 	bl	8004910 <sbrk_aligned>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	4604      	mov	r4, r0
 8004996:	d158      	bne.n	8004a4a <_malloc_r+0xf6>
 8004998:	f8d8 4000 	ldr.w	r4, [r8]
 800499c:	4627      	mov	r7, r4
 800499e:	2f00      	cmp	r7, #0
 80049a0:	d143      	bne.n	8004a2a <_malloc_r+0xd6>
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	d04b      	beq.n	8004a3e <_malloc_r+0xea>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	4639      	mov	r1, r7
 80049aa:	4630      	mov	r0, r6
 80049ac:	eb04 0903 	add.w	r9, r4, r3
 80049b0:	f000 f864 	bl	8004a7c <_sbrk_r>
 80049b4:	4581      	cmp	r9, r0
 80049b6:	d142      	bne.n	8004a3e <_malloc_r+0xea>
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	4630      	mov	r0, r6
 80049bc:	1a6d      	subs	r5, r5, r1
 80049be:	4629      	mov	r1, r5
 80049c0:	f7ff ffa6 	bl	8004910 <sbrk_aligned>
 80049c4:	3001      	adds	r0, #1
 80049c6:	d03a      	beq.n	8004a3e <_malloc_r+0xea>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	442b      	add	r3, r5
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	f8d8 3000 	ldr.w	r3, [r8]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	bb62      	cbnz	r2, 8004a30 <_malloc_r+0xdc>
 80049d6:	f8c8 7000 	str.w	r7, [r8]
 80049da:	e00f      	b.n	80049fc <_malloc_r+0xa8>
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	1b52      	subs	r2, r2, r5
 80049e0:	d420      	bmi.n	8004a24 <_malloc_r+0xd0>
 80049e2:	2a0b      	cmp	r2, #11
 80049e4:	d917      	bls.n	8004a16 <_malloc_r+0xc2>
 80049e6:	1961      	adds	r1, r4, r5
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	6025      	str	r5, [r4, #0]
 80049ec:	bf18      	it	ne
 80049ee:	6059      	strne	r1, [r3, #4]
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	bf08      	it	eq
 80049f4:	f8c8 1000 	streq.w	r1, [r8]
 80049f8:	5162      	str	r2, [r4, r5]
 80049fa:	604b      	str	r3, [r1, #4]
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 f82f 	bl	8004a60 <__malloc_unlock>
 8004a02:	f104 000b 	add.w	r0, r4, #11
 8004a06:	1d23      	adds	r3, r4, #4
 8004a08:	f020 0007 	bic.w	r0, r0, #7
 8004a0c:	1ac2      	subs	r2, r0, r3
 8004a0e:	bf1c      	itt	ne
 8004a10:	1a1b      	subne	r3, r3, r0
 8004a12:	50a3      	strne	r3, [r4, r2]
 8004a14:	e7af      	b.n	8004976 <_malloc_r+0x22>
 8004a16:	6862      	ldr	r2, [r4, #4]
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	bf0c      	ite	eq
 8004a1c:	f8c8 2000 	streq.w	r2, [r8]
 8004a20:	605a      	strne	r2, [r3, #4]
 8004a22:	e7eb      	b.n	80049fc <_malloc_r+0xa8>
 8004a24:	4623      	mov	r3, r4
 8004a26:	6864      	ldr	r4, [r4, #4]
 8004a28:	e7ae      	b.n	8004988 <_malloc_r+0x34>
 8004a2a:	463c      	mov	r4, r7
 8004a2c:	687f      	ldr	r7, [r7, #4]
 8004a2e:	e7b6      	b.n	800499e <_malloc_r+0x4a>
 8004a30:	461a      	mov	r2, r3
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d1fb      	bne.n	8004a30 <_malloc_r+0xdc>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6053      	str	r3, [r2, #4]
 8004a3c:	e7de      	b.n	80049fc <_malloc_r+0xa8>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	4630      	mov	r0, r6
 8004a42:	6033      	str	r3, [r6, #0]
 8004a44:	f000 f80c 	bl	8004a60 <__malloc_unlock>
 8004a48:	e794      	b.n	8004974 <_malloc_r+0x20>
 8004a4a:	6005      	str	r5, [r0, #0]
 8004a4c:	e7d6      	b.n	80049fc <_malloc_r+0xa8>
 8004a4e:	bf00      	nop
 8004a50:	200006c4 	.word	0x200006c4

08004a54 <__malloc_lock>:
 8004a54:	4801      	ldr	r0, [pc, #4]	@ (8004a5c <__malloc_lock+0x8>)
 8004a56:	f000 b84b 	b.w	8004af0 <__retarget_lock_acquire_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	20000804 	.word	0x20000804

08004a60 <__malloc_unlock>:
 8004a60:	4801      	ldr	r0, [pc, #4]	@ (8004a68 <__malloc_unlock+0x8>)
 8004a62:	f000 b846 	b.w	8004af2 <__retarget_lock_release_recursive>
 8004a66:	bf00      	nop
 8004a68:	20000804 	.word	0x20000804

08004a6c <memset>:
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4402      	add	r2, r0
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d100      	bne.n	8004a76 <memset+0xa>
 8004a74:	4770      	bx	lr
 8004a76:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7a:	e7f9      	b.n	8004a70 <memset+0x4>

08004a7c <_sbrk_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4d05      	ldr	r5, [pc, #20]	@ (8004a98 <_sbrk_r+0x1c>)
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	602b      	str	r3, [r5, #0]
 8004a88:	f7fc ff5c 	bl	8001944 <_sbrk>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_sbrk_r+0x1a>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_sbrk_r+0x1a>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	20000800 	.word	0x20000800

08004a9c <__errno>:
 8004a9c:	4b01      	ldr	r3, [pc, #4]	@ (8004aa4 <__errno+0x8>)
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	200000a8 	.word	0x200000a8

08004aa8 <__libc_init_array>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	2600      	movs	r6, #0
 8004aac:	4d0c      	ldr	r5, [pc, #48]	@ (8004ae0 <__libc_init_array+0x38>)
 8004aae:	4c0d      	ldr	r4, [pc, #52]	@ (8004ae4 <__libc_init_array+0x3c>)
 8004ab0:	1b64      	subs	r4, r4, r5
 8004ab2:	10a4      	asrs	r4, r4, #2
 8004ab4:	42a6      	cmp	r6, r4
 8004ab6:	d109      	bne.n	8004acc <__libc_init_array+0x24>
 8004ab8:	f000 f81c 	bl	8004af4 <_init>
 8004abc:	2600      	movs	r6, #0
 8004abe:	4d0a      	ldr	r5, [pc, #40]	@ (8004ae8 <__libc_init_array+0x40>)
 8004ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8004aec <__libc_init_array+0x44>)
 8004ac2:	1b64      	subs	r4, r4, r5
 8004ac4:	10a4      	asrs	r4, r4, #2
 8004ac6:	42a6      	cmp	r6, r4
 8004ac8:	d105      	bne.n	8004ad6 <__libc_init_array+0x2e>
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad0:	4798      	blx	r3
 8004ad2:	3601      	adds	r6, #1
 8004ad4:	e7ee      	b.n	8004ab4 <__libc_init_array+0xc>
 8004ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ada:	4798      	blx	r3
 8004adc:	3601      	adds	r6, #1
 8004ade:	e7f2      	b.n	8004ac6 <__libc_init_array+0x1e>
 8004ae0:	08004b4c 	.word	0x08004b4c
 8004ae4:	08004b4c 	.word	0x08004b4c
 8004ae8:	08004b4c 	.word	0x08004b4c
 8004aec:	08004b50 	.word	0x08004b50

08004af0 <__retarget_lock_acquire_recursive>:
 8004af0:	4770      	bx	lr

08004af2 <__retarget_lock_release_recursive>:
 8004af2:	4770      	bx	lr

08004af4 <_init>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr

08004b00 <_fini>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr
