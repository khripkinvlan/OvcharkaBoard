
build/ovcharka-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d5c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e68  08002e68  00003e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ea8  08002ea8  00003ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002eac  08002eac  00003eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  08002eb0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000234  2000003c  08002eec  0000403c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000270  08002eec  00004270  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  00004065  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015c38  00000000  00000000  0000409e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003173  00000000  00000000  00019cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000bacd  00000000  00000000  0001ce49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000010e8  00000000  00000000  00028918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000cf2  00000000  00000000  00029a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012fe7  00000000  00000000  0002a6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00004880  00000000  00000000  0003d6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002d50  00000000  00000000  00041f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000040  00000000  00000000  00044cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e50 	.word	0x08002e50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002e50 	.word	0x08002e50

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b500      	push	{lr}
 800014e:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000150:	2300      	movs	r3, #0
 8000152:	9301      	str	r3, [sp, #4]
 8000154:	9302      	str	r3, [sp, #8]
 8000156:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000158:	4811      	ldr	r0, [pc, #68]	@ (80001a0 <MX_ADC1_Init+0x54>)
 800015a:	4a12      	ldr	r2, [pc, #72]	@ (80001a4 <MX_ADC1_Init+0x58>)
 800015c:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800015e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000160:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000162:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000164:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000168:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800016a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800016c:	2301      	movs	r3, #1
 800016e:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000170:	f000 feb8 	bl	8000ee4 <HAL_ADC_Init>
 8000174:	b968      	cbnz	r0, 8000192 <MX_ADC1_Init+0x46>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000176:	2302      	movs	r3, #2
 8000178:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800017a:	2301      	movs	r3, #1
 800017c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800017e:	2300      	movs	r3, #0
 8000180:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000182:	a901      	add	r1, sp, #4
 8000184:	4806      	ldr	r0, [pc, #24]	@ (80001a0 <MX_ADC1_Init+0x54>)
 8000186:	f000 fde1 	bl	8000d4c <HAL_ADC_ConfigChannel>
 800018a:	b928      	cbnz	r0, 8000198 <MX_ADC1_Init+0x4c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800018c:	b005      	add	sp, #20
 800018e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000192:	f000 f969 	bl	8000468 <Error_Handler>
 8000196:	e7ee      	b.n	8000176 <MX_ADC1_Init+0x2a>
    Error_Handler();
 8000198:	f000 f966 	bl	8000468 <Error_Handler>
}
 800019c:	e7f6      	b.n	800018c <MX_ADC1_Init+0x40>
 800019e:	bf00      	nop
 80001a0:	20000058 	.word	0x20000058
 80001a4:	40012400 	.word	0x40012400

080001a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001a8:	b500      	push	{lr}
 80001aa:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ac:	2300      	movs	r3, #0
 80001ae:	9302      	str	r3, [sp, #8]
 80001b0:	9303      	str	r3, [sp, #12]
 80001b2:	9304      	str	r3, [sp, #16]
 80001b4:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 80001b6:	6802      	ldr	r2, [r0, #0]
 80001b8:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <HAL_ADC_MspInit+0x58>)
 80001ba:	429a      	cmp	r2, r3
 80001bc:	d002      	beq.n	80001c4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80001be:	b007      	add	sp, #28
 80001c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001c4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80001c8:	699a      	ldr	r2, [r3, #24]
 80001ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80001ce:	619a      	str	r2, [r3, #24]
 80001d0:	699a      	ldr	r2, [r3, #24]
 80001d2:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80001d6:	9200      	str	r2, [sp, #0]
 80001d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001da:	699a      	ldr	r2, [r3, #24]
 80001dc:	f042 0204 	orr.w	r2, r2, #4
 80001e0:	619a      	str	r2, [r3, #24]
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	f003 0304 	and.w	r3, r3, #4
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CS2_Pin|CS1_Pin;
 80001ec:	230c      	movs	r3, #12
 80001ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001f0:	2303      	movs	r3, #3
 80001f2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f4:	a902      	add	r1, sp, #8
 80001f6:	4803      	ldr	r0, [pc, #12]	@ (8000204 <HAL_ADC_MspInit+0x5c>)
 80001f8:	f000 ff70 	bl	80010dc <HAL_GPIO_Init>
}
 80001fc:	e7df      	b.n	80001be <HAL_ADC_MspInit+0x16>
 80001fe:	bf00      	nop
 8000200:	40012400 	.word	0x40012400
 8000204:	40010800 	.word	0x40010800

08000208 <drv8106_write_reg>:
    HAL_SPI_TransmitReceive(spi_inst->spi_handler_ptr, (uint8_t*)&tx, (uint8_t*)&spi_inst->rxbuff, 1, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(spi_inst->CS_PORT, spi_inst->CS_PIN, GPIO_PIN_SET);
    HAL_Delay(1);
}

void drv8106_write_reg(drv8106_spi* spi_inst, uint8_t reg_addr, uint8_t data){
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	4604      	mov	r4, r0
 800020e:	460e      	mov	r6, r1
 8000210:	4615      	mov	r5, r2
    HAL_GPIO_WritePin(spi_inst->CS_PORT, spi_inst->CS_PIN, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	8901      	ldrh	r1, [r0, #8]
 8000216:	6840      	ldr	r0, [r0, #4]
 8000218:	f001 f875 	bl	8001306 <HAL_GPIO_WritePin>
    uint16_t tx;
    tx = (reg_addr << 8) | data;
 800021c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8000220:	f8ad 500e 	strh.w	r5, [sp, #14]
    HAL_SPI_TransmitReceive(spi_inst->spi_handler_ptr, (uint8_t*)&tx, (uint8_t*)&spi_inst->rxbuff, 1, HAL_MAX_DELAY);
 8000224:	4622      	mov	r2, r4
 8000226:	f852 0b0a 	ldr.w	r0, [r2], #10
 800022a:	f04f 33ff 	mov.w	r3, #4294967295
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	2301      	movs	r3, #1
 8000232:	f10d 010e 	add.w	r1, sp, #14
 8000236:	f001 ff84 	bl	8002142 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(spi_inst->CS_PORT, spi_inst->CS_PIN, GPIO_PIN_SET);
 800023a:	2201      	movs	r2, #1
 800023c:	8921      	ldrh	r1, [r4, #8]
 800023e:	6860      	ldr	r0, [r4, #4]
 8000240:	f001 f861 	bl	8001306 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fd6d 	bl	8000d24 <HAL_Delay>
}
 800024a:	b004      	add	sp, #16
 800024c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	2400      	movs	r4, #0
 8000258:	9404      	str	r4, [sp, #16]
 800025a:	9405      	str	r4, [sp, #20]
 800025c:	9406      	str	r4, [sp, #24]
 800025e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000260:	4b4c      	ldr	r3, [pc, #304]	@ (8000394 <MX_GPIO_Init+0x144>)
 8000262:	699a      	ldr	r2, [r3, #24]
 8000264:	f042 0210 	orr.w	r2, r2, #16
 8000268:	619a      	str	r2, [r3, #24]
 800026a:	699a      	ldr	r2, [r3, #24]
 800026c:	f002 0210 	and.w	r2, r2, #16
 8000270:	9200      	str	r2, [sp, #0]
 8000272:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000274:	699a      	ldr	r2, [r3, #24]
 8000276:	f042 0220 	orr.w	r2, r2, #32
 800027a:	619a      	str	r2, [r3, #24]
 800027c:	699a      	ldr	r2, [r3, #24]
 800027e:	f002 0220 	and.w	r2, r2, #32
 8000282:	9201      	str	r2, [sp, #4]
 8000284:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000286:	699a      	ldr	r2, [r3, #24]
 8000288:	f042 0204 	orr.w	r2, r2, #4
 800028c:	619a      	str	r2, [r3, #24]
 800028e:	699a      	ldr	r2, [r3, #24]
 8000290:	f002 0204 	and.w	r2, r2, #4
 8000294:	9202      	str	r2, [sp, #8]
 8000296:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000298:	699a      	ldr	r2, [r3, #24]
 800029a:	f042 0208 	orr.w	r2, r2, #8
 800029e:	619a      	str	r2, [r3, #24]
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f003 0308 	and.w	r3, r3, #8
 80002a6:	9303      	str	r3, [sp, #12]
 80002a8:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BRIDGESLEEP1_Pin|DRVOFF2_Pin|SPI1_SS2_Pin|SPI1_SS3_Pin, GPIO_PIN_RESET);
 80002aa:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8000398 <MX_GPIO_Init+0x148>
 80002ae:	4622      	mov	r2, r4
 80002b0:	213c      	movs	r1, #60	@ 0x3c
 80002b2:	4648      	mov	r0, r9
 80002b4:	f001 f827 	bl	8001306 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR2_1_Pin|SPI1_SS1_Pin, GPIO_PIN_RESET);
 80002b8:	4e38      	ldr	r6, [pc, #224]	@ (800039c <MX_GPIO_Init+0x14c>)
 80002ba:	4622      	mov	r2, r4
 80002bc:	2112      	movs	r1, #18
 80002be:	4630      	mov	r0, r6
 80002c0:	f001 f821 	bl	8001306 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SS4_Pin|DIR1_1_Pin|HIZ1_Pin|HIZ2_Pin
 80002c4:	4f36      	ldr	r7, [pc, #216]	@ (80003a0 <MX_GPIO_Init+0x150>)
 80002c6:	4622      	mov	r2, r4
 80002c8:	f643 0117 	movw	r1, #14359	@ 0x3817
 80002cc:	4638      	mov	r0, r7
 80002ce:	f001 f81a 	bl	8001306 <HAL_GPIO_WritePin>
                          |DRVOFF1_Pin|BRIDGESLEEP2_Pin|IND_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nFAULT_L2_Pin nFAULT_R2_Pin ENC1_Z_Pin ENC2_Z_Pin */
  GPIO_InitStruct.Pin = nFAULT_L2_Pin|nFAULT_R2_Pin|ENC1_Z_Pin|ENC2_Z_Pin;
 80002d2:	f240 3303 	movw	r3, #771	@ 0x303
 80002d6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002dc:	a904      	add	r1, sp, #16
 80002de:	4648      	mov	r0, r9
 80002e0:	f000 fefc 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BRIDGESLEEP1_Pin DRVOFF2_Pin */
  GPIO_InitStruct.Pin = BRIDGESLEEP1_Pin|DRVOFF2_Pin;
 80002e4:	230c      	movs	r3, #12
 80002e6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	2501      	movs	r5, #1
 80002ea:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ee:	f04f 0802 	mov.w	r8, #2
 80002f2:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f6:	a904      	add	r1, sp, #16
 80002f8:	4648      	mov	r0, r9
 80002fa:	f000 feef 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR2_1_Pin */
  GPIO_InitStruct.Pin = DIR2_1_Pin;
 80002fe:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000306:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(DIR2_1_GPIO_Port, &GPIO_InitStruct);
 800030a:	a904      	add	r1, sp, #16
 800030c:	4630      	mov	r0, r6
 800030e:	f000 fee5 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS1_Pin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 8000312:	2310      	movs	r3, #16
 8000314:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031a:	f04f 0a03 	mov.w	sl, #3
 800031e:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 8000322:	eb0d 0103 	add.w	r1, sp, r3
 8000326:	4630      	mov	r0, r6
 8000328:	f000 fed8 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SS2_Pin SPI1_SS3_Pin */
  GPIO_InitStruct.Pin = SPI1_SS2_Pin|SPI1_SS3_Pin;
 800032c:	2330      	movs	r3, #48	@ 0x30
 800032e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000334:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000338:	a904      	add	r1, sp, #16
 800033a:	4648      	mov	r0, r9
 800033c:	f000 fece 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS4_Pin */
  GPIO_InitStruct.Pin = SPI1_SS4_Pin;
 8000340:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000346:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(SPI1_SS4_GPIO_Port, &GPIO_InitStruct);
 800034a:	a904      	add	r1, sp, #16
 800034c:	4638      	mov	r0, r7
 800034e:	f000 fec5 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_1_Pin HIZ1_Pin HIZ2_Pin DRVOFF1_Pin
                           BRIDGESLEEP2_Pin IND_LED_Pin */
  GPIO_InitStruct.Pin = DIR1_1_Pin|HIZ1_Pin|HIZ2_Pin|DRVOFF1_Pin
 8000352:	f643 0316 	movw	r3, #14358	@ 0x3816
 8000356:	9304      	str	r3, [sp, #16]
                          |BRIDGESLEEP2_Pin|IND_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000360:	a904      	add	r1, sp, #16
 8000362:	4638      	mov	r0, r7
 8000364:	f000 feba 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT_R1_Pin nFAULT_L1_Pin RS485_CTRL_Pin */
  GPIO_InitStruct.Pin = nFAULT_R1_Pin|nFAULT_L1_Pin|RS485_CTRL_Pin;
 8000368:	f24c 0320 	movw	r3, #49184	@ 0xc020
 800036c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800036e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000372:	a904      	add	r1, sp, #16
 8000374:	4638      	mov	r0, r7
 8000376:	f000 feb1 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ID_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin;
 800037a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800037e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000380:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(USB_ID_GPIO_Port, &GPIO_InitStruct);
 8000384:	a904      	add	r1, sp, #16
 8000386:	4630      	mov	r0, r6
 8000388:	f000 fea8 	bl	80010dc <HAL_GPIO_Init>

}
 800038c:	b008      	add	sp, #32
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40011000 	.word	0x40011000
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00

080003a4 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a4:	b538      	push	{r3, r4, r5, lr}
  if(htim == &htim3){
 80003a6:	4b22      	ldr	r3, [pc, #136]	@ (8000430 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80003a8:	4283      	cmp	r3, r0
 80003aa:	d000      	beq.n	80003ae <HAL_TIM_PeriodElapsedCallback+0xa>
    TIM3->CCR2 = duty2;
    HAL_GPIO_WritePin(DIR1_1_GPIO_Port, DIR1_1_Pin, dir1);   
    HAL_GPIO_WritePin(DIR2_1_GPIO_Port, DIR2_1_Pin, dir2);   
  }
  
}
 80003ac:	bd38      	pop	{r3, r4, r5, pc}
    cntr++;
 80003ae:	4a21      	ldr	r2, [pc, #132]	@ (8000434 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80003b0:	8813      	ldrh	r3, [r2, #0]
 80003b2:	3301      	adds	r3, #1
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	8013      	strh	r3, [r2, #0]
    if (cntr >= 3600){
 80003b8:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80003bc:	d22f      	bcs.n	800041e <HAL_TIM_PeriodElapsedCallback+0x7a>
    fault1 = HAL_GPIO_ReadPin(nFAULT_L1_GPIO_Port, nFAULT_L1_Pin);
 80003be:	4c1e      	ldr	r4, [pc, #120]	@ (8000438 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80003c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003c4:	4620      	mov	r0, r4
 80003c6:	f000 ff97 	bl	80012f8 <HAL_GPIO_ReadPin>
 80003ca:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80003cc:	7018      	strb	r0, [r3, #0]
    fault2 = HAL_GPIO_ReadPin(nFAULT_R1_GPIO_Port, nFAULT_R1_Pin);
 80003ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003d2:	4620      	mov	r0, r4
 80003d4:	f000 ff90 	bl	80012f8 <HAL_GPIO_ReadPin>
 80003d8:	4b19      	ldr	r3, [pc, #100]	@ (8000440 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80003da:	7018      	strb	r0, [r3, #0]
    fault3 = HAL_GPIO_ReadPin(nFAULT_L2_GPIO_Port, nFAULT_L2_Pin);
 80003dc:	4d19      	ldr	r5, [pc, #100]	@ (8000444 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80003de:	2101      	movs	r1, #1
 80003e0:	4628      	mov	r0, r5
 80003e2:	f000 ff89 	bl	80012f8 <HAL_GPIO_ReadPin>
 80003e6:	4b18      	ldr	r3, [pc, #96]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80003e8:	7018      	strb	r0, [r3, #0]
    fault4 = HAL_GPIO_ReadPin(nFAULT_R2_GPIO_Port, nFAULT_R2_Pin);
 80003ea:	2102      	movs	r1, #2
 80003ec:	4628      	mov	r0, r5
 80003ee:	f000 ff83 	bl	80012f8 <HAL_GPIO_ReadPin>
 80003f2:	4b16      	ldr	r3, [pc, #88]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80003f4:	7018      	strb	r0, [r3, #0]
    TIM3->CCR1 = duty1;
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003f8:	881a      	ldrh	r2, [r3, #0]
 80003fa:	4b16      	ldr	r3, [pc, #88]	@ (8000454 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80003fc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = duty2;
 80003fe:	4a16      	ldr	r2, [pc, #88]	@ (8000458 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000400:	8812      	ldrh	r2, [r2, #0]
 8000402:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(DIR1_1_GPIO_Port, DIR1_1_Pin, dir1);   
 8000404:	4b15      	ldr	r3, [pc, #84]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000406:	781a      	ldrb	r2, [r3, #0]
 8000408:	2102      	movs	r1, #2
 800040a:	4620      	mov	r0, r4
 800040c:	f000 ff7b 	bl	8001306 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR2_1_GPIO_Port, DIR2_1_Pin, dir2);   
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000412:	781a      	ldrb	r2, [r3, #0]
 8000414:	2102      	movs	r1, #2
 8000416:	4813      	ldr	r0, [pc, #76]	@ (8000464 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000418:	f000 ff75 	bl	8001306 <HAL_GPIO_WritePin>
}
 800041c:	e7c6      	b.n	80003ac <HAL_TIM_PeriodElapsedCallback+0x8>
      HAL_GPIO_TogglePin(IND_LED_GPIO_Port, IND_LED_Pin);
 800041e:	2110      	movs	r1, #16
 8000420:	4805      	ldr	r0, [pc, #20]	@ (8000438 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000422:	f000 ff76 	bl	8001312 <HAL_GPIO_TogglePin>
      cntr = 0;
 8000426:	4b03      	ldr	r3, [pc, #12]	@ (8000434 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000428:	2200      	movs	r2, #0
 800042a:	801a      	strh	r2, [r3, #0]
 800042c:	e7c7      	b.n	80003be <HAL_TIM_PeriodElapsedCallback+0x1a>
 800042e:	bf00      	nop
 8000430:	2000014c 	.word	0x2000014c
 8000434:	20000088 	.word	0x20000088
 8000438:	40010c00 	.word	0x40010c00
 800043c:	2000008d 	.word	0x2000008d
 8000440:	2000008c 	.word	0x2000008c
 8000444:	40011000 	.word	0x40011000
 8000448:	2000008b 	.word	0x2000008b
 800044c:	2000008a 	.word	0x2000008a
 8000450:	20000094 	.word	0x20000094
 8000454:	40000400 	.word	0x40000400
 8000458:	20000092 	.word	0x20000092
 800045c:	20000090 	.word	0x20000090
 8000460:	2000008e 	.word	0x2000008e
 8000464:	40010800 	.word	0x40010800

08000468 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046a:	e7fe      	b.n	800046a <Error_Handler+0x2>

0800046c <SystemClock_Config>:
{
 800046c:	b500      	push	{lr}
 800046e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000470:	2228      	movs	r2, #40	@ 0x28
 8000472:	2100      	movs	r1, #0
 8000474:	eb0d 0002 	add.w	r0, sp, r2
 8000478:	f002 fcbd 	bl	8002df6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	2300      	movs	r3, #0
 800047e:	9305      	str	r3, [sp, #20]
 8000480:	9306      	str	r3, [sp, #24]
 8000482:	9307      	str	r3, [sp, #28]
 8000484:	9308      	str	r3, [sp, #32]
 8000486:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000488:	9301      	str	r3, [sp, #4]
 800048a:	9302      	str	r3, [sp, #8]
 800048c:	9303      	str	r3, [sp, #12]
 800048e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000490:	2309      	movs	r3, #9
 8000492:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000494:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000498:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049a:	2201      	movs	r2, #1
 800049c:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800049e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a0:	2202      	movs	r2, #2
 80004a2:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a4:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004aa:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ac:	a80a      	add	r0, sp, #40	@ 0x28
 80004ae:	f000 ff55 	bl	800135c <HAL_RCC_OscConfig>
 80004b2:	b9e0      	cbnz	r0, 80004ee <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2102      	movs	r1, #2
 80004ba:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004c4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c8:	a805      	add	r0, sp, #20
 80004ca:	f001 f979 	bl	80017c0 <HAL_RCC_ClockConfig>
 80004ce:	b980      	cbnz	r0, 80004f2 <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80004d0:	2303      	movs	r3, #3
 80004d2:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004d8:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004de:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e0:	a801      	add	r0, sp, #4
 80004e2:	f001 fa49 	bl	8001978 <HAL_RCCEx_PeriphCLKConfig>
 80004e6:	b930      	cbnz	r0, 80004f6 <SystemClock_Config+0x8a>
}
 80004e8:	b015      	add	sp, #84	@ 0x54
 80004ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80004ee:	f7ff ffbb 	bl	8000468 <Error_Handler>
    Error_Handler();
 80004f2:	f7ff ffb9 	bl	8000468 <Error_Handler>
    Error_Handler();
 80004f6:	f7ff ffb7 	bl	8000468 <Error_Handler>
	...

080004fc <main>:
{
 80004fc:	b580      	push	{r7, lr}
  HAL_Init();
 80004fe:	f000 fbed 	bl	8000cdc <HAL_Init>
  SystemClock_Config();
 8000502:	f7ff ffb3 	bl	800046c <SystemClock_Config>
  MX_GPIO_Init();
 8000506:	f7ff fea3 	bl	8000250 <MX_GPIO_Init>
  MX_ADC1_Init();
 800050a:	f7ff fe1f 	bl	800014c <MX_ADC1_Init>
  MX_SPI1_Init();
 800050e:	f000 f8ef 	bl	80006f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000512:	f000 f983 	bl	800081c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000516:	f000 f9b3 	bl	8000880 <MX_TIM2_Init>
  MX_TIM3_Init();
 800051a:	f000 fb11 	bl	8000b40 <MX_TIM3_Init>
  MX_TIM4_Init();
 800051e:	f000 f9df 	bl	80008e0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000522:	f000 fb57 	bl	8000bd4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000526:	f000 f881 	bl	800062c <MX_RTC_Init>
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2110      	movs	r1, #16
 800052e:	4836      	ldr	r0, [pc, #216]	@ (8000608 <main+0x10c>)
 8000530:	f000 fee9 	bl	8001306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS2_GPIO_Port, SPI1_SS2_Pin, GPIO_PIN_SET);
 8000534:	4d35      	ldr	r5, [pc, #212]	@ (800060c <main+0x110>)
 8000536:	2201      	movs	r2, #1
 8000538:	2110      	movs	r1, #16
 800053a:	4628      	mov	r0, r5
 800053c:	f000 fee3 	bl	8001306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS3_GPIO_Port, SPI1_SS3_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2120      	movs	r1, #32
 8000544:	4628      	mov	r0, r5
 8000546:	f000 fede 	bl	8001306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_SS4_GPIO_Port, SPI1_SS4_Pin, GPIO_PIN_SET);
 800054a:	4c31      	ldr	r4, [pc, #196]	@ (8000610 <main+0x114>)
 800054c:	2201      	movs	r2, #1
 800054e:	4611      	mov	r1, r2
 8000550:	4620      	mov	r0, r4
 8000552:	f000 fed8 	bl	8001306 <HAL_GPIO_WritePin>
  TIM3->CCR1 = 0;
 8000556:	4b2f      	ldr	r3, [pc, #188]	@ (8000614 <main+0x118>)
 8000558:	2100      	movs	r1, #0
 800055a:	6359      	str	r1, [r3, #52]	@ 0x34
  TIM3->CCR2 = 0;
 800055c:	6399      	str	r1, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800055e:	4e2e      	ldr	r6, [pc, #184]	@ (8000618 <main+0x11c>)
 8000560:	4630      	mov	r0, r6
 8000562:	f002 fb03 	bl	8002b6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000566:	2104      	movs	r1, #4
 8000568:	4630      	mov	r0, r6
 800056a:	f002 faff 	bl	8002b6c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800056e:	4630      	mov	r0, r6
 8000570:	f001 ffe0 	bl	8002534 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fbd5 	bl	8000d24 <HAL_Delay>
  HAL_GPIO_WritePin(BRIDGESLEEP1_GPIO_Port, BRIDGESLEEP1_Pin, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2104      	movs	r1, #4
 800057e:	4628      	mov	r0, r5
 8000580:	f000 fec1 	bl	8001306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGESLEEP2_GPIO_Port, BRIDGESLEEP2_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058a:	4620      	mov	r0, r4
 800058c:	f000 febb 	bl	8001306 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fbc7 	bl	8000d24 <HAL_Delay>
  drv8106_write_reg(&drv1, DRV8106_IC_CTRL, DRV8106_CLR_FLT);
 8000596:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800061c <main+0x120>
 800059a:	2201      	movs	r2, #1
 800059c:	2104      	movs	r1, #4
 800059e:	4640      	mov	r0, r8
 80005a0:	f7ff fe32 	bl	8000208 <drv8106_write_reg>
  drv8106_write_reg(&drv2, DRV8106_IC_CTRL, DRV8106_CLR_FLT);
 80005a4:	4f1e      	ldr	r7, [pc, #120]	@ (8000620 <main+0x124>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	2104      	movs	r1, #4
 80005aa:	4638      	mov	r0, r7
 80005ac:	f7ff fe2c 	bl	8000208 <drv8106_write_reg>
  drv8106_write_reg(&drv3, DRV8106_IC_CTRL, DRV8106_CLR_FLT);
 80005b0:	4e1c      	ldr	r6, [pc, #112]	@ (8000624 <main+0x128>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	2104      	movs	r1, #4
 80005b6:	4630      	mov	r0, r6
 80005b8:	f7ff fe26 	bl	8000208 <drv8106_write_reg>
  drv8106_write_reg(&drv4, DRV8106_IC_CTRL, DRV8106_CLR_FLT);
 80005bc:	4d1a      	ldr	r5, [pc, #104]	@ (8000628 <main+0x12c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	2104      	movs	r1, #4
 80005c2:	4628      	mov	r0, r5
 80005c4:	f7ff fe20 	bl	8000208 <drv8106_write_reg>
  HAL_GPIO_WritePin(HIZ1_GPIO_Port, HIZ1_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	4620      	mov	r0, r4
 80005ce:	f000 fe9a 	bl	8001306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HIZ2_GPIO_Port, HIZ2_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005d8:	4620      	mov	r0, r4
 80005da:	f000 fe94 	bl	8001306 <HAL_GPIO_WritePin>
  drv8106_write_reg(&drv1, DRV8106_IC_CTRL, DRV8106_EN_DRV);
 80005de:	2280      	movs	r2, #128	@ 0x80
 80005e0:	2104      	movs	r1, #4
 80005e2:	4640      	mov	r0, r8
 80005e4:	f7ff fe10 	bl	8000208 <drv8106_write_reg>
  drv8106_write_reg(&drv2, DRV8106_IC_CTRL, DRV8106_EN_DRV);
 80005e8:	2280      	movs	r2, #128	@ 0x80
 80005ea:	2104      	movs	r1, #4
 80005ec:	4638      	mov	r0, r7
 80005ee:	f7ff fe0b 	bl	8000208 <drv8106_write_reg>
  drv8106_write_reg(&drv3, DRV8106_IC_CTRL, DRV8106_EN_DRV);
 80005f2:	2280      	movs	r2, #128	@ 0x80
 80005f4:	2104      	movs	r1, #4
 80005f6:	4630      	mov	r0, r6
 80005f8:	f7ff fe06 	bl	8000208 <drv8106_write_reg>
  drv8106_write_reg(&drv4, DRV8106_IC_CTRL, DRV8106_EN_DRV);
 80005fc:	2280      	movs	r2, #128	@ 0x80
 80005fe:	2104      	movs	r1, #4
 8000600:	4628      	mov	r0, r5
 8000602:	f7ff fe01 	bl	8000208 <drv8106_write_reg>
  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x10a>
 8000608:	40010800 	.word	0x40010800
 800060c:	40011000 	.word	0x40011000
 8000610:	40010c00 	.word	0x40010c00
 8000614:	40000400 	.word	0x40000400
 8000618:	2000014c 	.word	0x2000014c
 800061c:	20000024 	.word	0x20000024
 8000620:	20000018 	.word	0x20000018
 8000624:	2000000c 	.word	0x2000000c
 8000628:	20000000 	.word	0x20000000

0800062c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800062c:	b500      	push	{lr}
 800062e:	b083      	sub	sp, #12

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000630:	2300      	movs	r3, #0
 8000632:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000636:	f88d 3006 	strb.w	r3, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 800063a:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800063c:	481a      	ldr	r0, [pc, #104]	@ (80006a8 <MX_RTC_Init+0x7c>)
 800063e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <MX_RTC_Init+0x80>)
 8000640:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800064c:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800064e:	f001 fc3f 	bl	8001ed0 <HAL_RTC_Init>
 8000652:	bb00      	cbnz	r0, 8000696 <MX_RTC_Init+0x6a>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000654:	2312      	movs	r3, #18
 8000656:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x12;
 800065a:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x12;
 800065e:	f88d 3006 	strb.w	r3, [sp, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000662:	2201      	movs	r2, #1
 8000664:	a901      	add	r1, sp, #4
 8000666:	4810      	ldr	r0, [pc, #64]	@ (80006a8 <MX_RTC_Init+0x7c>)
 8000668:	f001 fb4b 	bl	8001d02 <HAL_RTC_SetTime>
 800066c:	b9b0      	cbnz	r0, 800069c <MX_RTC_Init+0x70>
  {
    Error_Handler();
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800066e:	2306      	movs	r3, #6
 8000670:	f88d 3000 	strb.w	r3, [sp]
  DateToUpdate.Month = RTC_MONTH_MARCH;
 8000674:	2303      	movs	r3, #3
 8000676:	f88d 3001 	strb.w	r3, [sp, #1]
  DateToUpdate.Date = 0x1;
 800067a:	2201      	movs	r2, #1
 800067c:	f88d 2002 	strb.w	r2, [sp, #2]
  DateToUpdate.Year = 0x25;
 8000680:	2325      	movs	r3, #37	@ 0x25
 8000682:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000686:	4669      	mov	r1, sp
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <MX_RTC_Init+0x7c>)
 800068a:	f001 fb9b 	bl	8001dc4 <HAL_RTC_SetDate>
 800068e:	b940      	cbnz	r0, 80006a2 <MX_RTC_Init+0x76>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000690:	b003      	add	sp, #12
 8000692:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000696:	f7ff fee7 	bl	8000468 <Error_Handler>
 800069a:	e7db      	b.n	8000654 <MX_RTC_Init+0x28>
    Error_Handler();
 800069c:	f7ff fee4 	bl	8000468 <Error_Handler>
 80006a0:	e7e5      	b.n	800066e <MX_RTC_Init+0x42>
    Error_Handler();
 80006a2:	f7ff fee1 	bl	8000468 <Error_Handler>
}
 80006a6:	e7f3      	b.n	8000690 <MX_RTC_Init+0x64>
 80006a8:	20000098 	.word	0x20000098
 80006ac:	40002800 	.word	0x40002800

080006b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80006b0:	6802      	ldr	r2, [r0, #0]
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <HAL_RTC_MspInit+0x34>)
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d000      	beq.n	80006ba <HAL_RTC_MspInit+0xa>
 80006b8:	4770      	bx	lr
{
 80006ba:	b500      	push	{lr}
 80006bc:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80006be:	f000 fe31 	bl	8001324 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <HAL_RTC_MspInit+0x38>)
 80006c4:	69da      	ldr	r2, [r3, #28]
 80006c6:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80006ca:	61da      	str	r2, [r3, #28]
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	9b01      	ldr	r3, [sp, #4]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006d6:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <HAL_RTC_MspInit+0x3c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006de:	b003      	add	sp, #12
 80006e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80006e4:	40002800 	.word	0x40002800
 80006e8:	40021000 	.word	0x40021000
 80006ec:	42420000 	.word	0x42420000

080006f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006f0:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006f2:	480f      	ldr	r0, [pc, #60]	@ (8000730 <MX_SPI1_Init+0x40>)
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_SPI1_Init+0x44>)
 80006f6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80006fc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	2300      	movs	r3, #0
 8000700:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000702:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000706:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000708:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800070a:	2201      	movs	r2, #1
 800070c:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800070e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000712:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000714:	2228      	movs	r2, #40	@ 0x28
 8000716:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000718:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071e:	230a      	movs	r3, #10
 8000720:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000722:	f001 fcb3 	bl	800208c <HAL_SPI_Init>
 8000726:	b900      	cbnz	r0, 800072a <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000728:	bd08      	pop	{r3, pc}
    Error_Handler();
 800072a:	f7ff fe9d 	bl	8000468 <Error_Handler>
}
 800072e:	e7fb      	b.n	8000728 <MX_SPI1_Init+0x38>
 8000730:	200000ac 	.word	0x200000ac
 8000734:	40013000 	.word	0x40013000

08000738 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000738:	b510      	push	{r4, lr}
 800073a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	2300      	movs	r3, #0
 800073e:	9302      	str	r3, [sp, #8]
 8000740:	9303      	str	r3, [sp, #12]
 8000742:	9304      	str	r3, [sp, #16]
 8000744:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 8000746:	6802      	ldr	r2, [r0, #0]
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <HAL_SPI_MspInit+0x6c>)
 800074a:	429a      	cmp	r2, r3
 800074c:	d001      	beq.n	8000752 <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800074e:	b006      	add	sp, #24
 8000750:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000752:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000756:	699a      	ldr	r2, [r3, #24]
 8000758:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800075c:	619a      	str	r2, [r3, #24]
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000764:	9200      	str	r2, [sp, #0]
 8000766:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	f042 0204 	orr.w	r2, r2, #4
 800076e:	619a      	str	r2, [r3, #24]
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800077a:	23a0      	movs	r3, #160	@ 0xa0
 800077c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	4c08      	ldr	r4, [pc, #32]	@ (80007a8 <HAL_SPI_MspInit+0x70>)
 8000788:	a902      	add	r1, sp, #8
 800078a:	4620      	mov	r0, r4
 800078c:	f000 fca6 	bl	80010dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000790:	2340      	movs	r3, #64	@ 0x40
 8000792:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	a902      	add	r1, sp, #8
 800079c:	4620      	mov	r0, r4
 800079e:	f000 fc9d 	bl	80010dc <HAL_GPIO_Init>
}
 80007a2:	e7d4      	b.n	800074e <HAL_SPI_MspInit+0x16>
 80007a4:	40013000 	.word	0x40013000
 80007a8:	40010800 	.word	0x40010800

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <HAL_MspInit+0x3c>)
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	f042 0201 	orr.w	r2, r2, #1
 80007b6:	619a      	str	r2, [r3, #24]
 80007b8:	699a      	ldr	r2, [r3, #24]
 80007ba:	f002 0201 	and.w	r2, r2, #1
 80007be:	9200      	str	r2, [sp, #0]
 80007c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80007c8:	61da      	str	r2, [r3, #28]
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007d4:	4a05      	ldr	r2, [pc, #20]	@ (80007ec <HAL_MspInit+0x40>)
 80007d6:	6853      	ldr	r3, [r2, #4]
 80007d8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	b002      	add	sp, #8
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000

080007f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler>

080007f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler>

080007f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <MemManage_Handler>

080007f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler>

080007f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler>

080007fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fa:	4770      	bx	lr

080007fc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fc:	4770      	bx	lr

080007fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000802:	f000 fa7d 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000806:	bd08      	pop	{r3, pc}

08000808 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000808:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800080a:	4802      	ldr	r0, [pc, #8]	@ (8000814 <TIM3_IRQHandler+0xc>)
 800080c:	f001 feca 	bl	80025a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000810:	bd08      	pop	{r3, pc}
 8000812:	bf00      	nop
 8000814:	2000014c 	.word	0x2000014c

08000818 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	4770      	bx	lr
	...

0800081c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800081c:	b500      	push	{lr}
 800081e:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000820:	2224      	movs	r2, #36	@ 0x24
 8000822:	2100      	movs	r1, #0
 8000824:	a803      	add	r0, sp, #12
 8000826:	f002 fae6 	bl	8002df6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	2300      	movs	r3, #0
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000830:	4811      	ldr	r0, [pc, #68]	@ (8000878 <MX_TIM1_Init+0x5c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_TIM1_Init+0x60>)
 8000834:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000836:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 800083a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083e:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000842:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000846:	2301      	movs	r3, #1
 8000848:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800084a:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800084c:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800084e:	a903      	add	r1, sp, #12
 8000850:	f001 fff2 	bl	8002838 <HAL_TIM_Encoder_Init>
 8000854:	b950      	cbnz	r0, 800086c <MX_TIM1_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085c:	a901      	add	r1, sp, #4
 800085e:	4806      	ldr	r0, [pc, #24]	@ (8000878 <MX_TIM1_Init+0x5c>)
 8000860:	f002 f9f2 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	b928      	cbnz	r0, 8000872 <MX_TIM1_Init+0x56>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000866:	b00d      	add	sp, #52	@ 0x34
 8000868:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800086c:	f7ff fdfc 	bl	8000468 <Error_Handler>
 8000870:	e7f1      	b.n	8000856 <MX_TIM1_Init+0x3a>
    Error_Handler();
 8000872:	f7ff fdf9 	bl	8000468 <Error_Handler>
}
 8000876:	e7f6      	b.n	8000866 <MX_TIM1_Init+0x4a>
 8000878:	200001dc 	.word	0x200001dc
 800087c:	40012c00 	.word	0x40012c00

08000880 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000880:	b500      	push	{lr}
 8000882:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000884:	2224      	movs	r2, #36	@ 0x24
 8000886:	2100      	movs	r1, #0
 8000888:	a803      	add	r0, sp, #12
 800088a:	f002 fab4 	bl	8002df6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088e:	2300      	movs	r3, #0
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000894:	4811      	ldr	r0, [pc, #68]	@ (80008dc <MX_TIM2_Init+0x5c>)
 8000896:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800089a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 800089c:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 80008a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008a4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008ae:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b0:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008b2:	a903      	add	r1, sp, #12
 80008b4:	f001 ffc0 	bl	8002838 <HAL_TIM_Encoder_Init>
 80008b8:	b950      	cbnz	r0, 80008d0 <MX_TIM2_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c0:	a901      	add	r1, sp, #4
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_TIM2_Init+0x5c>)
 80008c4:	f002 f9c0 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	b928      	cbnz	r0, 80008d6 <MX_TIM2_Init+0x56>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ca:	b00d      	add	sp, #52	@ 0x34
 80008cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008d0:	f7ff fdca 	bl	8000468 <Error_Handler>
 80008d4:	e7f1      	b.n	80008ba <MX_TIM2_Init+0x3a>
    Error_Handler();
 80008d6:	f7ff fdc7 	bl	8000468 <Error_Handler>
}
 80008da:	e7f6      	b.n	80008ca <MX_TIM2_Init+0x4a>
 80008dc:	20000194 	.word	0x20000194

080008e0 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80008e0:	b500      	push	{lr}
 80008e2:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	2300      	movs	r3, #0
 80008e6:	9304      	str	r3, [sp, #16]
 80008e8:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f2:	481b      	ldr	r0, [pc, #108]	@ (8000960 <MX_TIM4_Init+0x80>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <MX_TIM4_Init+0x84>)
 80008f6:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80008f8:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 80008fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000900:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000906:	f001 ff6b 	bl	80027e0 <HAL_TIM_IC_Init>
 800090a:	b9e0      	cbnz	r0, 8000946 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000910:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000912:	a904      	add	r1, sp, #16
 8000914:	4812      	ldr	r0, [pc, #72]	@ (8000960 <MX_TIM4_Init+0x80>)
 8000916:	f002 f997 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	b9b8      	cbnz	r0, 800094c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800091c:	2300      	movs	r3, #0
 800091e:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000920:	2201      	movs	r2, #1
 8000922:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000924:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 0;
 8000926:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000928:	2208      	movs	r2, #8
 800092a:	4669      	mov	r1, sp
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <MX_TIM4_Init+0x80>)
 800092e:	f002 f8a7 	bl	8002a80 <HAL_TIM_IC_ConfigChannel>
 8000932:	b970      	cbnz	r0, 8000952 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000934:	220c      	movs	r2, #12
 8000936:	4669      	mov	r1, sp
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <MX_TIM4_Init+0x80>)
 800093a:	f002 f8a1 	bl	8002a80 <HAL_TIM_IC_ConfigChannel>
 800093e:	b958      	cbnz	r0, 8000958 <MX_TIM4_Init+0x78>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000940:	b007      	add	sp, #28
 8000942:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000946:	f7ff fd8f 	bl	8000468 <Error_Handler>
 800094a:	e7df      	b.n	800090c <MX_TIM4_Init+0x2c>
    Error_Handler();
 800094c:	f7ff fd8c 	bl	8000468 <Error_Handler>
 8000950:	e7e4      	b.n	800091c <MX_TIM4_Init+0x3c>
    Error_Handler();
 8000952:	f7ff fd89 	bl	8000468 <Error_Handler>
 8000956:	e7ed      	b.n	8000934 <MX_TIM4_Init+0x54>
    Error_Handler();
 8000958:	f7ff fd86 	bl	8000468 <Error_Handler>
}
 800095c:	e7f0      	b.n	8000940 <MX_TIM4_Init+0x60>
 800095e:	bf00      	nop
 8000960:	20000104 	.word	0x20000104
 8000964:	40000800 	.word	0x40000800

08000968 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000968:	b500      	push	{lr}
 800096a:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	2300      	movs	r3, #0
 800096e:	9306      	str	r3, [sp, #24]
 8000970:	9307      	str	r3, [sp, #28]
 8000972:	9308      	str	r3, [sp, #32]
 8000974:	9309      	str	r3, [sp, #36]	@ 0x24
  if(tim_encoderHandle->Instance==TIM1)
 8000976:	6803      	ldr	r3, [r0, #0]
 8000978:	4a2d      	ldr	r2, [pc, #180]	@ (8000a30 <HAL_TIM_Encoder_MspInit+0xc8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d005      	beq.n	800098a <HAL_TIM_Encoder_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM2)
 800097e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000982:	d01d      	beq.n	80009c0 <HAL_TIM_Encoder_MspInit+0x58>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000984:	b00b      	add	sp, #44	@ 0x2c
 8000986:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a34 <HAL_TIM_Encoder_MspInit+0xcc>)
 800098c:	699a      	ldr	r2, [r3, #24]
 800098e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	699a      	ldr	r2, [r3, #24]
 8000996:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800099a:	9201      	str	r2, [sp, #4]
 800099c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	f042 0204 	orr.w	r2, r2, #4
 80009a4:	619a      	str	r2, [r3, #24]
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	9302      	str	r3, [sp, #8]
 80009ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 80009b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009b4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	a906      	add	r1, sp, #24
 80009b8:	481f      	ldr	r0, [pc, #124]	@ (8000a38 <HAL_TIM_Encoder_MspInit+0xd0>)
 80009ba:	f000 fb8f 	bl	80010dc <HAL_GPIO_Init>
 80009be:	e7e1      	b.n	8000984 <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80009c4:	69da      	ldr	r2, [r3, #28]
 80009c6:	f042 0201 	orr.w	r2, r2, #1
 80009ca:	61da      	str	r2, [r3, #28]
 80009cc:	69da      	ldr	r2, [r3, #28]
 80009ce:	f002 0201 	and.w	r2, r2, #1
 80009d2:	9203      	str	r2, [sp, #12]
 80009d4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	699a      	ldr	r2, [r3, #24]
 80009d8:	f042 0204 	orr.w	r2, r2, #4
 80009dc:	619a      	str	r2, [r3, #24]
 80009de:	699a      	ldr	r2, [r3, #24]
 80009e0:	f002 0204 	and.w	r2, r2, #4
 80009e4:	9204      	str	r2, [sp, #16]
 80009e6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	f042 0208 	orr.w	r2, r2, #8
 80009ee:	619a      	str	r2, [r3, #24]
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	9305      	str	r3, [sp, #20]
 80009f8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin;
 80009fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009fe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(ENC2_CH1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	a906      	add	r1, sp, #24
 8000a02:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000a04:	f000 fb6a 	bl	80010dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC2_CH2_Pin;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(ENC2_CH2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	a906      	add	r1, sp, #24
 8000a14:	4809      	ldr	r0, [pc, #36]	@ (8000a3c <HAL_TIM_Encoder_MspInit+0xd4>)
 8000a16:	f000 fb61 	bl	80010dc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a1a:	4a09      	ldr	r2, [pc, #36]	@ (8000a40 <HAL_TIM_Encoder_MspInit+0xd8>)
 8000a1c:	6853      	ldr	r3, [r2, #4]
 8000a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000a22:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2a:	6053      	str	r3, [r2, #4]
}
 8000a2c:	e7aa      	b.n	8000984 <HAL_TIM_Encoder_MspInit+0x1c>
 8000a2e:	bf00      	nop
 8000a30:	40012c00 	.word	0x40012c00
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	40010c00 	.word	0x40010c00
 8000a40:	40010000 	.word	0x40010000

08000a44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8000a44:	6802      	ldr	r2, [r0, #0]
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d000      	beq.n	8000a4e <HAL_TIM_PWM_MspInit+0xa>
 8000a4c:	4770      	bx	lr
{
 8000a4e:	b500      	push	{lr}
 8000a50:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a52:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8000a56:	69da      	ldr	r2, [r3, #28]
 8000a58:	f042 0202 	orr.w	r2, r2, #2
 8000a5c:	61da      	str	r2, [r3, #28]
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	9b01      	ldr	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	201d      	movs	r0, #29
 8000a6e:	f000 fb03 	bl	8001078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a72:	201d      	movs	r0, #29
 8000a74:	f000 fb10 	bl	8001098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a78:	b003      	add	sp, #12
 8000a7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a7e:	bf00      	nop
 8000a80:	40000400 	.word	0x40000400

08000a84 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000a84:	b500      	push	{lr}
 8000a86:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9302      	str	r3, [sp, #8]
 8000a8c:	9303      	str	r3, [sp, #12]
 8000a8e:	9304      	str	r3, [sp, #16]
 8000a90:	9305      	str	r3, [sp, #20]
  if(tim_icHandle->Instance==TIM4)
 8000a92:	6802      	ldr	r2, [r0, #0]
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <HAL_TIM_IC_MspInit+0x54>)
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d002      	beq.n	8000aa0 <HAL_TIM_IC_MspInit+0x1c>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000a9a:	b007      	add	sp, #28
 8000a9c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000aa0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8000aa4:	69da      	ldr	r2, [r3, #28]
 8000aa6:	f042 0204 	orr.w	r2, r2, #4
 8000aaa:	61da      	str	r2, [r3, #28]
 8000aac:	69da      	ldr	r2, [r3, #28]
 8000aae:	f002 0204 	and.w	r2, r2, #4
 8000ab2:	9200      	str	r2, [sp, #0]
 8000ab4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	699a      	ldr	r2, [r3, #24]
 8000ab8:	f042 0208 	orr.w	r2, r2, #8
 8000abc:	619a      	str	r2, [r3, #24]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENC1_CH1_F_Pin|ENC2_CH1_F_Pin;
 8000ac8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000acc:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	a902      	add	r1, sp, #8
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <HAL_TIM_IC_MspInit+0x58>)
 8000ad2:	f000 fb03 	bl	80010dc <HAL_GPIO_Init>
}
 8000ad6:	e7e0      	b.n	8000a9a <HAL_TIM_IC_MspInit+0x16>
 8000ad8:	40000800 	.word	0x40000800
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ae0:	b500      	push	{lr}
 8000ae2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	9303      	str	r3, [sp, #12]
 8000aea:	9304      	str	r3, [sp, #16]
 8000aec:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8000aee:	6802      	ldr	r2, [r0, #0]
 8000af0:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <HAL_TIM_MspPostInit+0x54>)
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d002      	beq.n	8000afc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000af6:	b007      	add	sp, #28
 8000af8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8000b00:	699a      	ldr	r2, [r3, #24]
 8000b02:	f042 0210 	orr.w	r2, r2, #16
 8000b06:	619a      	str	r2, [r3, #24]
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8000b12:	23c0      	movs	r3, #192	@ 0xc0
 8000b14:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	a902      	add	r1, sp, #8
 8000b1e:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <HAL_TIM_MspPostInit+0x58>)
 8000b20:	f000 fadc 	bl	80010dc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000b24:	4a05      	ldr	r2, [pc, #20]	@ (8000b3c <HAL_TIM_MspPostInit+0x5c>)
 8000b26:	6853      	ldr	r3, [r2, #4]
 8000b28:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b2c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000b30:	6053      	str	r3, [r2, #4]
}
 8000b32:	e7e0      	b.n	8000af6 <HAL_TIM_MspPostInit+0x16>
 8000b34:	40000400 	.word	0x40000400
 8000b38:	40011000 	.word	0x40011000
 8000b3c:	40010000 	.word	0x40010000

08000b40 <MX_TIM3_Init>:
{
 8000b40:	b500      	push	{lr}
 8000b42:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	2300      	movs	r3, #0
 8000b46:	9308      	str	r3, [sp, #32]
 8000b48:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	9303      	str	r3, [sp, #12]
 8000b50:	9304      	str	r3, [sp, #16]
 8000b52:	9305      	str	r3, [sp, #20]
 8000b54:	9306      	str	r3, [sp, #24]
 8000b56:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8000b58:	481c      	ldr	r0, [pc, #112]	@ (8000bcc <MX_TIM3_Init+0x8c>)
 8000b5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd0 <MX_TIM3_Init+0x90>)
 8000b5c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4;
 8000b5e:	2204      	movs	r2, #4
 8000b60:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8000b64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b68:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b6e:	f001 fe0b 	bl	8002788 <HAL_TIM_PWM_Init>
 8000b72:	b9f8      	cbnz	r0, 8000bb4 <MX_TIM3_Init+0x74>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7a:	a908      	add	r1, sp, #32
 8000b7c:	4813      	ldr	r0, [pc, #76]	@ (8000bcc <MX_TIM3_Init+0x8c>)
 8000b7e:	f002 f863 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	b9d0      	cbnz	r0, 8000bba <MX_TIM3_Init+0x7a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b84:	2360      	movs	r3, #96	@ 0x60
 8000b86:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8000b88:	2200      	movs	r2, #0
 8000b8a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b90:	a901      	add	r1, sp, #4
 8000b92:	480e      	ldr	r0, [pc, #56]	@ (8000bcc <MX_TIM3_Init+0x8c>)
 8000b94:	f001 feda 	bl	800294c <HAL_TIM_PWM_ConfigChannel>
 8000b98:	b990      	cbnz	r0, 8000bc0 <MX_TIM3_Init+0x80>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	eb0d 0102 	add.w	r1, sp, r2
 8000ba0:	480a      	ldr	r0, [pc, #40]	@ (8000bcc <MX_TIM3_Init+0x8c>)
 8000ba2:	f001 fed3 	bl	800294c <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	b970      	cbnz	r0, 8000bc6 <MX_TIM3_Init+0x86>
  HAL_TIM_MspPostInit(&htim3);
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <MX_TIM3_Init+0x8c>)
 8000baa:	f7ff ff99 	bl	8000ae0 <HAL_TIM_MspPostInit>
}
 8000bae:	b00b      	add	sp, #44	@ 0x2c
 8000bb0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000bb4:	f7ff fc58 	bl	8000468 <Error_Handler>
 8000bb8:	e7dc      	b.n	8000b74 <MX_TIM3_Init+0x34>
    Error_Handler();
 8000bba:	f7ff fc55 	bl	8000468 <Error_Handler>
 8000bbe:	e7e1      	b.n	8000b84 <MX_TIM3_Init+0x44>
    Error_Handler();
 8000bc0:	f7ff fc52 	bl	8000468 <Error_Handler>
 8000bc4:	e7e9      	b.n	8000b9a <MX_TIM3_Init+0x5a>
    Error_Handler();
 8000bc6:	f7ff fc4f 	bl	8000468 <Error_Handler>
 8000bca:	e7ed      	b.n	8000ba8 <MX_TIM3_Init+0x68>
 8000bcc:	2000014c 	.word	0x2000014c
 8000bd0:	40000400 	.word	0x40000400

08000bd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bd4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd6:	480a      	ldr	r0, [pc, #40]	@ (8000c00 <MX_USART1_UART_Init+0x2c>)
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <MX_USART1_UART_Init+0x30>)
 8000bda:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000bdc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000be0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	2300      	movs	r3, #0
 8000be4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bea:	220c      	movs	r2, #12
 8000bec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf2:	f002 f8ab 	bl	8002d4c <HAL_UART_Init>
 8000bf6:	b900      	cbnz	r0, 8000bfa <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bfa:	f7ff fc35 	bl	8000468 <Error_Handler>
}
 8000bfe:	e7fb      	b.n	8000bf8 <MX_USART1_UART_Init+0x24>
 8000c00:	20000224 	.word	0x20000224
 8000c04:	40013800 	.word	0x40013800

08000c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	9303      	str	r3, [sp, #12]
 8000c12:	9304      	str	r3, [sp, #16]
 8000c14:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8000c16:	6802      	ldr	r2, [r0, #0]
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <HAL_UART_MspInit+0x7c>)
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d001      	beq.n	8000c22 <HAL_UART_MspInit+0x1a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c1e:	b006      	add	sp, #24
 8000c20:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c22:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8000c26:	699a      	ldr	r2, [r3, #24]
 8000c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000c2c:	619a      	str	r2, [r3, #24]
 8000c2e:	699a      	ldr	r2, [r3, #24]
 8000c30:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000c34:	9200      	str	r2, [sp, #0]
 8000c36:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	699a      	ldr	r2, [r3, #24]
 8000c3a:	f042 0208 	orr.w	r2, r2, #8
 8000c3e:	619a      	str	r2, [r3, #24]
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c4a:	2340      	movs	r3, #64	@ 0x40
 8000c4c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	4c0c      	ldr	r4, [pc, #48]	@ (8000c88 <HAL_UART_MspInit+0x80>)
 8000c58:	a902      	add	r1, sp, #8
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f000 fa3e 	bl	80010dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	a902      	add	r1, sp, #8
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f000 fa35 	bl	80010dc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000c72:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <HAL_UART_MspInit+0x84>)
 8000c74:	6853      	ldr	r3, [r2, #4]
 8000c76:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6053      	str	r3, [r2, #4]
}
 8000c80:	e7cd      	b.n	8000c1e <HAL_UART_MspInit+0x16>
 8000c82:	bf00      	nop
 8000c84:	40013800 	.word	0x40013800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40010000 	.word	0x40010000

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b510      	push	{r4, lr}
 8000c92:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_InitTick+0x40>)
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd4 <HAL_InitTick+0x44>)
 8000ca2:	6810      	ldr	r0, [r2, #0]
 8000ca4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ca8:	f000 fa04 	bl	80010b4 <HAL_SYSTICK_Config>
 8000cac:	b968      	cbnz	r0, 8000cca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	2c0f      	cmp	r4, #15
 8000cb0:	d901      	bls.n	8000cb6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	e00a      	b.n	8000ccc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4621      	mov	r1, r4
 8000cba:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbe:	f000 f9db 	bl	8001078 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc2:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <HAL_InitTick+0x48>)
 8000cc4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000cca:	2001      	movs	r0, #1
}
 8000ccc:	bd10      	pop	{r4, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000034 	.word	0x20000034
 8000cd4:	20000030 	.word	0x20000030
 8000cd8:	20000038 	.word	0x20000038

08000cdc <HAL_Init>:
{
 8000cdc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cde:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <HAL_Init+0x20>)
 8000ce0:	6813      	ldr	r3, [r2, #0]
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f9b3 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f7ff ffce 	bl	8000c90 <HAL_InitTick>
  HAL_MspInit();
 8000cf4:	f7ff fd5a 	bl	80007ac <HAL_MspInit>
}
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	bd08      	pop	{r3, pc}
 8000cfc:	40022000 	.word	0x40022000

08000d00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d00:	4a03      	ldr	r2, [pc, #12]	@ (8000d10 <HAL_IncTick+0x10>)
 8000d02:	6811      	ldr	r1, [r2, #0]
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_IncTick+0x14>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	440b      	add	r3, r1
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000026c 	.word	0x2000026c
 8000d14:	20000034 	.word	0x20000034

08000d18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d18:	4b01      	ldr	r3, [pc, #4]	@ (8000d20 <HAL_GetTick+0x8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	2000026c 	.word	0x2000026c

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b538      	push	{r3, r4, r5, lr}
 8000d26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff fff6 	bl	8000d18 <HAL_GetTick>
 8000d2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000d32:	d002      	beq.n	8000d3a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <HAL_Delay+0x24>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3a:	f7ff ffed 	bl	8000d18 <HAL_GetTick>
 8000d3e:	1b40      	subs	r0, r0, r5
 8000d40:	42a0      	cmp	r0, r4
 8000d42:	d3fa      	bcc.n	8000d3a <HAL_Delay+0x16>
  {
  }
}
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop
 8000d48:	20000034 	.word	0x20000034

08000d4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d4c:	b430      	push	{r4, r5}
 8000d4e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000d50:	2200      	movs	r2, #0
 8000d52:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d54:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8000d58:	2a01      	cmp	r2, #1
 8000d5a:	f000 808f 	beq.w	8000e7c <HAL_ADC_ConfigChannel+0x130>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2201      	movs	r2, #1
 8000d62:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d66:	684a      	ldr	r2, [r1, #4]
 8000d68:	2a06      	cmp	r2, #6
 8000d6a:	d82d      	bhi.n	8000dc8 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d6c:	6804      	ldr	r4, [r0, #0]
 8000d6e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8000d70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000d74:	3a05      	subs	r2, #5
 8000d76:	f04f 0c1f 	mov.w	ip, #31
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea20 000c 	bic.w	r0, r0, ip
 8000d82:	680d      	ldr	r5, [r1, #0]
 8000d84:	fa05 f202 	lsl.w	r2, r5, r2
 8000d88:	4302      	orrs	r2, r0
 8000d8a:	6362      	str	r2, [r4, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d8c:	680a      	ldr	r2, [r1, #0]
 8000d8e:	2a09      	cmp	r2, #9
 8000d90:	d938      	bls.n	8000e04 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d92:	681c      	ldr	r4, [r3, #0]
 8000d94:	68e0      	ldr	r0, [r4, #12]
 8000d96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d9a:	3a1e      	subs	r2, #30
 8000d9c:	f04f 0c07 	mov.w	ip, #7
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	ea20 000c 	bic.w	r0, r0, ip
 8000da8:	688d      	ldr	r5, [r1, #8]
 8000daa:	fa05 f202 	lsl.w	r2, r5, r2
 8000dae:	4302      	orrs	r2, r0
 8000db0:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000db2:	680a      	ldr	r2, [r1, #0]
 8000db4:	3a10      	subs	r2, #16
 8000db6:	2a01      	cmp	r2, #1
 8000db8:	d934      	bls.n	8000e24 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dba:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bc30      	pop	{r4, r5}
 8000dc6:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8000dc8:	2a0c      	cmp	r2, #12
 8000dca:	d80d      	bhi.n	8000de8 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dcc:	6805      	ldr	r5, [r0, #0]
 8000dce:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000dd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000dd4:	3a23      	subs	r2, #35	@ 0x23
 8000dd6:	241f      	movs	r4, #31
 8000dd8:	4094      	lsls	r4, r2
 8000dda:	ea20 0004 	bic.w	r0, r0, r4
 8000dde:	680c      	ldr	r4, [r1, #0]
 8000de0:	4094      	lsls	r4, r2
 8000de2:	4320      	orrs	r0, r4
 8000de4:	6328      	str	r0, [r5, #48]	@ 0x30
 8000de6:	e7d1      	b.n	8000d8c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000de8:	6805      	ldr	r5, [r0, #0]
 8000dea:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8000dec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000df0:	3a41      	subs	r2, #65	@ 0x41
 8000df2:	241f      	movs	r4, #31
 8000df4:	4094      	lsls	r4, r2
 8000df6:	ea20 0004 	bic.w	r0, r0, r4
 8000dfa:	680c      	ldr	r4, [r1, #0]
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	4320      	orrs	r0, r4
 8000e00:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8000e02:	e7c3      	b.n	8000d8c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e04:	681c      	ldr	r4, [r3, #0]
 8000e06:	6920      	ldr	r0, [r4, #16]
 8000e08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000e0c:	f04f 0c07 	mov.w	ip, #7
 8000e10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e14:	ea20 000c 	bic.w	r0, r0, ip
 8000e18:	688d      	ldr	r5, [r1, #8]
 8000e1a:	fa05 f202 	lsl.w	r2, r5, r2
 8000e1e:	4302      	orrs	r2, r0
 8000e20:	6122      	str	r2, [r4, #16]
 8000e22:	e7c6      	b.n	8000db2 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4816      	ldr	r0, [pc, #88]	@ (8000e80 <HAL_ADC_ConfigChannel+0x134>)
 8000e28:	4282      	cmp	r2, r0
 8000e2a:	d005      	beq.n	8000e38 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e2e:	f042 0220 	orr.w	r2, r2, #32
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8000e34:	2001      	movs	r0, #1
 8000e36:	e7c1      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e38:	6890      	ldr	r0, [r2, #8]
 8000e3a:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8000e3e:	d11b      	bne.n	8000e78 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e40:	6890      	ldr	r0, [r2, #8]
 8000e42:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e46:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e48:	680a      	ldr	r2, [r1, #0]
 8000e4a:	2a10      	cmp	r2, #16
 8000e4c:	d001      	beq.n	8000e52 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4e:	2000      	movs	r0, #0
 8000e50:	e7b4      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e52:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <HAL_ADC_ConfigChannel+0x138>)
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <HAL_ADC_ConfigChannel+0x13c>)
 8000e58:	fba1 1202 	umull	r1, r2, r1, r2
 8000e5c:	0c92      	lsrs	r2, r2, #18
 8000e5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e62:	0052      	lsls	r2, r2, #1
 8000e64:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000e66:	e002      	b.n	8000e6e <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8000e68:	9a01      	ldr	r2, [sp, #4]
 8000e6a:	3a01      	subs	r2, #1
 8000e6c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000e6e:	9a01      	ldr	r2, [sp, #4]
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	d1f9      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e74:	2000      	movs	r0, #0
 8000e76:	e7a1      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x70>
 8000e78:	2000      	movs	r0, #0
 8000e7a:	e79f      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	e7a0      	b.n	8000dc2 <HAL_ADC_ConfigChannel+0x76>
 8000e80:	40012400 	.word	0x40012400
 8000e84:	20000030 	.word	0x20000030
 8000e88:	431bde83 	.word	0x431bde83

08000e8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e8e:	6803      	ldr	r3, [r0, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	f012 0f01 	tst.w	r2, #1
 8000e96:	d101      	bne.n	8000e9c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e98:	2000      	movs	r0, #0
}
 8000e9a:	bd38      	pop	{r3, r4, r5, pc}
 8000e9c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000ea6:	f7ff ff37 	bl	8000d18 <HAL_GetTick>
 8000eaa:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f013 0f01 	tst.w	r3, #1
 8000eb4:	d013      	beq.n	8000ede <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eb6:	f7ff ff2f 	bl	8000d18 <HAL_GetTick>
 8000eba:	1b43      	subs	r3, r0, r5
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d9f5      	bls.n	8000eac <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f013 0f01 	tst.w	r3, #1
 8000ec8:	d0f0      	beq.n	8000eac <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8000eda:	2001      	movs	r0, #1
 8000edc:	e7dd      	b.n	8000e9a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8000ede:	2000      	movs	r0, #0
 8000ee0:	e7db      	b.n	8000e9a <ADC_ConversionStop_Disable+0xe>
	...

08000ee4 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d07b      	beq.n	8000fe0 <HAL_ADC_Init+0xfc>
{
 8000ee8:	b570      	push	{r4, r5, r6, lr}
 8000eea:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d04d      	beq.n	8000f8e <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f7ff ffca 	bl	8000e8c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000efa:	f013 0310 	ands.w	r3, r3, #16
 8000efe:	d169      	bne.n	8000fd4 <HAL_ADC_Init+0xf0>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d167      	bne.n	8000fd4 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8000f04:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f06:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8000f0a:	f022 0202 	bic.w	r2, r2, #2
 8000f0e:	f042 0202 	orr.w	r2, r2, #2
 8000f12:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f14:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f16:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f18:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f1a:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f1c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f20:	68a5      	ldr	r5, [r4, #8]
 8000f22:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8000f26:	d002      	beq.n	8000f2e <HAL_ADC_Init+0x4a>
 8000f28:	2d01      	cmp	r5, #1
 8000f2a:	d036      	beq.n	8000f9a <HAL_ADC_Init+0xb6>
 8000f2c:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f2e:	7d26      	ldrb	r6, [r4, #20]
 8000f30:	2e01      	cmp	r6, #1
 8000f32:	d035      	beq.n	8000fa0 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8000f34:	6826      	ldr	r6, [r4, #0]
 8000f36:	6871      	ldr	r1, [r6, #4]
 8000f38:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8000f3c:	4329      	orrs	r1, r5
 8000f3e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f40:	6825      	ldr	r5, [r4, #0]
 8000f42:	68ae      	ldr	r6, [r5, #8]
 8000f44:	4927      	ldr	r1, [pc, #156]	@ (8000fe4 <HAL_ADC_Init+0x100>)
 8000f46:	4031      	ands	r1, r6
 8000f48:	4311      	orrs	r1, r2
 8000f4a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f4c:	68a1      	ldr	r1, [r4, #8]
 8000f4e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8000f52:	d001      	beq.n	8000f58 <HAL_ADC_Init+0x74>
 8000f54:	2901      	cmp	r1, #1
 8000f56:	d102      	bne.n	8000f5e <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f58:	6923      	ldr	r3, [r4, #16]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000f5e:	6825      	ldr	r5, [r4, #0]
 8000f60:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8000f62:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8000f66:	430b      	orrs	r3, r1
 8000f68:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	6899      	ldr	r1, [r3, #8]
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <HAL_ADC_Init+0x104>)
 8000f70:	400b      	ands	r3, r1
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d025      	beq.n	8000fc2 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8000f76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000f78:	f023 0312 	bic.w	r3, r3, #18
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f82:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	e027      	b.n	8000fde <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000f90:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8000f94:	f7ff f908 	bl	80001a8 <HAL_ADC_MspInit>
 8000f98:	e7ab      	b.n	8000ef2 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f9a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8000f9e:	e7c6      	b.n	8000f2e <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fa0:	b931      	cbnz	r1, 8000fb0 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fa2:	69a1      	ldr	r1, [r4, #24]
 8000fa4:	3901      	subs	r1, #1
 8000fa6:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8000faa:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8000fae:	e7c1      	b.n	8000f34 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000fb2:	f041 0120 	orr.w	r1, r1, #32
 8000fb6:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000fba:	f041 0101 	orr.w	r1, r1, #1
 8000fbe:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8000fc0:	e7b8      	b.n	8000f34 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000fc8:	f023 0303 	bic.w	r3, r3, #3
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000fd2:	e004      	b.n	8000fde <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8000fdc:	2001      	movs	r0, #1
}
 8000fde:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000fe0:	2001      	movs	r0, #1
}
 8000fe2:	4770      	bx	lr
 8000fe4:	ffe1f7fd 	.word	0xffe1f7fd
 8000fe8:	ff1f0efe 	.word	0xff1f0efe

08000fec <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000fec:	2800      	cmp	r0, #0
 8000fee:	db08      	blt.n	8001002 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	0109      	lsls	r1, r1, #4
 8000ff2:	b2c9      	uxtb	r1, r1
 8000ff4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ff8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000ffc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001000:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	f000 000f 	and.w	r0, r0, #15
 8001006:	0109      	lsls	r1, r1, #4
 8001008:	b2c9      	uxtb	r1, r1
 800100a:	4b01      	ldr	r3, [pc, #4]	@ (8001010 <__NVIC_SetPriority+0x24>)
 800100c:	5419      	strb	r1, [r3, r0]
  }
}
 800100e:	4770      	bx	lr
 8001010:	e000ed14 	.word	0xe000ed14

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001016:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101a:	f1c0 0c07 	rsb	ip, r0, #7
 800101e:	f1bc 0f04 	cmp.w	ip, #4
 8001022:	bf28      	it	cs
 8001024:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001028:	1d03      	adds	r3, r0, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d90f      	bls.n	800104e <NVIC_EncodePriority+0x3a>
 800102e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 3eff 	mov.w	lr, #4294967295
 8001034:	fa0e f00c 	lsl.w	r0, lr, ip
 8001038:	ea21 0100 	bic.w	r1, r1, r0
 800103c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001042:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001046:	ea41 0002 	orr.w	r0, r1, r2
 800104a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	2300      	movs	r3, #0
 8001050:	e7ee      	b.n	8001030 <NVIC_EncodePriority+0x1c>
	...

08001054 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001056:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001058:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800105c:	041b      	lsls	r3, r3, #16
 800105e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001060:	0200      	lsls	r0, r0, #8
 8001062:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001066:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001070:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001078:	b510      	push	{r4, lr}
 800107a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_NVIC_SetPriority+0x1c>)
 800107e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001080:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001084:	f7ff ffc6 	bl	8001014 <NVIC_EncodePriority>
 8001088:	4601      	mov	r1, r0
 800108a:	4620      	mov	r0, r4
 800108c:	f7ff ffae 	bl	8000fec <__NVIC_SetPriority>
}
 8001090:	bd10      	pop	{r4, pc}
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001098:	2800      	cmp	r0, #0
 800109a:	db07      	blt.n	80010ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109c:	f000 021f 	and.w	r2, r0, #31
 80010a0:	0940      	lsrs	r0, r0, #5
 80010a2:	2301      	movs	r3, #1
 80010a4:	4093      	lsls	r3, r2
 80010a6:	4a02      	ldr	r2, [pc, #8]	@ (80010b0 <HAL_NVIC_EnableIRQ+0x18>)
 80010a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	3801      	subs	r0, #1
 80010b6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80010ba:	d20b      	bcs.n	80010d4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010c0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <HAL_SYSTICK_Config+0x24>)
 80010c4:	21f0      	movs	r1, #240	@ 0xf0
 80010c6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ca:	2000      	movs	r0, #0
 80010cc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	2207      	movs	r2, #7
 80010d0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010d4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80010e2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e4:	e0a1      	b.n	800122a <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010e6:	4d7e      	ldr	r5, [pc, #504]	@ (80012e0 <HAL_GPIO_Init+0x204>)
 80010e8:	42ab      	cmp	r3, r5
 80010ea:	d014      	beq.n	8001116 <HAL_GPIO_Init+0x3a>
 80010ec:	d80c      	bhi.n	8001108 <HAL_GPIO_Init+0x2c>
 80010ee:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80010f2:	42ab      	cmp	r3, r5
 80010f4:	d00f      	beq.n	8001116 <HAL_GPIO_Init+0x3a>
 80010f6:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 80010fa:	42ab      	cmp	r3, r5
 80010fc:	d00b      	beq.n	8001116 <HAL_GPIO_Init+0x3a>
 80010fe:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001102:	42ab      	cmp	r3, r5
 8001104:	d110      	bne.n	8001128 <HAL_GPIO_Init+0x4c>
 8001106:	e006      	b.n	8001116 <HAL_GPIO_Init+0x3a>
 8001108:	4d76      	ldr	r5, [pc, #472]	@ (80012e4 <HAL_GPIO_Init+0x208>)
 800110a:	42ab      	cmp	r3, r5
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x3a>
 800110e:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8001112:	42ab      	cmp	r3, r5
 8001114:	d108      	bne.n	8001128 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001116:	688b      	ldr	r3, [r1, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d050      	beq.n	80011be <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800111c:	2b01      	cmp	r3, #1
 800111e:	d049      	beq.n	80011b4 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001120:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001122:	2408      	movs	r4, #8
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001126:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001128:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800112c:	d849      	bhi.n	80011c2 <HAL_GPIO_Init+0xe6>
 800112e:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001130:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001134:	6833      	ldr	r3, [r6, #0]
 8001136:	250f      	movs	r5, #15
 8001138:	4095      	lsls	r5, r2
 800113a:	ea23 0305 	bic.w	r3, r3, r5
 800113e:	fa04 f202 	lsl.w	r2, r4, r2
 8001142:	4313      	orrs	r3, r2
 8001144:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001146:	684b      	ldr	r3, [r1, #4]
 8001148:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800114c:	d06b      	beq.n	8001226 <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b66      	ldr	r3, [pc, #408]	@ (80012e8 <HAL_GPIO_Init+0x20c>)
 8001150:	699a      	ldr	r2, [r3, #24]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	619a      	str	r2, [r3, #24]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001162:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001166:	1c95      	adds	r5, r2, #2
 8001168:	4b60      	ldr	r3, [pc, #384]	@ (80012ec <HAL_GPIO_Init+0x210>)
 800116a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800116e:	f00c 0503 	and.w	r5, ip, #3
 8001172:	00ad      	lsls	r5, r5, #2
 8001174:	230f      	movs	r3, #15
 8001176:	40ab      	lsls	r3, r5
 8001178:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800117c:	4b5c      	ldr	r3, [pc, #368]	@ (80012f0 <HAL_GPIO_Init+0x214>)
 800117e:	4298      	cmp	r0, r3
 8001180:	d026      	beq.n	80011d0 <HAL_GPIO_Init+0xf4>
 8001182:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001186:	4298      	cmp	r0, r3
 8001188:	f000 808c 	beq.w	80012a4 <HAL_GPIO_Init+0x1c8>
 800118c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001190:	4298      	cmp	r0, r3
 8001192:	f000 8089 	beq.w	80012a8 <HAL_GPIO_Init+0x1cc>
 8001196:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800119a:	4298      	cmp	r0, r3
 800119c:	d016      	beq.n	80011cc <HAL_GPIO_Init+0xf0>
 800119e:	2304      	movs	r3, #4
 80011a0:	e017      	b.n	80011d2 <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011a2:	68cc      	ldr	r4, [r1, #12]
 80011a4:	3404      	adds	r4, #4
          break;
 80011a6:	e7bf      	b.n	8001128 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011a8:	68cc      	ldr	r4, [r1, #12]
 80011aa:	3408      	adds	r4, #8
          break;
 80011ac:	e7bc      	b.n	8001128 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ae:	68cc      	ldr	r4, [r1, #12]
 80011b0:	340c      	adds	r4, #12
          break;
 80011b2:	e7b9      	b.n	8001128 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 80011b4:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b6:	2408      	movs	r4, #8
 80011b8:	e7b6      	b.n	8001128 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011ba:	2400      	movs	r4, #0
 80011bc:	e7b4      	b.n	8001128 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011be:	2404      	movs	r4, #4
 80011c0:	e7b2      	b.n	8001128 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c2:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011c4:	f1ac 0208 	sub.w	r2, ip, #8
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	e7b3      	b.n	8001134 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011cc:	2303      	movs	r3, #3
 80011ce:	e000      	b.n	80011d2 <HAL_GPIO_Init+0xf6>
 80011d0:	2300      	movs	r3, #0
 80011d2:	40ab      	lsls	r3, r5
 80011d4:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80011d6:	3202      	adds	r2, #2
 80011d8:	4d44      	ldr	r5, [pc, #272]	@ (80012ec <HAL_GPIO_Init+0x210>)
 80011da:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011de:	684b      	ldr	r3, [r1, #4]
 80011e0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80011e4:	d062      	beq.n	80012ac <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011e6:	4a43      	ldr	r2, [pc, #268]	@ (80012f4 <HAL_GPIO_Init+0x218>)
 80011e8:	6893      	ldr	r3, [r2, #8]
 80011ea:	ea43 030e 	orr.w	r3, r3, lr
 80011ee:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f0:	684b      	ldr	r3, [r1, #4]
 80011f2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80011f6:	d05f      	beq.n	80012b8 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f8:	4a3e      	ldr	r2, [pc, #248]	@ (80012f4 <HAL_GPIO_Init+0x218>)
 80011fa:	68d3      	ldr	r3, [r2, #12]
 80011fc:	ea43 030e 	orr.w	r3, r3, lr
 8001200:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001202:	684b      	ldr	r3, [r1, #4]
 8001204:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001208:	d05c      	beq.n	80012c4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800120a:	4a3a      	ldr	r2, [pc, #232]	@ (80012f4 <HAL_GPIO_Init+0x218>)
 800120c:	6853      	ldr	r3, [r2, #4]
 800120e:	ea43 030e 	orr.w	r3, r3, lr
 8001212:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001214:	684b      	ldr	r3, [r1, #4]
 8001216:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800121a:	d059      	beq.n	80012d0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4a35      	ldr	r2, [pc, #212]	@ (80012f4 <HAL_GPIO_Init+0x218>)
 800121e:	6813      	ldr	r3, [r2, #0]
 8001220:	ea43 030e 	orr.w	r3, r3, lr
 8001224:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001226:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	680b      	ldr	r3, [r1, #0]
 800122c:	fa33 f20c 	lsrs.w	r2, r3, ip
 8001230:	d054      	beq.n	80012dc <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8001232:	2201      	movs	r2, #1
 8001234:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001238:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 800123c:	ea32 0303 	bics.w	r3, r2, r3
 8001240:	d1f1      	bne.n	8001226 <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8001242:	684b      	ldr	r3, [r1, #4]
 8001244:	2b12      	cmp	r3, #18
 8001246:	f63f af4e 	bhi.w	80010e6 <HAL_GPIO_Init+0xa>
 800124a:	2b12      	cmp	r3, #18
 800124c:	f63f af6c 	bhi.w	8001128 <HAL_GPIO_Init+0x4c>
 8001250:	a501      	add	r5, pc, #4	@ (adr r5, 8001258 <HAL_GPIO_Init+0x17c>)
 8001252:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001256:	bf00      	nop
 8001258:	08001117 	.word	0x08001117
 800125c:	08001127 	.word	0x08001127
 8001260:	080011a9 	.word	0x080011a9
 8001264:	080011bb 	.word	0x080011bb
 8001268:	08001129 	.word	0x08001129
 800126c:	08001129 	.word	0x08001129
 8001270:	08001129 	.word	0x08001129
 8001274:	08001129 	.word	0x08001129
 8001278:	08001129 	.word	0x08001129
 800127c:	08001129 	.word	0x08001129
 8001280:	08001129 	.word	0x08001129
 8001284:	08001129 	.word	0x08001129
 8001288:	08001129 	.word	0x08001129
 800128c:	08001129 	.word	0x08001129
 8001290:	08001129 	.word	0x08001129
 8001294:	08001129 	.word	0x08001129
 8001298:	08001129 	.word	0x08001129
 800129c:	080011a3 	.word	0x080011a3
 80012a0:	080011af 	.word	0x080011af
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012a4:	2301      	movs	r3, #1
 80012a6:	e794      	b.n	80011d2 <HAL_GPIO_Init+0xf6>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e792      	b.n	80011d2 <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ac:	4a11      	ldr	r2, [pc, #68]	@ (80012f4 <HAL_GPIO_Init+0x218>)
 80012ae:	6893      	ldr	r3, [r2, #8]
 80012b0:	ea23 030e 	bic.w	r3, r3, lr
 80012b4:	6093      	str	r3, [r2, #8]
 80012b6:	e79b      	b.n	80011f0 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012b8:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <HAL_GPIO_Init+0x218>)
 80012ba:	68d3      	ldr	r3, [r2, #12]
 80012bc:	ea23 030e 	bic.w	r3, r3, lr
 80012c0:	60d3      	str	r3, [r2, #12]
 80012c2:	e79e      	b.n	8001202 <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012c4:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <HAL_GPIO_Init+0x218>)
 80012c6:	6853      	ldr	r3, [r2, #4]
 80012c8:	ea23 030e 	bic.w	r3, r3, lr
 80012cc:	6053      	str	r3, [r2, #4]
 80012ce:	e7a1      	b.n	8001214 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d0:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_GPIO_Init+0x218>)
 80012d2:	6813      	ldr	r3, [r2, #0]
 80012d4:	ea23 030e 	bic.w	r3, r3, lr
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e7a4      	b.n	8001226 <HAL_GPIO_Init+0x14a>
  }
}
 80012dc:	b002      	add	sp, #8
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	10220000 	.word	0x10220000
 80012e4:	10310000 	.word	0x10310000
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40010800 	.word	0x40010800
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f8:	6883      	ldr	r3, [r0, #8]
 80012fa:	4219      	tst	r1, r3
 80012fc:	d001      	beq.n	8001302 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80012fe:	2001      	movs	r0, #1
 8001300:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001302:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001304:	4770      	bx	lr

08001306 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001306:	b10a      	cbz	r2, 800130c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001308:	6101      	str	r1, [r0, #16]
 800130a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800130c:	0409      	lsls	r1, r1, #16
 800130e:	6101      	str	r1, [r0, #16]
  }
}
 8001310:	4770      	bx	lr

08001312 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001312:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001314:	ea01 0203 	and.w	r2, r1, r3
 8001318:	ea21 0103 	bic.w	r1, r1, r3
 800131c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001320:	6101      	str	r1, [r0, #16]
}
 8001322:	4770      	bx	lr

08001324 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001324:	4b01      	ldr	r3, [pc, #4]	@ (800132c <HAL_PWR_EnableBkUpAccess+0x8>)
 8001326:	2201      	movs	r2, #1
 8001328:	621a      	str	r2, [r3, #32]
}
 800132a:	4770      	bx	lr
 800132c:	420e0000 	.word	0x420e0000

08001330 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001330:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <RCC_Delay+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <RCC_Delay+0x28>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	0a5b      	lsrs	r3, r3, #9
 800133e:	fb00 f303 	mul.w	r3, r0, r3
 8001342:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001344:	bf00      	nop
  }
  while (Delay --);
 8001346:	9b01      	ldr	r3, [sp, #4]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	9201      	str	r2, [sp, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f9      	bne.n	8001344 <RCC_Delay+0x14>
}
 8001350:	b002      	add	sp, #8
 8001352:	4770      	bx	lr
 8001354:	20000030 	.word	0x20000030
 8001358:	10624dd3 	.word	0x10624dd3

0800135c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800135c:	2800      	cmp	r0, #0
 800135e:	f000 81f1 	beq.w	8001744 <HAL_RCC_OscConfig+0x3e8>
{
 8001362:	b570      	push	{r4, r5, r6, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001368:	6803      	ldr	r3, [r0, #0]
 800136a:	f013 0f01 	tst.w	r3, #1
 800136e:	d02c      	beq.n	80013ca <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001370:	4b99      	ldr	r3, [pc, #612]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b04      	cmp	r3, #4
 800137a:	d01d      	beq.n	80013b8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800137c:	4b96      	ldr	r3, [pc, #600]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b08      	cmp	r3, #8
 8001386:	d012      	beq.n	80013ae <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001388:	6863      	ldr	r3, [r4, #4]
 800138a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138e:	d041      	beq.n	8001414 <HAL_RCC_OscConfig+0xb8>
 8001390:	2b00      	cmp	r3, #0
 8001392:	d155      	bne.n	8001440 <HAL_RCC_OscConfig+0xe4>
 8001394:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001398:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e037      	b.n	800141e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ae:	4b8a      	ldr	r3, [pc, #552]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80013b6:	d0e7      	beq.n	8001388 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	4b87      	ldr	r3, [pc, #540]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80013c0:	d003      	beq.n	80013ca <HAL_RCC_OscConfig+0x6e>
 80013c2:	6863      	ldr	r3, [r4, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 81bf 	beq.w	8001748 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	f013 0f02 	tst.w	r3, #2
 80013d0:	d075      	beq.n	80014be <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d2:	4b81      	ldr	r3, [pc, #516]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f013 0f0c 	tst.w	r3, #12
 80013da:	d05f      	beq.n	800149c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013dc:	4b7e      	ldr	r3, [pc, #504]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d054      	beq.n	8001492 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e8:	6923      	ldr	r3, [r4, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 808a 	beq.w	8001504 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80013f0:	4b7a      	ldr	r3, [pc, #488]	@ (80015dc <HAL_RCC_OscConfig+0x280>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc8f 	bl	8000d18 <HAL_GetTick>
 80013fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b76      	ldr	r3, [pc, #472]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f013 0f02 	tst.w	r3, #2
 8001404:	d175      	bne.n	80014f2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fc87 	bl	8000d18 <HAL_GetTick>
 800140a:	1b40      	subs	r0, r0, r5
 800140c:	2802      	cmp	r0, #2
 800140e:	d9f5      	bls.n	80013fc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001410:	2003      	movs	r0, #3
 8001412:	e19e      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001414:	4a70      	ldr	r2, [pc, #448]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001416:	6813      	ldr	r3, [r2, #0]
 8001418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800141e:	6863      	ldr	r3, [r4, #4]
 8001420:	b343      	cbz	r3, 8001474 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001422:	f7ff fc79 	bl	8000d18 <HAL_GetTick>
 8001426:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001428:	4b6b      	ldr	r3, [pc, #428]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001430:	d1cb      	bne.n	80013ca <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001432:	f7ff fc71 	bl	8000d18 <HAL_GetTick>
 8001436:	1b40      	subs	r0, r0, r5
 8001438:	2864      	cmp	r0, #100	@ 0x64
 800143a:	d9f5      	bls.n	8001428 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800143c:	2003      	movs	r0, #3
 800143e:	e188      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001444:	d009      	beq.n	800145a <HAL_RCC_OscConfig+0xfe>
 8001446:	4b64      	ldr	r3, [pc, #400]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e7e1      	b.n	800141e <HAL_RCC_OscConfig+0xc2>
 800145a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800145e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e7d4      	b.n	800141e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001474:	f7ff fc50 	bl	8000d18 <HAL_GetTick>
 8001478:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b57      	ldr	r3, [pc, #348]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001482:	d0a2      	beq.n	80013ca <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc48 	bl	8000d18 <HAL_GetTick>
 8001488:	1b40      	subs	r0, r0, r5
 800148a:	2864      	cmp	r0, #100	@ 0x64
 800148c:	d9f5      	bls.n	800147a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800148e:	2003      	movs	r0, #3
 8001490:	e15f      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001492:	4b51      	ldr	r3, [pc, #324]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800149a:	d1a5      	bne.n	80013e8 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149c:	4b4e      	ldr	r3, [pc, #312]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f013 0f02 	tst.w	r3, #2
 80014a4:	d003      	beq.n	80014ae <HAL_RCC_OscConfig+0x152>
 80014a6:	6923      	ldr	r3, [r4, #16]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	f040 814f 	bne.w	800174c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4a4a      	ldr	r2, [pc, #296]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80014b0:	6813      	ldr	r3, [r2, #0]
 80014b2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80014b6:	6961      	ldr	r1, [r4, #20]
 80014b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014bc:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	f013 0f08 	tst.w	r3, #8
 80014c4:	d033      	beq.n	800152e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c6:	69a3      	ldr	r3, [r4, #24]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d05c      	beq.n	8001586 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80014cc:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <HAL_RCC_OscConfig+0x280>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80014d4:	f7ff fc20 	bl	8000d18 <HAL_GetTick>
 80014d8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b3f      	ldr	r3, [pc, #252]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014de:	f013 0f02 	tst.w	r3, #2
 80014e2:	d121      	bne.n	8001528 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fc18 	bl	8000d18 <HAL_GetTick>
 80014e8:	1b40      	subs	r0, r0, r5
 80014ea:	2802      	cmp	r0, #2
 80014ec:	d9f5      	bls.n	80014da <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80014ee:	2003      	movs	r0, #3
 80014f0:	e12f      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4a39      	ldr	r2, [pc, #228]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80014f4:	6813      	ldr	r3, [r2, #0]
 80014f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80014fa:	6961      	ldr	r1, [r4, #20]
 80014fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e7dc      	b.n	80014be <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001504:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <HAL_RCC_OscConfig+0x280>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800150a:	f7ff fc05 	bl	8000d18 <HAL_GetTick>
 800150e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001510:	4b31      	ldr	r3, [pc, #196]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f013 0f02 	tst.w	r3, #2
 8001518:	d0d1      	beq.n	80014be <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fbfd 	bl	8000d18 <HAL_GetTick>
 800151e:	1b40      	subs	r0, r0, r5
 8001520:	2802      	cmp	r0, #2
 8001522:	d9f5      	bls.n	8001510 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001524:	2003      	movs	r0, #3
 8001526:	e114      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff ff01 	bl	8001330 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	f013 0f04 	tst.w	r3, #4
 8001534:	f000 8096 	beq.w	8001664 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001540:	d134      	bne.n	80015ac <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001544:	69da      	ldr	r2, [r3, #28]
 8001546:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800154a:	61da      	str	r2, [r3, #28]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001556:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <HAL_RCC_OscConfig+0x284>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001560:	d026      	beq.n	80015b0 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001562:	68e3      	ldr	r3, [r4, #12]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d03d      	beq.n	80015e4 <HAL_RCC_OscConfig+0x288>
 8001568:	2b00      	cmp	r3, #0
 800156a:	d153      	bne.n	8001614 <HAL_RCC_OscConfig+0x2b8>
 800156c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001570:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001574:	6a1a      	ldr	r2, [r3, #32]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	621a      	str	r2, [r3, #32]
 800157c:	6a1a      	ldr	r2, [r3, #32]
 800157e:	f022 0204 	bic.w	r2, r2, #4
 8001582:	621a      	str	r2, [r3, #32]
 8001584:	e033      	b.n	80015ee <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <HAL_RCC_OscConfig+0x280>)
 8001588:	2200      	movs	r2, #0
 800158a:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800158e:	f7ff fbc3 	bl	8000d18 <HAL_GetTick>
 8001592:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001598:	f013 0f02 	tst.w	r3, #2
 800159c:	d0c7      	beq.n	800152e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fbbb 	bl	8000d18 <HAL_GetTick>
 80015a2:	1b40      	subs	r0, r0, r5
 80015a4:	2802      	cmp	r0, #2
 80015a6:	d9f5      	bls.n	8001594 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80015a8:	2003      	movs	r0, #3
 80015aa:	e0d2      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80015ac:	2500      	movs	r5, #0
 80015ae:	e7d3      	b.n	8001558 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b0:	4a0b      	ldr	r2, [pc, #44]	@ (80015e0 <HAL_RCC_OscConfig+0x284>)
 80015b2:	6813      	ldr	r3, [r2, #0]
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015ba:	f7ff fbad 	bl	8000d18 <HAL_GetTick>
 80015be:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <HAL_RCC_OscConfig+0x284>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015c8:	d1cb      	bne.n	8001562 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ca:	f7ff fba5 	bl	8000d18 <HAL_GetTick>
 80015ce:	1b80      	subs	r0, r0, r6
 80015d0:	2864      	cmp	r0, #100	@ 0x64
 80015d2:	d9f5      	bls.n	80015c0 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80015d4:	2003      	movs	r0, #3
 80015d6:	e0bc      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	42420000 	.word	0x42420000
 80015e0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 80015e6:	6a13      	ldr	r3, [r2, #32]
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ee:	68e3      	ldr	r3, [r4, #12]
 80015f0:	b333      	cbz	r3, 8001640 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80015f2:	f7ff fb91 	bl	8000d18 <HAL_GetTick>
 80015f6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	f013 0f02 	tst.w	r3, #2
 8001600:	d12f      	bne.n	8001662 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff fb89 	bl	8000d18 <HAL_GetTick>
 8001606:	1b80      	subs	r0, r0, r6
 8001608:	f241 3388 	movw	r3, #5000	@ 0x1388
 800160c:	4298      	cmp	r0, r3
 800160e:	d9f3      	bls.n	80015f8 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001610:	2003      	movs	r0, #3
 8001612:	e09e      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	2b05      	cmp	r3, #5
 8001616:	d009      	beq.n	800162c <HAL_RCC_OscConfig+0x2d0>
 8001618:	4b52      	ldr	r3, [pc, #328]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 800161a:	6a1a      	ldr	r2, [r3, #32]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	621a      	str	r2, [r3, #32]
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	f022 0204 	bic.w	r2, r2, #4
 8001628:	621a      	str	r2, [r3, #32]
 800162a:	e7e0      	b.n	80015ee <HAL_RCC_OscConfig+0x292>
 800162c:	4b4d      	ldr	r3, [pc, #308]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 800162e:	6a1a      	ldr	r2, [r3, #32]
 8001630:	f042 0204 	orr.w	r2, r2, #4
 8001634:	621a      	str	r2, [r3, #32]
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	f042 0201 	orr.w	r2, r2, #1
 800163c:	621a      	str	r2, [r3, #32]
 800163e:	e7d6      	b.n	80015ee <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8001640:	f7ff fb6a 	bl	8000d18 <HAL_GetTick>
 8001644:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	4b47      	ldr	r3, [pc, #284]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	f013 0f02 	tst.w	r3, #2
 800164e:	d008      	beq.n	8001662 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fb62 	bl	8000d18 <HAL_GetTick>
 8001654:	1b80      	subs	r0, r0, r6
 8001656:	f241 3388 	movw	r3, #5000	@ 0x1388
 800165a:	4298      	cmp	r0, r3
 800165c:	d9f3      	bls.n	8001646 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800165e:	2003      	movs	r0, #3
 8001660:	e077      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001662:	b9e5      	cbnz	r5, 800169e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001664:	69e3      	ldr	r3, [r4, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d072      	beq.n	8001750 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166a:	4a3e      	ldr	r2, [pc, #248]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 800166c:	6852      	ldr	r2, [r2, #4]
 800166e:	f002 020c 	and.w	r2, r2, #12
 8001672:	2a08      	cmp	r2, #8
 8001674:	d056      	beq.n	8001724 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001676:	2b02      	cmp	r3, #2
 8001678:	d017      	beq.n	80016aa <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <HAL_RCC_OscConfig+0x40c>)
 800167c:	2200      	movs	r2, #0
 800167e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001680:	f7ff fb4a 	bl	8000d18 <HAL_GetTick>
 8001684:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	4b37      	ldr	r3, [pc, #220]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800168e:	d047      	beq.n	8001720 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb42 	bl	8000d18 <HAL_GetTick>
 8001694:	1b00      	subs	r0, r0, r4
 8001696:	2802      	cmp	r0, #2
 8001698:	d9f5      	bls.n	8001686 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800169a:	2003      	movs	r0, #3
 800169c:	e059      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800169e:	4a31      	ldr	r2, [pc, #196]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 80016a0:	69d3      	ldr	r3, [r2, #28]
 80016a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	61d3      	str	r3, [r2, #28]
 80016a8:	e7dc      	b.n	8001664 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001768 <HAL_RCC_OscConfig+0x40c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb32 	bl	8000d18 <HAL_GetTick>
 80016b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016be:	d006      	beq.n	80016ce <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fb2a 	bl	8000d18 <HAL_GetTick>
 80016c4:	1b40      	subs	r0, r0, r5
 80016c6:	2802      	cmp	r0, #2
 80016c8:	d9f5      	bls.n	80016b6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80016ca:	2003      	movs	r0, #3
 80016cc:	e041      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ce:	6a23      	ldr	r3, [r4, #32]
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d4:	d01a      	beq.n	800170c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d6:	4923      	ldr	r1, [pc, #140]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 80016d8:	684b      	ldr	r3, [r1, #4]
 80016da:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80016de:	6a22      	ldr	r2, [r4, #32]
 80016e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80016e2:	4302      	orrs	r2, r0
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <HAL_RCC_OscConfig+0x40c>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb13 	bl	8000d18 <HAL_GetTick>
 80016f2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016fc:	d10e      	bne.n	800171c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fb0b 	bl	8000d18 <HAL_GetTick>
 8001702:	1b00      	subs	r0, r0, r4
 8001704:	2802      	cmp	r0, #2
 8001706:	d9f5      	bls.n	80016f4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001708:	2003      	movs	r0, #3
 800170a:	e022      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800170c:	4a15      	ldr	r2, [pc, #84]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 800170e:	6853      	ldr	r3, [r2, #4]
 8001710:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001714:	68a1      	ldr	r1, [r4, #8]
 8001716:	430b      	orrs	r3, r1
 8001718:	6053      	str	r3, [r2, #4]
 800171a:	e7dc      	b.n	80016d6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800171c:	2000      	movs	r0, #0
 800171e:	e018      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
 8001720:	2000      	movs	r0, #0
 8001722:	e016      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001724:	2b01      	cmp	r3, #1
 8001726:	d016      	beq.n	8001756 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <HAL_RCC_OscConfig+0x408>)
 800172a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8001730:	6a22      	ldr	r2, [r4, #32]
 8001732:	4291      	cmp	r1, r2
 8001734:	d111      	bne.n	800175a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001736:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800173a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173c:	4293      	cmp	r3, r2
 800173e:	d10e      	bne.n	800175e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001740:	2000      	movs	r0, #0
 8001742:	e006      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001744:	2001      	movs	r0, #1
}
 8001746:	4770      	bx	lr
        return HAL_ERROR;
 8001748:	2001      	movs	r0, #1
 800174a:	e002      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800174c:	2001      	movs	r0, #1
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001750:	2000      	movs	r0, #0
}
 8001752:	b002      	add	sp, #8
 8001754:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
 8001758:	e7fb      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
 800175c:	e7f9      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
 800175e:	2001      	movs	r0, #1
 8001760:	e7f7      	b.n	8001752 <HAL_RCC_OscConfig+0x3f6>
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	42420000 	.word	0x42420000

0800176c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x40>)
 800176e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001770:	f003 020c 	and.w	r2, r3, #12
 8001774:	2a08      	cmp	r2, #8
 8001776:	d001      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8001778:	480d      	ldr	r0, [pc, #52]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800177a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800177c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001780:	490c      	ldr	r1, [pc, #48]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x48>)
 8001782:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001784:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001788:	d00b      	beq.n	80017a2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x40>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001792:	4a09      	ldr	r2, [pc, #36]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001796:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x44>)
 8001798:	fb02 f000 	mul.w	r0, r2, r0
 800179c:	fbb0 f0f3 	udiv	r0, r0, r3
 80017a0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x50>)
 80017a4:	fb03 f000 	mul.w	r0, r3, r0
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	007a1200 	.word	0x007a1200
 80017b4:	08002e84 	.word	0x08002e84
 80017b8:	08002e80 	.word	0x08002e80
 80017bc:	003d0900 	.word	0x003d0900

080017c0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80017c0:	2800      	cmp	r0, #0
 80017c2:	f000 80a0 	beq.w	8001906 <HAL_RCC_ClockConfig+0x146>
{
 80017c6:	b570      	push	{r4, r5, r6, lr}
 80017c8:	460d      	mov	r5, r1
 80017ca:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017cc:	4b52      	ldr	r3, [pc, #328]	@ (8001918 <HAL_RCC_ClockConfig+0x158>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d20b      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001918 <HAL_RCC_ClockConfig+0x158>)
 80017da:	6813      	ldr	r3, [r2, #0]
 80017dc:	f023 0307 	bic.w	r3, r3, #7
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	428b      	cmp	r3, r1
 80017ec:	f040 808d 	bne.w	800190a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	f013 0f02 	tst.w	r3, #2
 80017f6:	d017      	beq.n	8001828 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	f013 0f04 	tst.w	r3, #4
 80017fc:	d004      	beq.n	8001808 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fe:	4a47      	ldr	r2, [pc, #284]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 8001800:	6853      	ldr	r3, [r2, #4]
 8001802:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001806:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	f013 0f08 	tst.w	r3, #8
 800180e:	d004      	beq.n	800181a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4a42      	ldr	r2, [pc, #264]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 8001812:	6853      	ldr	r3, [r2, #4]
 8001814:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001818:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181a:	4a40      	ldr	r2, [pc, #256]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 800181c:	6853      	ldr	r3, [r2, #4]
 800181e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001822:	68a1      	ldr	r1, [r4, #8]
 8001824:	430b      	orrs	r3, r1
 8001826:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	f013 0f01 	tst.w	r3, #1
 800182e:	d031      	beq.n	8001894 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001830:	6863      	ldr	r3, [r4, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d020      	beq.n	8001878 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001836:	2b02      	cmp	r3, #2
 8001838:	d025      	beq.n	8001886 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4a38      	ldr	r2, [pc, #224]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	f012 0f02 	tst.w	r2, #2
 8001842:	d064      	beq.n	800190e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001844:	4935      	ldr	r1, [pc, #212]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 8001846:	684a      	ldr	r2, [r1, #4]
 8001848:	f022 0203 	bic.w	r2, r2, #3
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001850:	f7ff fa62 	bl	8000d18 <HAL_GetTick>
 8001854:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	4b31      	ldr	r3, [pc, #196]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	6862      	ldr	r2, [r4, #4]
 8001860:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001864:	d016      	beq.n	8001894 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001866:	f7ff fa57 	bl	8000d18 <HAL_GetTick>
 800186a:	1b80      	subs	r0, r0, r6
 800186c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001870:	4298      	cmp	r0, r3
 8001872:	d9f0      	bls.n	8001856 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001874:	2003      	movs	r0, #3
 8001876:	e045      	b.n	8001904 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001878:	4a28      	ldr	r2, [pc, #160]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001880:	d1e0      	bne.n	8001844 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
 8001884:	e03e      	b.n	8001904 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	4a25      	ldr	r2, [pc, #148]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800188e:	d1d9      	bne.n	8001844 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001890:	2001      	movs	r0, #1
 8001892:	e037      	b.n	8001904 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <HAL_RCC_ClockConfig+0x158>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	42ab      	cmp	r3, r5
 800189e:	d90a      	bls.n	80018b6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <HAL_RCC_ClockConfig+0x158>)
 80018a2:	6813      	ldr	r3, [r2, #0]
 80018a4:	f023 0307 	bic.w	r3, r3, #7
 80018a8:	432b      	orrs	r3, r5
 80018aa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ac:	6813      	ldr	r3, [r2, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	42ab      	cmp	r3, r5
 80018b4:	d12d      	bne.n	8001912 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	f013 0f04 	tst.w	r3, #4
 80018bc:	d006      	beq.n	80018cc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 80018c0:	6853      	ldr	r3, [r2, #4]
 80018c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018c6:	68e1      	ldr	r1, [r4, #12]
 80018c8:	430b      	orrs	r3, r1
 80018ca:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	f013 0f08 	tst.w	r3, #8
 80018d2:	d007      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018d4:	4a11      	ldr	r2, [pc, #68]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 80018d6:	6853      	ldr	r3, [r2, #4]
 80018d8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80018dc:	6921      	ldr	r1, [r4, #16]
 80018de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018e2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e4:	f7ff ff42 	bl	800176c <HAL_RCC_GetSysClockFreq>
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <HAL_RCC_ClockConfig+0x15c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001920 <HAL_RCC_ClockConfig+0x160>)
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	40d8      	lsrs	r0, r3
 80018f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_RCC_ClockConfig+0x164>)
 80018f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_ClockConfig+0x168>)
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	f7ff f9c7 	bl	8000c90 <HAL_InitTick>
  return HAL_OK;
 8001902:	2000      	movs	r0, #0
}
 8001904:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001906:	2001      	movs	r0, #1
}
 8001908:	4770      	bx	lr
    return HAL_ERROR;
 800190a:	2001      	movs	r0, #1
 800190c:	e7fa      	b.n	8001904 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800190e:	2001      	movs	r0, #1
 8001910:	e7f8      	b.n	8001904 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8001912:	2001      	movs	r0, #1
 8001914:	e7f6      	b.n	8001904 <HAL_RCC_ClockConfig+0x144>
 8001916:	bf00      	nop
 8001918:	40022000 	.word	0x40022000
 800191c:	40021000 	.word	0x40021000
 8001920:	08002e70 	.word	0x08002e70
 8001924:	20000030 	.word	0x20000030
 8001928:	20000038 	.word	0x20000038

0800192c <HAL_RCC_GetHCLKFreq>:
}
 800192c:	4b01      	ldr	r3, [pc, #4]	@ (8001934 <HAL_RCC_GetHCLKFreq+0x8>)
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000030 	.word	0x20000030

08001938 <HAL_RCC_GetPCLK1Freq>:
{
 8001938:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800193a:	f7ff fff7 	bl	800192c <HAL_RCC_GetHCLKFreq>
 800193e:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001946:	4a03      	ldr	r2, [pc, #12]	@ (8001954 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001948:	5cd3      	ldrb	r3, [r2, r3]
}
 800194a:	40d8      	lsrs	r0, r3
 800194c:	bd08      	pop	{r3, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	08002e68 	.word	0x08002e68

08001958 <HAL_RCC_GetPCLK2Freq>:
{
 8001958:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800195a:	f7ff ffe7 	bl	800192c <HAL_RCC_GetHCLKFreq>
 800195e:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001966:	4a03      	ldr	r2, [pc, #12]	@ (8001974 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001968:	5cd3      	ldrb	r3, [r2, r3]
}
 800196a:	40d8      	lsrs	r0, r3
 800196c:	bd08      	pop	{r3, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	08002e68 	.word	0x08002e68

08001978 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001978:	b570      	push	{r4, r5, r6, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800197e:	6803      	ldr	r3, [r0, #0]
 8001980:	f013 0f01 	tst.w	r3, #1
 8001984:	d036      	beq.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b3f      	ldr	r3, [pc, #252]	@ (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800198e:	d149      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	4b3c      	ldr	r3, [pc, #240]	@ (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001998:	61da      	str	r2, [r3, #28]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019a4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	4b38      	ldr	r3, [pc, #224]	@ (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80019ae:	d03b      	beq.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019b0:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019b4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80019b8:	d013      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80019ba:	6862      	ldr	r2, [r4, #4]
 80019bc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d00e      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80019c6:	6a13      	ldr	r3, [r2, #32]
 80019c8:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019cc:	492f      	ldr	r1, [pc, #188]	@ (8001a8c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80019ce:	2601      	movs	r6, #1
 80019d0:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019d4:	2600      	movs	r6, #0
 80019d6:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019da:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019dc:	f013 0f01 	tst.w	r3, #1
 80019e0:	d136      	bne.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019e2:	4a28      	ldr	r2, [pc, #160]	@ (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80019e4:	6a13      	ldr	r3, [r2, #32]
 80019e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019ea:	6861      	ldr	r1, [r4, #4]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f0:	2d00      	cmp	r5, #0
 80019f2:	d13e      	bne.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	f013 0f02 	tst.w	r3, #2
 80019fa:	d006      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019fc:	4a21      	ldr	r2, [pc, #132]	@ (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80019fe:	6853      	ldr	r3, [r2, #4]
 8001a00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a04:	68a1      	ldr	r1, [r4, #8]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	f013 0f10 	tst.w	r3, #16
 8001a10:	d034      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a14:	6853      	ldr	r3, [r2, #4]
 8001a16:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	68e1      	ldr	r1, [r4, #12]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a20:	2000      	movs	r0, #0
 8001a22:	e02c      	b.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8001a24:	2500      	movs	r5, #0
 8001a26:	e7be      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a28:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a30:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001a32:	f7ff f971 	bl	8000d18 <HAL_GetTick>
 8001a36:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001a40:	d1b6      	bne.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff f969 	bl	8000d18 <HAL_GetTick>
 8001a46:	1b80      	subs	r0, r0, r6
 8001a48:	2864      	cmp	r0, #100	@ 0x64
 8001a4a:	d9f5      	bls.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	e016      	b.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8001a50:	f7ff f962 	bl	8000d18 <HAL_GetTick>
 8001a54:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f013 0f02 	tst.w	r3, #2
 8001a5e:	d1c0      	bne.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff f95a 	bl	8000d18 <HAL_GetTick>
 8001a64:	1b80      	subs	r0, r0, r6
 8001a66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a6a:	4298      	cmp	r0, r3
 8001a6c:	d9f3      	bls.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8001a6e:	2003      	movs	r0, #3
 8001a70:	e005      	b.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a72:	69d3      	ldr	r3, [r2, #28]
 8001a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	61d3      	str	r3, [r2, #28]
 8001a7a:	e7bb      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8001a7c:	2000      	movs	r0, #0
}
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd70      	pop	{r4, r5, r6, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	42420000 	.word	0x42420000

08001a90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001a90:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001a92:	2802      	cmp	r0, #2
 8001a94:	d04e      	beq.n	8001b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8001a96:	2810      	cmp	r0, #16
 8001a98:	d003      	beq.n	8001aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8001a9a:	2801      	cmp	r0, #1
 8001a9c:	d028      	beq.n	8001af0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	e052      	b.n	8001b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001aa4:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8001aac:	d04c      	beq.n	8001b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aae:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001ab2:	4928      	ldr	r1, [pc, #160]	@ (8001b54 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8001ab4:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ab6:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8001aba:	d015      	beq.n	8001ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001abc:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001ac4:	4a24      	ldr	r2, [pc, #144]	@ (8001b58 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8001ac6:	5cd2      	ldrb	r2, [r2, r3]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ac8:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8001aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ace:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001ada:	d135      	bne.n	8001b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 8001adc:	0040      	lsls	r0, r0, #1
 8001ade:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8001ae0:	fba3 3000 	umull	r3, r0, r3, r0
 8001ae4:	0840      	lsrs	r0, r0, #1
 8001ae6:	e02f      	b.n	8001b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8001aea:	fb03 f000 	mul.w	r0, r3, r0
 8001aee:	e7f0      	b.n	8001ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8001af0:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001af4:	f240 3202 	movw	r2, #770	@ 0x302
 8001af8:	401a      	ands	r2, r3
 8001afa:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 8001afe:	d024      	beq.n	8001b4a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001b00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b08:	d004      	beq.n	8001b14 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b0e:	d009      	beq.n	8001b24 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001b10:	2000      	movs	r0, #0
 8001b12:	e019      	b.n	8001b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001b14:	4a0e      	ldr	r2, [pc, #56]	@ (8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001b16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b18:	f012 0f02 	tst.w	r2, #2
 8001b1c:	d0f5      	beq.n	8001b0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 8001b1e:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8001b22:	e011      	b.n	8001b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8001b2c:	d00c      	beq.n	8001b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        frequency = HSE_VALUE / 128U;
 8001b2e:	f24f 4024 	movw	r0, #62500	@ 0xf424
    default:
    {
      break;
    }
  }
  return (frequency);
 8001b32:	e009      	b.n	8001b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001b34:	f7ff ff10 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001b40:	3301      	adds	r3, #1
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b48:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 8001b4a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b4e:	e7fb      	b.n	8001b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8001b50:	40021000 	.word	0x40021000
 8001b54:	08002e98 	.word	0x08002e98
 8001b58:	08002e94 	.word	0x08002e94
 8001b5c:	007a1200 	.word	0x007a1200
 8001b60:	aaaaaaab 	.word	0xaaaaaaab
 8001b64:	003d0900 	.word	0x003d0900

08001b68 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001b68:	b500      	push	{lr}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001b6a:	6803      	ldr	r3, [r0, #0]
 8001b6c:	6999      	ldr	r1, [r3, #24]
 8001b6e:	fa1f fe81 	uxth.w	lr, r1
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001b72:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	fa1f fc82 	uxth.w	ip, r2

  if (high1 != high2)
 8001b7a:	45e6      	cmp	lr, ip
 8001b7c:	d005      	beq.n	8001b8a <RTC_ReadTimeCounter+0x22>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001b7e:	69d8      	ldr	r0, [r3, #28]
 8001b80:	b280      	uxth	r0, r0
 8001b82:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 8001b86:	f85d fb04 	ldr.w	pc, [sp], #4
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001b8a:	b280      	uxth	r0, r0
 8001b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  return timecounter;
 8001b90:	e7f9      	b.n	8001b86 <RTC_ReadTimeCounter+0x1e>

08001b92 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001b92:	6803      	ldr	r3, [r0, #0]
 8001b94:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

  return (((uint32_t) high1 << 16U) | low);
 8001b98:	b29b      	uxth	r3, r3
}
 8001b9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001b9e:	4770      	bx	lr

08001ba0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001ba0:	0903      	lsrs	r3, r0, #4
 8001ba2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001ba6:	f000 000f 	and.w	r0, r0, #15
 8001baa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001bae:	b2c0      	uxtb	r0, r0
 8001bb0:	4770      	bx	lr
	...

08001bb4 <RTC_WeekDayNum>:
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 8001bb4:	f500 6cfa 	add.w	ip, r0, #2000	@ 0x7d0

  if (nMonth < 3U)
 8001bb8:	2902      	cmp	r1, #2
 8001bba:	d821      	bhi.n	8001c00 <RTC_WeekDayNum+0x4c>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001bbc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001bc0:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <RTC_WeekDayNum+0x8c>)
 8001bc6:	fba3 3101 	umull	r3, r1, r3, r1
 8001bca:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 8001bce:	4463      	add	r3, ip
 8001bd0:	f200 70cf 	addw	r0, r0, #1999	@ 0x7cf
 8001bd4:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c44 <RTC_WeekDayNum+0x90>)
 8001bda:	fba2 2000 	umull	r2, r0, r2, r0
 8001bde:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 8001be2:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 8001be6:	3304      	adds	r3, #4
 8001be8:	4817      	ldr	r0, [pc, #92]	@ (8001c48 <RTC_WeekDayNum+0x94>)
 8001bea:	fba0 2003 	umull	r2, r0, r0, r3
 8001bee:	1a1a      	subs	r2, r3, r0
 8001bf0:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8001bf4:	0880      	lsrs	r0, r0, #2
 8001bf6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001bfa:	1a18      	subs	r0, r3, r0
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
  }

  return (uint8_t)weekday;
}
 8001bfc:	b2c0      	uxtb	r0, r0
 8001bfe:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001c00:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001c04:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8001c08:	4b0d      	ldr	r3, [pc, #52]	@ (8001c40 <RTC_WeekDayNum+0x8c>)
 8001c0a:	fba3 3101 	umull	r3, r1, r3, r1
 8001c0e:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 8001c12:	4463      	add	r3, ip
 8001c14:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 8001c18:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <RTC_WeekDayNum+0x90>)
 8001c1a:	fba2 120c 	umull	r1, r2, r2, ip
 8001c1e:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
 8001c22:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8001c26:	3302      	adds	r3, #2
 8001c28:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <RTC_WeekDayNum+0x94>)
 8001c2a:	fba0 2003 	umull	r2, r0, r0, r3
 8001c2e:	1a1a      	subs	r2, r3, r0
 8001c30:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8001c34:	0880      	lsrs	r0, r0, #2
 8001c36:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001c3a:	1a18      	subs	r0, r3, r0
 8001c3c:	e7de      	b.n	8001bfc <RTC_WeekDayNum+0x48>
 8001c3e:	bf00      	nop
 8001c40:	38e38e39 	.word	0x38e38e39
 8001c44:	51eb851f 	.word	0x51eb851f
 8001c48:	24924925 	.word	0x24924925

08001c4c <RTC_EnterInitMode>:
{
 8001c4c:	b538      	push	{r3, r4, r5, lr}
 8001c4e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8001c50:	f7ff f862 	bl	8000d18 <HAL_GetTick>
 8001c54:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	f012 0f20 	tst.w	r2, #32
 8001c5e:	d107      	bne.n	8001c70 <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001c60:	f7ff f85a 	bl	8000d18 <HAL_GetTick>
 8001c64:	1b40      	subs	r0, r0, r5
 8001c66:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001c6a:	d9f4      	bls.n	8001c56 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	e004      	b.n	8001c7a <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	f042 0210 	orr.w	r2, r2, #16
 8001c76:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8001c78:	2000      	movs	r0, #0
}
 8001c7a:	bd38      	pop	{r3, r4, r5, pc}

08001c7c <RTC_ExitInitMode>:
{
 8001c7c:	b538      	push	{r3, r4, r5, lr}
 8001c7e:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c80:	6802      	ldr	r2, [r0, #0]
 8001c82:	6853      	ldr	r3, [r2, #4]
 8001c84:	f023 0310 	bic.w	r3, r3, #16
 8001c88:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001c8a:	f7ff f845 	bl	8000d18 <HAL_GetTick>
 8001c8e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f013 0f20 	tst.w	r3, #32
 8001c98:	d107      	bne.n	8001caa <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001c9a:	f7ff f83d 	bl	8000d18 <HAL_GetTick>
 8001c9e:	1b40      	subs	r0, r0, r5
 8001ca0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001ca4:	d9f4      	bls.n	8001c90 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	e000      	b.n	8001cac <RTC_ExitInitMode+0x30>
  return HAL_OK;
 8001caa:	2000      	movs	r0, #0
}
 8001cac:	bd38      	pop	{r3, r4, r5, pc}

08001cae <RTC_WriteTimeCounter>:
{
 8001cae:	b538      	push	{r3, r4, r5, lr}
 8001cb0:	4605      	mov	r5, r0
 8001cb2:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001cb4:	f7ff ffca 	bl	8001c4c <RTC_EnterInitMode>
 8001cb8:	b108      	cbz	r0, 8001cbe <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 8001cba:	2001      	movs	r0, #1
}
 8001cbc:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001cbe:	682b      	ldr	r3, [r5, #0]
 8001cc0:	0c22      	lsrs	r2, r4, #16
 8001cc2:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001cc4:	682b      	ldr	r3, [r5, #0]
 8001cc6:	b2a4      	uxth	r4, r4
 8001cc8:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f7ff ffd6 	bl	8001c7c <RTC_ExitInitMode>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d0f3      	beq.n	8001cbc <RTC_WriteTimeCounter+0xe>
      status = HAL_ERROR;
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	e7f1      	b.n	8001cbc <RTC_WriteTimeCounter+0xe>

08001cd8 <RTC_WriteAlarmCounter>:
{
 8001cd8:	b538      	push	{r3, r4, r5, lr}
 8001cda:	4605      	mov	r5, r0
 8001cdc:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001cde:	f7ff ffb5 	bl	8001c4c <RTC_EnterInitMode>
 8001ce2:	b108      	cbz	r0, 8001ce8 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
}
 8001ce6:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	0c22      	lsrs	r2, r4, #16
 8001cec:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	b2a4      	uxth	r4, r4
 8001cf2:	625c      	str	r4, [r3, #36]	@ 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f7ff ffc1 	bl	8001c7c <RTC_ExitInitMode>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d0f3      	beq.n	8001ce6 <RTC_WriteAlarmCounter+0xe>
      status = HAL_ERROR;
 8001cfe:	2001      	movs	r0, #1
 8001d00:	e7f1      	b.n	8001ce6 <RTC_WriteAlarmCounter+0xe>

08001d02 <HAL_RTC_SetTime>:
{
 8001d02:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d057      	beq.n	8001db8 <HAL_RTC_SetTime+0xb6>
 8001d08:	460d      	mov	r5, r1
 8001d0a:	4606      	mov	r6, r0
 8001d0c:	2900      	cmp	r1, #0
 8001d0e:	d055      	beq.n	8001dbc <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 8001d10:	7c03      	ldrb	r3, [r0, #16]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d054      	beq.n	8001dc0 <HAL_RTC_SetTime+0xbe>
 8001d16:	2301      	movs	r3, #1
 8001d18:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8001d1e:	b9ba      	cbnz	r2, 8001d50 <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d20:	780b      	ldrb	r3, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001d22:	784c      	ldrb	r4, [r1, #1]
 8001d24:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8001d28:	00a4      	lsls	r4, r4, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d2a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001d2e:	fb02 4403 	mla	r4, r2, r3, r4
                              ((uint32_t)sTime->Seconds));
 8001d32:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d34:	441c      	add	r4, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001d36:	4621      	mov	r1, r4
 8001d38:	4630      	mov	r0, r6
 8001d3a:	f7ff ffb8 	bl	8001cae <RTC_WriteTimeCounter>
 8001d3e:	4605      	mov	r5, r0
 8001d40:	b1c8      	cbz	r0, 8001d76 <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d42:	2304      	movs	r3, #4
 8001d44:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 8001d46:	2300      	movs	r3, #0
 8001d48:	7433      	strb	r3, [r6, #16]
    return HAL_ERROR;
 8001d4a:	2501      	movs	r5, #1
}
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d50:	7808      	ldrb	r0, [r1, #0]
 8001d52:	f7ff ff25 	bl	8001ba0 <RTC_Bcd2ToByte>
 8001d56:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001d5a:	fb03 f400 	mul.w	r4, r3, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001d5e:	7868      	ldrb	r0, [r5, #1]
 8001d60:	f7ff ff1e 	bl	8001ba0 <RTC_Bcd2ToByte>
 8001d64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d68:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001d6c:	78a8      	ldrb	r0, [r5, #2]
 8001d6e:	f7ff ff17 	bl	8001ba0 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d72:	4404      	add	r4, r0
 8001d74:	e7df      	b.n	8001d36 <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001d76:	6832      	ldr	r2, [r6, #0]
 8001d78:	6853      	ldr	r3, [r2, #4]
 8001d7a:	f023 0305 	bic.w	r3, r3, #5
 8001d7e:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001d80:	4630      	mov	r0, r6
 8001d82:	f7ff ff06 	bl	8001b92 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001d86:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d8a:	d001      	beq.n	8001d90 <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 8001d8c:	4284      	cmp	r4, r0
 8001d8e:	d804      	bhi.n	8001d9a <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8001d90:	2301      	movs	r3, #1
 8001d92:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 8001d94:	2300      	movs	r3, #0
 8001d96:	7433      	strb	r3, [r6, #16]
    return HAL_OK;
 8001d98:	e7d8      	b.n	8001d4c <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001d9a:	f500 31a8 	add.w	r1, r0, #86016	@ 0x15000
 8001d9e:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff ff98 	bl	8001cd8 <RTC_WriteAlarmCounter>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	d0f1      	beq.n	8001d90 <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001dac:	2304      	movs	r3, #4
 8001dae:	7473      	strb	r3, [r6, #17]
          __HAL_UNLOCK(hrtc);
 8001db0:	2300      	movs	r3, #0
 8001db2:	7433      	strb	r3, [r6, #16]
          return HAL_ERROR;
 8001db4:	2501      	movs	r5, #1
 8001db6:	e7c9      	b.n	8001d4c <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 8001db8:	2501      	movs	r5, #1
 8001dba:	e7c7      	b.n	8001d4c <HAL_RTC_SetTime+0x4a>
 8001dbc:	2501      	movs	r5, #1
 8001dbe:	e7c5      	b.n	8001d4c <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 8001dc0:	2502      	movs	r5, #2
 8001dc2:	e7c3      	b.n	8001d4c <HAL_RTC_SetTime+0x4a>

08001dc4 <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d05a      	beq.n	8001e7e <HAL_RTC_SetDate+0xba>
{
 8001dc8:	b538      	push	{r3, r4, r5, lr}
 8001dca:	460d      	mov	r5, r1
 8001dcc:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 8001dce:	2900      	cmp	r1, #0
 8001dd0:	d057      	beq.n	8001e82 <HAL_RTC_SetDate+0xbe>
  __HAL_LOCK(hrtc);
 8001dd2:	7c03      	ldrb	r3, [r0, #16]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d056      	beq.n	8001e86 <HAL_RTC_SetDate+0xc2>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8001de0:	b9ba      	cbnz	r2, 8001e12 <HAL_RTC_SetDate+0x4e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001de2:	78cb      	ldrb	r3, [r1, #3]
 8001de4:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001de6:	784b      	ldrb	r3, [r1, #1]
 8001de8:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001dea:	788b      	ldrb	r3, [r1, #2]
 8001dec:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001dee:	7ba2      	ldrb	r2, [r4, #14]
 8001df0:	7b61      	ldrb	r1, [r4, #13]
 8001df2:	7be0      	ldrb	r0, [r4, #15]
 8001df4:	f7ff fede 	bl	8001bb4 <RTC_WeekDayNum>
 8001df8:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001dfa:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff feb3 	bl	8001b68 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8001e02:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <HAL_RTC_SetDate+0xc8>)
 8001e04:	4298      	cmp	r0, r3
 8001e06:	d811      	bhi.n	8001e2c <HAL_RTC_SetDate+0x68>
  hrtc->State = HAL_RTC_STATE_READY ;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	7420      	strb	r0, [r4, #16]
}
 8001e10:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001e12:	78c8      	ldrb	r0, [r1, #3]
 8001e14:	f7ff fec4 	bl	8001ba0 <RTC_Bcd2ToByte>
 8001e18:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001e1a:	7868      	ldrb	r0, [r5, #1]
 8001e1c:	f7ff fec0 	bl	8001ba0 <RTC_Bcd2ToByte>
 8001e20:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001e22:	78a8      	ldrb	r0, [r5, #2]
 8001e24:	f7ff febc 	bl	8001ba0 <RTC_Bcd2ToByte>
 8001e28:	73a0      	strb	r0, [r4, #14]
 8001e2a:	e7e0      	b.n	8001dee <HAL_RTC_SetDate+0x2a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001e2c:	4d18      	ldr	r5, [pc, #96]	@ (8001e90 <HAL_RTC_SetDate+0xcc>)
 8001e2e:	fba5 3500 	umull	r3, r5, r5, r0
 8001e32:	0c2d      	lsrs	r5, r5, #16
 8001e34:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <HAL_RTC_SetDate+0xd0>)
 8001e36:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff ff36 	bl	8001cae <RTC_WriteTimeCounter>
 8001e42:	b128      	cbz	r0, 8001e50 <HAL_RTC_SetDate+0x8c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001e44:	2304      	movs	r3, #4
 8001e46:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	e7df      	b.n	8001e10 <HAL_RTC_SetDate+0x4c>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff fe9e 	bl	8001b92 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001e56:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e5a:	d0d5      	beq.n	8001e08 <HAL_RTC_SetDate+0x44>
      if (counter_alarm < counter_time)
 8001e5c:	4285      	cmp	r5, r0
 8001e5e:	d9d3      	bls.n	8001e08 <HAL_RTC_SetDate+0x44>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e60:	f500 31a8 	add.w	r1, r0, #86016	@ 0x15000
 8001e64:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7ff ff35 	bl	8001cd8 <RTC_WriteAlarmCounter>
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d0ca      	beq.n	8001e08 <HAL_RTC_SetDate+0x44>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e72:	2304      	movs	r3, #4
 8001e74:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8001e76:	2300      	movs	r3, #0
 8001e78:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	e7c8      	b.n	8001e10 <HAL_RTC_SetDate+0x4c>
    return HAL_ERROR;
 8001e7e:	2001      	movs	r0, #1
}
 8001e80:	4770      	bx	lr
    return HAL_ERROR;
 8001e82:	2001      	movs	r0, #1
 8001e84:	e7c4      	b.n	8001e10 <HAL_RTC_SetDate+0x4c>
  __HAL_LOCK(hrtc);
 8001e86:	2002      	movs	r0, #2
 8001e88:	e7c2      	b.n	8001e10 <HAL_RTC_SetDate+0x4c>
 8001e8a:	bf00      	nop
 8001e8c:	00015f8f 	.word	0x00015f8f
 8001e90:	c22e4507 	.word	0xc22e4507
 8001e94:	00015180 	.word	0x00015180

08001e98 <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 8001e98:	b1c0      	cbz	r0, 8001ecc <HAL_RTC_WaitForSynchro+0x34>
{
 8001e9a:	b538      	push	{r3, r4, r5, lr}
 8001e9c:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001e9e:	6802      	ldr	r2, [r0, #0]
 8001ea0:	6853      	ldr	r3, [r2, #4]
 8001ea2:	f023 0308 	bic.w	r3, r3, #8
 8001ea6:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001ea8:	f7fe ff36 	bl	8000d18 <HAL_GetTick>
 8001eac:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f013 0f08 	tst.w	r3, #8
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001eb8:	f7fe ff2e 	bl	8000d18 <HAL_GetTick>
 8001ebc:	1b00      	subs	r0, r0, r4
 8001ebe:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001ec2:	d9f4      	bls.n	8001eae <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	e000      	b.n	8001eca <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8001ec8:	2000      	movs	r0, #0
}
 8001eca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ecc:	2001      	movs	r0, #1
}
 8001ece:	4770      	bx	lr

08001ed0 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d050      	beq.n	8001f76 <HAL_RTC_Init+0xa6>
{
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ed8:	7c43      	ldrb	r3, [r0, #17]
 8001eda:	b14b      	cbz	r3, 8001ef0 <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff ffd9 	bl	8001e98 <HAL_RTC_WaitForSynchro>
 8001ee6:	b138      	cbz	r0, 8001ef8 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8001eec:	2001      	movs	r0, #1
}
 8001eee:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001ef0:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001ef2:	f7fe fbdd 	bl	80006b0 <HAL_RTC_MspInit>
 8001ef6:	e7f1      	b.n	8001edc <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7ff fea7 	bl	8001c4c <RTC_EnterInitMode>
 8001efe:	bb28      	cbnz	r0, 8001f4c <HAL_RTC_Init+0x7c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001f00:	6822      	ldr	r2, [r4, #0]
 8001f02:	6853      	ldr	r3, [r2, #4]
 8001f04:	f023 0307 	bic.w	r3, r3, #7
 8001f08:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001f0a:	68a3      	ldr	r3, [r4, #8]
 8001f0c:	b123      	cbz	r3, 8001f18 <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <HAL_RTC_Init+0xac>)
 8001f10:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001f18:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_RTC_Init+0xac>)
 8001f1a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001f1c:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 8001f20:	68a1      	ldr	r1, [r4, #8]
 8001f22:	430b      	orrs	r3, r1
 8001f24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001f26:	6863      	ldr	r3, [r4, #4]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d012      	beq.n	8001f54 <HAL_RTC_Init+0x84>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001f2e:	6822      	ldr	r2, [r4, #0]
 8001f30:	f3c3 4103 	ubfx	r1, r3, #16, #4
 8001f34:	6091      	str	r1, [r2, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	60d3      	str	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff fe9d 	bl	8001c7c <RTC_ExitInitMode>
 8001f42:	b188      	cbz	r0, 8001f68 <HAL_RTC_Init+0x98>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f44:	2304      	movs	r3, #4
 8001f46:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 8001f48:	2001      	movs	r0, #1
 8001f4a:	e7d0      	b.n	8001eee <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8001f50:	2001      	movs	r0, #1
 8001f52:	e7cc      	b.n	8001eee <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7ff fd9b 	bl	8001a90 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001f5a:	b108      	cbz	r0, 8001f60 <HAL_RTC_Init+0x90>
        prescaler = prescaler - 1U;
 8001f5c:	1e43      	subs	r3, r0, #1
 8001f5e:	e7e6      	b.n	8001f2e <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f60:	2304      	movs	r3, #4
 8001f62:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 8001f64:	2001      	movs	r0, #1
 8001f66:	e7c2      	b.n	8001eee <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001f70:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8001f72:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8001f74:	e7bb      	b.n	8001eee <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 8001f76:	2001      	movs	r0, #1
}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40006c00 	.word	0x40006c00

08001f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	4605      	mov	r5, r0
 8001f88:	4688      	mov	r8, r1
 8001f8a:	4617      	mov	r7, r2
 8001f8c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f8e:	f7fe fec3 	bl	8000d18 <HAL_GetTick>
 8001f92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001f94:	1a1b      	subs	r3, r3, r0
 8001f96:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8001f9a:	f7fe febd 	bl	8000d18 <HAL_GetTick>
 8001f9e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fa0:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001fa8:	fb09 f303 	mul.w	r3, r9, r3
 8001fac:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fae:	682b      	ldr	r3, [r5, #0]
 8001fb0:	689c      	ldr	r4, [r3, #8]
 8001fb2:	ea38 0404 	bics.w	r4, r8, r4
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	42bb      	cmp	r3, r7
 8001fbe:	d03d      	beq.n	800203c <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fc0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001fc4:	d0f3      	beq.n	8001fae <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fc6:	f7fe fea7 	bl	8000d18 <HAL_GetTick>
 8001fca:	eba0 000a 	sub.w	r0, r0, sl
 8001fce:	4548      	cmp	r0, r9
 8001fd0:	d207      	bcs.n	8001fe2 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fd2:	9a01      	ldr	r2, [sp, #4]
 8001fd4:	b102      	cbz	r2, 8001fd8 <SPI_WaitFlagStateUntilTimeout+0x58>
 8001fd6:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001fd8:	9b01      	ldr	r3, [sp, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	4691      	mov	r9, r2
 8001fe0:	e7e5      	b.n	8001fae <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fe2:	682a      	ldr	r2, [r5, #0]
 8001fe4:	6853      	ldr	r3, [r2, #4]
 8001fe6:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8001fea:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fec:	686b      	ldr	r3, [r5, #4]
 8001fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ff2:	d00b      	beq.n	800200c <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ff4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ffa:	d014      	beq.n	8002026 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002002:	2300      	movs	r3, #0
 8002004:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002008:	2003      	movs	r0, #3
 800200a:	e018      	b.n	800203e <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800200c:	68ab      	ldr	r3, [r5, #8]
 800200e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002012:	d002      	beq.n	800201a <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002018:	d1ec      	bne.n	8001ff4 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 800201a:	682a      	ldr	r2, [r5, #0]
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	e7e6      	b.n	8001ff4 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8002026:	682a      	ldr	r2, [r5, #0]
 8002028:	6813      	ldr	r3, [r2, #0]
 800202a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	682a      	ldr	r2, [r5, #0]
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e7df      	b.n	8001ffc <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 800203c:	2000      	movs	r0, #0
}
 800203e:	b002      	add	sp, #8
 8002040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002044:	20000030 	.word	0x20000030

08002048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	4606      	mov	r6, r0
 800204e:	460c      	mov	r4, r1
 8002050:	4615      	mov	r5, r2
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002052:	9200      	str	r2, [sp, #0]
 8002054:	460b      	mov	r3, r1
 8002056:	2201      	movs	r2, #1
 8002058:	2102      	movs	r1, #2
 800205a:	f7ff ff91 	bl	8001f80 <SPI_WaitFlagStateUntilTimeout>
 800205e:	b948      	cbnz	r0, 8002074 <SPI_EndRxTxTransaction+0x2c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002060:	9500      	str	r5, [sp, #0]
 8002062:	4623      	mov	r3, r4
 8002064:	2200      	movs	r2, #0
 8002066:	2180      	movs	r1, #128	@ 0x80
 8002068:	4630      	mov	r0, r6
 800206a:	f7ff ff89 	bl	8001f80 <SPI_WaitFlagStateUntilTimeout>
 800206e:	b938      	cbnz	r0, 8002080 <SPI_EndRxTxTransaction+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002070:	b002      	add	sp, #8
 8002072:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002074:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8002076:	f043 0320 	orr.w	r3, r3, #32
 800207a:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 800207c:	2003      	movs	r0, #3
 800207e:	e7f7      	b.n	8002070 <SPI_EndRxTxTransaction+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002080:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8002082:	f043 0320 	orr.w	r3, r3, #32
 8002086:	6573      	str	r3, [r6, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002088:	2003      	movs	r0, #3
 800208a:	e7f1      	b.n	8002070 <SPI_EndRxTxTransaction+0x28>

0800208c <HAL_SPI_Init>:
  if (hspi == NULL)
 800208c:	2800      	cmp	r0, #0
 800208e:	d056      	beq.n	800213e <HAL_SPI_Init+0xb2>
{
 8002090:	b510      	push	{r4, lr}
 8002092:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002094:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002096:	b933      	cbnz	r3, 80020a6 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002098:	6843      	ldr	r3, [r0, #4]
 800209a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800209e:	d005      	beq.n	80020ac <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61c3      	str	r3, [r0, #28]
 80020a4:	e002      	b.n	80020ac <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020aa:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80020b0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d03c      	beq.n	8002132 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80020b8:	2302      	movs	r3, #2
 80020ba:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80020be:	6822      	ldr	r2, [r4, #0]
 80020c0:	6813      	ldr	r3, [r2, #0]
 80020c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020c6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020c8:	6863      	ldr	r3, [r4, #4]
 80020ca:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80020ce:	68a2      	ldr	r2, [r4, #8]
 80020d0:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80020d4:	4313      	orrs	r3, r2
 80020d6:	68e2      	ldr	r2, [r4, #12]
 80020d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80020dc:	4313      	orrs	r3, r2
 80020de:	6922      	ldr	r2, [r4, #16]
 80020e0:	f002 0202 	and.w	r2, r2, #2
 80020e4:	4313      	orrs	r3, r2
 80020e6:	6962      	ldr	r2, [r4, #20]
 80020e8:	f002 0201 	and.w	r2, r2, #1
 80020ec:	4313      	orrs	r3, r2
 80020ee:	69a2      	ldr	r2, [r4, #24]
 80020f0:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80020f4:	4313      	orrs	r3, r2
 80020f6:	69e2      	ldr	r2, [r4, #28]
 80020f8:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80020fc:	4313      	orrs	r3, r2
 80020fe:	6a22      	ldr	r2, [r4, #32]
 8002100:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002104:	4313      	orrs	r3, r2
 8002106:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002108:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800210c:	6821      	ldr	r1, [r4, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002112:	8b63      	ldrh	r3, [r4, #26]
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800211c:	6822      	ldr	r2, [r4, #0]
 800211e:	69d3      	ldr	r3, [r2, #28]
 8002120:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002124:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002126:	2000      	movs	r0, #0
 8002128:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800212a:	2301      	movs	r3, #1
 800212c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8002130:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002132:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002136:	4620      	mov	r0, r4
 8002138:	f7fe fafe 	bl	8000738 <HAL_SPI_MspInit>
 800213c:	e7bc      	b.n	80020b8 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800213e:	2001      	movs	r0, #1
}
 8002140:	4770      	bx	lr

08002142 <HAL_SPI_TransmitReceive>:
{
 8002142:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002146:	b083      	sub	sp, #12
 8002148:	4604      	mov	r4, r0
 800214a:	4688      	mov	r8, r1
 800214c:	4691      	mov	r9, r2
 800214e:	461f      	mov	r7, r3
 8002150:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8002152:	f7fe fde1 	bl	8000d18 <HAL_GetTick>
 8002156:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002158:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800215c:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800215e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002160:	2b01      	cmp	r3, #1
 8002162:	d00a      	beq.n	800217a <HAL_SPI_TransmitReceive+0x38>
 8002164:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002168:	f040 8105 	bne.w	8002376 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800216c:	68a2      	ldr	r2, [r4, #8]
 800216e:	2a00      	cmp	r2, #0
 8002170:	f040 8105 	bne.w	800237e <HAL_SPI_TransmitReceive+0x23c>
 8002174:	2b04      	cmp	r3, #4
 8002176:	f040 8104 	bne.w	8002382 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800217a:	f1b8 0f00 	cmp.w	r8, #0
 800217e:	f000 8102 	beq.w	8002386 <HAL_SPI_TransmitReceive+0x244>
 8002182:	f1b9 0f00 	cmp.w	r9, #0
 8002186:	f000 8100 	beq.w	800238a <HAL_SPI_TransmitReceive+0x248>
 800218a:	2f00      	cmp	r7, #0
 800218c:	f000 80ff 	beq.w	800238e <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8002190:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002194:	2b01      	cmp	r3, #1
 8002196:	f000 80fc 	beq.w	8002392 <HAL_SPI_TransmitReceive+0x250>
 800219a:	2301      	movs	r3, #1
 800219c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021a0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d002      	beq.n	80021b0 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021aa:	2305      	movs	r3, #5
 80021ac:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021b4:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80021b8:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80021ba:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021bc:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80021c0:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80021c2:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 80021c4:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80021c6:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80021d0:	d103      	bne.n	80021da <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021d8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021da:	68e3      	ldr	r3, [r4, #12]
 80021dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021e0:	d011      	beq.n	8002206 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021e2:	6863      	ldr	r3, [r4, #4]
 80021e4:	b10b      	cbz	r3, 80021ea <HAL_SPI_TransmitReceive+0xa8>
 80021e6:	2f01      	cmp	r7, #1
 80021e8:	d10b      	bne.n	8002202 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80021f4:	3301      	adds	r3, #1
 80021f6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80021f8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29b      	uxth	r3, r3
 8002200:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8002202:	2701      	movs	r7, #1
 8002204:	e071      	b.n	80022ea <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002206:	6863      	ldr	r3, [r4, #4]
 8002208:	b10b      	cbz	r3, 800220e <HAL_SPI_TransmitReceive+0xcc>
 800220a:	2f01      	cmp	r7, #1
 800220c:	d10b      	bne.n	8002226 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800220e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	8812      	ldrh	r2, [r2, #0]
 8002214:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002216:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002218:	3302      	adds	r3, #2
 800221a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800221c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29b      	uxth	r3, r3
 8002224:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8002226:	2701      	movs	r7, #1
 8002228:	e01b      	b.n	8002262 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	f012 0f01 	tst.w	r2, #1
 8002232:	d00e      	beq.n	8002252 <HAL_SPI_TransmitReceive+0x110>
 8002234:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002236:	b292      	uxth	r2, r2
 8002238:	b15a      	cbz	r2, 8002252 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800223e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002240:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002242:	3302      	adds	r3, #2
 8002244:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002246:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29b      	uxth	r3, r3
 800224e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002250:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002252:	f7fe fd61 	bl	8000d18 <HAL_GetTick>
 8002256:	1b80      	subs	r0, r0, r6
 8002258:	42a8      	cmp	r0, r5
 800225a:	d302      	bcc.n	8002262 <HAL_SPI_TransmitReceive+0x120>
 800225c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002260:	d11e      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002262:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	b91b      	cbnz	r3, 8002270 <HAL_SPI_TransmitReceive+0x12e>
 8002268:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d062      	beq.n	8002336 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	f012 0f02 	tst.w	r2, #2
 8002278:	d0d7      	beq.n	800222a <HAL_SPI_TransmitReceive+0xe8>
 800227a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800227c:	b292      	uxth	r2, r2
 800227e:	2a00      	cmp	r2, #0
 8002280:	d0d3      	beq.n	800222a <HAL_SPI_TransmitReceive+0xe8>
 8002282:	2f00      	cmp	r7, #0
 8002284:	d0d1      	beq.n	800222a <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002286:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002288:	8812      	ldrh	r2, [r2, #0]
 800228a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800228c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800228e:	3302      	adds	r3, #2
 8002290:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002292:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29b      	uxth	r3, r3
 800229a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800229c:	2700      	movs	r7, #0
 800229e:	e7c4      	b.n	800222a <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80022a6:	2300      	movs	r3, #0
 80022a8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80022ac:	2003      	movs	r0, #3
 80022ae:	e063      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	f012 0f01 	tst.w	r2, #1
 80022b8:	d00e      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x196>
 80022ba:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80022bc:	b292      	uxth	r2, r2
 80022be:	b15a      	cbz	r2, 80022d8 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80022c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80022c8:	3301      	adds	r3, #1
 80022ca:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80022cc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80022d6:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022d8:	f7fe fd1e 	bl	8000d18 <HAL_GetTick>
 80022dc:	1b83      	subs	r3, r0, r6
 80022de:	42ab      	cmp	r3, r5
 80022e0:	d302      	bcc.n	80022e8 <HAL_SPI_TransmitReceive+0x1a6>
 80022e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022e6:	d11e      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x1e4>
 80022e8:	b1ed      	cbz	r5, 8002326 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022ea:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b913      	cbnz	r3, 80022f6 <HAL_SPI_TransmitReceive+0x1b4>
 80022f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	b1fb      	cbz	r3, 8002336 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	f012 0f02 	tst.w	r2, #2
 80022fe:	d0d7      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x16e>
 8002300:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002302:	b292      	uxth	r2, r2
 8002304:	2a00      	cmp	r2, #0
 8002306:	d0d3      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x16e>
 8002308:	2f00      	cmp	r7, #0
 800230a:	d0d1      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800230c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800230e:	7812      	ldrb	r2, [r2, #0]
 8002310:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002312:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002314:	3301      	adds	r3, #1
 8002316:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002318:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29b      	uxth	r3, r3
 8002320:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8002322:	2700      	movs	r7, #0
 8002324:	e7c4      	b.n	80022b0 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8002326:	2301      	movs	r3, #1
 8002328:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800232c:	2300      	movs	r3, #0
 800232e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002332:	2003      	movs	r0, #3
 8002334:	e020      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002336:	4632      	mov	r2, r6
 8002338:	4629      	mov	r1, r5
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff fe84 	bl	8002048 <SPI_EndRxTxTransaction>
 8002340:	b990      	cbnz	r0, 8002368 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002342:	68a3      	ldr	r3, [r4, #8]
 8002344:	b933      	cbnz	r3, 8002354 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	9201      	str	r2, [sp, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002354:	2301      	movs	r3, #1
 8002356:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800235a:	2300      	movs	r3, #0
 800235c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002360:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002362:	b14b      	cbz	r3, 8002378 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8002364:	2001      	movs	r0, #1
 8002366:	e007      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002368:	2320      	movs	r3, #32
 800236a:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800236c:	2300      	movs	r3, #0
 800236e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8002372:	2001      	movs	r0, #1
 8002374:	e000      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8002376:	2002      	movs	r0, #2
}
 8002378:	b003      	add	sp, #12
 800237a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800237e:	2002      	movs	r0, #2
 8002380:	e7fa      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
 8002382:	2002      	movs	r0, #2
 8002384:	e7f8      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8002386:	2001      	movs	r0, #1
 8002388:	e7f6      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
 800238a:	2001      	movs	r0, #1
 800238c:	e7f4      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
 800238e:	2001      	movs	r0, #1
 8002390:	e7f2      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8002392:	2002      	movs	r0, #2
 8002394:	e7f0      	b.n	8002378 <HAL_SPI_TransmitReceive+0x236>
	...

08002398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002398:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800239c:	6a03      	ldr	r3, [r0, #32]
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023a6:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023a8:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023ac:	680c      	ldr	r4, [r1, #0]
 80023ae:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023b0:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023b4:	688b      	ldr	r3, [r1, #8]
 80023b6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023b8:	4a0b      	ldr	r2, [pc, #44]	@ (80023e8 <TIM_OC1_SetConfig+0x50>)
 80023ba:	4290      	cmp	r0, r2
 80023bc:	d006      	beq.n	80023cc <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023be:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023c0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023c2:	684a      	ldr	r2, [r1, #4]
 80023c4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023c6:	6203      	str	r3, [r0, #32]
}
 80023c8:	bc30      	pop	{r4, r5}
 80023ca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80023cc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80023d0:	68ca      	ldr	r2, [r1, #12]
 80023d2:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80023d4:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023d8:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80023dc:	694a      	ldr	r2, [r1, #20]
 80023de:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80023e0:	698d      	ldr	r5, [r1, #24]
 80023e2:	4315      	orrs	r5, r2
 80023e4:	e7eb      	b.n	80023be <TIM_OC1_SetConfig+0x26>
 80023e6:	bf00      	nop
 80023e8:	40012c00 	.word	0x40012c00

080023ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ee:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023f0:	6a02      	ldr	r2, [r0, #32]
 80023f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023f6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023fa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023fc:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002400:	680d      	ldr	r5, [r1, #0]
 8002402:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002408:	688a      	ldr	r2, [r1, #8]
 800240a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800240e:	4a0d      	ldr	r2, [pc, #52]	@ (8002444 <TIM_OC3_SetConfig+0x58>)
 8002410:	4290      	cmp	r0, r2
 8002412:	d006      	beq.n	8002422 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002414:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002416:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002418:	684a      	ldr	r2, [r1, #4]
 800241a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800241c:	6203      	str	r3, [r0, #32]
}
 800241e:	bc30      	pop	{r4, r5}
 8002420:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002426:	68ca      	ldr	r2, [r1, #12]
 8002428:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800242c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002430:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002434:	694a      	ldr	r2, [r1, #20]
 8002436:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800243a:	698a      	ldr	r2, [r1, #24]
 800243c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8002440:	e7e8      	b.n	8002414 <TIM_OC3_SetConfig+0x28>
 8002442:	bf00      	nop
 8002444:	40012c00 	.word	0x40012c00

08002448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002448:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800244a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800244c:	6a02      	ldr	r2, [r0, #32]
 800244e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002452:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002454:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002456:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002458:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800245c:	680d      	ldr	r5, [r1, #0]
 800245e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002466:	688d      	ldr	r5, [r1, #8]
 8002468:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800246c:	4d07      	ldr	r5, [pc, #28]	@ (800248c <TIM_OC4_SetConfig+0x44>)
 800246e:	42a8      	cmp	r0, r5
 8002470:	d006      	beq.n	8002480 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002472:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002474:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002476:	684a      	ldr	r2, [r1, #4]
 8002478:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800247a:	6203      	str	r3, [r0, #32]
}
 800247c:	bc30      	pop	{r4, r5}
 800247e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002480:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002484:	694d      	ldr	r5, [r1, #20]
 8002486:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800248a:	e7f2      	b.n	8002472 <TIM_OC4_SetConfig+0x2a>
 800248c:	40012c00 	.word	0x40012c00

08002490 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002490:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002492:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002494:	6a04      	ldr	r4, [r0, #32]
 8002496:	f024 0410 	bic.w	r4, r4, #16
 800249a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249c:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800249e:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80024a2:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a6:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80024aa:	031b      	lsls	r3, r3, #12
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b2:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80024b6:	0109      	lsls	r1, r1, #4
 80024b8:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 80024bc:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024be:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80024c0:	6201      	str	r1, [r0, #32]
}
 80024c2:	bc30      	pop	{r4, r5}
 80024c4:	4770      	bx	lr

080024c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024c6:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80024c8:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024ca:	6a04      	ldr	r4, [r0, #32]
 80024cc:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 80024d0:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024d2:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80024d4:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80024d8:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80024dc:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80024e8:	f425 7500 	bic.w	r5, r5, #512	@ 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80024ec:	0209      	lsls	r1, r1, #8
 80024ee:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 80024f2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80024f4:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 80024f6:	6201      	str	r1, [r0, #32]
}
 80024f8:	bc30      	pop	{r4, r5}
 80024fa:	4770      	bx	lr

080024fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024fc:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80024fe:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002500:	6a04      	ldr	r4, [r0, #32]
 8002502:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8002506:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002508:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800250a:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800250e:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002512:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002516:	031b      	lsls	r3, r3, #12
 8002518:	b29b      	uxth	r3, r3
 800251a:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800251e:	f425 5500 	bic.w	r5, r5, #8192	@ 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002522:	0309      	lsls	r1, r1, #12
 8002524:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8002528:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800252a:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800252c:	6201      	str	r1, [r0, #32]
}
 800252e:	bc30      	pop	{r4, r5}
 8002530:	4770      	bx	lr
	...

08002534 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002534:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d127      	bne.n	800258e <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002544:	6802      	ldr	r2, [r0, #0]
 8002546:	68d3      	ldr	r3, [r2, #12]
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254e:	6803      	ldr	r3, [r0, #0]
 8002550:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_TIM_Base_Start_IT+0x64>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d010      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x44>
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800255a:	d00d      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x44>
 800255c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002560:	4293      	cmp	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x44>
 8002564:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002568:	4293      	cmp	r3, r2
 800256a:	d005      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002574:	2000      	movs	r0, #0
 8002576:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257e:	2a06      	cmp	r2, #6
 8002580:	d007      	beq.n	8002592 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800258a:	2000      	movs	r0, #0
 800258c:	4770      	bx	lr
    return HAL_ERROR;
 800258e:	2001      	movs	r0, #1
 8002590:	4770      	bx	lr
  return HAL_OK;
 8002592:	2000      	movs	r0, #0
}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40012c00 	.word	0x40012c00

0800259c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800259c:	4770      	bx	lr

0800259e <HAL_TIM_IC_CaptureCallback>:
}
 800259e:	4770      	bx	lr

080025a0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80025a0:	4770      	bx	lr

080025a2 <HAL_TIM_TriggerCallback>:
}
 80025a2:	4770      	bx	lr

080025a4 <HAL_TIM_IRQHandler>:
{
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80025a8:	6803      	ldr	r3, [r0, #0]
 80025aa:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025ac:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025ae:	f015 0f02 	tst.w	r5, #2
 80025b2:	d010      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025b4:	f016 0f02 	tst.w	r6, #2
 80025b8:	d00d      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025ba:	f06f 0202 	mvn.w	r2, #2
 80025be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025c0:	2301      	movs	r3, #1
 80025c2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c4:	6803      	ldr	r3, [r0, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f013 0f03 	tst.w	r3, #3
 80025cc:	d05e      	beq.n	800268c <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	f7ff ffe6 	bl	800259e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	2300      	movs	r3, #0
 80025d4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025d6:	f015 0f04 	tst.w	r5, #4
 80025da:	d012      	beq.n	8002602 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025dc:	f016 0f04 	tst.w	r6, #4
 80025e0:	d00f      	beq.n	8002602 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	f06f 0204 	mvn.w	r2, #4
 80025e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ea:	2302      	movs	r3, #2
 80025ec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80025f6:	d04f      	beq.n	8002698 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7ff ffd0 	bl	800259e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	2300      	movs	r3, #0
 8002600:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002602:	f015 0f08 	tst.w	r5, #8
 8002606:	d012      	beq.n	800262e <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002608:	f016 0f08 	tst.w	r6, #8
 800260c:	d00f      	beq.n	800262e <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	f06f 0208 	mvn.w	r2, #8
 8002614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002616:	2304      	movs	r3, #4
 8002618:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f013 0f03 	tst.w	r3, #3
 8002622:	d040      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ffba 	bl	800259e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	2300      	movs	r3, #0
 800262c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800262e:	f015 0f10 	tst.w	r5, #16
 8002632:	d012      	beq.n	800265a <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002634:	f016 0f10 	tst.w	r6, #16
 8002638:	d00f      	beq.n	800265a <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f06f 0210 	mvn.w	r2, #16
 8002640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002642:	2308      	movs	r3, #8
 8002644:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800264e:	d031      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002650:	4620      	mov	r0, r4
 8002652:	f7ff ffa4 	bl	800259e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	2300      	movs	r3, #0
 8002658:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800265a:	f015 0f01 	tst.w	r5, #1
 800265e:	d002      	beq.n	8002666 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002660:	f016 0f01 	tst.w	r6, #1
 8002664:	d12d      	bne.n	80026c2 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002666:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800266a:	d002      	beq.n	8002672 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800266c:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002670:	d12f      	bne.n	80026d2 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002672:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002676:	d002      	beq.n	800267e <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002678:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800267c:	d131      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800267e:	f015 0f20 	tst.w	r5, #32
 8002682:	d002      	beq.n	800268a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002684:	f016 0f20 	tst.w	r6, #32
 8002688:	d133      	bne.n	80026f2 <HAL_TIM_IRQHandler+0x14e>
}
 800268a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800268c:	f7ff ff86 	bl	800259c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff ff85 	bl	80025a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002696:	e79c      	b.n	80025d2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff ff7f 	bl	800259c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269e:	4620      	mov	r0, r4
 80026a0:	f7ff ff7e 	bl	80025a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80026a4:	e7ab      	b.n	80025fe <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a6:	4620      	mov	r0, r4
 80026a8:	f7ff ff78 	bl	800259c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ff77 	bl	80025a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80026b2:	e7ba      	b.n	800262a <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff ff71 	bl	800259c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff ff70 	bl	80025a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80026c0:	e7c9      	b.n	8002656 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	f06f 0201 	mvn.w	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7fd fe6a 	bl	80003a4 <HAL_TIM_PeriodElapsedCallback>
 80026d0:	e7c9      	b.n	8002666 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80026da:	4620      	mov	r0, r4
 80026dc:	f000 faeb 	bl	8002cb6 <HAL_TIMEx_BreakCallback>
 80026e0:	e7c7      	b.n	8002672 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff ff59 	bl	80025a2 <HAL_TIM_TriggerCallback>
 80026f0:	e7c5      	b.n	800267e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	f06f 0220 	mvn.w	r2, #32
 80026f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80026fa:	4620      	mov	r0, r4
 80026fc:	f000 fada 	bl	8002cb4 <HAL_TIMEx_CommutCallback>
}
 8002700:	e7c3      	b.n	800268a <HAL_TIM_IRQHandler+0xe6>
	...

08002704 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002704:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002706:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <TIM_Base_SetConfig+0x80>)
 8002708:	4290      	cmp	r0, r2
 800270a:	d00a      	beq.n	8002722 <TIM_Base_SetConfig+0x1e>
 800270c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002710:	d007      	beq.n	8002722 <TIM_Base_SetConfig+0x1e>
 8002712:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002716:	4290      	cmp	r0, r2
 8002718:	d003      	beq.n	8002722 <TIM_Base_SetConfig+0x1e>
 800271a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800271e:	4290      	cmp	r0, r2
 8002720:	d103      	bne.n	800272a <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002726:	684a      	ldr	r2, [r1, #4]
 8002728:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272a:	4a16      	ldr	r2, [pc, #88]	@ (8002784 <TIM_Base_SetConfig+0x80>)
 800272c:	4290      	cmp	r0, r2
 800272e:	d00a      	beq.n	8002746 <TIM_Base_SetConfig+0x42>
 8002730:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002734:	d007      	beq.n	8002746 <TIM_Base_SetConfig+0x42>
 8002736:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800273a:	4290      	cmp	r0, r2
 800273c:	d003      	beq.n	8002746 <TIM_Base_SetConfig+0x42>
 800273e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002742:	4290      	cmp	r0, r2
 8002744:	d103      	bne.n	800274e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274a:	68ca      	ldr	r2, [r1, #12]
 800274c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800274e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002752:	694a      	ldr	r2, [r1, #20]
 8002754:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002756:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002758:	688b      	ldr	r3, [r1, #8]
 800275a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800275c:	680b      	ldr	r3, [r1, #0]
 800275e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002760:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <TIM_Base_SetConfig+0x80>)
 8002762:	4298      	cmp	r0, r3
 8002764:	d00a      	beq.n	800277c <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8002766:	2301      	movs	r3, #1
 8002768:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800276a:	6903      	ldr	r3, [r0, #16]
 800276c:	f013 0f01 	tst.w	r3, #1
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002772:	6903      	ldr	r3, [r0, #16]
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6103      	str	r3, [r0, #16]
}
 800277a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800277c:	690b      	ldr	r3, [r1, #16]
 800277e:	6303      	str	r3, [r0, #48]	@ 0x30
 8002780:	e7f1      	b.n	8002766 <TIM_Base_SetConfig+0x62>
 8002782:	bf00      	nop
 8002784:	40012c00 	.word	0x40012c00

08002788 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002788:	b340      	cbz	r0, 80027dc <HAL_TIM_PWM_Init+0x54>
{
 800278a:	b510      	push	{r4, lr}
 800278c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800278e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002792:	b1f3      	cbz	r3, 80027d2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	2302      	movs	r3, #2
 8002796:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279a:	4621      	mov	r1, r4
 800279c:	f851 0b04 	ldr.w	r0, [r1], #4
 80027a0:	f7ff ffb0 	bl	8002704 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80027ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80027b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80027b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80027be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027c2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80027c6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80027ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80027ce:	2000      	movs	r0, #0
}
 80027d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80027d2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80027d6:	f7fe f935 	bl	8000a44 <HAL_TIM_PWM_MspInit>
 80027da:	e7db      	b.n	8002794 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80027dc:	2001      	movs	r0, #1
}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80027e0:	b340      	cbz	r0, 8002834 <HAL_TIM_IC_Init+0x54>
{
 80027e2:	b510      	push	{r4, lr}
 80027e4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80027ea:	b1f3      	cbz	r3, 800282a <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	2302      	movs	r3, #2
 80027ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f2:	4621      	mov	r1, r4
 80027f4:	f851 0b04 	ldr.w	r0, [r1], #4
 80027f8:	f7ff ff84 	bl	8002704 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002802:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002806:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800280a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800280e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002812:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002816:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800281a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800281e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002822:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002826:	2000      	movs	r0, #0
}
 8002828:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800282a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 800282e:	f7fe f929 	bl	8000a84 <HAL_TIM_IC_MspInit>
 8002832:	e7db      	b.n	80027ec <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8002834:	2001      	movs	r0, #1
}
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8002838:	2800      	cmp	r0, #0
 800283a:	d056      	beq.n	80028ea <HAL_TIM_Encoder_Init+0xb2>
{
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	460d      	mov	r5, r1
 8002840:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002846:	2b00      	cmp	r3, #0
 8002848:	d04a      	beq.n	80028e0 <HAL_TIM_Encoder_Init+0xa8>
  htim->State = HAL_TIM_STATE_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	6893      	ldr	r3, [r2, #8]
 8002854:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002858:	f023 0307 	bic.w	r3, r3, #7
 800285c:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285e:	4621      	mov	r1, r4
 8002860:	f851 0b04 	ldr.w	r0, [r1], #4
 8002864:	f7ff ff4e 	bl	8002704 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002868:	6821      	ldr	r1, [r4, #0]
 800286a:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800286c:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 800286e:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8002870:	6828      	ldr	r0, [r5, #0]
 8002872:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002874:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002878:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800287c:	68ab      	ldr	r3, [r5, #8]
 800287e:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8002882:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002886:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002888:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800288c:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002890:	68ea      	ldr	r2, [r5, #12]
 8002892:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 8002896:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800289a:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800289c:	6a2b      	ldr	r3, [r5, #32]
 800289e:	031b      	lsls	r3, r3, #12
 80028a0:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80028a4:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80028a8:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80028aa:	f026 0622 	bic.w	r6, r6, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80028ae:	686a      	ldr	r2, [r5, #4]
 80028b0:	696d      	ldr	r5, [r5, #20]
 80028b2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80028b6:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 80028b8:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80028ba:	6821      	ldr	r1, [r4, #0]
 80028bc:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80028dc:	2000      	movs	r0, #0
}
 80028de:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80028e0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80028e4:	f7fe f840 	bl	8000968 <HAL_TIM_Encoder_MspInit>
 80028e8:	e7af      	b.n	800284a <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 80028ea:	2001      	movs	r0, #1
}
 80028ec:	4770      	bx	lr
	...

080028f0 <TIM_OC2_SetConfig>:
{
 80028f0:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80028f2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f4:	6a02      	ldr	r2, [r0, #32]
 80028f6:	f022 0210 	bic.w	r2, r2, #16
 80028fa:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028fc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80028fe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002900:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002904:	680d      	ldr	r5, [r1, #0]
 8002906:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800290a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800290e:	688d      	ldr	r5, [r1, #8]
 8002910:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002914:	4d0c      	ldr	r5, [pc, #48]	@ (8002948 <TIM_OC2_SetConfig+0x58>)
 8002916:	42a8      	cmp	r0, r5
 8002918:	d006      	beq.n	8002928 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800291a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800291c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800291e:	684a      	ldr	r2, [r1, #4]
 8002920:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002922:	6203      	str	r3, [r0, #32]
}
 8002924:	bc30      	pop	{r4, r5}
 8002926:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002928:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800292c:	68cd      	ldr	r5, [r1, #12]
 800292e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002936:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800293a:	694d      	ldr	r5, [r1, #20]
 800293c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002940:	698d      	ldr	r5, [r1, #24]
 8002942:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002946:	e7e8      	b.n	800291a <TIM_OC2_SetConfig+0x2a>
 8002948:	40012c00 	.word	0x40012c00

0800294c <HAL_TIM_PWM_ConfigChannel>:
{
 800294c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800294e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002952:	2b01      	cmp	r3, #1
 8002954:	d066      	beq.n	8002a24 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002956:	4604      	mov	r4, r0
 8002958:	460d      	mov	r5, r1
 800295a:	2301      	movs	r3, #1
 800295c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002960:	2a0c      	cmp	r2, #12
 8002962:	d85a      	bhi.n	8002a1a <HAL_TIM_PWM_ConfigChannel+0xce>
 8002964:	e8df f002 	tbb	[pc, r2]
 8002968:	59595907 	.word	0x59595907
 800296c:	5959591b 	.word	0x5959591b
 8002970:	59595930 	.word	0x59595930
 8002974:	44          	.byte	0x44
 8002975:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002976:	6800      	ldr	r0, [r0, #0]
 8002978:	f7ff fd0e 	bl	8002398 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800297c:	6822      	ldr	r2, [r4, #0]
 800297e:	6993      	ldr	r3, [r2, #24]
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002986:	6822      	ldr	r2, [r4, #0]
 8002988:	6993      	ldr	r3, [r2, #24]
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	6993      	ldr	r3, [r2, #24]
 8002994:	6929      	ldr	r1, [r5, #16]
 8002996:	430b      	orrs	r3, r1
 8002998:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800299a:	2000      	movs	r0, #0
      break;
 800299c:	e03e      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800299e:	6800      	ldr	r0, [r0, #0]
 80029a0:	f7ff ffa6 	bl	80028f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029a4:	6822      	ldr	r2, [r4, #0]
 80029a6:	6993      	ldr	r3, [r2, #24]
 80029a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029ac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	6993      	ldr	r3, [r2, #24]
 80029b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029b8:	6822      	ldr	r2, [r4, #0]
 80029ba:	6993      	ldr	r3, [r2, #24]
 80029bc:	6929      	ldr	r1, [r5, #16]
 80029be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029c2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	2000      	movs	r0, #0
      break;
 80029c6:	e029      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029c8:	6800      	ldr	r0, [r0, #0]
 80029ca:	f7ff fd0f 	bl	80023ec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ce:	6822      	ldr	r2, [r4, #0]
 80029d0:	69d3      	ldr	r3, [r2, #28]
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029d8:	6822      	ldr	r2, [r4, #0]
 80029da:	69d3      	ldr	r3, [r2, #28]
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e2:	6822      	ldr	r2, [r4, #0]
 80029e4:	69d3      	ldr	r3, [r2, #28]
 80029e6:	6929      	ldr	r1, [r5, #16]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2000      	movs	r0, #0
      break;
 80029ee:	e015      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f0:	6800      	ldr	r0, [r0, #0]
 80029f2:	f7ff fd29 	bl	8002448 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	69d3      	ldr	r3, [r2, #28]
 80029fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029fe:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a00:	6822      	ldr	r2, [r4, #0]
 8002a02:	69d3      	ldr	r3, [r2, #28]
 8002a04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a08:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	69d3      	ldr	r3, [r2, #28]
 8002a0e:	6929      	ldr	r1, [r5, #16]
 8002a10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a14:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2000      	movs	r0, #0
      break;
 8002a18:	e000      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002a1a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002a22:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002a24:	2002      	movs	r0, #2
 8002a26:	e7fc      	b.n	8002a22 <HAL_TIM_PWM_ConfigChannel+0xd6>

08002a28 <TIM_TI1_SetConfig>:
{
 8002a28:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8002a2a:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2c:	6a04      	ldr	r4, [r0, #32]
 8002a2e:	f024 0401 	bic.w	r4, r4, #1
 8002a32:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a34:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a36:	4e11      	ldr	r6, [pc, #68]	@ (8002a7c <TIM_TI1_SetConfig+0x54>)
 8002a38:	42b0      	cmp	r0, r6
 8002a3a:	d00d      	beq.n	8002a58 <TIM_TI1_SetConfig+0x30>
 8002a3c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002a40:	d00a      	beq.n	8002a58 <TIM_TI1_SetConfig+0x30>
 8002a42:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8002a46:	42b0      	cmp	r0, r6
 8002a48:	d006      	beq.n	8002a58 <TIM_TI1_SetConfig+0x30>
 8002a4a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002a4e:	42b0      	cmp	r0, r6
 8002a50:	d002      	beq.n	8002a58 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a52:	f044 0201 	orr.w	r2, r4, #1
 8002a56:	e002      	b.n	8002a5e <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a58:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002a5c:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a5e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a68:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a6c:	f001 010a 	and.w	r1, r1, #10
 8002a70:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8002a72:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a74:	6201      	str	r1, [r0, #32]
}
 8002a76:	bc70      	pop	{r4, r5, r6}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40012c00 	.word	0x40012c00

08002a80 <HAL_TIM_IC_ConfigChannel>:
{
 8002a80:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002a82:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d05e      	beq.n	8002b48 <HAL_TIM_IC_ConfigChannel+0xc8>
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	460d      	mov	r5, r1
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002a94:	2a0c      	cmp	r2, #12
 8002a96:	d852      	bhi.n	8002b3e <HAL_TIM_IC_ConfigChannel+0xbe>
 8002a98:	e8df f002 	tbb	[pc, r2]
 8002a9c:	51515107 	.word	0x51515107
 8002aa0:	51515119 	.word	0x51515119
 8002aa4:	5151512c 	.word	0x5151512c
 8002aa8:	3e          	.byte	0x3e
 8002aa9:	00          	.byte	0x00
    TIM_TI1_SetConfig(htim->Instance,
 8002aaa:	68cb      	ldr	r3, [r1, #12]
 8002aac:	684a      	ldr	r2, [r1, #4]
 8002aae:	6809      	ldr	r1, [r1, #0]
 8002ab0:	6800      	ldr	r0, [r0, #0]
 8002ab2:	f7ff ffb9 	bl	8002a28 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	6993      	ldr	r3, [r2, #24]
 8002aba:	f023 030c 	bic.w	r3, r3, #12
 8002abe:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	6993      	ldr	r3, [r2, #24]
 8002ac4:	68a9      	ldr	r1, [r5, #8]
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	2000      	movs	r0, #0
 8002acc:	e038      	b.n	8002b40 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI2_SetConfig(htim->Instance,
 8002ace:	68cb      	ldr	r3, [r1, #12]
 8002ad0:	684a      	ldr	r2, [r1, #4]
 8002ad2:	6809      	ldr	r1, [r1, #0]
 8002ad4:	6800      	ldr	r0, [r0, #0]
 8002ad6:	f7ff fcdb 	bl	8002490 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	6993      	ldr	r3, [r2, #24]
 8002ade:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002ae2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ae4:	6822      	ldr	r2, [r4, #0]
 8002ae6:	6993      	ldr	r3, [r2, #24]
 8002ae8:	68a9      	ldr	r1, [r5, #8]
 8002aea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002aee:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2000      	movs	r0, #0
 8002af2:	e025      	b.n	8002b40 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI3_SetConfig(htim->Instance,
 8002af4:	68cb      	ldr	r3, [r1, #12]
 8002af6:	684a      	ldr	r2, [r1, #4]
 8002af8:	6809      	ldr	r1, [r1, #0]
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	f7ff fce3 	bl	80024c6 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	69d3      	ldr	r3, [r2, #28]
 8002b04:	f023 030c 	bic.w	r3, r3, #12
 8002b08:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	69d3      	ldr	r3, [r2, #28]
 8002b0e:	68a9      	ldr	r1, [r5, #8]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2000      	movs	r0, #0
 8002b16:	e013      	b.n	8002b40 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI4_SetConfig(htim->Instance,
 8002b18:	68cb      	ldr	r3, [r1, #12]
 8002b1a:	684a      	ldr	r2, [r1, #4]
 8002b1c:	6809      	ldr	r1, [r1, #0]
 8002b1e:	6800      	ldr	r0, [r0, #0]
 8002b20:	f7ff fcec 	bl	80024fc <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b24:	6822      	ldr	r2, [r4, #0]
 8002b26:	69d3      	ldr	r3, [r2, #28]
 8002b28:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002b2c:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	69d3      	ldr	r3, [r2, #28]
 8002b32:	68a9      	ldr	r1, [r5, #8]
 8002b34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b38:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_TIM_IC_ConfigChannel+0xc0>
  __HAL_LOCK(htim);
 8002b3e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002b40:	2300      	movs	r3, #0
 8002b42:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002b46:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002b48:	2002      	movs	r0, #2
 8002b4a:	e7fc      	b.n	8002b46 <HAL_TIM_IC_ConfigChannel+0xc6>

08002b4c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b4c:	f001 011f 	and.w	r1, r1, #31
 8002b50:	f04f 0c01 	mov.w	ip, #1
 8002b54:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b58:	6a03      	ldr	r3, [r0, #32]
 8002b5a:	ea23 030c 	bic.w	r3, r3, ip
 8002b5e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b60:	6a03      	ldr	r3, [r0, #32]
 8002b62:	408a      	lsls	r2, r1
 8002b64:	4313      	orrs	r3, r2
 8002b66:	6203      	str	r3, [r0, #32]
}
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_TIM_PWM_Start>:
{
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b70:	4608      	mov	r0, r1
 8002b72:	bb51      	cbnz	r1, 8002bca <HAL_TIM_PWM_Start+0x5e>
 8002b74:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	bf18      	it	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d15b      	bne.n	8002c3c <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d139      	bne.n	8002bfc <HAL_TIM_PWM_Start+0x90>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4601      	mov	r1, r0
 8002b92:	6820      	ldr	r0, [r4, #0]
 8002b94:	f7ff ffda 	bl	8002b4c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8002c44 <HAL_TIM_PWM_Start+0xd8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d03d      	beq.n	8002c1c <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	4a28      	ldr	r2, [pc, #160]	@ (8002c44 <HAL_TIM_PWM_Start+0xd8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d03e      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xba>
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bac:	d03b      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xba>
 8002bae:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d037      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xba>
 8002bb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d033      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	e039      	b.n	8002c3e <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bca:	2904      	cmp	r1, #4
 8002bcc:	d008      	beq.n	8002be0 <HAL_TIM_PWM_Start+0x74>
 8002bce:	2908      	cmp	r1, #8
 8002bd0:	d00d      	beq.n	8002bee <HAL_TIM_PWM_Start+0x82>
 8002bd2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	bf18      	it	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	e7cf      	b.n	8002b80 <HAL_TIM_PWM_Start+0x14>
 8002be0:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	bf18      	it	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	e7c8      	b.n	8002b80 <HAL_TIM_PWM_Start+0x14>
 8002bee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	bf18      	it	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	e7c1      	b.n	8002b80 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfc:	2804      	cmp	r0, #4
 8002bfe:	d005      	beq.n	8002c0c <HAL_TIM_PWM_Start+0xa0>
 8002c00:	2808      	cmp	r0, #8
 8002c02:	d007      	beq.n	8002c14 <HAL_TIM_PWM_Start+0xa8>
 8002c04:	2302      	movs	r3, #2
 8002c06:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002c0a:	e7c0      	b.n	8002b8e <HAL_TIM_PWM_Start+0x22>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002c12:	e7bc      	b.n	8002b8e <HAL_TIM_PWM_Start+0x22>
 8002c14:	2302      	movs	r3, #2
 8002c16:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002c1a:	e7b8      	b.n	8002b8e <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8002c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c22:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c24:	e7bc      	b.n	8002ba0 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	2a06      	cmp	r2, #6
 8002c2e:	d007      	beq.n	8002c40 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c38:	2000      	movs	r0, #0
 8002c3a:	e000      	b.n	8002c3e <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8002c3c:	2001      	movs	r0, #1
}
 8002c3e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002c40:	2000      	movs	r0, #0
 8002c42:	e7fc      	b.n	8002c3e <HAL_TIM_PWM_Start+0xd2>
 8002c44:	40012c00 	.word	0x40012c00

08002c48 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c48:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002c4c:	2a01      	cmp	r2, #1
 8002c4e:	d02c      	beq.n	8002caa <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8002c50:	b410      	push	{r4}
 8002c52:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002c54:	2201      	movs	r2, #1
 8002c56:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c60:	6802      	ldr	r2, [r0, #0]
 8002c62:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c66:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c6a:	6808      	ldr	r0, [r1, #0]
 8002c6c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c70:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	480e      	ldr	r0, [pc, #56]	@ (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8002c76:	4282      	cmp	r2, r0
 8002c78:	d00a      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8002c7a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002c7e:	d007      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8002c80:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002c84:	4282      	cmp	r2, r0
 8002c86:	d003      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8002c88:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002c8c:	4282      	cmp	r2, r0
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c90:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c94:	6849      	ldr	r1, [r1, #4]
 8002c96:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c98:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002ca6:	bc10      	pop	{r4}
 8002ca8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002caa:	2002      	movs	r0, #2
}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40012c00 	.word	0x40012c00

08002cb4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb6:	4770      	bx	lr

08002cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cbc:	6802      	ldr	r2, [r0, #0]
 8002cbe:	6913      	ldr	r3, [r2, #16]
 8002cc0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cc4:	68c1      	ldr	r1, [r0, #12]
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cca:	6883      	ldr	r3, [r0, #8]
 8002ccc:	6902      	ldr	r2, [r0, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	6942      	ldr	r2, [r0, #20]
 8002cd2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002cd4:	6801      	ldr	r1, [r0, #0]
 8002cd6:	68cb      	ldr	r3, [r1, #12]
 8002cd8:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002cdc:	f023 030c 	bic.w	r3, r3, #12
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ce4:	6802      	ldr	r2, [r0, #0]
 8002ce6:	6953      	ldr	r3, [r2, #20]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cec:	6981      	ldr	r1, [r0, #24]
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002cf2:	6802      	ldr	r2, [r0, #0]
 8002cf4:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <UART_SetConfig+0x8c>)
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d020      	beq.n	8002d3c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f7fe fe1d 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8002cfe:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d10:	480d      	ldr	r0, [pc, #52]	@ (8002d48 <UART_SetConfig+0x90>)
 8002d12:	fba0 3102 	umull	r3, r1, r0, r2
 8002d16:	0949      	lsrs	r1, r1, #5
 8002d18:	2364      	movs	r3, #100	@ 0x64
 8002d1a:	fb03 2311 	mls	r3, r3, r1, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	3332      	adds	r3, #50	@ 0x32
 8002d22:	fba0 0303 	umull	r0, r3, r0, r3
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d2c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	6821      	ldr	r1, [r4, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d3a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d3c:	f7fe fe0c 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	e7dd      	b.n	8002d00 <UART_SetConfig+0x48>
 8002d44:	40013800 	.word	0x40013800
 8002d48:	51eb851f 	.word	0x51eb851f

08002d4c <HAL_UART_Init>:
  if (huart == NULL)
 8002d4c:	b360      	cbz	r0, 8002da8 <HAL_UART_Init+0x5c>
{
 8002d4e:	b510      	push	{r4, lr}
 8002d50:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d52:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d56:	b313      	cbz	r3, 8002d9e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d58:	2324      	movs	r3, #36	@ 0x24
 8002d5a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002d5e:	6822      	ldr	r2, [r4, #0]
 8002d60:	68d3      	ldr	r3, [r2, #12]
 8002d62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d66:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7ff ffa5 	bl	8002cb8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	6913      	ldr	r3, [r2, #16]
 8002d72:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002d76:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d78:	6822      	ldr	r2, [r4, #0]
 8002d7a:	6953      	ldr	r3, [r2, #20]
 8002d7c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002d80:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002d82:	6822      	ldr	r2, [r4, #0]
 8002d84:	68d3      	ldr	r3, [r2, #12]
 8002d86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d8a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d90:	2320      	movs	r3, #32
 8002d92:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d96:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d9a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002d9c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002d9e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002da2:	f7fd ff31 	bl	8000c08 <HAL_UART_MspInit>
 8002da6:	e7d7      	b.n	8002d58 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002da8:	2001      	movs	r0, #1
}
 8002daa:	4770      	bx	lr

08002dac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dac:	f7fd fd34 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db0:	480b      	ldr	r0, [pc, #44]	@ (8002de0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002db2:	490c      	ldr	r1, [pc, #48]	@ (8002de4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002db4:	4a0c      	ldr	r2, [pc, #48]	@ (8002de8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db8:	e002      	b.n	8002dc0 <LoopCopyDataInit>

08002dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dbe:	3304      	adds	r3, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc4:	d3f9      	bcc.n	8002dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc6:	4a09      	ldr	r2, [pc, #36]	@ (8002dec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002dc8:	4c09      	ldr	r4, [pc, #36]	@ (8002df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dcc:	e001      	b.n	8002dd2 <LoopFillZerobss>

08002dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd0:	3204      	adds	r2, #4

08002dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd4:	d3fb      	bcc.n	8002dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dd6:	f000 f817 	bl	8002e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dda:	f7fd fb8f 	bl	80004fc <main>
  bx lr
 8002dde:	4770      	bx	lr
  ldr r0, =_sdata
 8002de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002de8:	08002eb0 	.word	0x08002eb0
  ldr r2, =_sbss
 8002dec:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002df0:	20000270 	.word	0x20000270

08002df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002df4:	e7fe      	b.n	8002df4 <ADC1_2_IRQHandler>

08002df6 <memset>:
 8002df6:	4603      	mov	r3, r0
 8002df8:	4402      	add	r2, r0
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d100      	bne.n	8002e00 <memset+0xa>
 8002dfe:	4770      	bx	lr
 8002e00:	f803 1b01 	strb.w	r1, [r3], #1
 8002e04:	e7f9      	b.n	8002dfa <memset+0x4>
	...

08002e08 <__libc_init_array>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	4d0c      	ldr	r5, [pc, #48]	@ (8002e40 <__libc_init_array+0x38>)
 8002e0e:	4c0d      	ldr	r4, [pc, #52]	@ (8002e44 <__libc_init_array+0x3c>)
 8002e10:	1b64      	subs	r4, r4, r5
 8002e12:	10a4      	asrs	r4, r4, #2
 8002e14:	42a6      	cmp	r6, r4
 8002e16:	d109      	bne.n	8002e2c <__libc_init_array+0x24>
 8002e18:	f000 f81a 	bl	8002e50 <_init>
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	4d0a      	ldr	r5, [pc, #40]	@ (8002e48 <__libc_init_array+0x40>)
 8002e20:	4c0a      	ldr	r4, [pc, #40]	@ (8002e4c <__libc_init_array+0x44>)
 8002e22:	1b64      	subs	r4, r4, r5
 8002e24:	10a4      	asrs	r4, r4, #2
 8002e26:	42a6      	cmp	r6, r4
 8002e28:	d105      	bne.n	8002e36 <__libc_init_array+0x2e>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e30:	4798      	blx	r3
 8002e32:	3601      	adds	r6, #1
 8002e34:	e7ee      	b.n	8002e14 <__libc_init_array+0xc>
 8002e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3a:	4798      	blx	r3
 8002e3c:	3601      	adds	r6, #1
 8002e3e:	e7f2      	b.n	8002e26 <__libc_init_array+0x1e>
 8002e40:	08002ea8 	.word	0x08002ea8
 8002e44:	08002ea8 	.word	0x08002ea8
 8002e48:	08002ea8 	.word	0x08002ea8
 8002e4c:	08002eac 	.word	0x08002eac

08002e50 <_init>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	bf00      	nop
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr

08002e5c <_fini>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr
